
cyclingSpeedometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003630  0800b0b0  0800b0b0  0001b0b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6e0  0800e6e0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6e0  0800e6e0  0001e6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6e8  0800e6e8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6e8  0800e6e8  0001e6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6ec  0800e6ec  0001e6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a354  200001dc  0800e8cc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000a530  0800e8cc  0002a530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001abaf  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ed7  00000000  00000000  0003adfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  0003ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001246  00000000  00000000  00040470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a852  00000000  00000000  000416b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000201c8  00000000  00000000  0006bf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb5fd  00000000  00000000  0008c0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007540  00000000  00000000  001876d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0018ec10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b094 	.word	0x0800b094

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800b094 	.word	0x0800b094

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_DMA_Init+0x38>)
 8000f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <MX_DMA_Init+0x38>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6493      	str	r3, [r2, #72]	; 0x48
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_DMA_Init+0x38>)
 8000f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	200f      	movs	r0, #15
 8000f68:	f001 f9b9 	bl	80022de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f6c:	200f      	movs	r0, #15
 8000f6e:	f001 f9d2 	bl	8002316 <HAL_NVIC_EnableIRQ>

}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000

08000f80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <MX_GPIO_Init+0xc8>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a2b      	ldr	r2, [pc, #172]	; (8001048 <MX_GPIO_Init+0xc8>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b29      	ldr	r3, [pc, #164]	; (8001048 <MX_GPIO_Init+0xc8>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <MX_GPIO_Init+0xc8>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a25      	ldr	r2, [pc, #148]	; (8001048 <MX_GPIO_Init+0xc8>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b23      	ldr	r3, [pc, #140]	; (8001048 <MX_GPIO_Init+0xc8>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <MX_GPIO_Init+0xc8>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a1f      	ldr	r2, [pc, #124]	; (8001048 <MX_GPIO_Init+0xc8>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <MX_GPIO_Init+0xc8>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f640 0104 	movw	r1, #2052	; 0x804
 8000fe4:	4819      	ldr	r0, [pc, #100]	; (800104c <MX_GPIO_Init+0xcc>)
 8000fe6:	f001 fd53 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff0:	4816      	ldr	r0, [pc, #88]	; (800104c <MX_GPIO_Init+0xcc>)
 8000ff2:	f001 fd4d 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HALL_SENSOR_Pin;
 8000ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ffc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001000:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4619      	mov	r1, r3
 800100c:	4810      	ldr	r0, [pc, #64]	; (8001050 <MX_GPIO_Init+0xd0>)
 800100e:	f001 fb95 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8001012:	f641 0304 	movw	r3, #6148	; 0x1804
 8001016:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4619      	mov	r1, r3
 800102a:	4808      	ldr	r0, [pc, #32]	; (800104c <MX_GPIO_Init+0xcc>)
 800102c:	f001 fb86 	bl	800273c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	210a      	movs	r1, #10
 8001034:	2028      	movs	r0, #40	; 0x28
 8001036:	f001 f952 	bl	80022de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800103a:	2028      	movs	r0, #40	; 0x28
 800103c:	f001 f96b 	bl	8002316 <HAL_NVIC_EnableIRQ>

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40021000 	.word	0x40021000
 800104c:	48000400 	.word	0x48000400
 8001050:	48000800 	.word	0x48000800

08001054 <HAL_GPIO_EXTI_Callback>:
volatile uint32_t current_time = 0;
volatile uint32_t period = 0;
volatile float speed = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == HALL_SENSOR_Pin) {
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001064:	d113      	bne.n	800108e <HAL_GPIO_EXTI_Callback+0x3a>
		//Zapisz aktualny czas
		current_time = HAL_GetTick();
 8001066:	f001 f82f 	bl	80020c8 <HAL_GetTick>
 800106a:	4603      	mov	r3, r0
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_GPIO_EXTI_Callback+0x44>)
 800106e:	6013      	str	r3, [r2, #0]
		//Oblicz czas pomiędzy wykryciami magnesu (w ms)
		period = current_time - old_time;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_GPIO_EXTI_Callback+0x44>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_GPIO_EXTI_Callback+0x48>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x4c>)
 800107c:	6013      	str	r3, [r2, #0]
		old_time = current_time;
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_GPIO_EXTI_Callback+0x44>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a06      	ldr	r2, [pc, #24]	; (800109c <HAL_GPIO_EXTI_Callback+0x48>)
 8001084:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x50>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001fc 	.word	0x200001fc
 800109c:	200001f8 	.word	0x200001f8
 80010a0:	20000200 	.word	0x20000200
 80010a4:	2000a30c 	.word	0x2000a30c

080010a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	if(htim == &htim6) {
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d108      	bne.n	80010ca <HAL_TIM_PeriodElapsedCallback+0x22>
		//Wyzeruj predkosc
		current_time = 0;
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
		old_time = 0;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
		period = 0;
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
	}
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	2000a30c 	.word	0x2000a30c
 80010dc:	200001fc 	.word	0x200001fc
 80010e0:	200001f8 	.word	0x200001f8
 80010e4:	20000200 	.word	0x20000200

080010e8 <speedValue>:

float speedValue(uint32_t period, uint8_t wheelSize_inch)
{
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
	float wheelSize_m = (float)wheelSize_inch * 0.0254;
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010fe:	ee17 0a90 	vmov	r0, s15
 8001102:	f7ff fa21 	bl	8000548 <__aeabi_f2d>
 8001106:	a335      	add	r3, pc, #212	; (adr r3, 80011dc <speedValue+0xf4>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff fa74 	bl	80005f8 <__aeabi_dmul>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f7ff fd46 	bl	8000ba8 <__aeabi_d2f>
 800111c:	4603      	mov	r3, r0
 800111e:	617b      	str	r3, [r7, #20]
	float radius_m = wheelSize_m / 2;
 8001120:	ed97 7a05 	vldr	s14, [r7, #20]
 8001124:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112c:	edc7 7a04 	vstr	s15, [r7, #16]
	float period_s = 0.001 * (float)period;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800113a:	ee17 0a90 	vmov	r0, s15
 800113e:	f7ff fa03 	bl	8000548 <__aeabi_f2d>
 8001142:	a328      	add	r3, pc, #160	; (adr r3, 80011e4 <speedValue+0xfc>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fa56 	bl	80005f8 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fd28 	bl	8000ba8 <__aeabi_d2f>
 8001158:	4603      	mov	r3, r0
 800115a:	60fb      	str	r3, [r7, #12]

	if(period > 0)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d01e      	beq.n	80011a0 <speedValue+0xb8>
	speed = (2.0*3.14*radius_m)/period_s;
 8001162:	6938      	ldr	r0, [r7, #16]
 8001164:	f7ff f9f0 	bl	8000548 <__aeabi_f2d>
 8001168:	a320      	add	r3, pc, #128	; (adr r3, 80011ec <speedValue+0x104>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff fa43 	bl	80005f8 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4614      	mov	r4, r2
 8001178:	461d      	mov	r5, r3
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f7ff f9e4 	bl	8000548 <__aeabi_f2d>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4620      	mov	r0, r4
 8001186:	4629      	mov	r1, r5
 8001188:	f7ff fb60 	bl	800084c <__aeabi_ddiv>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fd08 	bl	8000ba8 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <speedValue+0xe8>)
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e003      	b.n	80011a8 <speedValue+0xc0>
	else speed = 0.0;
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <speedValue+0xe8>)
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]

	return speed*3600/1000;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <speedValue+0xe8>)
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011d4 <speedValue+0xec>
 80011b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d8 <speedValue+0xf0>
 80011ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011be:	eef0 7a66 	vmov.f32	s15, s13
}
 80011c2:	eeb0 0a67 	vmov.f32	s0, s15
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bdb0      	pop	{r4, r5, r7, pc}
 80011cc:	f3af 8000 	nop.w
 80011d0:	20000204 	.word	0x20000204
 80011d4:	45610000 	.word	0x45610000
 80011d8:	447a0000 	.word	0x447a0000
 80011dc:	25460aa6 	.word	0x25460aa6
 80011e0:	3f9a0275 	.word	0x3f9a0275
 80011e4:	d2f1a9fc 	.word	0xd2f1a9fc
 80011e8:	3f50624d 	.word	0x3f50624d
 80011ec:	51eb851f 	.word	0x51eb851f
 80011f0:	40191eb8 	.word	0x40191eb8

080011f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MX_I2C1_Init+0x74>)
 80011fa:	4a1c      	ldr	r2, [pc, #112]	; (800126c <MX_I2C1_Init+0x78>)
 80011fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_I2C1_Init+0x74>)
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <MX_I2C1_Init+0x7c>)
 8001202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MX_I2C1_Init+0x74>)
 800120c:	2201      	movs	r2, #1
 800120e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_I2C1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_I2C1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800122e:	480e      	ldr	r0, [pc, #56]	; (8001268 <MX_I2C1_Init+0x74>)
 8001230:	f001 fc5e 	bl	8002af0 <HAL_I2C_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800123a:	f000 fbb3 	bl	80019a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800123e:	2100      	movs	r1, #0
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <MX_I2C1_Init+0x74>)
 8001242:	f002 f9d7 	bl	80035f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800124c:	f000 fbaa 	bl	80019a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001250:	2100      	movs	r1, #0
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_I2C1_Init+0x74>)
 8001254:	f002 fa19 	bl	800368a <HAL_I2CEx_ConfigDigitalFilter>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800125e:	f000 fba1 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000208 	.word	0x20000208
 800126c:	40005400 	.word	0x40005400
 8001270:	10909cec 	.word	0x10909cec

08001274 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0ac      	sub	sp, #176	; 0xb0
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2288      	movs	r2, #136	; 0x88
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f006 ff63 	bl	8008160 <memset>
  if(i2cHandle->Instance==I2C1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a21      	ldr	r2, [pc, #132]	; (8001324 <HAL_I2C_MspInit+0xb0>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d13a      	bne.n	800131a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012a4:	2340      	movs	r3, #64	; 0x40
 80012a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 f89b 	bl	80043ec <HAL_RCCEx_PeriphCLKConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012bc:	f000 fb72 	bl	80019a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_I2C_MspInit+0xb4>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	4a18      	ldr	r2, [pc, #96]	; (8001328 <HAL_I2C_MspInit+0xb4>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_I2C_MspInit+0xb4>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012d8:	23c0      	movs	r3, #192	; 0xc0
 80012da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012de:	2312      	movs	r3, #18
 80012e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f0:	2304      	movs	r3, #4
 80012f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012fa:	4619      	mov	r1, r3
 80012fc:	480b      	ldr	r0, [pc, #44]	; (800132c <HAL_I2C_MspInit+0xb8>)
 80012fe:	f001 fa1d 	bl	800273c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <HAL_I2C_MspInit+0xb4>)
 8001304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <HAL_I2C_MspInit+0xb4>)
 8001308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800130c:	6593      	str	r3, [r2, #88]	; 0x58
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_I2C_MspInit+0xb4>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800131a:	bf00      	nop
 800131c:	37b0      	adds	r7, #176	; 0xb0
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40005400 	.word	0x40005400
 8001328:	40021000 	.word	0x40021000
 800132c:	48000400 	.word	0x48000400

08001330 <lcd_cmd>:
#define ST7735S_GAMCTRP1		0xe0
#define ST7735S_GAMCTRN1		0xe1

//Sets DC and CS state for SPI cmd transmit
static void lcd_cmd(uint8_t cmd)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <lcd_cmd+0x44>)
 8001342:	f001 fba5 	bl	8002a90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134c:	4809      	ldr	r0, [pc, #36]	; (8001374 <lcd_cmd+0x44>)
 800134e:	f001 fb9f 	bl	8002a90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001352:	1df9      	adds	r1, r7, #7
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	2201      	movs	r2, #1
 800135a:	4807      	ldr	r0, [pc, #28]	; (8001378 <lcd_cmd+0x48>)
 800135c:	f003 fda5 	bl	8004eaa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001366:	4803      	ldr	r0, [pc, #12]	; (8001374 <lcd_cmd+0x44>)
 8001368:	f001 fb92 	bl	8002a90 <HAL_GPIO_WritePin>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	48000400 	.word	0x48000400
 8001378:	2000a25c 	.word	0x2000a25c

0800137c <lcd_data>:

//Sets DC and CS state for SPI data transmit
static void lcd_data(uint8_t data)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001386:	2201      	movs	r2, #1
 8001388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <lcd_data+0x44>)
 800138e:	f001 fb7f 	bl	8002a90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <lcd_data+0x44>)
 800139a:	f001 fb79 	bl	8002a90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800139e:	1df9      	adds	r1, r7, #7
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
 80013a4:	2201      	movs	r2, #1
 80013a6:	4807      	ldr	r0, [pc, #28]	; (80013c4 <lcd_data+0x48>)
 80013a8:	f003 fd7f 	bl	8004eaa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b2:	4803      	ldr	r0, [pc, #12]	; (80013c0 <lcd_data+0x44>)
 80013b4:	f001 fb6c 	bl	8002a90 <HAL_GPIO_WritePin>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	48000400 	.word	0x48000400
 80013c4:	2000a25c 	.word	0x2000a25c

080013c8 <lcd_send>:

#define CMD(x)				((x) | 0x100)

//Sends cmd or data to tft
static void lcd_send(uint16_t value)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	80fb      	strh	r3, [r7, #6]
	if(value & 0x100) {
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <lcd_send+0x20>
		lcd_cmd(value);
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ffa5 	bl	8001330 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 80013e6:	e004      	b.n	80013f2 <lcd_send+0x2a>
		lcd_data(value);
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ffc5 	bl	800137c <lcd_data>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <lcd_init>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

void lcd_init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
	int i;

	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2104      	movs	r1, #4
 8001406:	4817      	ldr	r0, [pc, #92]	; (8001464 <lcd_init+0x68>)
 8001408:	f001 fb42 	bl	8002a90 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800140c:	2064      	movs	r0, #100	; 0x64
 800140e:	f000 fe67 	bl	80020e0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	2104      	movs	r1, #4
 8001416:	4813      	ldr	r0, [pc, #76]	; (8001464 <lcd_init+0x68>)
 8001418:	f001 fb3a 	bl	8002a90 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800141c:	2064      	movs	r0, #100	; 0x64
 800141e:	f000 fe5f 	bl	80020e0 <HAL_Delay>

	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	e009      	b.n	800143c <lcd_init+0x40>
		lcd_send(init_table[i]);
 8001428:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <lcd_init+0x6c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ffc9 	bl	80013c8 <lcd_send>
	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3301      	adds	r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b4b      	cmp	r3, #75	; 0x4b
 8001440:	d9f2      	bls.n	8001428 <lcd_init+0x2c>
	}

	HAL_Delay(200);
 8001442:	20c8      	movs	r0, #200	; 0xc8
 8001444:	f000 fe4c 	bl	80020e0 <HAL_Delay>
	lcd_cmd(ST7735S_SLPOUT);
 8001448:	2011      	movs	r0, #17
 800144a:	f7ff ff71 	bl	8001330 <lcd_cmd>
	HAL_Delay(120);
 800144e:	2078      	movs	r0, #120	; 0x78
 8001450:	f000 fe46 	bl	80020e0 <HAL_Delay>

	lcd_cmd(ST7735S_DISPON);
 8001454:	2029      	movs	r0, #41	; 0x29
 8001456:	f7ff ff6b 	bl	8001330 <lcd_cmd>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	48000400 	.word	0x48000400
 8001468:	0800b128 	.word	0x0800b128

0800146c <lcd_data16>:



//Sends 16bits, 8 bits + 8 bits one by one
static void lcd_data16(uint16_t value)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	b29b      	uxth	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff7c 	bl	800137c <lcd_data>
	lcd_data(value);
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff77 	bl	800137c <lcd_data>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <lcd_set_window>:
#define LCD_OFFSET_X  1
#define LCD_OFFSET_Y  2

//Caset sets starting and ending columns of the drawing area
static void lcd_set_window(int x, int y, int width, int height)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b084      	sub	sp, #16
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 80014a4:	202a      	movs	r0, #42	; 0x2a
 80014a6:	f7ff ff43 	bl	8001330 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ffda 	bl	800146c <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4413      	add	r3, r2
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ffd1 	bl	800146c <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 80014ca:	202b      	movs	r0, #43	; 0x2b
 80014cc:	f7ff ff30 	bl	8001330 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	3302      	adds	r3, #2
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ffc7 	bl	800146c <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4413      	add	r3, r2
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3301      	adds	r3, #1
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ffbc 	bl	800146c <lcd_data16>
}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <lcd_put_pixel>:


static uint16_t frame_buffer[LCD_WIDTH*LCD_HEIGHT];

void lcd_put_pixel(int x, int y, uint16_t color)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	4613      	mov	r3, r2
 8001508:	80fb      	strh	r3, [r7, #6]
	frame_buffer[ x + y * LCD_WIDTH] = color;
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	015b      	lsls	r3, r3, #5
 8001514:	461a      	mov	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4413      	add	r3, r2
 800151a:	4905      	ldr	r1, [pc, #20]	; (8001530 <lcd_put_pixel+0x34>)
 800151c:	88fa      	ldrh	r2, [r7, #6]
 800151e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	2000025c 	.word	0x2000025c

08001534 <lcd_copy>:

void lcd_copy(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	22a0      	movs	r2, #160	; 0xa0
 800153c:	2100      	movs	r1, #0
 800153e:	2000      	movs	r0, #0
 8001540:	f7ff ffa9 	bl	8001496 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8001544:	202c      	movs	r0, #44	; 0x2c
 8001546:	f7ff fef3 	bl	8001330 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001550:	4808      	ldr	r0, [pc, #32]	; (8001574 <lcd_copy+0x40>)
 8001552:	f001 fa9d 	bl	8002a90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800155c:	4805      	ldr	r0, [pc, #20]	; (8001574 <lcd_copy+0x40>)
 800155e:	f001 fa97 	bl	8002a90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 8001562:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001566:	4904      	ldr	r1, [pc, #16]	; (8001578 <lcd_copy+0x44>)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <lcd_copy+0x48>)
 800156a:	f003 fe13 	bl	8005194 <HAL_SPI_Transmit_DMA>

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	48000400 	.word	0x48000400
 8001578:	2000025c 	.word	0x2000025c
 800157c:	2000a25c 	.word	0x2000a25c

08001580 <lcd_transfer_done>:

void lcd_transfer_done(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001584:	2201      	movs	r2, #1
 8001586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800158a:	4802      	ldr	r0, [pc, #8]	; (8001594 <lcd_transfer_done+0x14>)
 800158c:	f001 fa80 	bl	8002a90 <HAL_GPIO_WritePin>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	48000400 	.word	0x48000400

08001598 <lps_read_reg>:
#define TIMEOUT                 100

//Function responsible for:
//Reading data from lps25hb registers
static uint8_t lps_read_reg(uint8_t reg)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	2364      	movs	r3, #100	; 0x64
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	2301      	movs	r3, #1
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	f107 030f 	add.w	r3, r7, #15
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2301      	movs	r3, #1
 80015ba:	21ba      	movs	r1, #186	; 0xba
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <lps_read_reg+0x34>)
 80015be:	f001 fc47 	bl	8002e50 <HAL_I2C_Mem_Read>

    return value;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000208 	.word	0x20000208

080015d0 <lps_write_reg>:

//Function responsible for:
//Writing data to lps25hb registers
static void lps_write_reg(uint8_t reg, uint8_t value)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af04      	add	r7, sp, #16
 80015d6:	4603      	mov	r3, r0
 80015d8:	460a      	mov	r2, r1
 80015da:	71fb      	strb	r3, [r7, #7]
 80015dc:	4613      	mov	r3, r2
 80015de:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	2364      	movs	r3, #100	; 0x64
 80015e6:	9302      	str	r3, [sp, #8]
 80015e8:	2301      	movs	r3, #1
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	1dbb      	adds	r3, r7, #6
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2301      	movs	r3, #1
 80015f2:	21ba      	movs	r1, #186	; 0xba
 80015f4:	4803      	ldr	r0, [pc, #12]	; (8001604 <lps_write_reg+0x34>)
 80015f6:	f001 fb17 	bl	8002c28 <HAL_I2C_Mem_Write>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000208 	.word	0x20000208

08001608 <lps25hb_init>:

HAL_StatusTypeDef lps25hb_init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	if (lps_read_reg(LPS25HB_WHO_AM_I) != 0xbd)
 800160c:	200f      	movs	r0, #15
 800160e:	f7ff ffc3 	bl	8001598 <lps_read_reg>
 8001612:	4603      	mov	r3, r0
 8001614:	2bbd      	cmp	r3, #189	; 0xbd
 8001616:	d001      	beq.n	800161c <lps25hb_init+0x14>
		 return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e00c      	b.n	8001636 <lps25hb_init+0x2e>

	lps_write_reg(LPS25HB_CTRL_REG1,  0xC0);
 800161c:	21c0      	movs	r1, #192	; 0xc0
 800161e:	2020      	movs	r0, #32
 8001620:	f7ff ffd6 	bl	80015d0 <lps_write_reg>
	lps_write_reg(LPS25HB_CTRL_REG2,  0x40);
 8001624:	2140      	movs	r1, #64	; 0x40
 8001626:	2021      	movs	r0, #33	; 0x21
 8001628:	f7ff ffd2 	bl	80015d0 <lps_write_reg>
	lps_write_reg(LPS25HB_FIFO_CTRL,  0xDF);
 800162c:	21df      	movs	r1, #223	; 0xdf
 800162e:	202e      	movs	r0, #46	; 0x2e
 8001630:	f7ff ffce 	bl	80015d0 <lps_write_reg>

	return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <lps25hb_read_temp>:

float lps25hb_read_temp(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af04      	add	r7, sp, #16
     int16_t temp;

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, sizeof(temp), TIMEOUT) != HAL_OK)
 8001642:	2364      	movs	r3, #100	; 0x64
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	2302      	movs	r3, #2
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	1dbb      	adds	r3, r7, #6
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2301      	movs	r3, #1
 8001650:	22ab      	movs	r2, #171	; 0xab
 8001652:	21ba      	movs	r1, #186	; 0xba
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <lps25hb_read_temp+0x50>)
 8001656:	f001 fbfb 	bl	8002e50 <HAL_I2C_Mem_Read>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <lps25hb_read_temp+0x28>
         Error_Handler();
 8001660:	f000 f9a0 	bl	80019a4 <Error_Handler>

     return 42.5f + temp / 480.0f;
 8001664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001670:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001690 <lps25hb_read_temp+0x54>
 8001674:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001678:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001694 <lps25hb_read_temp+0x58>
 800167c:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001680:	eeb0 0a67 	vmov.f32	s0, s15
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000208 	.word	0x20000208
 8001690:	43f00000 	.word	0x43f00000
 8001694:	422a0000 	.word	0x422a0000

08001698 <lps25hb_read_pressure>:

float lps25hb_read_pressure(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af04      	add	r7, sp, #16
     int32_t pressure = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_PRESS_OUT_XL | 0x80, 1, (int8_t*)&pressure, 3, TIMEOUT) != HAL_OK)
 80016a2:	2364      	movs	r3, #100	; 0x64
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	2303      	movs	r3, #3
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2301      	movs	r3, #1
 80016b0:	22a8      	movs	r2, #168	; 0xa8
 80016b2:	21ba      	movs	r1, #186	; 0xba
 80016b4:	480b      	ldr	r0, [pc, #44]	; (80016e4 <lps25hb_read_pressure+0x4c>)
 80016b6:	f001 fbcb 	bl	8002e50 <HAL_I2C_Mem_Read>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <lps25hb_read_pressure+0x2c>
         Error_Handler();
 80016c0:	f000 f970 	bl	80019a4 <Error_Handler>

     return pressure / 4096.0f;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80016e8 <lps25hb_read_pressure+0x50>
 80016d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016d6:	eef0 7a66 	vmov.f32	s15, s13
}
 80016da:	eeb0 0a67 	vmov.f32	s0, s15
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000208 	.word	0x20000208
 80016e8:	45800000 	.word	0x45800000

080016ec <__io_putchar>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
int __io_putchar(int ch)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	if(ch == '\n') {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b0a      	cmp	r3, #10
 80016f8:	d102      	bne.n	8001700 <__io_putchar+0x14>
		__io_putchar('\r');
 80016fa:	200d      	movs	r0, #13
 80016fc:	f7ff fff6 	bl	80016ec <__io_putchar>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001700:	1d39      	adds	r1, r7, #4
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	2201      	movs	r2, #1
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <__io_putchar+0x2c>)
 800170a:	f004 fbad 	bl	8005e68 <HAL_UART_Transmit>

	return 1;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000a358 	.word	0x2000a358

0800171c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_SPI_TxCpltCallback+0x1c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d101      	bne.n	8001730 <HAL_SPI_TxCpltCallback+0x14>
		{
			lcd_transfer_done();
 800172c:	f7ff ff28 	bl	8001580 <lcd_transfer_done>
		}
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	2000a25c 	.word	0x2000a25c
 800173c:	00000000 	.word	0x00000000

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b0b8      	sub	sp, #224	; 0xe0
 8001744:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001746:	f000 fc56 	bl	8001ff6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174a:	f000 f8d9 	bl	8001900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174e:	f7ff fc17 	bl	8000f80 <MX_GPIO_Init>
  MX_DMA_Init();
 8001752:	f7ff fbf7 	bl	8000f44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001756:	f000 fb99 	bl	8001e8c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800175a:	f000 fb39 	bl	8001dd0 <MX_TIM6_Init>
  MX_I2C1_Init();
 800175e:	f7ff fd49 	bl	80011f4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001762:	f000 f925 	bl	80019b0 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim6);
 8001766:	485e      	ldr	r0, [pc, #376]	; (80018e0 <main+0x1a0>)
 8001768:	f004 f856 	bl	8005818 <HAL_TIM_Base_Start_IT>
  lps25hb_init();
 800176c:	f7ff ff4c 	bl	8001608 <lps25hb_init>
  lcd_init();
 8001770:	f7ff fe44 	bl	80013fc <lcd_init>

  float p0 = lps25hb_read_pressure();
 8001774:	f7ff ff90 	bl	8001698 <lps25hb_read_pressure>
 8001778:	ed87 0a35 	vstr	s0, [r7, #212]	; 0xd4



  while (1)
  {
	float temp = lps25hb_read_temp() + 273.15;
 800177c:	f7ff ff5e 	bl	800163c <lps25hb_read_temp>
 8001780:	ee10 3a10 	vmov	r3, s0
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fedf 	bl	8000548 <__aeabi_f2d>
 800178a:	a351      	add	r3, pc, #324	; (adr r3, 80018d0 <main+0x190>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe fd7c 	bl	800028c <__adddf3>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff fa04 	bl	8000ba8 <__aeabi_d2f>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float p = lps25hb_read_pressure();
 80017a6:	f7ff ff77 	bl	8001698 <lps25hb_read_pressure>
 80017aa:	ed87 0a33 	vstr	s0, [r7, #204]	; 0xcc
	float h = -29.271769 * temp * log(p / p0);
 80017ae:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80017b2:	f7fe fec9 	bl	8000548 <__aeabi_f2d>
 80017b6:	a348      	add	r3, pc, #288	; (adr r3, 80018d8 <main+0x198>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7fe ff1c 	bl	80005f8 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4614      	mov	r4, r2
 80017c6:	461d      	mov	r5, r3
 80017c8:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 80017cc:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80017d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017d4:	ee16 0a90 	vmov	r0, s13
 80017d8:	f7fe feb6 	bl	8000548 <__aeabi_f2d>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	ec43 2b10 	vmov	d0, r2, r3
 80017e4:	f009 fa54 	bl	800ac90 <log>
 80017e8:	ec53 2b10 	vmov	r2, r3, d0
 80017ec:	4620      	mov	r0, r4
 80017ee:	4629      	mov	r1, r5
 80017f0:	f7fe ff02 	bl	80005f8 <__aeabi_dmul>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f9d4 	bl	8000ba8 <__aeabi_d2f>
 8001800:	4603      	mov	r3, r0
 8001802:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	float temperature_C = lps25hb_read_temp();
 8001806:	f7ff ff19 	bl	800163c <lps25hb_read_temp>
 800180a:	ed87 0a31 	vstr	s0, [r7, #196]	; 0xc4
//
//	printf("T = %.1f *C\n", temperature_C);
//	printf("h = %.2f m\n", h);
//	HAL_Delay(1000);
//	printf("p = %.1f\n", p);
	speed = speedValue(period, 2);
 800180e:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <main+0x1a4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2102      	movs	r1, #2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fc67 	bl	80010e8 <speedValue>
 800181a:	eef0 7a40 	vmov.f32	s15, s0
 800181e:	4b32      	ldr	r3, [pc, #200]	; (80018e8 <main+0x1a8>)
 8001820:	edc3 7a00 	vstr	s15, [r3]
	printf("Speed = %.2f km/h \n", speed);
 8001824:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <main+0x1a8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe8d 	bl	8000548 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	482e      	ldr	r0, [pc, #184]	; (80018ec <main+0x1ac>)
 8001834:	f006 fc0a 	bl	800804c <iprintf>
	hagl_clear_screen();
 8001838:	f005 fe08 	bl	800744c <hagl_clear_screen>
	 wchar_t h_display[16];
	 wchar_t temperature_display[16];



	 swprintf(temperature_display,16,L"%1.f *C", temperature_C);
 800183c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001840:	f7fe fe82 	bl	8000548 <__aeabi_f2d>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800184c:	e9cd 2300 	strd	r2, r3, [sp]
 8001850:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <main+0x1b0>)
 8001852:	2110      	movs	r1, #16
 8001854:	f006 fc50 	bl	80080f8 <swprintf>
	 swprintf(h_display,16, L"%.2f m", h);
 8001858:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800185c:	f7fe fe74 	bl	8000548 <__aeabi_f2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001868:	e9cd 2300 	strd	r2, r3, [sp]
 800186c:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <main+0x1b4>)
 800186e:	2110      	movs	r1, #16
 8001870:	f006 fc42 	bl	80080f8 <swprintf>
	 swprintf(speed_display,16, L"%.2f km/h", speed);
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <main+0x1a8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe65 	bl	8000548 <__aeabi_f2d>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	1d38      	adds	r0, r7, #4
 8001884:	e9cd 2300 	strd	r2, r3, [sp]
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <main+0x1b8>)
 800188a:	2110      	movs	r1, #16
 800188c:	f006 fc34 	bl	80080f8 <swprintf>
	 hagl_put_text(speed_display,40,55,YELLOW,font6x9);
 8001890:	1d38      	adds	r0, r7, #4
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <main+0x1bc>)
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 800189a:	2237      	movs	r2, #55	; 0x37
 800189c:	2128      	movs	r1, #40	; 0x28
 800189e:	f005 fd4d 	bl	800733c <hagl_put_text>
	 hagl_put_text(temperature_display, 40, 75, YELLOW, font6x9);
 80018a2:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <main+0x1bc>)
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80018ae:	224b      	movs	r2, #75	; 0x4b
 80018b0:	2128      	movs	r1, #40	; 0x28
 80018b2:	f005 fd43 	bl	800733c <hagl_put_text>
	 hagl_put_text(h_display, 40, 85, YELLOW, font6x9);
 80018b6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <main+0x1bc>)
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80018c2:	2255      	movs	r2, #85	; 0x55
 80018c4:	2128      	movs	r1, #40	; 0x28
 80018c6:	f005 fd39 	bl	800733c <hagl_put_text>

	 lcd_copy();
 80018ca:	f7ff fe33 	bl	8001534 <lcd_copy>
  {
 80018ce:	e755      	b.n	800177c <main+0x3c>
 80018d0:	66666666 	.word	0x66666666
 80018d4:	40711266 	.word	0x40711266
 80018d8:	a737110e 	.word	0xa737110e
 80018dc:	c03d4592 	.word	0xc03d4592
 80018e0:	2000a30c 	.word	0x2000a30c
 80018e4:	20000200 	.word	0x20000200
 80018e8:	20000204 	.word	0x20000204
 80018ec:	0800b0b0 	.word	0x0800b0b0
 80018f0:	0800b0c4 	.word	0x0800b0c4
 80018f4:	0800b0e4 	.word	0x0800b0e4
 80018f8:	0800b100 	.word	0x0800b100
 80018fc:	0800b1c0 	.word	0x0800b1c0

08001900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b096      	sub	sp, #88	; 0x58
 8001904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	2244      	movs	r2, #68	; 0x44
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f006 fc26 	bl	8008160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001914:	463b      	mov	r3, r7
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001922:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001926:	f001 ff0b 	bl	8003740 <HAL_PWREx_ControlVoltageScaling>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001930:	f000 f838 	bl	80019a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001934:	2310      	movs	r3, #16
 8001936:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001938:	2301      	movs	r3, #1
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001940:	2360      	movs	r3, #96	; 0x60
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001944:	2302      	movs	r3, #2
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001948:	2301      	movs	r3, #1
 800194a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800194c:	2301      	movs	r3, #1
 800194e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001950:	2328      	movs	r3, #40	; 0x28
 8001952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001954:	2307      	movs	r3, #7
 8001956:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001958:	2302      	movs	r3, #2
 800195a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800195c:	2302      	movs	r3, #2
 800195e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4618      	mov	r0, r3
 8001966:	f001 ff41 	bl	80037ec <HAL_RCC_OscConfig>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001970:	f000 f818 	bl	80019a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001974:	230f      	movs	r3, #15
 8001976:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001978:	2303      	movs	r3, #3
 800197a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001988:	463b      	mov	r3, r7
 800198a:	2104      	movs	r1, #4
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fb09 	bl	8003fa4 <HAL_RCC_ClockConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001998:	f000 f804 	bl	80019a4 <Error_Handler>
  }
}
 800199c:	bf00      	nop
 800199e:	3758      	adds	r7, #88	; 0x58
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
}
 80019aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ac:	e7fe      	b.n	80019ac <Error_Handler+0x8>
	...

080019b0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <MX_SPI2_Init+0x74>)
 80019b6:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <MX_SPI2_Init+0x78>)
 80019b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <MX_SPI2_Init+0x74>)
 80019bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019c2:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_SPI2_Init+0x74>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <MX_SPI2_Init+0x74>)
 80019ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_SPI2_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <MX_SPI2_Init+0x74>)
 80019d8:	2200      	movs	r2, #0
 80019da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_SPI2_Init+0x74>)
 80019de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_SPI2_Init+0x74>)
 80019e6:	2210      	movs	r2, #16
 80019e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_SPI2_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_SPI2_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <MX_SPI2_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_SPI2_Init+0x74>)
 80019fe:	2207      	movs	r2, #7
 8001a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <MX_SPI2_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_SPI2_Init+0x74>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_SPI2_Init+0x74>)
 8001a10:	f003 f9a8 	bl	8004d64 <HAL_SPI_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a1a:	f7ff ffc3 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000a25c 	.word	0x2000a25c
 8001a28:	40003800 	.word	0x40003800

08001a2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a3a      	ldr	r2, [pc, #232]	; (8001b34 <HAL_SPI_MspInit+0x108>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d16d      	bne.n	8001b2a <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <HAL_SPI_MspInit+0x10c>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	4a39      	ldr	r2, [pc, #228]	; (8001b38 <HAL_SPI_MspInit+0x10c>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <HAL_SPI_MspInit+0x10c>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <HAL_SPI_MspInit+0x10c>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	4a33      	ldr	r2, [pc, #204]	; (8001b38 <HAL_SPI_MspInit+0x10c>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a72:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <HAL_SPI_MspInit+0x10c>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_SPI_MspInit+0x10c>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	4a2d      	ldr	r2, [pc, #180]	; (8001b38 <HAL_SPI_MspInit+0x10c>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_SPI_MspInit+0x10c>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a96:	2308      	movs	r3, #8
 8001a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4822      	ldr	r0, [pc, #136]	; (8001b3c <HAL_SPI_MspInit+0x110>)
 8001ab2:	f000 fe43 	bl	800273c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ac8:	2305      	movs	r3, #5
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	481b      	ldr	r0, [pc, #108]	; (8001b40 <HAL_SPI_MspInit+0x114>)
 8001ad4:	f000 fe32 	bl	800273c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_SPI_MspInit+0x118>)
 8001ada:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <HAL_SPI_MspInit+0x11c>)
 8001adc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_SPI_MspInit+0x118>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ae4:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_SPI_MspInit+0x118>)
 8001ae6:	2210      	movs	r2, #16
 8001ae8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_SPI_MspInit+0x118>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <HAL_SPI_MspInit+0x118>)
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_SPI_MspInit+0x118>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_SPI_MspInit+0x118>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_SPI_MspInit+0x118>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_SPI_MspInit+0x118>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001b0e:	480d      	ldr	r0, [pc, #52]	; (8001b44 <HAL_SPI_MspInit+0x118>)
 8001b10:	f000 fc1c 	bl	800234c <HAL_DMA_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001b1a:	f7ff ff43 	bl	80019a4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <HAL_SPI_MspInit+0x118>)
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
 8001b24:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <HAL_SPI_MspInit+0x118>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3728      	adds	r7, #40	; 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40003800 	.word	0x40003800
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	48000800 	.word	0x48000800
 8001b40:	48000400 	.word	0x48000400
 8001b44:	2000a2c0 	.word	0x2000a2c0
 8001b48:	40020058 	.word	0x40020058

08001b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_MspInit+0x44>)
 8001b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b56:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <HAL_MspInit+0x44>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_MspInit+0x44>)
 8001b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_MspInit+0x44>)
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_MspInit+0x44>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b74:	6593      	str	r3, [r2, #88]	; 0x58
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_MspInit+0x44>)
 8001b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000

08001b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b98:	e7fe      	b.n	8001b98 <NMI_Handler+0x4>

08001b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <HardFault_Handler+0x4>

08001ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <MemManage_Handler+0x4>

08001ba6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <BusFault_Handler+0x4>

08001bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <UsageFault_Handler+0x4>

08001bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be0:	f000 fa5e 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <DMA1_Channel5_IRQHandler+0x10>)
 8001bee:	f000 fcc5 	bl	800257c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000a2c0 	.word	0x2000a2c0

08001bfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_SENSOR_Pin);
 8001c00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c04:	f000 ff5c 	bl	8002ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <TIM6_DAC_IRQHandler+0x10>)
 8001c12:	f003 fe71 	bl	80058f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000a30c 	.word	0x2000a30c

08001c20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return 1;
 8001c24:	2301      	movs	r3, #1
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <_kill>:

int _kill(int pid, int sig)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c3a:	f006 fae3 	bl	8008204 <__errno>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2216      	movs	r2, #22
 8001c42:	601a      	str	r2, [r3, #0]
  return -1;
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <_exit>:

void _exit (int status)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ffe7 	bl	8001c30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c62:	e7fe      	b.n	8001c62 <_exit+0x12>

08001c64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e00a      	b.n	8001c8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c76:	f3af 8000 	nop.w
 8001c7a:	4601      	mov	r1, r0
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	60ba      	str	r2, [r7, #8]
 8001c82:	b2ca      	uxtb	r2, r1
 8001c84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dbf0      	blt.n	8001c76 <_read+0x12>
  }

  return len;
 8001c94:	687b      	ldr	r3, [r7, #4]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	e009      	b.n	8001cc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	60ba      	str	r2, [r7, #8]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fd17 	bl	80016ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dbf1      	blt.n	8001cb0 <_write+0x12>
  }
  return len;
 8001ccc:	687b      	ldr	r3, [r7, #4]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_close>:

int _close(int file)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cfe:	605a      	str	r2, [r3, #4]
  return 0;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_isatty>:

int _isatty(int file)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d16:	2301      	movs	r3, #1
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d48:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <_sbrk+0x5c>)
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <_sbrk+0x60>)
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <_sbrk+0x64>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <_sbrk+0x68>)
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d207      	bcs.n	8001d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d70:	f006 fa48 	bl	8008204 <__errno>
 8001d74:	4603      	mov	r3, r0
 8001d76:	220c      	movs	r2, #12
 8001d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	e009      	b.n	8001d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <_sbrk+0x64>)
 8001d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20018000 	.word	0x20018000
 8001da0:	00002000 	.word	0x00002000
 8001da4:	2000a308 	.word	0x2000a308
 8001da8:	2000a530 	.word	0x2000a530

08001dac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <SystemInit+0x20>)
 8001db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <SystemInit+0x20>)
 8001db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <MX_TIM6_Init+0x68>)
 8001de2:	4a16      	ldr	r2, [pc, #88]	; (8001e3c <MX_TIM6_Init+0x6c>)
 8001de4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <MX_TIM6_Init+0x68>)
 8001de8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001dec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_TIM6_Init+0x68>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <MX_TIM6_Init+0x68>)
 8001df6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001dfa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <MX_TIM6_Init+0x68>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e02:	480d      	ldr	r0, [pc, #52]	; (8001e38 <MX_TIM6_Init+0x68>)
 8001e04:	f003 fcb0 	bl	8005768 <HAL_TIM_Base_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001e0e:	f7ff fdc9 	bl	80019a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4806      	ldr	r0, [pc, #24]	; (8001e38 <MX_TIM6_Init+0x68>)
 8001e20:	f003 ff2e 	bl	8005c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001e2a:	f7ff fdbb 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2000a30c 	.word	0x2000a30c
 8001e3c:	40001000 	.word	0x40001000

08001e40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <HAL_TIM_Base_MspInit+0x44>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d113      	bne.n	8001e7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <HAL_TIM_Base_MspInit+0x48>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	4a0c      	ldr	r2, [pc, #48]	; (8001e88 <HAL_TIM_Base_MspInit+0x48>)
 8001e58:	f043 0310 	orr.w	r3, r3, #16
 8001e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_TIM_Base_MspInit+0x48>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	210a      	movs	r1, #10
 8001e6e:	2036      	movs	r0, #54	; 0x36
 8001e70:	f000 fa35 	bl	80022de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e74:	2036      	movs	r0, #54	; 0x36
 8001e76:	f000 fa4e 	bl	8002316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40001000 	.word	0x40001000
 8001e88:	40021000 	.word	0x40021000

08001e8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001e92:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <MX_USART2_UART_Init+0x5c>)
 8001e94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001ed0:	f003 ff7c 	bl	8005dcc <HAL_UART_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001eda:	f7ff fd63 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	2000a358 	.word	0x2000a358
 8001ee8:	40004400 	.word	0x40004400

08001eec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b0ac      	sub	sp, #176	; 0xb0
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	2288      	movs	r2, #136	; 0x88
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f006 f927 	bl	8008160 <memset>
  if(uartHandle->Instance==USART2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a21      	ldr	r2, [pc, #132]	; (8001f9c <HAL_UART_MspInit+0xb0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d13b      	bne.n	8001f94 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f20:	2300      	movs	r3, #0
 8001f22:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f002 fa5f 	bl	80043ec <HAL_RCCEx_PeriphCLKConfig>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f34:	f7ff fd36 	bl	80019a4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_UART_MspInit+0xb4>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <HAL_UART_MspInit+0xb4>)
 8001f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f42:	6593      	str	r3, [r2, #88]	; 0x58
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <HAL_UART_MspInit+0xb4>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <HAL_UART_MspInit+0xb4>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f54:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <HAL_UART_MspInit+0xb4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5c:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_UART_MspInit+0xb4>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f68:	230c      	movs	r3, #12
 8001f6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f80:	2307      	movs	r3, #7
 8001f82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f90:	f000 fbd4 	bl	800273c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f94:	bf00      	nop
 8001f96:	37b0      	adds	r7, #176	; 0xb0
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40004400 	.word	0x40004400
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fa8:	f7ff ff00 	bl	8001dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fac:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fae:	490d      	ldr	r1, [pc, #52]	; (8001fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <LoopForever+0xe>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb4:	e002      	b.n	8001fbc <LoopCopyDataInit>

08001fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fba:	3304      	adds	r3, #4

08001fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc0:	d3f9      	bcc.n	8001fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc4:	4c0a      	ldr	r4, [pc, #40]	; (8001ff0 <LoopForever+0x16>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc8:	e001      	b.n	8001fce <LoopFillZerobss>

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fcc:	3204      	adds	r2, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fd2:	f006 f91d 	bl	8008210 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fd6:	f7ff fbb3 	bl	8001740 <main>

08001fda <LoopForever>:

LoopForever:
    b LoopForever
 8001fda:	e7fe      	b.n	8001fda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fdc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001fe8:	0800e6f0 	.word	0x0800e6f0
  ldr r2, =_sbss
 8001fec:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ff0:	2000a530 	.word	0x2000a530

08001ff4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ff4:	e7fe      	b.n	8001ff4 <ADC1_2_IRQHandler>

08001ff6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002000:	2003      	movs	r0, #3
 8002002:	f000 f961 	bl	80022c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002006:	200f      	movs	r0, #15
 8002008:	f000 f80e 	bl	8002028 <HAL_InitTick>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	71fb      	strb	r3, [r7, #7]
 8002016:	e001      	b.n	800201c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002018:	f7ff fd98 	bl	8001b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800201c:	79fb      	ldrb	r3, [r7, #7]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_InitTick+0x6c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d023      	beq.n	8002084 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800203c:	4b16      	ldr	r3, [pc, #88]	; (8002098 <HAL_InitTick+0x70>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_InitTick+0x6c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204a:	fbb3 f3f1 	udiv	r3, r3, r1
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f96d 	bl	8002332 <HAL_SYSTICK_Config>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10f      	bne.n	800207e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0f      	cmp	r3, #15
 8002062:	d809      	bhi.n	8002078 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002064:	2200      	movs	r2, #0
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f000 f937 	bl	80022de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002070:	4a0a      	ldr	r2, [pc, #40]	; (800209c <HAL_InitTick+0x74>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e007      	b.n	8002088 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
 800207c:	e004      	b.n	8002088 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	73fb      	strb	r3, [r7, #15]
 8002082:	e001      	b.n	8002088 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002088:	7bfb      	ldrb	r3, [r7, #15]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000008 	.word	0x20000008
 8002098:	20000000 	.word	0x20000000
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x20>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_IncTick+0x24>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_IncTick+0x24>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000008 	.word	0x20000008
 80020c4:	2000a3e0 	.word	0x2000a3e0

080020c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	2000a3e0 	.word	0x2000a3e0

080020e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff ffee 	bl	80020c8 <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_Delay+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002106:	bf00      	nop
 8002108:	f7ff ffde 	bl	80020c8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000008 	.word	0x20000008

08002128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <__NVIC_SetPriorityGrouping+0x44>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002144:	4013      	ands	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215a:	4a04      	ldr	r2, [pc, #16]	; (800216c <__NVIC_SetPriorityGrouping+0x44>)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	60d3      	str	r3, [r2, #12]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <__NVIC_GetPriorityGrouping+0x18>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	f003 0307 	and.w	r3, r3, #7
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	2b00      	cmp	r3, #0
 800219c:	db0b      	blt.n	80021b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	f003 021f 	and.w	r2, r3, #31
 80021a4:	4907      	ldr	r1, [pc, #28]	; (80021c4 <__NVIC_EnableIRQ+0x38>)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	2001      	movs	r0, #1
 80021ae:	fa00 f202 	lsl.w	r2, r0, r2
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000e100 	.word	0xe000e100

080021c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	db0a      	blt.n	80021f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	490c      	ldr	r1, [pc, #48]	; (8002214 <__NVIC_SetPriority+0x4c>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	0112      	lsls	r2, r2, #4
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	440b      	add	r3, r1
 80021ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f0:	e00a      	b.n	8002208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4908      	ldr	r1, [pc, #32]	; (8002218 <__NVIC_SetPriority+0x50>)
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	3b04      	subs	r3, #4
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	440b      	add	r3, r1
 8002206:	761a      	strb	r2, [r3, #24]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000e100 	.word	0xe000e100
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f1c3 0307 	rsb	r3, r3, #7
 8002236:	2b04      	cmp	r3, #4
 8002238:	bf28      	it	cs
 800223a:	2304      	movcs	r3, #4
 800223c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3304      	adds	r3, #4
 8002242:	2b06      	cmp	r3, #6
 8002244:	d902      	bls.n	800224c <NVIC_EncodePriority+0x30>
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3b03      	subs	r3, #3
 800224a:	e000      	b.n	800224e <NVIC_EncodePriority+0x32>
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	f04f 32ff 	mov.w	r2, #4294967295
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	401a      	ands	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002264:	f04f 31ff 	mov.w	r1, #4294967295
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	43d9      	mvns	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	4313      	orrs	r3, r2
         );
}
 8002276:	4618      	mov	r0, r3
 8002278:	3724      	adds	r7, #36	; 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002294:	d301      	bcc.n	800229a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002296:	2301      	movs	r3, #1
 8002298:	e00f      	b.n	80022ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <SysTick_Config+0x40>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a2:	210f      	movs	r1, #15
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f7ff ff8e 	bl	80021c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <SysTick_Config+0x40>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b2:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <SysTick_Config+0x40>)
 80022b4:	2207      	movs	r2, #7
 80022b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	e000e010 	.word	0xe000e010

080022c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff29 	bl	8002128 <__NVIC_SetPriorityGrouping>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022f0:	f7ff ff3e 	bl	8002170 <__NVIC_GetPriorityGrouping>
 80022f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f7ff ff8e 	bl	800221c <NVIC_EncodePriority>
 8002300:	4602      	mov	r2, r0
 8002302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff5d 	bl	80021c8 <__NVIC_SetPriority>
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff31 	bl	800218c <__NVIC_EnableIRQ>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ffa2 	bl	8002284 <SysTick_Config>
 8002340:	4603      	mov	r3, r0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e098      	b.n	8002490 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	4b4d      	ldr	r3, [pc, #308]	; (800249c <HAL_DMA_Init+0x150>)
 8002366:	429a      	cmp	r2, r3
 8002368:	d80f      	bhi.n	800238a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	4b4b      	ldr	r3, [pc, #300]	; (80024a0 <HAL_DMA_Init+0x154>)
 8002372:	4413      	add	r3, r2
 8002374:	4a4b      	ldr	r2, [pc, #300]	; (80024a4 <HAL_DMA_Init+0x158>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	091b      	lsrs	r3, r3, #4
 800237c:	009a      	lsls	r2, r3, #2
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a48      	ldr	r2, [pc, #288]	; (80024a8 <HAL_DMA_Init+0x15c>)
 8002386:	641a      	str	r2, [r3, #64]	; 0x40
 8002388:	e00e      	b.n	80023a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	4b46      	ldr	r3, [pc, #280]	; (80024ac <HAL_DMA_Init+0x160>)
 8002392:	4413      	add	r3, r2
 8002394:	4a43      	ldr	r2, [pc, #268]	; (80024a4 <HAL_DMA_Init+0x158>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	091b      	lsrs	r3, r3, #4
 800239c:	009a      	lsls	r2, r3, #2
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a42      	ldr	r2, [pc, #264]	; (80024b0 <HAL_DMA_Init+0x164>)
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80023be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002402:	d039      	beq.n	8002478 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <HAL_DMA_Init+0x15c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d11a      	bne.n	8002444 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <HAL_DMA_Init+0x168>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f003 031c 	and.w	r3, r3, #28
 800241a:	210f      	movs	r1, #15
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	4924      	ldr	r1, [pc, #144]	; (80024b4 <HAL_DMA_Init+0x168>)
 8002424:	4013      	ands	r3, r2
 8002426:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002428:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <HAL_DMA_Init+0x168>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	f003 031c 	and.w	r3, r3, #28
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	491d      	ldr	r1, [pc, #116]	; (80024b4 <HAL_DMA_Init+0x168>)
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
 8002442:	e019      	b.n	8002478 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002444:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <HAL_DMA_Init+0x16c>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	f003 031c 	and.w	r3, r3, #28
 8002450:	210f      	movs	r1, #15
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	4917      	ldr	r1, [pc, #92]	; (80024b8 <HAL_DMA_Init+0x16c>)
 800245a:	4013      	ands	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <HAL_DMA_Init+0x16c>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f003 031c 	and.w	r3, r3, #28
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	4911      	ldr	r1, [pc, #68]	; (80024b8 <HAL_DMA_Init+0x16c>)
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40020407 	.word	0x40020407
 80024a0:	bffdfff8 	.word	0xbffdfff8
 80024a4:	cccccccd 	.word	0xcccccccd
 80024a8:	40020000 	.word	0x40020000
 80024ac:	bffdfbf8 	.word	0xbffdfbf8
 80024b0:	40020400 	.word	0x40020400
 80024b4:	400200a8 	.word	0x400200a8
 80024b8:	400204a8 	.word	0x400204a8

080024bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_DMA_Start_IT+0x20>
 80024d8:	2302      	movs	r3, #2
 80024da:	e04b      	b.n	8002574 <HAL_DMA_Start_IT+0xb8>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d13a      	bne.n	8002566 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0201 	bic.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f8e0 	bl	80026da <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 020e 	orr.w	r2, r2, #14
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	e00f      	b.n	8002554 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0204 	bic.w	r2, r2, #4
 8002542:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 020a 	orr.w	r2, r2, #10
 8002552:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e005      	b.n	8002572 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800256e:	2302      	movs	r3, #2
 8002570:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002572:	7dfb      	ldrb	r3, [r7, #23]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f003 031c 	and.w	r3, r3, #28
 800259c:	2204      	movs	r2, #4
 800259e:	409a      	lsls	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d026      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x7a>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d021      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d107      	bne.n	80025d0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0204 	bic.w	r2, r2, #4
 80025ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	f003 021c 	and.w	r2, r3, #28
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	2104      	movs	r1, #4
 80025de:	fa01 f202 	lsl.w	r2, r1, r2
 80025e2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d071      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80025f4:	e06c      	b.n	80026d0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f003 031c 	and.w	r3, r3, #28
 80025fe:	2202      	movs	r2, #2
 8002600:	409a      	lsls	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d02e      	beq.n	8002668 <HAL_DMA_IRQHandler+0xec>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d029      	beq.n	8002668 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10b      	bne.n	800263a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 020a 	bic.w	r2, r2, #10
 8002630:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f003 021c 	and.w	r2, r3, #28
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2102      	movs	r1, #2
 8002648:	fa01 f202 	lsl.w	r2, r1, r2
 800264c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d038      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002666:	e033      	b.n	80026d0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	f003 031c 	and.w	r3, r3, #28
 8002670:	2208      	movs	r2, #8
 8002672:	409a      	lsls	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02a      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x156>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d025      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 020e 	bic.w	r2, r2, #14
 8002694:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f003 021c 	and.w	r2, r3, #28
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2101      	movs	r1, #1
 80026a4:	fa01 f202 	lsl.w	r2, r1, r2
 80026a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
}
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	f003 021c 	and.w	r2, r3, #28
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	2101      	movs	r1, #1
 80026f6:	fa01 f202 	lsl.w	r2, r1, r2
 80026fa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b10      	cmp	r3, #16
 800270a:	d108      	bne.n	800271e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800271c:	e007      	b.n	800272e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	60da      	str	r2, [r3, #12]
}
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274a:	e17f      	b.n	8002a4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	2101      	movs	r1, #1
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	fa01 f303 	lsl.w	r3, r1, r3
 8002758:	4013      	ands	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8171 	beq.w	8002a46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d005      	beq.n	800277c <HAL_GPIO_Init+0x40>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d130      	bne.n	80027de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2203      	movs	r2, #3
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027b2:	2201      	movs	r2, #1
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	f003 0201 	and.w	r2, r3, #1
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d118      	bne.n	800281c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80027f0:	2201      	movs	r2, #1
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	08db      	lsrs	r3, r3, #3
 8002806:	f003 0201 	and.w	r2, r3, #1
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b03      	cmp	r3, #3
 8002826:	d017      	beq.n	8002858 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d123      	bne.n	80028ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	08da      	lsrs	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3208      	adds	r2, #8
 800286c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	220f      	movs	r2, #15
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	08da      	lsrs	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3208      	adds	r2, #8
 80028a6:	6939      	ldr	r1, [r7, #16]
 80028a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0203 	and.w	r2, r3, #3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80ac 	beq.w	8002a46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ee:	4b5f      	ldr	r3, [pc, #380]	; (8002a6c <HAL_GPIO_Init+0x330>)
 80028f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f2:	4a5e      	ldr	r2, [pc, #376]	; (8002a6c <HAL_GPIO_Init+0x330>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6613      	str	r3, [r2, #96]	; 0x60
 80028fa:	4b5c      	ldr	r3, [pc, #368]	; (8002a6c <HAL_GPIO_Init+0x330>)
 80028fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002906:	4a5a      	ldr	r2, [pc, #360]	; (8002a70 <HAL_GPIO_Init+0x334>)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	3302      	adds	r3, #2
 800290e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002912:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	220f      	movs	r2, #15
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002930:	d025      	beq.n	800297e <HAL_GPIO_Init+0x242>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4f      	ldr	r2, [pc, #316]	; (8002a74 <HAL_GPIO_Init+0x338>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01f      	beq.n	800297a <HAL_GPIO_Init+0x23e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a4e      	ldr	r2, [pc, #312]	; (8002a78 <HAL_GPIO_Init+0x33c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d019      	beq.n	8002976 <HAL_GPIO_Init+0x23a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4d      	ldr	r2, [pc, #308]	; (8002a7c <HAL_GPIO_Init+0x340>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_GPIO_Init+0x236>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a4c      	ldr	r2, [pc, #304]	; (8002a80 <HAL_GPIO_Init+0x344>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00d      	beq.n	800296e <HAL_GPIO_Init+0x232>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a4b      	ldr	r2, [pc, #300]	; (8002a84 <HAL_GPIO_Init+0x348>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d007      	beq.n	800296a <HAL_GPIO_Init+0x22e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a4a      	ldr	r2, [pc, #296]	; (8002a88 <HAL_GPIO_Init+0x34c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_GPIO_Init+0x22a>
 8002962:	2306      	movs	r3, #6
 8002964:	e00c      	b.n	8002980 <HAL_GPIO_Init+0x244>
 8002966:	2307      	movs	r3, #7
 8002968:	e00a      	b.n	8002980 <HAL_GPIO_Init+0x244>
 800296a:	2305      	movs	r3, #5
 800296c:	e008      	b.n	8002980 <HAL_GPIO_Init+0x244>
 800296e:	2304      	movs	r3, #4
 8002970:	e006      	b.n	8002980 <HAL_GPIO_Init+0x244>
 8002972:	2303      	movs	r3, #3
 8002974:	e004      	b.n	8002980 <HAL_GPIO_Init+0x244>
 8002976:	2302      	movs	r3, #2
 8002978:	e002      	b.n	8002980 <HAL_GPIO_Init+0x244>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_GPIO_Init+0x244>
 800297e:	2300      	movs	r3, #0
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	f002 0203 	and.w	r2, r2, #3
 8002986:	0092      	lsls	r2, r2, #2
 8002988:	4093      	lsls	r3, r2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002990:	4937      	ldr	r1, [pc, #220]	; (8002a70 <HAL_GPIO_Init+0x334>)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800299e:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <HAL_GPIO_Init+0x350>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029c2:	4a32      	ldr	r2, [pc, #200]	; (8002a8c <HAL_GPIO_Init+0x350>)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029c8:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <HAL_GPIO_Init+0x350>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029ec:	4a27      	ldr	r2, [pc, #156]	; (8002a8c <HAL_GPIO_Init+0x350>)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <HAL_GPIO_Init+0x350>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a16:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <HAL_GPIO_Init+0x350>)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <HAL_GPIO_Init+0x350>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a40:	4a12      	ldr	r2, [pc, #72]	; (8002a8c <HAL_GPIO_Init+0x350>)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	fa22 f303 	lsr.w	r3, r2, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f47f ae78 	bne.w	800274c <HAL_GPIO_Init+0x10>
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40010000 	.word	0x40010000
 8002a74:	48000400 	.word	0x48000400
 8002a78:	48000800 	.word	0x48000800
 8002a7c:	48000c00 	.word	0x48000c00
 8002a80:	48001000 	.word	0x48001000
 8002a84:	48001400 	.word	0x48001400
 8002a88:	48001800 	.word	0x48001800
 8002a8c:	40010400 	.word	0x40010400

08002a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa0:	787b      	ldrb	r3, [r7, #1]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002aac:	e002      	b.n	8002ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ad6:	4a05      	ldr	r2, [pc, #20]	; (8002aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe fab8 	bl	8001054 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40010400 	.word	0x40010400

08002af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e08d      	b.n	8002c1e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe fbac 	bl	8001274 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2224      	movs	r2, #36	; 0x24
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d107      	bne.n	8002b6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	e006      	b.n	8002b78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d108      	bne.n	8002b92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	e007      	b.n	8002ba2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69d9      	ldr	r1, [r3, #28]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1a      	ldr	r2, [r3, #32]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	817b      	strh	r3, [r7, #10]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	813b      	strh	r3, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	f040 80f9 	bne.w	8002e42 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_I2C_Mem_Write+0x34>
 8002c56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0ed      	b.n	8002e44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_I2C_Mem_Write+0x4e>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e0e6      	b.n	8002e44 <HAL_I2C_Mem_Write+0x21c>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c7e:	f7ff fa23 	bl	80020c8 <HAL_GetTick>
 8002c82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2319      	movs	r3, #25
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fac3 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0d1      	b.n	8002e44 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2221      	movs	r2, #33	; 0x21
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2240      	movs	r2, #64	; 0x40
 8002cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a3a      	ldr	r2, [r7, #32]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cc8:	88f8      	ldrh	r0, [r7, #6]
 8002cca:	893a      	ldrh	r2, [r7, #8]
 8002ccc:	8979      	ldrh	r1, [r7, #10]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	9301      	str	r3, [sp, #4]
 8002cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f9d3 	bl	8003084 <I2C_RequestMemoryWrite>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0a9      	b.n	8002e44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2bff      	cmp	r3, #255	; 0xff
 8002cf8:	d90e      	bls.n	8002d18 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	22ff      	movs	r2, #255	; 0xff
 8002cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	8979      	ldrh	r1, [r7, #10]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fc3d 	bl	8003590 <I2C_TransferConfig>
 8002d16:	e00f      	b.n	8002d38 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	8979      	ldrh	r1, [r7, #10]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fc2c 	bl	8003590 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 fabc 	bl	80032ba <I2C_WaitOnTXISFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e07b      	b.n	8002e44 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d034      	beq.n	8002df0 <HAL_I2C_Mem_Write+0x1c8>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d130      	bne.n	8002df0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	2200      	movs	r2, #0
 8002d96:	2180      	movs	r1, #128	; 0x80
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 fa3f 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e04d      	b.n	8002e44 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2bff      	cmp	r3, #255	; 0xff
 8002db0:	d90e      	bls.n	8002dd0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	22ff      	movs	r2, #255	; 0xff
 8002db6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	8979      	ldrh	r1, [r7, #10]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fbe1 	bl	8003590 <I2C_TransferConfig>
 8002dce:	e00f      	b.n	8002df0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	8979      	ldrh	r1, [r7, #10]
 8002de2:	2300      	movs	r3, #0
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 fbd0 	bl	8003590 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d19e      	bne.n	8002d38 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 faa2 	bl	8003348 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e01a      	b.n	8002e44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2220      	movs	r2, #32
 8002e14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_I2C_Mem_Write+0x224>)
 8002e22:	400b      	ands	r3, r1
 8002e24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
  }
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	fe00e800 	.word	0xfe00e800

08002e50 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	4608      	mov	r0, r1
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4603      	mov	r3, r0
 8002e60:	817b      	strh	r3, [r7, #10]
 8002e62:	460b      	mov	r3, r1
 8002e64:	813b      	strh	r3, [r7, #8]
 8002e66:	4613      	mov	r3, r2
 8002e68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	f040 80fd 	bne.w	8003072 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_I2C_Mem_Read+0x34>
 8002e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d105      	bne.n	8002e90 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0f1      	b.n	8003074 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_I2C_Mem_Read+0x4e>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e0ea      	b.n	8003074 <HAL_I2C_Mem_Read+0x224>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ea6:	f7ff f90f 	bl	80020c8 <HAL_GetTick>
 8002eaa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2319      	movs	r3, #25
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f9af 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0d5      	b.n	8003074 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2222      	movs	r2, #34	; 0x22
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2240      	movs	r2, #64	; 0x40
 8002ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a3a      	ldr	r2, [r7, #32]
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ef0:	88f8      	ldrh	r0, [r7, #6]
 8002ef2:	893a      	ldrh	r2, [r7, #8]
 8002ef4:	8979      	ldrh	r1, [r7, #10]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	9301      	str	r3, [sp, #4]
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	4603      	mov	r3, r0
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f913 	bl	800312c <I2C_RequestMemoryRead>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0ad      	b.n	8003074 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2bff      	cmp	r3, #255	; 0xff
 8002f20:	d90e      	bls.n	8002f40 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	22ff      	movs	r2, #255	; 0xff
 8002f26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	8979      	ldrh	r1, [r7, #10]
 8002f30:	4b52      	ldr	r3, [pc, #328]	; (800307c <HAL_I2C_Mem_Read+0x22c>)
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fb29 	bl	8003590 <I2C_TransferConfig>
 8002f3e:	e00f      	b.n	8002f60 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	8979      	ldrh	r1, [r7, #10]
 8002f52:	4b4a      	ldr	r3, [pc, #296]	; (800307c <HAL_I2C_Mem_Read+0x22c>)
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fb18 	bl	8003590 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	2200      	movs	r2, #0
 8002f68:	2104      	movs	r1, #4
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f956 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e07c      	b.n	8003074 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d034      	beq.n	8003020 <HAL_I2C_Mem_Read+0x1d0>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d130      	bne.n	8003020 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2180      	movs	r1, #128	; 0x80
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f927 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e04d      	b.n	8003074 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2bff      	cmp	r3, #255	; 0xff
 8002fe0:	d90e      	bls.n	8003000 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	22ff      	movs	r2, #255	; 0xff
 8002fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	8979      	ldrh	r1, [r7, #10]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fac9 	bl	8003590 <I2C_TransferConfig>
 8002ffe:	e00f      	b.n	8003020 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	b2da      	uxtb	r2, r3
 8003010:	8979      	ldrh	r1, [r7, #10]
 8003012:	2300      	movs	r3, #0
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 fab8 	bl	8003590 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d19a      	bne.n	8002f60 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f98a 	bl	8003348 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e01a      	b.n	8003074 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2220      	movs	r2, #32
 8003044:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_I2C_Mem_Read+0x230>)
 8003052:	400b      	ands	r3, r1
 8003054:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003072:	2302      	movs	r3, #2
  }
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	80002400 	.word	0x80002400
 8003080:	fe00e800 	.word	0xfe00e800

08003084 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	4608      	mov	r0, r1
 800308e:	4611      	mov	r1, r2
 8003090:	461a      	mov	r2, r3
 8003092:	4603      	mov	r3, r0
 8003094:	817b      	strh	r3, [r7, #10]
 8003096:	460b      	mov	r3, r1
 8003098:	813b      	strh	r3, [r7, #8]
 800309a:	4613      	mov	r3, r2
 800309c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	8979      	ldrh	r1, [r7, #10]
 80030a4:	4b20      	ldr	r3, [pc, #128]	; (8003128 <I2C_RequestMemoryWrite+0xa4>)
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fa6f 	bl	8003590 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	69b9      	ldr	r1, [r7, #24]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f8ff 	bl	80032ba <I2C_WaitOnTXISFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e02c      	b.n	8003120 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d105      	bne.n	80030d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030cc:	893b      	ldrh	r3, [r7, #8]
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	629a      	str	r2, [r3, #40]	; 0x28
 80030d6:	e015      	b.n	8003104 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030d8:	893b      	ldrh	r3, [r7, #8]
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	b29b      	uxth	r3, r3
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	69b9      	ldr	r1, [r7, #24]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f8e5 	bl	80032ba <I2C_WaitOnTXISFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e012      	b.n	8003120 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030fa:	893b      	ldrh	r3, [r7, #8]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2200      	movs	r2, #0
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f884 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	80002000 	.word	0x80002000

0800312c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	4608      	mov	r0, r1
 8003136:	4611      	mov	r1, r2
 8003138:	461a      	mov	r2, r3
 800313a:	4603      	mov	r3, r0
 800313c:	817b      	strh	r3, [r7, #10]
 800313e:	460b      	mov	r3, r1
 8003140:	813b      	strh	r3, [r7, #8]
 8003142:	4613      	mov	r3, r2
 8003144:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	8979      	ldrh	r1, [r7, #10]
 800314c:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <I2C_RequestMemoryRead+0xa4>)
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2300      	movs	r3, #0
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fa1c 	bl	8003590 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	69b9      	ldr	r1, [r7, #24]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f8ac 	bl	80032ba <I2C_WaitOnTXISFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e02c      	b.n	80031c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d105      	bne.n	800317e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003172:	893b      	ldrh	r3, [r7, #8]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
 800317c:	e015      	b.n	80031aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800317e:	893b      	ldrh	r3, [r7, #8]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	b29b      	uxth	r3, r3
 8003184:	b2da      	uxtb	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	69b9      	ldr	r1, [r7, #24]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f892 	bl	80032ba <I2C_WaitOnTXISFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e012      	b.n	80031c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031a0:	893b      	ldrh	r3, [r7, #8]
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2200      	movs	r2, #0
 80031b2:	2140      	movs	r1, #64	; 0x40
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f831 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	80002000 	.word	0x80002000

080031d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d103      	bne.n	80031f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2200      	movs	r2, #0
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d007      	beq.n	8003210 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	619a      	str	r2, [r3, #24]
  }
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800322c:	e031      	b.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d02d      	beq.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003236:	f7fe ff47 	bl	80020c8 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d302      	bcc.n	800324c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d122      	bne.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	4013      	ands	r3, r2
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	429a      	cmp	r2, r3
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	429a      	cmp	r2, r3
 8003268:	d113      	bne.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	f043 0220 	orr.w	r2, r3, #32
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e00f      	b.n	80032b2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699a      	ldr	r2, [r3, #24]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	429a      	cmp	r2, r3
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d0be      	beq.n	800322e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032c6:	e033      	b.n	8003330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f87f 	bl	80033d0 <I2C_IsErrorOccurred>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e031      	b.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e2:	d025      	beq.n	8003330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e4:	f7fe fef0 	bl	80020c8 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d302      	bcc.n	80032fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d11a      	bne.n	8003330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b02      	cmp	r3, #2
 8003306:	d013      	beq.n	8003330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e007      	b.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d1c4      	bne.n	80032c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003354:	e02f      	b.n	80033b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f838 	bl	80033d0 <I2C_IsErrorOccurred>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e02d      	b.n	80033c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336a:	f7fe fead 	bl	80020c8 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	429a      	cmp	r2, r3
 8003378:	d302      	bcc.n	8003380 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d11a      	bne.n	80033b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b20      	cmp	r3, #32
 800338c:	d013      	beq.n	80033b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f043 0220 	orr.w	r2, r3, #32
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e007      	b.n	80033c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d1c8      	bne.n	8003356 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	; 0x28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d068      	beq.n	80034ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2210      	movs	r2, #16
 8003402:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003404:	e049      	b.n	800349a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d045      	beq.n	800349a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7fe fe5b 	bl	80020c8 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <I2C_IsErrorOccurred+0x54>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d13a      	bne.n	800349a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003436:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003446:	d121      	bne.n	800348c <I2C_IsErrorOccurred+0xbc>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800344e:	d01d      	beq.n	800348c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	2b20      	cmp	r3, #32
 8003454:	d01a      	beq.n	800348c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003464:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003466:	f7fe fe2f 	bl	80020c8 <HAL_GetTick>
 800346a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800346c:	e00e      	b.n	800348c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800346e:	f7fe fe2b 	bl	80020c8 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b19      	cmp	r3, #25
 800347a:	d907      	bls.n	800348c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	f043 0320 	orr.w	r3, r3, #32
 8003482:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800348a:	e006      	b.n	800349a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b20      	cmp	r3, #32
 8003498:	d1e9      	bne.n	800346e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d003      	beq.n	80034b0 <I2C_IsErrorOccurred+0xe0>
 80034a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0aa      	beq.n	8003406 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d103      	bne.n	80034c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2220      	movs	r2, #32
 80034be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	f043 0304 	orr.w	r3, r3, #4
 80034c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00b      	beq.n	80034f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00b      	beq.n	800351a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f043 0308 	orr.w	r3, r3, #8
 8003508:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003512:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00b      	beq.n	800353c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	f043 0302 	orr.w	r3, r3, #2
 800352a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003534:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800353c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01c      	beq.n	800357e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff fe45 	bl	80031d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6859      	ldr	r1, [r3, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b0d      	ldr	r3, [pc, #52]	; (800358c <I2C_IsErrorOccurred+0x1bc>)
 8003556:	400b      	ands	r3, r1
 8003558:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	431a      	orrs	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800357e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003582:	4618      	mov	r0, r3
 8003584:	3728      	adds	r7, #40	; 0x28
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	fe00e800 	.word	0xfe00e800

08003590 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	460b      	mov	r3, r1
 800359c:	817b      	strh	r3, [r7, #10]
 800359e:	4613      	mov	r3, r2
 80035a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035a2:	897b      	ldrh	r3, [r7, #10]
 80035a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035a8:	7a7b      	ldrb	r3, [r7, #9]
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	0d5b      	lsrs	r3, r3, #21
 80035ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035ce:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <I2C_TransferConfig+0x60>)
 80035d0:	430b      	orrs	r3, r1
 80035d2:	43db      	mvns	r3, r3
 80035d4:	ea02 0103 	and.w	r1, r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035e2:	bf00      	nop
 80035e4:	371c      	adds	r7, #28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	03ff63ff 	.word	0x03ff63ff

080035f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b20      	cmp	r3, #32
 8003608:	d138      	bne.n	800367c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003614:	2302      	movs	r3, #2
 8003616:	e032      	b.n	800367e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2224      	movs	r2, #36	; 0x24
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003646:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6819      	ldr	r1, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	e000      	b.n	800367e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
  }
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b20      	cmp	r3, #32
 800369e:	d139      	bne.n	8003714 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e033      	b.n	8003716 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2224      	movs	r2, #36	; 0x24
 80036ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0201 	bic.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	e000      	b.n	8003716 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003714:	2302      	movs	r3, #2
  }
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003728:	4b04      	ldr	r3, [pc, #16]	; (800373c <HAL_PWREx_GetVoltageRange+0x18>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40007000 	.word	0x40007000

08003740 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800374e:	d130      	bne.n	80037b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003750:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800375c:	d038      	beq.n	80037d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003766:	4a1e      	ldr	r2, [pc, #120]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800376c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800376e:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2232      	movs	r2, #50	; 0x32
 8003774:	fb02 f303 	mul.w	r3, r2, r3
 8003778:	4a1b      	ldr	r2, [pc, #108]	; (80037e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	0c9b      	lsrs	r3, r3, #18
 8003780:	3301      	adds	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003784:	e002      	b.n	800378c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3b01      	subs	r3, #1
 800378a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800378c:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003798:	d102      	bne.n	80037a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f2      	bne.n	8003786 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ac:	d110      	bne.n	80037d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e00f      	b.n	80037d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037be:	d007      	beq.n	80037d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037c0:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037c8:	4a05      	ldr	r2, [pc, #20]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40007000 	.word	0x40007000
 80037e4:	20000000 	.word	0x20000000
 80037e8:	431bde83 	.word	0x431bde83

080037ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e3ca      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037fe:	4b97      	ldr	r3, [pc, #604]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003808:	4b94      	ldr	r3, [pc, #592]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80e4 	beq.w	80039e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <HAL_RCC_OscConfig+0x4a>
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	2b0c      	cmp	r3, #12
 800382a:	f040 808b 	bne.w	8003944 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b01      	cmp	r3, #1
 8003832:	f040 8087 	bne.w	8003944 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003836:	4b89      	ldr	r3, [pc, #548]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_RCC_OscConfig+0x62>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e3a2      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1a      	ldr	r2, [r3, #32]
 8003852:	4b82      	ldr	r3, [pc, #520]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d004      	beq.n	8003868 <HAL_RCC_OscConfig+0x7c>
 800385e:	4b7f      	ldr	r3, [pc, #508]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003866:	e005      	b.n	8003874 <HAL_RCC_OscConfig+0x88>
 8003868:	4b7c      	ldr	r3, [pc, #496]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800386a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003874:	4293      	cmp	r3, r2
 8003876:	d223      	bcs.n	80038c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fd55 	bl	800432c <RCC_SetFlashLatencyFromMSIRange>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e383      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800388c:	4b73      	ldr	r3, [pc, #460]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a72      	ldr	r2, [pc, #456]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003892:	f043 0308 	orr.w	r3, r3, #8
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b70      	ldr	r3, [pc, #448]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	496d      	ldr	r1, [pc, #436]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038aa:	4b6c      	ldr	r3, [pc, #432]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	4968      	ldr	r1, [pc, #416]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]
 80038be:	e025      	b.n	800390c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038c0:	4b66      	ldr	r3, [pc, #408]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a65      	ldr	r2, [pc, #404]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038c6:	f043 0308 	orr.w	r3, r3, #8
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	4960      	ldr	r1, [pc, #384]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038de:	4b5f      	ldr	r3, [pc, #380]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	495b      	ldr	r1, [pc, #364]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fd15 	bl	800432c <RCC_SetFlashLatencyFromMSIRange>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e343      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800390c:	f000 fc4a 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b52      	ldr	r3, [pc, #328]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	4950      	ldr	r1, [pc, #320]	; (8003a60 <HAL_RCC_OscConfig+0x274>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	fa22 f303 	lsr.w	r3, r2, r3
 8003928:	4a4e      	ldr	r2, [pc, #312]	; (8003a64 <HAL_RCC_OscConfig+0x278>)
 800392a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800392c:	4b4e      	ldr	r3, [pc, #312]	; (8003a68 <HAL_RCC_OscConfig+0x27c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe fb79 	bl	8002028 <HAL_InitTick>
 8003936:	4603      	mov	r3, r0
 8003938:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d052      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	e327      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d032      	beq.n	80039b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800394c:	4b43      	ldr	r3, [pc, #268]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a42      	ldr	r2, [pc, #264]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003958:	f7fe fbb6 	bl	80020c8 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003960:	f7fe fbb2 	bl	80020c8 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e310      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003972:	4b3a      	ldr	r3, [pc, #232]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800397e:	4b37      	ldr	r3, [pc, #220]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a36      	ldr	r2, [pc, #216]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003984:	f043 0308 	orr.w	r3, r3, #8
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b34      	ldr	r3, [pc, #208]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	4931      	ldr	r1, [pc, #196]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800399c:	4b2f      	ldr	r3, [pc, #188]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	492c      	ldr	r1, [pc, #176]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
 80039b0:	e01a      	b.n	80039e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039b2:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a29      	ldr	r2, [pc, #164]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039be:	f7fe fb83 	bl	80020c8 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039c6:	f7fe fb7f 	bl	80020c8 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e2dd      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039d8:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f0      	bne.n	80039c6 <HAL_RCC_OscConfig+0x1da>
 80039e4:	e000      	b.n	80039e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d074      	beq.n	8003ade <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x21a>
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b0c      	cmp	r3, #12
 80039fe:	d10e      	bne.n	8003a1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d10b      	bne.n	8003a1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a06:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d064      	beq.n	8003adc <HAL_RCC_OscConfig+0x2f0>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d160      	bne.n	8003adc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e2ba      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a26:	d106      	bne.n	8003a36 <HAL_RCC_OscConfig+0x24a>
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0b      	ldr	r2, [pc, #44]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	e026      	b.n	8003a84 <HAL_RCC_OscConfig+0x298>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a3e:	d115      	bne.n	8003a6c <HAL_RCC_OscConfig+0x280>
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a05      	ldr	r2, [pc, #20]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a02      	ldr	r2, [pc, #8]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	e014      	b.n	8003a84 <HAL_RCC_OscConfig+0x298>
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	0800e178 	.word	0x0800e178
 8003a64:	20000000 	.word	0x20000000
 8003a68:	20000004 	.word	0x20000004
 8003a6c:	4ba0      	ldr	r3, [pc, #640]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a9f      	ldr	r2, [pc, #636]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b9d      	ldr	r3, [pc, #628]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a9c      	ldr	r2, [pc, #624]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fb1c 	bl	80020c8 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a94:	f7fe fb18 	bl	80020c8 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b64      	cmp	r3, #100	; 0x64
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e276      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa6:	4b92      	ldr	r3, [pc, #584]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x2a8>
 8003ab2:	e014      	b.n	8003ade <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab4:	f7fe fb08 	bl	80020c8 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003abc:	f7fe fb04 	bl	80020c8 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	; 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e262      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ace:	4b88      	ldr	r3, [pc, #544]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x2d0>
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d060      	beq.n	8003bac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_OscConfig+0x310>
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b0c      	cmp	r3, #12
 8003af4:	d119      	bne.n	8003b2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d116      	bne.n	8003b2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003afc:	4b7c      	ldr	r3, [pc, #496]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_OscConfig+0x328>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e23f      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b14:	4b76      	ldr	r3, [pc, #472]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	061b      	lsls	r3, r3, #24
 8003b22:	4973      	ldr	r1, [pc, #460]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b28:	e040      	b.n	8003bac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d023      	beq.n	8003b7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b32:	4b6f      	ldr	r3, [pc, #444]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6e      	ldr	r2, [pc, #440]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3e:	f7fe fac3 	bl	80020c8 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b46:	f7fe fabf 	bl	80020c8 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e21d      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b58:	4b65      	ldr	r3, [pc, #404]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b64:	4b62      	ldr	r3, [pc, #392]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	061b      	lsls	r3, r3, #24
 8003b72:	495f      	ldr	r1, [pc, #380]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
 8003b78:	e018      	b.n	8003bac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7a:	4b5d      	ldr	r3, [pc, #372]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a5c      	ldr	r2, [pc, #368]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fe fa9f 	bl	80020c8 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b8e:	f7fe fa9b 	bl	80020c8 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e1f9      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ba0:	4b53      	ldr	r3, [pc, #332]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f0      	bne.n	8003b8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d03c      	beq.n	8003c32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01c      	beq.n	8003bfa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc0:	4b4b      	ldr	r3, [pc, #300]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc6:	4a4a      	ldr	r2, [pc, #296]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fe fa7a 	bl	80020c8 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd8:	f7fe fa76 	bl	80020c8 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e1d4      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bea:	4b41      	ldr	r3, [pc, #260]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0ef      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x3ec>
 8003bf8:	e01b      	b.n	8003c32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfa:	4b3d      	ldr	r3, [pc, #244]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c00:	4a3b      	ldr	r2, [pc, #236]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0a:	f7fe fa5d 	bl	80020c8 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c12:	f7fe fa59 	bl	80020c8 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e1b7      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c24:	4b32      	ldr	r3, [pc, #200]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1ef      	bne.n	8003c12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80a6 	beq.w	8003d8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c40:	2300      	movs	r3, #0
 8003c42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c44:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10d      	bne.n	8003c6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c50:	4b27      	ldr	r3, [pc, #156]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	4a26      	ldr	r2, [pc, #152]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c5c:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c6c:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <HAL_RCC_OscConfig+0x508>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d118      	bne.n	8003caa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c78:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <HAL_RCC_OscConfig+0x508>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1d      	ldr	r2, [pc, #116]	; (8003cf4 <HAL_RCC_OscConfig+0x508>)
 8003c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c84:	f7fe fa20 	bl	80020c8 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8c:	f7fe fa1c 	bl	80020c8 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e17a      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c9e:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <HAL_RCC_OscConfig+0x508>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d108      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x4d8>
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	4a0d      	ldr	r2, [pc, #52]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc2:	e029      	b.n	8003d18 <HAL_RCC_OscConfig+0x52c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b05      	cmp	r3, #5
 8003cca:	d115      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x50c>
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd2:	4a07      	ldr	r2, [pc, #28]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003cd4:	f043 0304 	orr.w	r3, r3, #4
 8003cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cdc:	4b04      	ldr	r3, [pc, #16]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	4a03      	ldr	r2, [pc, #12]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cec:	e014      	b.n	8003d18 <HAL_RCC_OscConfig+0x52c>
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40007000 	.word	0x40007000
 8003cf8:	4b9c      	ldr	r3, [pc, #624]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	4a9b      	ldr	r2, [pc, #620]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d08:	4b98      	ldr	r3, [pc, #608]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	4a97      	ldr	r2, [pc, #604]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003d10:	f023 0304 	bic.w	r3, r3, #4
 8003d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d016      	beq.n	8003d4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d20:	f7fe f9d2 	bl	80020c8 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d26:	e00a      	b.n	8003d3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d28:	f7fe f9ce 	bl	80020c8 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e12a      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d3e:	4b8b      	ldr	r3, [pc, #556]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0ed      	beq.n	8003d28 <HAL_RCC_OscConfig+0x53c>
 8003d4c:	e015      	b.n	8003d7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fe f9bb 	bl	80020c8 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d54:	e00a      	b.n	8003d6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d56:	f7fe f9b7 	bl	80020c8 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e113      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d6c:	4b7f      	ldr	r3, [pc, #508]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1ed      	bne.n	8003d56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d7a:	7ffb      	ldrb	r3, [r7, #31]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d80:	4b7a      	ldr	r3, [pc, #488]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	4a79      	ldr	r2, [pc, #484]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80fe 	beq.w	8003f92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	f040 80d0 	bne.w	8003f40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003da0:	4b72      	ldr	r3, [pc, #456]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 0203 	and.w	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d130      	bne.n	8003e16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d127      	bne.n	8003e16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d11f      	bne.n	8003e16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003de0:	2a07      	cmp	r2, #7
 8003de2:	bf14      	ite	ne
 8003de4:	2201      	movne	r2, #1
 8003de6:	2200      	moveq	r2, #0
 8003de8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d113      	bne.n	8003e16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	085b      	lsrs	r3, r3, #1
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d109      	bne.n	8003e16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	085b      	lsrs	r3, r3, #1
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d06e      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b0c      	cmp	r3, #12
 8003e1a:	d069      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e1c:	4b53      	ldr	r3, [pc, #332]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e28:	4b50      	ldr	r3, [pc, #320]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0ad      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e38:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a4b      	ldr	r2, [pc, #300]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e44:	f7fe f940 	bl	80020c8 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fe f93c 	bl	80020c8 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e09a      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e5e:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e6a:	4b40      	ldr	r3, [pc, #256]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	4b40      	ldr	r3, [pc, #256]	; (8003f70 <HAL_RCC_OscConfig+0x784>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e7a:	3a01      	subs	r2, #1
 8003e7c:	0112      	lsls	r2, r2, #4
 8003e7e:	4311      	orrs	r1, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e84:	0212      	lsls	r2, r2, #8
 8003e86:	4311      	orrs	r1, r2
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e8c:	0852      	lsrs	r2, r2, #1
 8003e8e:	3a01      	subs	r2, #1
 8003e90:	0552      	lsls	r2, r2, #21
 8003e92:	4311      	orrs	r1, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e98:	0852      	lsrs	r2, r2, #1
 8003e9a:	3a01      	subs	r2, #1
 8003e9c:	0652      	lsls	r2, r2, #25
 8003e9e:	4311      	orrs	r1, r2
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ea4:	0912      	lsrs	r2, r2, #4
 8003ea6:	0452      	lsls	r2, r2, #17
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	4930      	ldr	r1, [pc, #192]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003eb0:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a2d      	ldr	r2, [pc, #180]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ebc:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ec8:	f7fe f8fe 	bl	80020c8 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fe f8fa 	bl	80020c8 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e058      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee2:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eee:	e050      	b.n	8003f92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e04f      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d148      	bne.n	8003f92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f00:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a19      	ldr	r2, [pc, #100]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f0c:	4b17      	ldr	r3, [pc, #92]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a16      	ldr	r2, [pc, #88]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f18:	f7fe f8d6 	bl	80020c8 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fe f8d2 	bl	80020c8 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e030      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f32:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x734>
 8003f3e:	e028      	b.n	8003f92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b0c      	cmp	r3, #12
 8003f44:	d023      	beq.n	8003f8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f46:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fe f8b9 	bl	80020c8 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f58:	e00c      	b.n	8003f74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fe f8b5 	bl	80020c8 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d905      	bls.n	8003f74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e013      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_RCC_OscConfig+0x7b0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ec      	bne.n	8003f5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_RCC_OscConfig+0x7b0>)
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	4905      	ldr	r1, [pc, #20]	; (8003f9c <HAL_RCC_OscConfig+0x7b0>)
 8003f86:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCC_OscConfig+0x7b4>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60cb      	str	r3, [r1, #12]
 8003f8c:	e001      	b.n	8003f92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	feeefffc 	.word	0xfeeefffc

08003fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0e7      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b75      	ldr	r3, [pc, #468]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d910      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b72      	ldr	r3, [pc, #456]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 0207 	bic.w	r2, r3, #7
 8003fce:	4970      	ldr	r1, [pc, #448]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b6e      	ldr	r3, [pc, #440]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0cf      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d010      	beq.n	8004016 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	4b66      	ldr	r3, [pc, #408]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004000:	429a      	cmp	r2, r3
 8004002:	d908      	bls.n	8004016 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004004:	4b63      	ldr	r3, [pc, #396]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4960      	ldr	r1, [pc, #384]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d04c      	beq.n	80040bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b03      	cmp	r3, #3
 8004028:	d107      	bne.n	800403a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800402a:	4b5a      	ldr	r3, [pc, #360]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d121      	bne.n	800407a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e0a6      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004042:	4b54      	ldr	r3, [pc, #336]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d115      	bne.n	800407a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e09a      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d107      	bne.n	800406a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800405a:	4b4e      	ldr	r3, [pc, #312]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e08e      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800406a:	4b4a      	ldr	r3, [pc, #296]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e086      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800407a:	4b46      	ldr	r3, [pc, #280]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f023 0203 	bic.w	r2, r3, #3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4943      	ldr	r1, [pc, #268]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004088:	4313      	orrs	r3, r2
 800408a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7fe f81c 	bl	80020c8 <HAL_GetTick>
 8004090:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	e00a      	b.n	80040aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004094:	f7fe f818 	bl	80020c8 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e06e      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	4b3a      	ldr	r3, [pc, #232]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 020c 	and.w	r2, r3, #12
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d1eb      	bne.n	8004094 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d010      	beq.n	80040ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	4b31      	ldr	r3, [pc, #196]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d208      	bcs.n	80040ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d8:	4b2e      	ldr	r3, [pc, #184]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	492b      	ldr	r1, [pc, #172]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040ea:	4b29      	ldr	r3, [pc, #164]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d210      	bcs.n	800411a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f8:	4b25      	ldr	r3, [pc, #148]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 0207 	bic.w	r2, r3, #7
 8004100:	4923      	ldr	r1, [pc, #140]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	4313      	orrs	r3, r2
 8004106:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004108:	4b21      	ldr	r3, [pc, #132]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d001      	beq.n	800411a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e036      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	d008      	beq.n	8004138 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004126:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	4918      	ldr	r1, [pc, #96]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004134:	4313      	orrs	r3, r2
 8004136:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d009      	beq.n	8004158 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4910      	ldr	r1, [pc, #64]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004154:	4313      	orrs	r3, r2
 8004156:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004158:	f000 f824 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 800415c:	4602      	mov	r2, r0
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	490b      	ldr	r1, [pc, #44]	; (8004198 <HAL_RCC_ClockConfig+0x1f4>)
 800416a:	5ccb      	ldrb	r3, [r1, r3]
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
 8004174:	4a09      	ldr	r2, [pc, #36]	; (800419c <HAL_RCC_ClockConfig+0x1f8>)
 8004176:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <HAL_RCC_ClockConfig+0x1fc>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7fd ff53 	bl	8002028 <HAL_InitTick>
 8004182:	4603      	mov	r3, r0
 8004184:	72fb      	strb	r3, [r7, #11]

  return status;
 8004186:	7afb      	ldrb	r3, [r7, #11]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40022000 	.word	0x40022000
 8004194:	40021000 	.word	0x40021000
 8004198:	0800e178 	.word	0x0800e178
 800419c:	20000000 	.word	0x20000000
 80041a0:	20000004 	.word	0x20000004

080041a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b089      	sub	sp, #36	; 0x24
 80041a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	2300      	movs	r3, #0
 80041b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b2:	4b3e      	ldr	r3, [pc, #248]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041bc:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0x34>
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b0c      	cmp	r3, #12
 80041d0:	d121      	bne.n	8004216 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d11e      	bne.n	8004216 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041d8:	4b34      	ldr	r3, [pc, #208]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041e4:	4b31      	ldr	r3, [pc, #196]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 80041e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ea:	0a1b      	lsrs	r3, r3, #8
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e005      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041f4:	4b2d      	ldr	r3, [pc, #180]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004200:	4a2b      	ldr	r2, [pc, #172]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004208:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10d      	bne.n	800422c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004214:	e00a      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b04      	cmp	r3, #4
 800421a:	d102      	bne.n	8004222 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800421e:	61bb      	str	r3, [r7, #24]
 8004220:	e004      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b08      	cmp	r3, #8
 8004226:	d101      	bne.n	800422c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004228:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800422a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b0c      	cmp	r3, #12
 8004230:	d134      	bne.n	800429c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004232:	4b1e      	ldr	r3, [pc, #120]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d003      	beq.n	800424a <HAL_RCC_GetSysClockFreq+0xa6>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d003      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0xac>
 8004248:	e005      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800424a:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800424c:	617b      	str	r3, [r7, #20]
      break;
 800424e:	e005      	b.n	800425c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004250:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004252:	617b      	str	r3, [r7, #20]
      break;
 8004254:	e002      	b.n	800425c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	617b      	str	r3, [r7, #20]
      break;
 800425a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800425c:	4b13      	ldr	r3, [pc, #76]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	3301      	adds	r3, #1
 8004268:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	fb03 f202 	mul.w	r2, r3, r2
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004282:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	0e5b      	lsrs	r3, r3, #25
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	3301      	adds	r3, #1
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800429c:	69bb      	ldr	r3, [r7, #24]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3724      	adds	r7, #36	; 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000
 80042b0:	0800e190 	.word	0x0800e190
 80042b4:	00f42400 	.word	0x00f42400
 80042b8:	007a1200 	.word	0x007a1200

080042bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c0:	4b03      	ldr	r3, [pc, #12]	; (80042d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042c2:	681b      	ldr	r3, [r3, #0]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000000 	.word	0x20000000

080042d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042d8:	f7ff fff0 	bl	80042bc <HAL_RCC_GetHCLKFreq>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	4904      	ldr	r1, [pc, #16]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80042ea:	5ccb      	ldrb	r3, [r1, r3]
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40021000 	.word	0x40021000
 80042fc:	0800e188 	.word	0x0800e188

08004300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004304:	f7ff ffda 	bl	80042bc <HAL_RCC_GetHCLKFreq>
 8004308:	4602      	mov	r2, r0
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <HAL_RCC_GetPCLK2Freq+0x24>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	0adb      	lsrs	r3, r3, #11
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	4904      	ldr	r1, [pc, #16]	; (8004328 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004316:	5ccb      	ldrb	r3, [r1, r3]
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40021000 	.word	0x40021000
 8004328:	0800e188 	.word	0x0800e188

0800432c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004334:	2300      	movs	r3, #0
 8004336:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004338:	4b2a      	ldr	r3, [pc, #168]	; (80043e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004344:	f7ff f9ee 	bl	8003724 <HAL_PWREx_GetVoltageRange>
 8004348:	6178      	str	r0, [r7, #20]
 800434a:	e014      	b.n	8004376 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800434c:	4b25      	ldr	r3, [pc, #148]	; (80043e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	4a24      	ldr	r2, [pc, #144]	; (80043e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004356:	6593      	str	r3, [r2, #88]	; 0x58
 8004358:	4b22      	ldr	r3, [pc, #136]	; (80043e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004364:	f7ff f9de 	bl	8003724 <HAL_PWREx_GetVoltageRange>
 8004368:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800436a:	4b1e      	ldr	r3, [pc, #120]	; (80043e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800436c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436e:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004374:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437c:	d10b      	bne.n	8004396 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b80      	cmp	r3, #128	; 0x80
 8004382:	d919      	bls.n	80043b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2ba0      	cmp	r3, #160	; 0xa0
 8004388:	d902      	bls.n	8004390 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800438a:	2302      	movs	r3, #2
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	e013      	b.n	80043b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004390:	2301      	movs	r3, #1
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	e010      	b.n	80043b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b80      	cmp	r3, #128	; 0x80
 800439a:	d902      	bls.n	80043a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800439c:	2303      	movs	r3, #3
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	e00a      	b.n	80043b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b80      	cmp	r3, #128	; 0x80
 80043a6:	d102      	bne.n	80043ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043a8:	2302      	movs	r3, #2
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	e004      	b.n	80043b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b70      	cmp	r3, #112	; 0x70
 80043b2:	d101      	bne.n	80043b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043b4:	2301      	movs	r3, #1
 80043b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f023 0207 	bic.w	r2, r3, #7
 80043c0:	4909      	ldr	r1, [pc, #36]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043c8:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d001      	beq.n	80043da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40022000 	.word	0x40022000

080043ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043f4:	2300      	movs	r3, #0
 80043f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043f8:	2300      	movs	r3, #0
 80043fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004404:	2b00      	cmp	r3, #0
 8004406:	d041      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800440c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004410:	d02a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004412:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004416:	d824      	bhi.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004418:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800441c:	d008      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800441e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004422:	d81e      	bhi.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800442c:	d010      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800442e:	e018      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004430:	4b86      	ldr	r3, [pc, #536]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a85      	ldr	r2, [pc, #532]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800443c:	e015      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3304      	adds	r3, #4
 8004442:	2100      	movs	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fabb 	bl	80049c0 <RCCEx_PLLSAI1_Config>
 800444a:	4603      	mov	r3, r0
 800444c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800444e:	e00c      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3320      	adds	r3, #32
 8004454:	2100      	movs	r1, #0
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fba6 	bl	8004ba8 <RCCEx_PLLSAI2_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004460:	e003      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	74fb      	strb	r3, [r7, #19]
      break;
 8004466:	e000      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10b      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004470:	4b76      	ldr	r3, [pc, #472]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800447e:	4973      	ldr	r1, [pc, #460]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004486:	e001      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d041      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800449c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044a0:	d02a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80044a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044a6:	d824      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044ac:	d008      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044b2:	d81e      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80044b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044bc:	d010      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044be:	e018      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044c0:	4b62      	ldr	r3, [pc, #392]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	4a61      	ldr	r2, [pc, #388]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044cc:	e015      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3304      	adds	r3, #4
 80044d2:	2100      	movs	r1, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fa73 	bl	80049c0 <RCCEx_PLLSAI1_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044de:	e00c      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3320      	adds	r3, #32
 80044e4:	2100      	movs	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fb5e 	bl	8004ba8 <RCCEx_PLLSAI2_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044f0:	e003      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	74fb      	strb	r3, [r7, #19]
      break;
 80044f6:	e000      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80044f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fa:	7cfb      	ldrb	r3, [r7, #19]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10b      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004500:	4b52      	ldr	r3, [pc, #328]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800450e:	494f      	ldr	r1, [pc, #316]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004516:	e001      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004518:	7cfb      	ldrb	r3, [r7, #19]
 800451a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80a0 	beq.w	800466a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452a:	2300      	movs	r3, #0
 800452c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800452e:	4b47      	ldr	r3, [pc, #284]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800453e:	2300      	movs	r3, #0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00d      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004544:	4b41      	ldr	r3, [pc, #260]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004548:	4a40      	ldr	r2, [pc, #256]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454e:	6593      	str	r3, [r2, #88]	; 0x58
 8004550:	4b3e      	ldr	r3, [pc, #248]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455c:	2301      	movs	r3, #1
 800455e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004560:	4b3b      	ldr	r3, [pc, #236]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a3a      	ldr	r2, [pc, #232]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800456c:	f7fd fdac 	bl	80020c8 <HAL_GetTick>
 8004570:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004572:	e009      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004574:	f7fd fda8 	bl	80020c8 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d902      	bls.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	74fb      	strb	r3, [r7, #19]
        break;
 8004586:	e005      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004588:	4b31      	ldr	r3, [pc, #196]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0ef      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d15c      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800459a:	4b2c      	ldr	r3, [pc, #176]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01f      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d019      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045b8:	4b24      	ldr	r3, [pc, #144]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045c4:	4b21      	ldr	r3, [pc, #132]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	4a20      	ldr	r2, [pc, #128]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045d4:	4b1d      	ldr	r3, [pc, #116]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045da:	4a1c      	ldr	r2, [pc, #112]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045e4:	4a19      	ldr	r2, [pc, #100]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d016      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f6:	f7fd fd67 	bl	80020c8 <HAL_GetTick>
 80045fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fc:	e00b      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fd fd63 	bl	80020c8 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	; 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d902      	bls.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	74fb      	strb	r3, [r7, #19]
            break;
 8004614:	e006      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004616:	4b0d      	ldr	r3, [pc, #52]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0ec      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10c      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800463a:	4904      	ldr	r1, [pc, #16]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004642:	e009      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004644:	7cfb      	ldrb	r3, [r7, #19]
 8004646:	74bb      	strb	r3, [r7, #18]
 8004648:	e006      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000
 8004650:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004654:	7cfb      	ldrb	r3, [r7, #19]
 8004656:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004658:	7c7b      	ldrb	r3, [r7, #17]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d105      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800465e:	4b9e      	ldr	r3, [pc, #632]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004662:	4a9d      	ldr	r2, [pc, #628]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004668:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004676:	4b98      	ldr	r3, [pc, #608]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467c:	f023 0203 	bic.w	r2, r3, #3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	4994      	ldr	r1, [pc, #592]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004698:	4b8f      	ldr	r3, [pc, #572]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469e:	f023 020c 	bic.w	r2, r3, #12
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a6:	498c      	ldr	r1, [pc, #560]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ba:	4b87      	ldr	r3, [pc, #540]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	4983      	ldr	r1, [pc, #524]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046dc:	4b7e      	ldr	r3, [pc, #504]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	497b      	ldr	r1, [pc, #492]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046fe:	4b76      	ldr	r3, [pc, #472]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470c:	4972      	ldr	r1, [pc, #456]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004720:	4b6d      	ldr	r3, [pc, #436]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004726:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472e:	496a      	ldr	r1, [pc, #424]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004742:	4b65      	ldr	r3, [pc, #404]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004748:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004750:	4961      	ldr	r1, [pc, #388]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004764:	4b5c      	ldr	r3, [pc, #368]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004772:	4959      	ldr	r1, [pc, #356]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004786:	4b54      	ldr	r3, [pc, #336]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004794:	4950      	ldr	r1, [pc, #320]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047a8:	4b4b      	ldr	r3, [pc, #300]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	4948      	ldr	r1, [pc, #288]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ca:	4b43      	ldr	r3, [pc, #268]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d8:	493f      	ldr	r1, [pc, #252]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d028      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047ec:	4b3a      	ldr	r3, [pc, #232]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047fa:	4937      	ldr	r1, [pc, #220]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800480a:	d106      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800480c:	4b32      	ldr	r3, [pc, #200]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4a31      	ldr	r2, [pc, #196]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004816:	60d3      	str	r3, [r2, #12]
 8004818:	e011      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800481e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004822:	d10c      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3304      	adds	r3, #4
 8004828:	2101      	movs	r1, #1
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f8c8 	bl	80049c0 <RCCEx_PLLSAI1_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800483a:	7cfb      	ldrb	r3, [r7, #19]
 800483c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d028      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800484a:	4b23      	ldr	r3, [pc, #140]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	491f      	ldr	r1, [pc, #124]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004868:	d106      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800486a:	4b1b      	ldr	r3, [pc, #108]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	4a1a      	ldr	r2, [pc, #104]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004874:	60d3      	str	r3, [r2, #12]
 8004876:	e011      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004880:	d10c      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3304      	adds	r3, #4
 8004886:	2101      	movs	r1, #1
 8004888:	4618      	mov	r0, r3
 800488a:	f000 f899 	bl	80049c0 <RCCEx_PLLSAI1_Config>
 800488e:	4603      	mov	r3, r0
 8004890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004892:	7cfb      	ldrb	r3, [r7, #19]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004898:	7cfb      	ldrb	r3, [r7, #19]
 800489a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d02b      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048a8:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b6:	4908      	ldr	r1, [pc, #32]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c6:	d109      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048c8:	4b03      	ldr	r3, [pc, #12]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4a02      	ldr	r2, [pc, #8]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048d2:	60d3      	str	r3, [r2, #12]
 80048d4:	e014      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80048d6:	bf00      	nop
 80048d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e4:	d10c      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	2101      	movs	r1, #1
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 f867 	bl	80049c0 <RCCEx_PLLSAI1_Config>
 80048f2:	4603      	mov	r3, r0
 80048f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048f6:	7cfb      	ldrb	r3, [r7, #19]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d02f      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800490c:	4b2b      	ldr	r3, [pc, #172]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800491a:	4928      	ldr	r1, [pc, #160]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800492a:	d10d      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	2102      	movs	r1, #2
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f844 	bl	80049c0 <RCCEx_PLLSAI1_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800493c:	7cfb      	ldrb	r3, [r7, #19]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d014      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004942:	7cfb      	ldrb	r3, [r7, #19]
 8004944:	74bb      	strb	r3, [r7, #18]
 8004946:	e011      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800494c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004950:	d10c      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3320      	adds	r3, #32
 8004956:	2102      	movs	r1, #2
 8004958:	4618      	mov	r0, r3
 800495a:	f000 f925 	bl	8004ba8 <RCCEx_PLLSAI2_Config>
 800495e:	4603      	mov	r3, r0
 8004960:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004962:	7cfb      	ldrb	r3, [r7, #19]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004968:	7cfb      	ldrb	r3, [r7, #19]
 800496a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004978:	4b10      	ldr	r3, [pc, #64]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004986:	490d      	ldr	r1, [pc, #52]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800499a:	4b08      	ldr	r3, [pc, #32]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049aa:	4904      	ldr	r1, [pc, #16]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40021000 	.word	0x40021000

080049c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ce:	4b75      	ldr	r3, [pc, #468]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d018      	beq.n	8004a0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049da:	4b72      	ldr	r3, [pc, #456]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f003 0203 	and.w	r2, r3, #3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d10d      	bne.n	8004a06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
       ||
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049f2:	4b6c      	ldr	r3, [pc, #432]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
       ||
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d047      	beq.n	8004a96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
 8004a0a:	e044      	b.n	8004a96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d018      	beq.n	8004a46 <RCCEx_PLLSAI1_Config+0x86>
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d825      	bhi.n	8004a64 <RCCEx_PLLSAI1_Config+0xa4>
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d002      	beq.n	8004a22 <RCCEx_PLLSAI1_Config+0x62>
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d009      	beq.n	8004a34 <RCCEx_PLLSAI1_Config+0x74>
 8004a20:	e020      	b.n	8004a64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a22:	4b60      	ldr	r3, [pc, #384]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d11d      	bne.n	8004a6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a32:	e01a      	b.n	8004a6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a34:	4b5b      	ldr	r3, [pc, #364]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d116      	bne.n	8004a6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a44:	e013      	b.n	8004a6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a46:	4b57      	ldr	r3, [pc, #348]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10f      	bne.n	8004a72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a52:	4b54      	ldr	r3, [pc, #336]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a62:	e006      	b.n	8004a72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      break;
 8004a68:	e004      	b.n	8004a74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a6a:	bf00      	nop
 8004a6c:	e002      	b.n	8004a74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a6e:	bf00      	nop
 8004a70:	e000      	b.n	8004a74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a72:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10d      	bne.n	8004a96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a7a:	4b4a      	ldr	r3, [pc, #296]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6819      	ldr	r1, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	4944      	ldr	r1, [pc, #272]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d17d      	bne.n	8004b98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a9c:	4b41      	ldr	r3, [pc, #260]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a40      	ldr	r2, [pc, #256]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa8:	f7fd fb0e 	bl	80020c8 <HAL_GetTick>
 8004aac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004aae:	e009      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ab0:	f7fd fb0a 	bl	80020c8 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d902      	bls.n	8004ac4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ac2:	e005      	b.n	8004ad0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ac4:	4b37      	ldr	r3, [pc, #220]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1ef      	bne.n	8004ab0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d160      	bne.n	8004b98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d111      	bne.n	8004b00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004adc:	4b31      	ldr	r3, [pc, #196]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6892      	ldr	r2, [r2, #8]
 8004aec:	0211      	lsls	r1, r2, #8
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	68d2      	ldr	r2, [r2, #12]
 8004af2:	0912      	lsrs	r2, r2, #4
 8004af4:	0452      	lsls	r2, r2, #17
 8004af6:	430a      	orrs	r2, r1
 8004af8:	492a      	ldr	r1, [pc, #168]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	610b      	str	r3, [r1, #16]
 8004afe:	e027      	b.n	8004b50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d112      	bne.n	8004b2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b06:	4b27      	ldr	r3, [pc, #156]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6892      	ldr	r2, [r2, #8]
 8004b16:	0211      	lsls	r1, r2, #8
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6912      	ldr	r2, [r2, #16]
 8004b1c:	0852      	lsrs	r2, r2, #1
 8004b1e:	3a01      	subs	r2, #1
 8004b20:	0552      	lsls	r2, r2, #21
 8004b22:	430a      	orrs	r2, r1
 8004b24:	491f      	ldr	r1, [pc, #124]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	610b      	str	r3, [r1, #16]
 8004b2a:	e011      	b.n	8004b50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6892      	ldr	r2, [r2, #8]
 8004b3c:	0211      	lsls	r1, r2, #8
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6952      	ldr	r2, [r2, #20]
 8004b42:	0852      	lsrs	r2, r2, #1
 8004b44:	3a01      	subs	r2, #1
 8004b46:	0652      	lsls	r2, r2, #25
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	4916      	ldr	r1, [pc, #88]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b50:	4b14      	ldr	r3, [pc, #80]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5c:	f7fd fab4 	bl	80020c8 <HAL_GetTick>
 8004b60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b62:	e009      	b.n	8004b78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b64:	f7fd fab0 	bl	80020c8 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d902      	bls.n	8004b78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	73fb      	strb	r3, [r7, #15]
          break;
 8004b76:	e005      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0ef      	beq.n	8004b64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b8a:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	4904      	ldr	r1, [pc, #16]	; (8004ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40021000 	.word	0x40021000

08004ba8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bb6:	4b6a      	ldr	r3, [pc, #424]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d018      	beq.n	8004bf4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004bc2:	4b67      	ldr	r3, [pc, #412]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 0203 	and.w	r2, r3, #3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d10d      	bne.n	8004bee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
       ||
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004bda:	4b61      	ldr	r3, [pc, #388]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
       ||
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d047      	beq.n	8004c7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	73fb      	strb	r3, [r7, #15]
 8004bf2:	e044      	b.n	8004c7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d018      	beq.n	8004c2e <RCCEx_PLLSAI2_Config+0x86>
 8004bfc:	2b03      	cmp	r3, #3
 8004bfe:	d825      	bhi.n	8004c4c <RCCEx_PLLSAI2_Config+0xa4>
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d002      	beq.n	8004c0a <RCCEx_PLLSAI2_Config+0x62>
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d009      	beq.n	8004c1c <RCCEx_PLLSAI2_Config+0x74>
 8004c08:	e020      	b.n	8004c4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c0a:	4b55      	ldr	r3, [pc, #340]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d11d      	bne.n	8004c52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c1a:	e01a      	b.n	8004c52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c1c:	4b50      	ldr	r3, [pc, #320]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d116      	bne.n	8004c56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c2c:	e013      	b.n	8004c56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c2e:	4b4c      	ldr	r3, [pc, #304]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10f      	bne.n	8004c5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c3a:	4b49      	ldr	r3, [pc, #292]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c4a:	e006      	b.n	8004c5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c50:	e004      	b.n	8004c5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c52:	bf00      	nop
 8004c54:	e002      	b.n	8004c5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c56:	bf00      	nop
 8004c58:	e000      	b.n	8004c5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10d      	bne.n	8004c7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c62:	4b3f      	ldr	r3, [pc, #252]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6819      	ldr	r1, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	430b      	orrs	r3, r1
 8004c78:	4939      	ldr	r1, [pc, #228]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d167      	bne.n	8004d54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c84:	4b36      	ldr	r3, [pc, #216]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a35      	ldr	r2, [pc, #212]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c90:	f7fd fa1a 	bl	80020c8 <HAL_GetTick>
 8004c94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c96:	e009      	b.n	8004cac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c98:	f7fd fa16 	bl	80020c8 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d902      	bls.n	8004cac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	73fb      	strb	r3, [r7, #15]
        break;
 8004caa:	e005      	b.n	8004cb8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cac:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1ef      	bne.n	8004c98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d14a      	bne.n	8004d54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d111      	bne.n	8004ce8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cc4:	4b26      	ldr	r3, [pc, #152]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6892      	ldr	r2, [r2, #8]
 8004cd4:	0211      	lsls	r1, r2, #8
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	68d2      	ldr	r2, [r2, #12]
 8004cda:	0912      	lsrs	r2, r2, #4
 8004cdc:	0452      	lsls	r2, r2, #17
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	491f      	ldr	r1, [pc, #124]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	614b      	str	r3, [r1, #20]
 8004ce6:	e011      	b.n	8004d0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6892      	ldr	r2, [r2, #8]
 8004cf8:	0211      	lsls	r1, r2, #8
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6912      	ldr	r2, [r2, #16]
 8004cfe:	0852      	lsrs	r2, r2, #1
 8004d00:	3a01      	subs	r2, #1
 8004d02:	0652      	lsls	r2, r2, #25
 8004d04:	430a      	orrs	r2, r1
 8004d06:	4916      	ldr	r1, [pc, #88]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d0c:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a13      	ldr	r2, [pc, #76]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fd f9d6 	bl	80020c8 <HAL_GetTick>
 8004d1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d1e:	e009      	b.n	8004d34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d20:	f7fd f9d2 	bl	80020c8 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d902      	bls.n	8004d34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	73fb      	strb	r3, [r7, #15]
          break;
 8004d32:	e005      	b.n	8004d40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d34:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0ef      	beq.n	8004d20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d48:	695a      	ldr	r2, [r3, #20]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	4904      	ldr	r1, [pc, #16]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40021000 	.word	0x40021000

08004d64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e095      	b.n	8004ea2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d108      	bne.n	8004d90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d86:	d009      	beq.n	8004d9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	61da      	str	r2, [r3, #28]
 8004d8e:	e005      	b.n	8004d9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fc fe38 	bl	8001a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ddc:	d902      	bls.n	8004de4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	e002      	b.n	8004dea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004de8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004df2:	d007      	beq.n	8004e04 <HAL_SPI_Init+0xa0>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dfc:	d002      	beq.n	8004e04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e46:	ea42 0103 	orr.w	r1, r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	0c1b      	lsrs	r3, r3, #16
 8004e60:	f003 0204 	and.w	r2, r3, #4
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e80:	ea42 0103 	orr.w	r1, r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b088      	sub	sp, #32
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	603b      	str	r3, [r7, #0]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_SPI_Transmit+0x22>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e15f      	b.n	800518c <HAL_SPI_Transmit+0x2e2>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ed4:	f7fd f8f8 	bl	80020c8 <HAL_GetTick>
 8004ed8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d002      	beq.n	8004ef0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004eea:	2302      	movs	r3, #2
 8004eec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004eee:	e148      	b.n	8005182 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <HAL_SPI_Transmit+0x52>
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f00:	e13f      	b.n	8005182 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2203      	movs	r2, #3
 8004f06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	88fa      	ldrh	r2, [r7, #6]
 8004f1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	88fa      	ldrh	r2, [r7, #6]
 8004f20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4c:	d10f      	bne.n	8004f6e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d007      	beq.n	8004f8c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f94:	d94f      	bls.n	8005036 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_SPI_Transmit+0xfa>
 8004f9e:	8afb      	ldrh	r3, [r7, #22]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d142      	bne.n	800502a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa8:	881a      	ldrh	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	1c9a      	adds	r2, r3, #2
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004fc8:	e02f      	b.n	800502a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d112      	bne.n	8004ffe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	881a      	ldrh	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	1c9a      	adds	r2, r3, #2
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ffc:	e015      	b.n	800502a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ffe:	f7fd f863 	bl	80020c8 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d803      	bhi.n	8005016 <HAL_SPI_Transmit+0x16c>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005014:	d102      	bne.n	800501c <HAL_SPI_Transmit+0x172>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d106      	bne.n	800502a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005028:	e0ab      	b.n	8005182 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1ca      	bne.n	8004fca <HAL_SPI_Transmit+0x120>
 8005034:	e080      	b.n	8005138 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <HAL_SPI_Transmit+0x19a>
 800503e:	8afb      	ldrh	r3, [r7, #22]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d174      	bne.n	800512e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	d912      	bls.n	8005074 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	881a      	ldrh	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	1c9a      	adds	r2, r3, #2
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b02      	subs	r3, #2
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005072:	e05c      	b.n	800512e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	7812      	ldrb	r2, [r2, #0]
 8005080:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800509a:	e048      	b.n	800512e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d12b      	bne.n	8005102 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d912      	bls.n	80050da <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	881a      	ldrh	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	1c9a      	adds	r2, r3, #2
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b02      	subs	r3, #2
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050d8:	e029      	b.n	800512e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	330c      	adds	r3, #12
 80050e4:	7812      	ldrb	r2, [r2, #0]
 80050e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005100:	e015      	b.n	800512e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005102:	f7fc ffe1 	bl	80020c8 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d803      	bhi.n	800511a <HAL_SPI_Transmit+0x270>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d102      	bne.n	8005120 <HAL_SPI_Transmit+0x276>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d106      	bne.n	800512e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800512c:	e029      	b.n	8005182 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1b1      	bne.n	800509c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	6839      	ldr	r1, [r7, #0]
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 facd 	bl	80056dc <SPI_EndRxTxTransaction>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005156:	2300      	movs	r3, #0
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	613b      	str	r3, [r7, #16]
 800516a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	77fb      	strb	r3, [r7, #31]
 8005178:	e003      	b.n	8005182 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800518a:	7ffb      	ldrb	r3, [r7, #31]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3720      	adds	r7, #32
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	4613      	mov	r3, r2
 80051a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_SPI_Transmit_DMA+0x20>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e0d4      	b.n	800535e <HAL_SPI_Transmit_DMA+0x1ca>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d002      	beq.n	80051ce <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
 80051ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051cc:	e0c2      	b.n	8005354 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <HAL_SPI_Transmit_DMA+0x46>
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d102      	bne.n	80051e0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051de:	e0b9      	b.n	8005354 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2203      	movs	r2, #3
 80051e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	88fa      	ldrh	r2, [r7, #6]
 80051f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	88fa      	ldrh	r2, [r7, #6]
 80051fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522a:	d10f      	bne.n	800524c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800523a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800524a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005250:	4a45      	ldr	r2, [pc, #276]	; (8005368 <HAL_SPI_Transmit_DMA+0x1d4>)
 8005252:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005258:	4a44      	ldr	r2, [pc, #272]	; (800536c <HAL_SPI_Transmit_DMA+0x1d8>)
 800525a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005260:	4a43      	ldr	r2, [pc, #268]	; (8005370 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005262:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005268:	2200      	movs	r2, #0
 800526a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800527a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005284:	d82d      	bhi.n	80052e2 <HAL_SPI_Transmit_DMA+0x14e>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005290:	d127      	bne.n	80052e2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005296:	b29b      	uxth	r3, r3
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10f      	bne.n	80052c0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052ae:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	085b      	lsrs	r3, r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052be:	e010      	b.n	80052e2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ce:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	085b      	lsrs	r3, r3, #1
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3301      	adds	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	4619      	mov	r1, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80052fa:	f7fd f8df 	bl	80024bc <HAL_DMA_Start_IT>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005308:	f043 0210 	orr.w	r2, r3, #16
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005314:	e01e      	b.n	8005354 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005320:	2b40      	cmp	r3, #64	; 0x40
 8005322:	d007      	beq.n	8005334 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005332:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0220 	orr.w	r2, r2, #32
 8005342:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0202 	orr.w	r2, r2, #2
 8005352:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800535c:	7dfb      	ldrb	r3, [r7, #23]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	08005443 	.word	0x08005443
 800536c:	0800539d 	.word	0x0800539d
 8005370:	0800545f 	.word	0x0800545f

08005374 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053aa:	f7fc fe8d 	bl	80020c8 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	d03b      	beq.n	8005436 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0220 	bic.w	r2, r2, #32
 80053cc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0202 	bic.w	r2, r2, #2
 80053dc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	2164      	movs	r1, #100	; 0x64
 80053e2:	6978      	ldr	r0, [r7, #20]
 80053e4:	f000 f97a 	bl	80056dc <SPI_EndRxTxTransaction>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f2:	f043 0220 	orr.w	r2, r3, #32
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2200      	movs	r2, #0
 800541c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800542e:	6978      	ldr	r0, [r7, #20]
 8005430:	f7ff ffaa 	bl	8005388 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005434:	e002      	b.n	800543c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005436:	6978      	ldr	r0, [r7, #20]
 8005438:	f7fc f970 	bl	800171c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f7ff ff8f 	bl	8005374 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0203 	bic.w	r2, r2, #3
 800547a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005480:	f043 0210 	orr.w	r2, r3, #16
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f7ff ff79 	bl	8005388 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005496:	bf00      	nop
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054b0:	f7fc fe0a 	bl	80020c8 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	1a9b      	subs	r3, r3, r2
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	4413      	add	r3, r2
 80054be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054c0:	f7fc fe02 	bl	80020c8 <HAL_GetTick>
 80054c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054c6:	4b39      	ldr	r3, [pc, #228]	; (80055ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	015b      	lsls	r3, r3, #5
 80054cc:	0d1b      	lsrs	r3, r3, #20
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	fb02 f303 	mul.w	r3, r2, r3
 80054d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054d6:	e054      	b.n	8005582 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054de:	d050      	beq.n	8005582 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054e0:	f7fc fdf2 	bl	80020c8 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d902      	bls.n	80054f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d13d      	bne.n	8005572 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005504:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800550e:	d111      	bne.n	8005534 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005518:	d004      	beq.n	8005524 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005522:	d107      	bne.n	8005534 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005532:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800553c:	d10f      	bne.n	800555e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800555c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e017      	b.n	80055a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	3b01      	subs	r3, #1
 8005580:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4013      	ands	r3, r2
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	429a      	cmp	r2, r3
 8005590:	bf0c      	ite	eq
 8005592:	2301      	moveq	r3, #1
 8005594:	2300      	movne	r3, #0
 8005596:	b2db      	uxtb	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	429a      	cmp	r2, r3
 800559e:	d19b      	bne.n	80054d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3720      	adds	r7, #32
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	20000000 	.word	0x20000000

080055b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08a      	sub	sp, #40	; 0x28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80055c2:	f7fc fd81 	bl	80020c8 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	1a9b      	subs	r3, r3, r2
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	4413      	add	r3, r2
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80055d2:	f7fc fd79 	bl	80020c8 <HAL_GetTick>
 80055d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	330c      	adds	r3, #12
 80055de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80055e0:	4b3d      	ldr	r3, [pc, #244]	; (80056d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	00da      	lsls	r2, r3, #3
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	0d1b      	lsrs	r3, r3, #20
 80055f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f2:	fb02 f303 	mul.w	r3, r2, r3
 80055f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80055f8:	e060      	b.n	80056bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005600:	d107      	bne.n	8005612 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d104      	bne.n	8005612 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005610:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d050      	beq.n	80056bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800561a:	f7fc fd55 	bl	80020c8 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005626:	429a      	cmp	r2, r3
 8005628:	d902      	bls.n	8005630 <SPI_WaitFifoStateUntilTimeout+0x80>
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	2b00      	cmp	r3, #0
 800562e:	d13d      	bne.n	80056ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800563e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005648:	d111      	bne.n	800566e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005652:	d004      	beq.n	800565e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565c:	d107      	bne.n	800566e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800566c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005676:	d10f      	bne.n	8005698 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005696:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e010      	b.n	80056ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4013      	ands	r3, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d196      	bne.n	80055fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3728      	adds	r7, #40	; 0x28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000000 	.word	0x20000000

080056dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f7ff ff5b 	bl	80055b0 <SPI_WaitFifoStateUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d007      	beq.n	8005710 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005704:	f043 0220 	orr.w	r2, r3, #32
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e027      	b.n	8005760 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2200      	movs	r2, #0
 8005718:	2180      	movs	r1, #128	; 0x80
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f7ff fec0 	bl	80054a0 <SPI_WaitFlagStateUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800572a:	f043 0220 	orr.w	r2, r3, #32
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e014      	b.n	8005760 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2200      	movs	r2, #0
 800573e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f7ff ff34 	bl	80055b0 <SPI_WaitFifoStateUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d007      	beq.n	800575e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005752:	f043 0220 	orr.w	r2, r3, #32
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e000      	b.n	8005760 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e049      	b.n	800580e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fc fb56 	bl	8001e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3304      	adds	r3, #4
 80057a4:	4619      	mov	r1, r3
 80057a6:	4610      	mov	r0, r2
 80057a8:	f000 f9d0 	bl	8005b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b01      	cmp	r3, #1
 800582a:	d001      	beq.n	8005830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e04f      	b.n	80058d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a23      	ldr	r2, [pc, #140]	; (80058dc <HAL_TIM_Base_Start_IT+0xc4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d01d      	beq.n	800588e <HAL_TIM_Base_Start_IT+0x76>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585a:	d018      	beq.n	800588e <HAL_TIM_Base_Start_IT+0x76>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1f      	ldr	r2, [pc, #124]	; (80058e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <HAL_TIM_Base_Start_IT+0x76>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1e      	ldr	r2, [pc, #120]	; (80058e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00e      	beq.n	800588e <HAL_TIM_Base_Start_IT+0x76>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1c      	ldr	r2, [pc, #112]	; (80058e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d009      	beq.n	800588e <HAL_TIM_Base_Start_IT+0x76>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1b      	ldr	r2, [pc, #108]	; (80058ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d004      	beq.n	800588e <HAL_TIM_Base_Start_IT+0x76>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a19      	ldr	r2, [pc, #100]	; (80058f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d115      	bne.n	80058ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005896:	4013      	ands	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b06      	cmp	r3, #6
 800589e:	d015      	beq.n	80058cc <HAL_TIM_Base_Start_IT+0xb4>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a6:	d011      	beq.n	80058cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b8:	e008      	b.n	80058cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0201 	orr.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	e000      	b.n	80058ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	40012c00 	.word	0x40012c00
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	40013400 	.word	0x40013400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	00010007 	.word	0x00010007

080058f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d020      	beq.n	800595c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01b      	beq.n	800595c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0202 	mvn.w	r2, #2
 800592c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f8e4 	bl	8005b10 <HAL_TIM_IC_CaptureCallback>
 8005948:	e005      	b.n	8005956 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f8d6 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f8e7 	bl	8005b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	d020      	beq.n	80059a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01b      	beq.n	80059a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0204 	mvn.w	r2, #4
 8005978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2202      	movs	r2, #2
 800597e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f8be 	bl	8005b10 <HAL_TIM_IC_CaptureCallback>
 8005994:	e005      	b.n	80059a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f8b0 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f8c1 	bl	8005b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d020      	beq.n	80059f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01b      	beq.n	80059f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0208 	mvn.w	r2, #8
 80059c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2204      	movs	r2, #4
 80059ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f898 	bl	8005b10 <HAL_TIM_IC_CaptureCallback>
 80059e0:	e005      	b.n	80059ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f88a 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f89b 	bl	8005b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d020      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01b      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0210 	mvn.w	r2, #16
 8005a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2208      	movs	r2, #8
 8005a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f872 	bl	8005b10 <HAL_TIM_IC_CaptureCallback>
 8005a2c:	e005      	b.n	8005a3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f864 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f875 	bl	8005b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0201 	mvn.w	r2, #1
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fb fb22 	bl	80010a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00c      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f98e 	bl	8005da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00c      	beq.n	8005aac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f986 	bl	8005db8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00c      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f834 	bl	8005b38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00c      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0220 	mvn.w	r2, #32
 8005aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f94e 	bl	8005d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005af4:	bf00      	nop
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a40      	ldr	r2, [pc, #256]	; (8005c60 <TIM_Base_SetConfig+0x114>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d013      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6a:	d00f      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a3d      	ldr	r2, [pc, #244]	; (8005c64 <TIM_Base_SetConfig+0x118>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00b      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a3c      	ldr	r2, [pc, #240]	; (8005c68 <TIM_Base_SetConfig+0x11c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d007      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a3b      	ldr	r2, [pc, #236]	; (8005c6c <TIM_Base_SetConfig+0x120>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a3a      	ldr	r2, [pc, #232]	; (8005c70 <TIM_Base_SetConfig+0x124>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d108      	bne.n	8005b9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a2f      	ldr	r2, [pc, #188]	; (8005c60 <TIM_Base_SetConfig+0x114>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01f      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bac:	d01b      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a2c      	ldr	r2, [pc, #176]	; (8005c64 <TIM_Base_SetConfig+0x118>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d017      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a2b      	ldr	r2, [pc, #172]	; (8005c68 <TIM_Base_SetConfig+0x11c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d013      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a2a      	ldr	r2, [pc, #168]	; (8005c6c <TIM_Base_SetConfig+0x120>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00f      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a29      	ldr	r2, [pc, #164]	; (8005c70 <TIM_Base_SetConfig+0x124>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00b      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a28      	ldr	r2, [pc, #160]	; (8005c74 <TIM_Base_SetConfig+0x128>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d007      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a27      	ldr	r2, [pc, #156]	; (8005c78 <TIM_Base_SetConfig+0x12c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d003      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a26      	ldr	r2, [pc, #152]	; (8005c7c <TIM_Base_SetConfig+0x130>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d108      	bne.n	8005bf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a10      	ldr	r2, [pc, #64]	; (8005c60 <TIM_Base_SetConfig+0x114>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00f      	beq.n	8005c44 <TIM_Base_SetConfig+0xf8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a12      	ldr	r2, [pc, #72]	; (8005c70 <TIM_Base_SetConfig+0x124>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00b      	beq.n	8005c44 <TIM_Base_SetConfig+0xf8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a11      	ldr	r2, [pc, #68]	; (8005c74 <TIM_Base_SetConfig+0x128>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d007      	beq.n	8005c44 <TIM_Base_SetConfig+0xf8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a10      	ldr	r2, [pc, #64]	; (8005c78 <TIM_Base_SetConfig+0x12c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_Base_SetConfig+0xf8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a0f      	ldr	r2, [pc, #60]	; (8005c7c <TIM_Base_SetConfig+0x130>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d103      	bne.n	8005c4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	615a      	str	r2, [r3, #20]
}
 8005c52:	bf00      	nop
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40000400 	.word	0x40000400
 8005c68:	40000800 	.word	0x40000800
 8005c6c:	40000c00 	.word	0x40000c00
 8005c70:	40013400 	.word	0x40013400
 8005c74:	40014000 	.word	0x40014000
 8005c78:	40014400 	.word	0x40014400
 8005c7c:	40014800 	.word	0x40014800

08005c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e068      	b.n	8005d6a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a2e      	ldr	r2, [pc, #184]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d004      	beq.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a2d      	ldr	r2, [pc, #180]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d108      	bne.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a1e      	ldr	r2, [pc, #120]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01d      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0a:	d018      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1b      	ldr	r2, [pc, #108]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1a      	ldr	r2, [pc, #104]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00e      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a18      	ldr	r2, [pc, #96]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d009      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a13      	ldr	r2, [pc, #76]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d004      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a14      	ldr	r2, [pc, #80]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d10c      	bne.n	8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40012c00 	.word	0x40012c00
 8005d7c:	40013400 	.word	0x40013400
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40000800 	.word	0x40000800
 8005d88:	40000c00 	.word	0x40000c00
 8005d8c:	40014000 	.word	0x40014000

08005d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e040      	b.n	8005e60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7fc f87c 	bl	8001eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2224      	movs	r2, #36	; 0x24
 8005df8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0201 	bic.w	r2, r2, #1
 8005e08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fb6a 	bl	80064ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f8af 	bl	8005f7c <UART_SetConfig>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e01b      	b.n	8005e60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fbe9 	bl	8006630 <UART_CheckIdleState>
 8005e5e:	4603      	mov	r3, r0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	; 0x28
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	4613      	mov	r3, r2
 8005e76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d178      	bne.n	8005f72 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <HAL_UART_Transmit+0x24>
 8005e86:	88fb      	ldrh	r3, [r7, #6]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e071      	b.n	8005f74 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2221      	movs	r2, #33	; 0x21
 8005e9c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e9e:	f7fc f913 	bl	80020c8 <HAL_GetTick>
 8005ea2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	88fa      	ldrh	r2, [r7, #6]
 8005ea8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	88fa      	ldrh	r2, [r7, #6]
 8005eb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ebc:	d108      	bne.n	8005ed0 <HAL_UART_Transmit+0x68>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d104      	bne.n	8005ed0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	e003      	b.n	8005ed8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ed8:	e030      	b.n	8005f3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2180      	movs	r1, #128	; 0x80
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fc4b 	bl	8006780 <UART_WaitOnFlagUntilTimeout>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d004      	beq.n	8005efa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e03c      	b.n	8005f74 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10b      	bne.n	8005f18 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	881a      	ldrh	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f0c:	b292      	uxth	r2, r2
 8005f0e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	3302      	adds	r3, #2
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	e008      	b.n	8005f2a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	781a      	ldrb	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	b292      	uxth	r2, r2
 8005f22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	3301      	adds	r3, #1
 8005f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1c8      	bne.n	8005eda <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2140      	movs	r1, #64	; 0x40
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 fc14 	bl	8006780 <UART_WaitOnFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d004      	beq.n	8005f68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e005      	b.n	8005f74 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e000      	b.n	8005f74 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005f72:	2302      	movs	r3, #2
  }
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3720      	adds	r7, #32
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f80:	b08a      	sub	sp, #40	; 0x28
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	431a      	orrs	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	4ba4      	ldr	r3, [pc, #656]	; (800623c <UART_SetConfig+0x2c0>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a99      	ldr	r2, [pc, #612]	; (8006240 <UART_SetConfig+0x2c4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a90      	ldr	r2, [pc, #576]	; (8006244 <UART_SetConfig+0x2c8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d126      	bne.n	8006054 <UART_SetConfig+0xd8>
 8006006:	4b90      	ldr	r3, [pc, #576]	; (8006248 <UART_SetConfig+0x2cc>)
 8006008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	2b03      	cmp	r3, #3
 8006012:	d81b      	bhi.n	800604c <UART_SetConfig+0xd0>
 8006014:	a201      	add	r2, pc, #4	; (adr r2, 800601c <UART_SetConfig+0xa0>)
 8006016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601a:	bf00      	nop
 800601c:	0800602d 	.word	0x0800602d
 8006020:	0800603d 	.word	0x0800603d
 8006024:	08006035 	.word	0x08006035
 8006028:	08006045 	.word	0x08006045
 800602c:	2301      	movs	r3, #1
 800602e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006032:	e116      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006034:	2302      	movs	r3, #2
 8006036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800603a:	e112      	b.n	8006262 <UART_SetConfig+0x2e6>
 800603c:	2304      	movs	r3, #4
 800603e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006042:	e10e      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006044:	2308      	movs	r3, #8
 8006046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800604a:	e10a      	b.n	8006262 <UART_SetConfig+0x2e6>
 800604c:	2310      	movs	r3, #16
 800604e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006052:	e106      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a7c      	ldr	r2, [pc, #496]	; (800624c <UART_SetConfig+0x2d0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d138      	bne.n	80060d0 <UART_SetConfig+0x154>
 800605e:	4b7a      	ldr	r3, [pc, #488]	; (8006248 <UART_SetConfig+0x2cc>)
 8006060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006064:	f003 030c 	and.w	r3, r3, #12
 8006068:	2b0c      	cmp	r3, #12
 800606a:	d82d      	bhi.n	80060c8 <UART_SetConfig+0x14c>
 800606c:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <UART_SetConfig+0xf8>)
 800606e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006072:	bf00      	nop
 8006074:	080060a9 	.word	0x080060a9
 8006078:	080060c9 	.word	0x080060c9
 800607c:	080060c9 	.word	0x080060c9
 8006080:	080060c9 	.word	0x080060c9
 8006084:	080060b9 	.word	0x080060b9
 8006088:	080060c9 	.word	0x080060c9
 800608c:	080060c9 	.word	0x080060c9
 8006090:	080060c9 	.word	0x080060c9
 8006094:	080060b1 	.word	0x080060b1
 8006098:	080060c9 	.word	0x080060c9
 800609c:	080060c9 	.word	0x080060c9
 80060a0:	080060c9 	.word	0x080060c9
 80060a4:	080060c1 	.word	0x080060c1
 80060a8:	2300      	movs	r3, #0
 80060aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ae:	e0d8      	b.n	8006262 <UART_SetConfig+0x2e6>
 80060b0:	2302      	movs	r3, #2
 80060b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060b6:	e0d4      	b.n	8006262 <UART_SetConfig+0x2e6>
 80060b8:	2304      	movs	r3, #4
 80060ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060be:	e0d0      	b.n	8006262 <UART_SetConfig+0x2e6>
 80060c0:	2308      	movs	r3, #8
 80060c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060c6:	e0cc      	b.n	8006262 <UART_SetConfig+0x2e6>
 80060c8:	2310      	movs	r3, #16
 80060ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ce:	e0c8      	b.n	8006262 <UART_SetConfig+0x2e6>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a5e      	ldr	r2, [pc, #376]	; (8006250 <UART_SetConfig+0x2d4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d125      	bne.n	8006126 <UART_SetConfig+0x1aa>
 80060da:	4b5b      	ldr	r3, [pc, #364]	; (8006248 <UART_SetConfig+0x2cc>)
 80060dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060e4:	2b30      	cmp	r3, #48	; 0x30
 80060e6:	d016      	beq.n	8006116 <UART_SetConfig+0x19a>
 80060e8:	2b30      	cmp	r3, #48	; 0x30
 80060ea:	d818      	bhi.n	800611e <UART_SetConfig+0x1a2>
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d00a      	beq.n	8006106 <UART_SetConfig+0x18a>
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d814      	bhi.n	800611e <UART_SetConfig+0x1a2>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <UART_SetConfig+0x182>
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d008      	beq.n	800610e <UART_SetConfig+0x192>
 80060fc:	e00f      	b.n	800611e <UART_SetConfig+0x1a2>
 80060fe:	2300      	movs	r3, #0
 8006100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006104:	e0ad      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006106:	2302      	movs	r3, #2
 8006108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800610c:	e0a9      	b.n	8006262 <UART_SetConfig+0x2e6>
 800610e:	2304      	movs	r3, #4
 8006110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006114:	e0a5      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006116:	2308      	movs	r3, #8
 8006118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800611c:	e0a1      	b.n	8006262 <UART_SetConfig+0x2e6>
 800611e:	2310      	movs	r3, #16
 8006120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006124:	e09d      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a4a      	ldr	r2, [pc, #296]	; (8006254 <UART_SetConfig+0x2d8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d125      	bne.n	800617c <UART_SetConfig+0x200>
 8006130:	4b45      	ldr	r3, [pc, #276]	; (8006248 <UART_SetConfig+0x2cc>)
 8006132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006136:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800613a:	2bc0      	cmp	r3, #192	; 0xc0
 800613c:	d016      	beq.n	800616c <UART_SetConfig+0x1f0>
 800613e:	2bc0      	cmp	r3, #192	; 0xc0
 8006140:	d818      	bhi.n	8006174 <UART_SetConfig+0x1f8>
 8006142:	2b80      	cmp	r3, #128	; 0x80
 8006144:	d00a      	beq.n	800615c <UART_SetConfig+0x1e0>
 8006146:	2b80      	cmp	r3, #128	; 0x80
 8006148:	d814      	bhi.n	8006174 <UART_SetConfig+0x1f8>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <UART_SetConfig+0x1d8>
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d008      	beq.n	8006164 <UART_SetConfig+0x1e8>
 8006152:	e00f      	b.n	8006174 <UART_SetConfig+0x1f8>
 8006154:	2300      	movs	r3, #0
 8006156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800615a:	e082      	b.n	8006262 <UART_SetConfig+0x2e6>
 800615c:	2302      	movs	r3, #2
 800615e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006162:	e07e      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006164:	2304      	movs	r3, #4
 8006166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800616a:	e07a      	b.n	8006262 <UART_SetConfig+0x2e6>
 800616c:	2308      	movs	r3, #8
 800616e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006172:	e076      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006174:	2310      	movs	r3, #16
 8006176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800617a:	e072      	b.n	8006262 <UART_SetConfig+0x2e6>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a35      	ldr	r2, [pc, #212]	; (8006258 <UART_SetConfig+0x2dc>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d12a      	bne.n	80061dc <UART_SetConfig+0x260>
 8006186:	4b30      	ldr	r3, [pc, #192]	; (8006248 <UART_SetConfig+0x2cc>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006194:	d01a      	beq.n	80061cc <UART_SetConfig+0x250>
 8006196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800619a:	d81b      	bhi.n	80061d4 <UART_SetConfig+0x258>
 800619c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a0:	d00c      	beq.n	80061bc <UART_SetConfig+0x240>
 80061a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a6:	d815      	bhi.n	80061d4 <UART_SetConfig+0x258>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <UART_SetConfig+0x238>
 80061ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b0:	d008      	beq.n	80061c4 <UART_SetConfig+0x248>
 80061b2:	e00f      	b.n	80061d4 <UART_SetConfig+0x258>
 80061b4:	2300      	movs	r3, #0
 80061b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ba:	e052      	b.n	8006262 <UART_SetConfig+0x2e6>
 80061bc:	2302      	movs	r3, #2
 80061be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061c2:	e04e      	b.n	8006262 <UART_SetConfig+0x2e6>
 80061c4:	2304      	movs	r3, #4
 80061c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ca:	e04a      	b.n	8006262 <UART_SetConfig+0x2e6>
 80061cc:	2308      	movs	r3, #8
 80061ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061d2:	e046      	b.n	8006262 <UART_SetConfig+0x2e6>
 80061d4:	2310      	movs	r3, #16
 80061d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061da:	e042      	b.n	8006262 <UART_SetConfig+0x2e6>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a17      	ldr	r2, [pc, #92]	; (8006240 <UART_SetConfig+0x2c4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d13a      	bne.n	800625c <UART_SetConfig+0x2e0>
 80061e6:	4b18      	ldr	r3, [pc, #96]	; (8006248 <UART_SetConfig+0x2cc>)
 80061e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061f4:	d01a      	beq.n	800622c <UART_SetConfig+0x2b0>
 80061f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061fa:	d81b      	bhi.n	8006234 <UART_SetConfig+0x2b8>
 80061fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006200:	d00c      	beq.n	800621c <UART_SetConfig+0x2a0>
 8006202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006206:	d815      	bhi.n	8006234 <UART_SetConfig+0x2b8>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <UART_SetConfig+0x298>
 800620c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006210:	d008      	beq.n	8006224 <UART_SetConfig+0x2a8>
 8006212:	e00f      	b.n	8006234 <UART_SetConfig+0x2b8>
 8006214:	2300      	movs	r3, #0
 8006216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800621a:	e022      	b.n	8006262 <UART_SetConfig+0x2e6>
 800621c:	2302      	movs	r3, #2
 800621e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006222:	e01e      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006224:	2304      	movs	r3, #4
 8006226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800622a:	e01a      	b.n	8006262 <UART_SetConfig+0x2e6>
 800622c:	2308      	movs	r3, #8
 800622e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006232:	e016      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006234:	2310      	movs	r3, #16
 8006236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800623a:	e012      	b.n	8006262 <UART_SetConfig+0x2e6>
 800623c:	efff69f3 	.word	0xefff69f3
 8006240:	40008000 	.word	0x40008000
 8006244:	40013800 	.word	0x40013800
 8006248:	40021000 	.word	0x40021000
 800624c:	40004400 	.word	0x40004400
 8006250:	40004800 	.word	0x40004800
 8006254:	40004c00 	.word	0x40004c00
 8006258:	40005000 	.word	0x40005000
 800625c:	2310      	movs	r3, #16
 800625e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a9f      	ldr	r2, [pc, #636]	; (80064e4 <UART_SetConfig+0x568>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d17a      	bne.n	8006362 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800626c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006270:	2b08      	cmp	r3, #8
 8006272:	d824      	bhi.n	80062be <UART_SetConfig+0x342>
 8006274:	a201      	add	r2, pc, #4	; (adr r2, 800627c <UART_SetConfig+0x300>)
 8006276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627a:	bf00      	nop
 800627c:	080062a1 	.word	0x080062a1
 8006280:	080062bf 	.word	0x080062bf
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062bf 	.word	0x080062bf
 800628c:	080062af 	.word	0x080062af
 8006290:	080062bf 	.word	0x080062bf
 8006294:	080062bf 	.word	0x080062bf
 8006298:	080062bf 	.word	0x080062bf
 800629c:	080062b7 	.word	0x080062b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a0:	f7fe f818 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 80062a4:	61f8      	str	r0, [r7, #28]
        break;
 80062a6:	e010      	b.n	80062ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a8:	4b8f      	ldr	r3, [pc, #572]	; (80064e8 <UART_SetConfig+0x56c>)
 80062aa:	61fb      	str	r3, [r7, #28]
        break;
 80062ac:	e00d      	b.n	80062ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ae:	f7fd ff79 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 80062b2:	61f8      	str	r0, [r7, #28]
        break;
 80062b4:	e009      	b.n	80062ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ba:	61fb      	str	r3, [r7, #28]
        break;
 80062bc:	e005      	b.n	80062ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80062c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 80fb 	beq.w	80064c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	4413      	add	r3, r2
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d305      	bcc.n	80062ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d903      	bls.n	80062f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062f4:	e0e8      	b.n	80064c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	2200      	movs	r2, #0
 80062fa:	461c      	mov	r4, r3
 80062fc:	4615      	mov	r5, r2
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	022b      	lsls	r3, r5, #8
 8006308:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800630c:	0222      	lsls	r2, r4, #8
 800630e:	68f9      	ldr	r1, [r7, #12]
 8006310:	6849      	ldr	r1, [r1, #4]
 8006312:	0849      	lsrs	r1, r1, #1
 8006314:	2000      	movs	r0, #0
 8006316:	4688      	mov	r8, r1
 8006318:	4681      	mov	r9, r0
 800631a:	eb12 0a08 	adds.w	sl, r2, r8
 800631e:	eb43 0b09 	adc.w	fp, r3, r9
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006330:	4650      	mov	r0, sl
 8006332:	4659      	mov	r1, fp
 8006334:	f7fa fc88 	bl	8000c48 <__aeabi_uldivmod>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	4613      	mov	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006346:	d308      	bcc.n	800635a <UART_SetConfig+0x3de>
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800634e:	d204      	bcs.n	800635a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	60da      	str	r2, [r3, #12]
 8006358:	e0b6      	b.n	80064c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006360:	e0b2      	b.n	80064c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800636a:	d15e      	bne.n	800642a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800636c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006370:	2b08      	cmp	r3, #8
 8006372:	d828      	bhi.n	80063c6 <UART_SetConfig+0x44a>
 8006374:	a201      	add	r2, pc, #4	; (adr r2, 800637c <UART_SetConfig+0x400>)
 8006376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637a:	bf00      	nop
 800637c:	080063a1 	.word	0x080063a1
 8006380:	080063a9 	.word	0x080063a9
 8006384:	080063b1 	.word	0x080063b1
 8006388:	080063c7 	.word	0x080063c7
 800638c:	080063b7 	.word	0x080063b7
 8006390:	080063c7 	.word	0x080063c7
 8006394:	080063c7 	.word	0x080063c7
 8006398:	080063c7 	.word	0x080063c7
 800639c:	080063bf 	.word	0x080063bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063a0:	f7fd ff98 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 80063a4:	61f8      	str	r0, [r7, #28]
        break;
 80063a6:	e014      	b.n	80063d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063a8:	f7fd ffaa 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 80063ac:	61f8      	str	r0, [r7, #28]
        break;
 80063ae:	e010      	b.n	80063d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063b0:	4b4d      	ldr	r3, [pc, #308]	; (80064e8 <UART_SetConfig+0x56c>)
 80063b2:	61fb      	str	r3, [r7, #28]
        break;
 80063b4:	e00d      	b.n	80063d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063b6:	f7fd fef5 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 80063ba:	61f8      	str	r0, [r7, #28]
        break;
 80063bc:	e009      	b.n	80063d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063c2:	61fb      	str	r3, [r7, #28]
        break;
 80063c4:	e005      	b.n	80063d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80063d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d077      	beq.n	80064c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	005a      	lsls	r2, r3, #1
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	085b      	lsrs	r3, r3, #1
 80063e2:	441a      	add	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2b0f      	cmp	r3, #15
 80063f2:	d916      	bls.n	8006422 <UART_SetConfig+0x4a6>
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063fa:	d212      	bcs.n	8006422 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f023 030f 	bic.w	r3, r3, #15
 8006404:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	085b      	lsrs	r3, r3, #1
 800640a:	b29b      	uxth	r3, r3
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	b29a      	uxth	r2, r3
 8006412:	8afb      	ldrh	r3, [r7, #22]
 8006414:	4313      	orrs	r3, r2
 8006416:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	8afa      	ldrh	r2, [r7, #22]
 800641e:	60da      	str	r2, [r3, #12]
 8006420:	e052      	b.n	80064c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006428:	e04e      	b.n	80064c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800642a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800642e:	2b08      	cmp	r3, #8
 8006430:	d827      	bhi.n	8006482 <UART_SetConfig+0x506>
 8006432:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <UART_SetConfig+0x4bc>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	0800645d 	.word	0x0800645d
 800643c:	08006465 	.word	0x08006465
 8006440:	0800646d 	.word	0x0800646d
 8006444:	08006483 	.word	0x08006483
 8006448:	08006473 	.word	0x08006473
 800644c:	08006483 	.word	0x08006483
 8006450:	08006483 	.word	0x08006483
 8006454:	08006483 	.word	0x08006483
 8006458:	0800647b 	.word	0x0800647b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800645c:	f7fd ff3a 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 8006460:	61f8      	str	r0, [r7, #28]
        break;
 8006462:	e014      	b.n	800648e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006464:	f7fd ff4c 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 8006468:	61f8      	str	r0, [r7, #28]
        break;
 800646a:	e010      	b.n	800648e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800646c:	4b1e      	ldr	r3, [pc, #120]	; (80064e8 <UART_SetConfig+0x56c>)
 800646e:	61fb      	str	r3, [r7, #28]
        break;
 8006470:	e00d      	b.n	800648e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006472:	f7fd fe97 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8006476:	61f8      	str	r0, [r7, #28]
        break;
 8006478:	e009      	b.n	800648e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800647a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800647e:	61fb      	str	r3, [r7, #28]
        break;
 8006480:	e005      	b.n	800648e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800648c:	bf00      	nop
    }

    if (pclk != 0U)
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d019      	beq.n	80064c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	085a      	lsrs	r2, r3, #1
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	441a      	add	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	2b0f      	cmp	r3, #15
 80064ac:	d909      	bls.n	80064c2 <UART_SetConfig+0x546>
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b4:	d205      	bcs.n	80064c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60da      	str	r2, [r3, #12]
 80064c0:	e002      	b.n	80064c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80064d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3728      	adds	r7, #40	; 0x28
 80064dc:	46bd      	mov	sp, r7
 80064de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e2:	bf00      	nop
 80064e4:	40008000 	.word	0x40008000
 80064e8:	00f42400 	.word	0x00f42400

080064ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	f003 0308 	and.w	r3, r3, #8
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00a      	beq.n	8006516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00a      	beq.n	800655a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	f003 0310 	and.w	r3, r3, #16
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00a      	beq.n	800659e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01a      	beq.n	8006602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ea:	d10a      	bne.n	8006602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	605a      	str	r2, [r3, #4]
  }
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b098      	sub	sp, #96	; 0x60
 8006634:	af02      	add	r7, sp, #8
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006640:	f7fb fd42 	bl	80020c8 <HAL_GetTick>
 8006644:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0308 	and.w	r3, r3, #8
 8006650:	2b08      	cmp	r3, #8
 8006652:	d12e      	bne.n	80066b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800665c:	2200      	movs	r2, #0
 800665e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f88c 	bl	8006780 <UART_WaitOnFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d021      	beq.n	80066b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800667c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006682:	653b      	str	r3, [r7, #80]	; 0x50
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800668c:	647b      	str	r3, [r7, #68]	; 0x44
 800668e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800669a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e6      	bne.n	800666e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e062      	b.n	8006778 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d149      	bne.n	8006754 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066c8:	2200      	movs	r2, #0
 80066ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f856 	bl	8006780 <UART_WaitOnFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d03c      	beq.n	8006754 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	623b      	str	r3, [r7, #32]
   return(result);
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	461a      	mov	r2, r3
 80066f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f8:	633b      	str	r3, [r7, #48]	; 0x30
 80066fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e6      	bne.n	80066da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3308      	adds	r3, #8
 8006712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	e853 3f00 	ldrex	r3, [r3]
 800671a:	60fb      	str	r3, [r7, #12]
   return(result);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 0301 	bic.w	r3, r3, #1
 8006722:	64bb      	str	r3, [r7, #72]	; 0x48
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3308      	adds	r3, #8
 800672a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800672c:	61fa      	str	r2, [r7, #28]
 800672e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006730:	69b9      	ldr	r1, [r7, #24]
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	e841 2300 	strex	r3, r2, [r1]
 8006738:	617b      	str	r3, [r7, #20]
   return(result);
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e5      	bne.n	800670c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e011      	b.n	8006778 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2220      	movs	r2, #32
 8006758:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3758      	adds	r7, #88	; 0x58
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	4613      	mov	r3, r2
 800678e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006790:	e049      	b.n	8006826 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006798:	d045      	beq.n	8006826 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800679a:	f7fb fc95 	bl	80020c8 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d302      	bcc.n	80067b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e048      	b.n	8006846 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0304 	and.w	r3, r3, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d031      	beq.n	8006826 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	f003 0308 	and.w	r3, r3, #8
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d110      	bne.n	80067f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2208      	movs	r2, #8
 80067d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 f838 	bl	800684e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2208      	movs	r2, #8
 80067e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e029      	b.n	8006846 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006800:	d111      	bne.n	8006826 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800680a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 f81e 	bl	800684e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2220      	movs	r2, #32
 8006816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e00f      	b.n	8006846 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69da      	ldr	r2, [r3, #28]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	4013      	ands	r3, r2
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	429a      	cmp	r2, r3
 8006834:	bf0c      	ite	eq
 8006836:	2301      	moveq	r3, #1
 8006838:	2300      	movne	r3, #0
 800683a:	b2db      	uxtb	r3, r3
 800683c:	461a      	mov	r2, r3
 800683e:	79fb      	ldrb	r3, [r7, #7]
 8006840:	429a      	cmp	r2, r3
 8006842:	d0a6      	beq.n	8006792 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800684e:	b480      	push	{r7}
 8006850:	b095      	sub	sp, #84	; 0x54
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800686a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	461a      	mov	r2, r3
 8006872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006874:	643b      	str	r3, [r7, #64]	; 0x40
 8006876:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800687a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e6      	bne.n	8006856 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3308      	adds	r3, #8
 800688e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	61fb      	str	r3, [r7, #28]
   return(result);
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	f023 0301 	bic.w	r3, r3, #1
 800689e:	64bb      	str	r3, [r7, #72]	; 0x48
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3308      	adds	r3, #8
 80068a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e5      	bne.n	8006888 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d118      	bne.n	80068f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f023 0310 	bic.w	r3, r3, #16
 80068d8:	647b      	str	r3, [r7, #68]	; 0x44
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e2:	61bb      	str	r3, [r7, #24]
 80068e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	6979      	ldr	r1, [r7, #20]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	e841 2300 	strex	r3, r2, [r1]
 80068ee:	613b      	str	r3, [r7, #16]
   return(result);
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e6      	bne.n	80068c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	669a      	str	r2, [r3, #104]	; 0x68
}
 800690a:	bf00      	nop
 800690c:	3754      	adds	r7, #84	; 0x54
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	881a      	ldrh	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	799b      	ldrb	r3, [r3, #6]
 8006928:	08db      	lsrs	r3, r3, #3
 800692a:	b2db      	uxtb	r3, r3
 800692c:	b29b      	uxth	r3, r3
 800692e:	fb12 f303 	smulbb	r3, r2, r3
 8006932:	b29a      	uxth	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	889b      	ldrh	r3, [r3, #4]
 800693c:	461a      	mov	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	885b      	ldrh	r3, [r3, #2]
 8006942:	fb02 f303 	mul.w	r3, r2, r3
 8006946:	461a      	mov	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	60da      	str	r2, [r3, #12]
}
 8006952:	bf00      	nop
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 800695e:	b490      	push	{r4, r7}
 8006960:	b086      	sub	sp, #24
 8006962:	af00      	add	r7, sp, #0
 8006964:	4604      	mov	r4, r0
 8006966:	4608      	mov	r0, r1
 8006968:	1d39      	adds	r1, r7, #4
 800696a:	e881 000c 	stmia.w	r1, {r2, r3}
 800696e:	4623      	mov	r3, r4
 8006970:	81fb      	strh	r3, [r7, #14]
 8006972:	4603      	mov	r3, r0
 8006974:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8006976:	2300      	movs	r3, #0
 8006978:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 800697a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800697e:	88ba      	ldrh	r2, [r7, #4]
 8006980:	4293      	cmp	r3, r2
 8006982:	da04      	bge.n	800698e <code+0x30>
        code |= LEFT;
 8006984:	2201      	movs	r2, #1
 8006986:	7dfb      	ldrb	r3, [r7, #23]
 8006988:	4313      	orrs	r3, r2
 800698a:	75fb      	strb	r3, [r7, #23]
 800698c:	e008      	b.n	80069a0 <code+0x42>
    } else if (x0 > window.x1) {
 800698e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006992:	893a      	ldrh	r2, [r7, #8]
 8006994:	4293      	cmp	r3, r2
 8006996:	dd03      	ble.n	80069a0 <code+0x42>
        code |= RIGHT;
 8006998:	2202      	movs	r2, #2
 800699a:	7dfb      	ldrb	r3, [r7, #23]
 800699c:	4313      	orrs	r3, r2
 800699e:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 80069a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069a4:	88fa      	ldrh	r2, [r7, #6]
 80069a6:	4293      	cmp	r3, r2
 80069a8:	da04      	bge.n	80069b4 <code+0x56>
        code |= BOTTOM;
 80069aa:	2204      	movs	r2, #4
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	75fb      	strb	r3, [r7, #23]
 80069b2:	e008      	b.n	80069c6 <code+0x68>
    } else if (y0 > window.y1) {
 80069b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069b8:	897a      	ldrh	r2, [r7, #10]
 80069ba:	4293      	cmp	r3, r2
 80069bc:	dd03      	ble.n	80069c6 <code+0x68>
        code |= TOP;
 80069be:	2208      	movs	r2, #8
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 80069c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc90      	pop	{r4, r7}
 80069d0:	4770      	bx	lr

080069d2 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b088      	sub	sp, #32
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	607a      	str	r2, [r7, #4]
 80069de:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80069ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069f0:	cb0c      	ldmia	r3, {r2, r3}
 80069f2:	f7ff ffb4 	bl	800695e <code>
 80069f6:	4603      	mov	r3, r0
 80069f8:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a0a:	cb0c      	ldmia	r3, {r2, r3}
 8006a0c:	f7ff ffa7 	bl	800695e <code>
 8006a10:	4603      	mov	r3, r0
 8006a12:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8006a14:	2300      	movs	r3, #0
 8006a16:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8006a18:	7ffa      	ldrb	r2, [r7, #31]
 8006a1a:	7fbb      	ldrb	r3, [r7, #30]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d102      	bne.n	8006a2a <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8006a24:	2301      	movs	r3, #1
 8006a26:	777b      	strb	r3, [r7, #29]
            break;
 8006a28:	e0e9      	b.n	8006bfe <clip_line+0x22c>
        } else if (code0 & code1) {
 8006a2a:	7ffa      	ldrb	r2, [r7, #31]
 8006a2c:	7fbb      	ldrb	r3, [r7, #30]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f040 80e2 	bne.w	8006bfc <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006a40:	7ffb      	ldrb	r3, [r7, #31]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <clip_line+0x78>
 8006a46:	7ffb      	ldrb	r3, [r7, #31]
 8006a48:	e000      	b.n	8006a4c <clip_line+0x7a>
 8006a4a:	7fbb      	ldrb	r3, [r7, #30]
 8006a4c:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006a4e:	2208      	movs	r2, #8
 8006a50:	7dfb      	ldrb	r3, [r7, #23]
 8006a52:	4013      	ands	r3, r2
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d024      	beq.n	8006aa4 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a70:	1acb      	subs	r3, r1, r3
 8006a72:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8006a74:	4608      	mov	r0, r1
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006a7c:	1a41      	subs	r1, r0, r1
 8006a7e:	fb03 f101 	mul.w	r1, r3, r1
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a90:	1ac3      	subs	r3, r0, r3
 8006a92:	fb91 f3f3 	sdiv	r3, r1, r3
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	4413      	add	r3, r2
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006a9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006aa0:	833b      	strh	r3, [r7, #24]
 8006aa2:	e07f      	b.n	8006ba4 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8006aa4:	2204      	movs	r2, #4
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d024      	beq.n	8006afa <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ac6:	1acb      	subs	r3, r1, r3
 8006ac8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8006aca:	4608      	mov	r0, r1
 8006acc:	68b9      	ldr	r1, [r7, #8]
 8006ace:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006ad2:	1a41      	subs	r1, r0, r1
 8006ad4:	fb03 f101 	mul.w	r1, r3, r1
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ae6:	1ac3      	subs	r3, r0, r3
 8006ae8:	fb91 f3f3 	sdiv	r3, r1, r3
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	4413      	add	r3, r2
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8006af4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006af6:	833b      	strh	r3, [r7, #24]
 8006af8:	e054      	b.n	8006ba4 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006afa:	2202      	movs	r2, #2
 8006afc:	7dfb      	ldrb	r3, [r7, #23]
 8006afe:	4013      	ands	r3, r2
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d024      	beq.n	8006b50 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b14:	4619      	mov	r1, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b1c:	1acb      	subs	r3, r1, r3
 8006b1e:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8006b20:	4608      	mov	r0, r1
 8006b22:	68f9      	ldr	r1, [r7, #12]
 8006b24:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006b28:	1a41      	subs	r1, r0, r1
 8006b2a:	fb03 f101 	mul.w	r1, r3, r1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b34:	4618      	mov	r0, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b3c:	1ac3      	subs	r3, r0, r3
 8006b3e:	fb91 f3f3 	sdiv	r3, r1, r3
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	4413      	add	r3, r2
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006b4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b4c:	837b      	strh	r3, [r7, #26]
 8006b4e:	e029      	b.n	8006ba4 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006b50:	2201      	movs	r2, #1
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
 8006b54:	4013      	ands	r3, r2
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d023      	beq.n	8006ba4 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b72:	1acb      	subs	r3, r1, r3
 8006b74:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8006b76:	4608      	mov	r0, r1
 8006b78:	68f9      	ldr	r1, [r7, #12]
 8006b7a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006b7e:	1a41      	subs	r1, r0, r1
 8006b80:	fb03 f101 	mul.w	r1, r3, r1
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b92:	1ac3      	subs	r3, r0, r3
 8006b94:	fb91 f3f3 	sdiv	r3, r1, r3
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	4413      	add	r3, r2
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006ba0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ba2:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006ba4:	7dfa      	ldrb	r2, [r7, #23]
 8006ba6:	7ffb      	ldrb	r3, [r7, #31]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d113      	bne.n	8006bd4 <clip_line+0x202>
                *x0 = x;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8b7a      	ldrh	r2, [r7, #26]
 8006bb0:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	8b3a      	ldrh	r2, [r7, #24]
 8006bb6:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006bc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bc8:	cb0c      	ldmia	r3, {r2, r3}
 8006bca:	f7ff fec8 	bl	800695e <code>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	77fb      	strb	r3, [r7, #31]
 8006bd2:	e721      	b.n	8006a18 <clip_line+0x46>
            } else {
                *x1 = x;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8b7a      	ldrh	r2, [r7, #26]
 8006bd8:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	8b3a      	ldrh	r2, [r7, #24]
 8006bde:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006bec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bf0:	cb0c      	ldmia	r3, {r2, r3}
 8006bf2:	f7ff feb4 	bl	800695e <code>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8006bfa:	e70d      	b.n	8006a18 <clip_line+0x46>
            break;
 8006bfc:	bf00      	nop
            }
        }
    }

    return accept;
 8006bfe:	7f7b      	ldrb	r3, [r7, #29]
 8006c00:	4618      	mov	r0, r3
 8006c02:	3720      	adds	r7, #32
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	3306      	adds	r3, #6
 8006c18:	2208      	movs	r2, #8
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	f001 fb1f 	bl	800825e <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	330e      	adds	r3, #14
 8006c24:	781a      	ldrb	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	330f      	adds	r3, #15
 8006c2e:	781a      	ldrb	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	3310      	adds	r3, #16
 8006c38:	781a      	ldrb	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	72da      	strb	r2, [r3, #11]

    return 0;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08e      	sub	sp, #56	; 0x38
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006c54:	f107 0314 	add.w	r3, r7, #20
 8006c58:	6879      	ldr	r1, [r7, #4]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff ffd4 	bl	8006c08 <fontx_meta>
 8006c60:	4603      	mov	r3, r0
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8006c66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <fontx_glyph+0x2c>
        return status;
 8006c6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c72:	e077      	b.n	8006d64 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8006c74:	7f7a      	ldrb	r2, [r7, #29]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8006c7a:	7fba      	ldrb	r2, [r7, #30]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8006c80:	7f7b      	ldrb	r3, [r7, #29]
 8006c82:	3307      	adds	r3, #7
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	da00      	bge.n	8006c8a <fontx_glyph+0x42>
 8006c88:	3307      	adds	r3, #7
 8006c8a:	10db      	asrs	r3, r3, #3
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	78da      	ldrb	r2, [r3, #3]
 8006c96:	7fbb      	ldrb	r3, [r7, #30]
 8006c98:	fb12 f303 	smulbb	r3, r2, r3
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8006ca2:	7ffb      	ldrb	r3, [r7, #31]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10f      	bne.n	8006cc8 <fontx_glyph+0x80>
        if (code < 0x100) {
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2bff      	cmp	r3, #255	; 0xff
 8006cac:	d859      	bhi.n	8006d62 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	789b      	ldrb	r3, [r3, #2]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	fb02 f303 	mul.w	r3, r2, r3
 8006cba:	3311      	adds	r3, #17
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	441a      	add	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e04d      	b.n	8006d64 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3312      	adds	r3, #18
 8006ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	3311      	adds	r3, #17
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 8006cda:	e03d      	b.n	8006d58 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	4413      	add	r3, r2
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	3302      	adds	r3, #2
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	3303      	adds	r3, #3
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	021b      	lsls	r3, r3, #8
 8006cfe:	4413      	add	r3, r2
 8006d00:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d31c      	bcc.n	8006d44 <fontx_glyph+0xfc>
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d818      	bhi.n	8006d44 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d1a:	4413      	add	r3, r2
 8006d1c:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3311      	adds	r3, #17
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	461a      	mov	r2, r3
                    nc * glyph->size
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	789b      	ldrb	r3, [r3, #2]
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d30:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006d34:	4413      	add	r3, r2
 8006d36:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	441a      	add	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	e00f      	b.n	8006d64 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8006d44:	6a3a      	ldr	r2, [r7, #32]
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	1ad2      	subs	r2, r2, r3
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3301      	adds	r3, #1
 8006d50:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d54:	3304      	adds	r3, #4
 8006d56:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	1e5a      	subs	r2, r3, #1
 8006d5c:	633a      	str	r2, [r7, #48]	; 0x30
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1bc      	bne.n	8006cdc <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8006d62:	2301      	movs	r3, #1
 8006d64:	4618      	mov	r0, r3
 8006d66:	3738      	adds	r7, #56	; 0x38
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	dd01      	ble.n	8006d82 <min+0x16>
        return b;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	e000      	b.n	8006d84 <min+0x18>
    };
    return a;
 8006d82:	687b      	ldr	r3, [r7, #4]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <max>:

static inline int max(int a, int b) {
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	dd01      	ble.n	8006da6 <max+0x16>
        return a;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	e000      	b.n	8006da8 <max+0x18>
    }
    return b;
 8006da6:	683b      	ldr	r3, [r7, #0]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8006db4:	b490      	push	{r4, r7}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	4604      	mov	r4, r0
 8006dbc:	4608      	mov	r0, r1
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	4623      	mov	r3, r4
 8006dc4:	80fb      	strh	r3, [r7, #6]
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	80bb      	strh	r3, [r7, #4]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	807b      	strh	r3, [r7, #2]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 8006dd2:	4a08      	ldr	r2, [pc, #32]	; (8006df4 <hagl_set_clip_window+0x40>)
 8006dd4:	88fb      	ldrh	r3, [r7, #6]
 8006dd6:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 8006dd8:	4a06      	ldr	r2, [pc, #24]	; (8006df4 <hagl_set_clip_window+0x40>)
 8006dda:	88bb      	ldrh	r3, [r7, #4]
 8006ddc:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 8006dde:	4a05      	ldr	r2, [pc, #20]	; (8006df4 <hagl_set_clip_window+0x40>)
 8006de0:	887b      	ldrh	r3, [r7, #2]
 8006de2:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 8006de4:	4a03      	ldr	r2, [pc, #12]	; (8006df4 <hagl_set_clip_window+0x40>)
 8006de6:	883b      	ldrh	r3, [r7, #0]
 8006de8:	80d3      	strh	r3, [r2, #6]
}
 8006dea:	bf00      	nop
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bc90      	pop	{r4, r7}
 8006df2:	4770      	bx	lr
 8006df4:	2000000c 	.word	0x2000000c

08006df8 <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	80fb      	strh	r3, [r7, #6]
 8006e02:	460b      	mov	r3, r1
 8006e04:	80bb      	strh	r3, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8006e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e0e:	4a12      	ldr	r2, [pc, #72]	; (8006e58 <hagl_put_pixel+0x60>)
 8006e10:	8812      	ldrh	r2, [r2, #0]
 8006e12:	4293      	cmp	r3, r2
 8006e14:	db1a      	blt.n	8006e4c <hagl_put_pixel+0x54>
 8006e16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006e1a:	4a0f      	ldr	r2, [pc, #60]	; (8006e58 <hagl_put_pixel+0x60>)
 8006e1c:	8852      	ldrh	r2, [r2, #2]
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	db14      	blt.n	8006e4c <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e26:	4a0c      	ldr	r2, [pc, #48]	; (8006e58 <hagl_put_pixel+0x60>)
 8006e28:	8892      	ldrh	r2, [r2, #4]
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	dc10      	bgt.n	8006e50 <hagl_put_pixel+0x58>
 8006e2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006e32:	4a09      	ldr	r2, [pc, #36]	; (8006e58 <hagl_put_pixel+0x60>)
 8006e34:	88d2      	ldrh	r2, [r2, #6]
 8006e36:	4293      	cmp	r3, r2
 8006e38:	dc0a      	bgt.n	8006e50 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8006e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e3e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006e42:	887a      	ldrh	r2, [r7, #2]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fa fb59 	bl	80014fc <lcd_put_pixel>
 8006e4a:	e002      	b.n	8006e52 <hagl_put_pixel+0x5a>
        return;
 8006e4c:	bf00      	nop
 8006e4e:	e000      	b.n	8006e52 <hagl_put_pixel+0x5a>
        return;
 8006e50:	bf00      	nop
}
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	2000000c 	.word	0x2000000c

08006e5c <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8006e5c:	b590      	push	{r4, r7, lr}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	4604      	mov	r4, r0
 8006e64:	4608      	mov	r0, r1
 8006e66:	4611      	mov	r1, r2
 8006e68:	461a      	mov	r2, r3
 8006e6a:	4623      	mov	r3, r4
 8006e6c:	80fb      	strh	r3, [r7, #6]
 8006e6e:	4603      	mov	r3, r0
 8006e70:	80bb      	strh	r3, [r7, #4]
 8006e72:	460b      	mov	r3, r1
 8006e74:	807b      	strh	r3, [r7, #2]
 8006e76:	4613      	mov	r3, r2
 8006e78:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8006e7a:	88fa      	ldrh	r2, [r7, #6]
 8006e7c:	887b      	ldrh	r3, [r7, #2]
 8006e7e:	4413      	add	r3, r2
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	b21a      	sxth	r2, r3
 8006e84:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006e88:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006e8c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006e90:	883b      	ldrh	r3, [r7, #0]
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	4623      	mov	r3, r4
 8006e96:	f000 f805 	bl	8006ea4 <hagl_draw_line>
#endif
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd90      	pop	{r4, r7, pc}
	...

08006ea4 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ea6:	b089      	sub	sp, #36	; 0x24
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	4604      	mov	r4, r0
 8006eac:	4608      	mov	r0, r1
 8006eae:	4611      	mov	r1, r2
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	4623      	mov	r3, r4
 8006eb4:	80fb      	strh	r3, [r7, #6]
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	80bb      	strh	r3, [r7, #4]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	807b      	strh	r3, [r7, #2]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	1cba      	adds	r2, r7, #2
 8006ec6:	1d3d      	adds	r5, r7, #4
 8006ec8:	1dbc      	adds	r4, r7, #6
 8006eca:	494a      	ldr	r1, [pc, #296]	; (8006ff4 <hagl_draw_line+0x150>)
 8006ecc:	466e      	mov	r6, sp
 8006ece:	c903      	ldmia	r1, {r0, r1}
 8006ed0:	e886 0003 	stmia.w	r6, {r0, r1}
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f7ff fd7b 	bl	80069d2 <clip_line>
 8006edc:	4603      	mov	r3, r0
 8006ede:	f083 0301 	eor.w	r3, r3, #1
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d17e      	bne.n	8006fe6 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8006ee8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006eec:	461a      	mov	r2, r3
 8006eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	bfb8      	it	lt
 8006ef8:	425b      	neglt	r3, r3
 8006efa:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8006efc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	da01      	bge.n	8006f0c <hagl_draw_line+0x68>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e001      	b.n	8006f10 <hagl_draw_line+0x6c>
 8006f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f10:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8006f12:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006f16:	461a      	mov	r2, r3
 8006f18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bfb8      	it	lt
 8006f22:	425b      	neglt	r3, r3
 8006f24:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8006f26:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006f2a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	da01      	bge.n	8006f36 <hagl_draw_line+0x92>
 8006f32:	2301      	movs	r3, #1
 8006f34:	e001      	b.n	8006f3a <hagl_draw_line+0x96>
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3a:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8006f3c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006f40:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	dd06      	ble.n	8006f56 <hagl_draw_line+0xb2>
 8006f48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006f4c:	0fda      	lsrs	r2, r3, #31
 8006f4e:	4413      	add	r3, r2
 8006f50:	105b      	asrs	r3, r3, #1
 8006f52:	b21b      	sxth	r3, r3
 8006f54:	e006      	b.n	8006f64 <hagl_draw_line+0xc0>
 8006f56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f5a:	0fda      	lsrs	r2, r3, #31
 8006f5c:	4413      	add	r3, r2
 8006f5e:	105b      	asrs	r3, r3, #1
 8006f60:	425b      	negs	r3, r3
 8006f62:	b21b      	sxth	r3, r3
 8006f64:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8006f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f6a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006f6e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7ff ff41 	bl	8006df8 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8006f76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d105      	bne.n	8006f8e <hagl_draw_line+0xea>
 8006f82:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006f86:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d02d      	beq.n	8006fea <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8006f8e:	8afb      	ldrh	r3, [r7, #22]
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8006f96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006f9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006f9e:	425b      	negs	r3, r3
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	dd0c      	ble.n	8006fbe <hagl_draw_line+0x11a>
            err -= dy;
 8006fa4:	8afa      	ldrh	r2, [r7, #22]
 8006fa6:	8a3b      	ldrh	r3, [r7, #16]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8006fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	8a7b      	ldrh	r3, [r7, #18]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	b21b      	sxth	r3, r3
 8006fbc:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8006fbe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006fc2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	dacd      	bge.n	8006f66 <hagl_draw_line+0xc2>
            err += dx;
 8006fca:	8afa      	ldrh	r2, [r7, #22]
 8006fcc:	8abb      	ldrh	r3, [r7, #20]
 8006fce:	4413      	add	r3, r2
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8006fd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	89fb      	ldrh	r3, [r7, #14]
 8006fdc:	4413      	add	r3, r2
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	b21b      	sxth	r3, r3
 8006fe2:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8006fe4:	e7bf      	b.n	8006f66 <hagl_draw_line+0xc2>
        return;
 8006fe6:	bf00      	nop
 8006fe8:	e000      	b.n	8006fec <hagl_draw_line+0x148>
            break;
 8006fea:	bf00      	nop
        }
    }
}
 8006fec:	371c      	adds	r7, #28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	2000000c 	.word	0x2000000c

08006ff8 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006ff8:	b590      	push	{r4, r7, lr}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	4604      	mov	r4, r0
 8007000:	4608      	mov	r0, r1
 8007002:	4611      	mov	r1, r2
 8007004:	461a      	mov	r2, r3
 8007006:	4623      	mov	r3, r4
 8007008:	80fb      	strh	r3, [r7, #6]
 800700a:	4603      	mov	r3, r0
 800700c:	80bb      	strh	r3, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	807b      	strh	r3, [r7, #2]
 8007012:	4613      	mov	r3, r2
 8007014:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8007016:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800701a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800701e:	429a      	cmp	r2, r3
 8007020:	dd0e      	ble.n	8007040 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8007022:	88fa      	ldrh	r2, [r7, #6]
 8007024:	887b      	ldrh	r3, [r7, #2]
 8007026:	4413      	add	r3, r2
 8007028:	b29b      	uxth	r3, r3
 800702a:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800702c:	88fa      	ldrh	r2, [r7, #6]
 800702e:	887b      	ldrh	r3, [r7, #2]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	b29b      	uxth	r3, r3
 8007034:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8007036:	88fa      	ldrh	r2, [r7, #6]
 8007038:	887b      	ldrh	r3, [r7, #2]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	b29b      	uxth	r3, r3
 800703e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007040:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007044:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007048:	429a      	cmp	r2, r3
 800704a:	dd0e      	ble.n	800706a <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 800704c:	88ba      	ldrh	r2, [r7, #4]
 800704e:	883b      	ldrh	r3, [r7, #0]
 8007050:	4413      	add	r3, r2
 8007052:	b29b      	uxth	r3, r3
 8007054:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8007056:	88ba      	ldrh	r2, [r7, #4]
 8007058:	883b      	ldrh	r3, [r7, #0]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	b29b      	uxth	r3, r3
 800705e:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8007060:	88ba      	ldrh	r2, [r7, #4]
 8007062:	883b      	ldrh	r3, [r7, #0]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	b29b      	uxth	r3, r3
 8007068:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800706a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800706e:	4a33      	ldr	r2, [pc, #204]	; (800713c <hagl_fill_rectangle+0x144>)
 8007070:	8812      	ldrh	r2, [r2, #0]
 8007072:	4293      	cmp	r3, r2
 8007074:	db5b      	blt.n	800712e <hagl_fill_rectangle+0x136>
 8007076:	f9b7 3000 	ldrsh.w	r3, [r7]
 800707a:	4a30      	ldr	r2, [pc, #192]	; (800713c <hagl_fill_rectangle+0x144>)
 800707c:	8852      	ldrh	r2, [r2, #2]
 800707e:	4293      	cmp	r3, r2
 8007080:	db55      	blt.n	800712e <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8007082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007086:	4a2d      	ldr	r2, [pc, #180]	; (800713c <hagl_fill_rectangle+0x144>)
 8007088:	8892      	ldrh	r2, [r2, #4]
 800708a:	4293      	cmp	r3, r2
 800708c:	dc51      	bgt.n	8007132 <hagl_fill_rectangle+0x13a>
 800708e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007092:	4a2a      	ldr	r2, [pc, #168]	; (800713c <hagl_fill_rectangle+0x144>)
 8007094:	88d2      	ldrh	r2, [r2, #6]
 8007096:	4293      	cmp	r3, r2
 8007098:	dc4b      	bgt.n	8007132 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 800709a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800709e:	4a27      	ldr	r2, [pc, #156]	; (800713c <hagl_fill_rectangle+0x144>)
 80070a0:	8812      	ldrh	r2, [r2, #0]
 80070a2:	4611      	mov	r1, r2
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff fe73 	bl	8006d90 <max>
 80070aa:	4603      	mov	r3, r0
 80070ac:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 80070ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80070b2:	4a22      	ldr	r2, [pc, #136]	; (800713c <hagl_fill_rectangle+0x144>)
 80070b4:	8852      	ldrh	r2, [r2, #2]
 80070b6:	4611      	mov	r1, r2
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7ff fe69 	bl	8006d90 <max>
 80070be:	4603      	mov	r3, r0
 80070c0:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 80070c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070c6:	4a1d      	ldr	r2, [pc, #116]	; (800713c <hagl_fill_rectangle+0x144>)
 80070c8:	8892      	ldrh	r2, [r2, #4]
 80070ca:	4611      	mov	r1, r2
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff fe4d 	bl	8006d6c <min>
 80070d2:	4603      	mov	r3, r0
 80070d4:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 80070d6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80070da:	4a18      	ldr	r2, [pc, #96]	; (800713c <hagl_fill_rectangle+0x144>)
 80070dc:	88d2      	ldrh	r2, [r2, #6]
 80070de:	4611      	mov	r1, r2
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff fe43 	bl	8006d6c <min>
 80070e6:	4603      	mov	r3, r0
 80070e8:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 80070ea:	887a      	ldrh	r2, [r7, #2]
 80070ec:	88fb      	ldrh	r3, [r7, #6]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	3301      	adds	r3, #1
 80070f4:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 80070f6:	883a      	ldrh	r2, [r7, #0]
 80070f8:	88bb      	ldrh	r3, [r7, #4]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	3301      	adds	r3, #1
 8007100:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8007102:	2300      	movs	r3, #0
 8007104:	81fb      	strh	r3, [r7, #14]
 8007106:	e00d      	b.n	8007124 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8007108:	88ba      	ldrh	r2, [r7, #4]
 800710a:	89fb      	ldrh	r3, [r7, #14]
 800710c:	4413      	add	r3, r2
 800710e:	b29b      	uxth	r3, r3
 8007110:	b219      	sxth	r1, r3
 8007112:	8c3b      	ldrh	r3, [r7, #32]
 8007114:	89ba      	ldrh	r2, [r7, #12]
 8007116:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800711a:	f7ff fe9f 	bl	8006e5c <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 800711e:	89fb      	ldrh	r3, [r7, #14]
 8007120:	3301      	adds	r3, #1
 8007122:	81fb      	strh	r3, [r7, #14]
 8007124:	89fa      	ldrh	r2, [r7, #14]
 8007126:	897b      	ldrh	r3, [r7, #10]
 8007128:	429a      	cmp	r2, r3
 800712a:	d3ed      	bcc.n	8007108 <hagl_fill_rectangle+0x110>
 800712c:	e002      	b.n	8007134 <hagl_fill_rectangle+0x13c>
        return;
 800712e:	bf00      	nop
 8007130:	e000      	b.n	8007134 <hagl_fill_rectangle+0x13c>
        return;
 8007132:	bf00      	nop
#endif
    }
}
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	bd90      	pop	{r4, r7, pc}
 800713a:	bf00      	nop
 800713c:	2000000c 	.word	0x2000000c

08007140 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8007140:	b590      	push	{r4, r7, lr}
 8007142:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800714e:	f844 0c24 	str.w	r0, [r4, #-36]
 8007152:	460c      	mov	r4, r1
 8007154:	4610      	mov	r0, r2
 8007156:	4619      	mov	r1, r3
 8007158:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800715c:	4622      	mov	r2, r4
 800715e:	f823 2c26 	strh.w	r2, [r3, #-38]
 8007162:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007166:	4602      	mov	r2, r0
 8007168:	f823 2c28 	strh.w	r2, [r3, #-40]
 800716c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007170:	460a      	mov	r2, r1
 8007172:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8007176:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800717a:	4619      	mov	r1, r3
 800717c:	f107 0310 	add.w	r3, r7, #16
 8007180:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007184:	6812      	ldr	r2, [r2, #0]
 8007186:	f851 1c24 	ldr.w	r1, [r1, #-36]
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff fd5c 	bl	8006c48 <fontx_glyph>
 8007190:	4603      	mov	r3, r0
 8007192:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007196:	f102 0209 	add.w	r2, r2, #9
 800719a:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 800719c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80071a0:	f103 0309 	add.w	r3, r3, #9
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <hagl_put_char+0x6e>
        return 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	e0c0      	b.n	8007330 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 80071ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071b2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071bc:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 80071c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071c4:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071ce:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 80071d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071d6:	2210      	movs	r2, #16
 80071d8:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 80071dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80071e0:	3a08      	subs	r2, #8
 80071e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071e6:	3b18      	subs	r3, #24
 80071e8:	4611      	mov	r1, r2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff fb93 	bl	8006916 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 80071f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071f4:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80071f8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80071fc:	f102 020c 	add.w	r2, r2, #12
 8007200:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8007202:	2300      	movs	r3, #0
 8007204:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007208:	f102 020b 	add.w	r2, r2, #11
 800720c:	7013      	strb	r3, [r2, #0]
 800720e:	e071      	b.n	80072f4 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8007210:	2300      	movs	r3, #0
 8007212:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007216:	f102 020a 	add.w	r2, r2, #10
 800721a:	7013      	strb	r3, [r2, #0]
 800721c:	e047      	b.n	80072ae <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 800721e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007222:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	b25a      	sxtb	r2, r3
 800722a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800722e:	f103 030a 	add.w	r3, r3, #10
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	f003 0307 	and.w	r3, r3, #7
 8007238:	2180      	movs	r1, #128	; 0x80
 800723a:	fa41 f303 	asr.w	r3, r1, r3
 800723e:	b25b      	sxtb	r3, r3
 8007240:	4013      	ands	r3, r2
 8007242:	b25b      	sxtb	r3, r3
 8007244:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007248:	f102 0208 	add.w	r2, r2, #8
 800724c:	7013      	strb	r3, [r2, #0]
            if (set) {
 800724e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007252:	f103 0308 	add.w	r3, r3, #8
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d010      	beq.n	800727e <hagl_put_char+0x13e>
                *(ptr++) = color;
 800725c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007260:	f103 030c 	add.w	r3, r3, #12
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	1c9a      	adds	r2, r3, #2
 8007268:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800726c:	f101 010c 	add.w	r1, r1, #12
 8007270:	600a      	str	r2, [r1, #0]
 8007272:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007276:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 800727a:	801a      	strh	r2, [r3, #0]
 800727c:	e00c      	b.n	8007298 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 800727e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007282:	f103 030c 	add.w	r3, r3, #12
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	1c9a      	adds	r2, r3, #2
 800728a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800728e:	f101 010c 	add.w	r1, r1, #12
 8007292:	600a      	str	r2, [r1, #0]
 8007294:	2200      	movs	r2, #0
 8007296:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8007298:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800729c:	f103 030a 	add.w	r3, r3, #10
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	3301      	adds	r3, #1
 80072a4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80072a8:	f102 020a 	add.w	r2, r2, #10
 80072ac:	7013      	strb	r3, [r2, #0]
 80072ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072b2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80072b6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80072ba:	f102 020a 	add.w	r2, r2, #10
 80072be:	7812      	ldrb	r2, [r2, #0]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d3ac      	bcc.n	800721e <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 80072c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072c8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80072cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80072d0:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 80072d4:	4413      	add	r3, r2
 80072d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80072da:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80072de:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80072e2:	f103 030b 	add.w	r3, r3, #11
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	3301      	adds	r3, #1
 80072ea:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80072ee:	f102 020b 	add.w	r2, r2, #11
 80072f2:	7013      	strb	r3, [r2, #0]
 80072f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072f8:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80072fc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007300:	f102 020b 	add.w	r2, r2, #11
 8007304:	7812      	ldrb	r2, [r2, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d382      	bcc.n	8007210 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 800730a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800730e:	3b18      	subs	r3, #24
 8007310:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007314:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8007318:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800731c:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8007320:	461a      	mov	r2, r3
 8007322:	f000 f85a 	bl	80073da <hagl_blit>

    return bitmap.width;
 8007326:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800732a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800732e:	b2db      	uxtb	r3, r3
}
 8007330:	4618      	mov	r0, r3
 8007332:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	bd90      	pop	{r4, r7, pc}

0800733c <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08c      	sub	sp, #48	; 0x30
 8007340:	af02      	add	r7, sp, #8
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	4608      	mov	r0, r1
 8007346:	4611      	mov	r1, r2
 8007348:	461a      	mov	r2, r3
 800734a:	4603      	mov	r3, r0
 800734c:	817b      	strh	r3, [r7, #10]
 800734e:	460b      	mov	r3, r1
 8007350:	813b      	strh	r3, [r7, #8]
 8007352:	4613      	mov	r3, r2
 8007354:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8007356:	897b      	ldrh	r3, [r7, #10]
 8007358:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800735a:	f107 0314 	add.w	r3, r7, #20
 800735e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007360:	4618      	mov	r0, r3
 8007362:	f7ff fc51 	bl	8006c08 <fontx_meta>
 8007366:	4603      	mov	r3, r0
 8007368:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 800736c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <hagl_put_text+0x3c>
        return 0;
 8007374:	2300      	movs	r3, #0
 8007376:	e02c      	b.n	80073d2 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	1d1a      	adds	r2, r3, #4
 800737c:	60fa      	str	r2, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	2b0d      	cmp	r3, #13
 8007386:	d002      	beq.n	800738e <hagl_put_text+0x52>
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	2b0a      	cmp	r3, #10
 800738c:	d108      	bne.n	80073a0 <hagl_put_text+0x64>
            x0 = 0;
 800738e:	2300      	movs	r3, #0
 8007390:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8007392:	7fbb      	ldrb	r3, [r7, #30]
 8007394:	b29a      	uxth	r2, r3
 8007396:	893b      	ldrh	r3, [r7, #8]
 8007398:	4413      	add	r3, r2
 800739a:	b29b      	uxth	r3, r3
 800739c:	813b      	strh	r3, [r7, #8]
 800739e:	e010      	b.n	80073c2 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80073a0:	88f8      	ldrh	r0, [r7, #6]
 80073a2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80073a6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	4603      	mov	r3, r0
 80073b0:	6a38      	ldr	r0, [r7, #32]
 80073b2:	f7ff fec5 	bl	8007140 <hagl_put_char>
 80073b6:	4603      	mov	r3, r0
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	897b      	ldrh	r3, [r7, #10]
 80073bc:	4413      	add	r3, r2
 80073be:	b29b      	uxth	r3, r3
 80073c0:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1d6      	bne.n	8007378 <hagl_put_text+0x3c>

    return x0 - original;
 80073ca:	897a      	ldrh	r2, [r7, #10]
 80073cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	b29b      	uxth	r3, r3
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3728      	adds	r7, #40	; 0x28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 80073da:	b580      	push	{r7, lr}
 80073dc:	b086      	sub	sp, #24
 80073de:	af00      	add	r7, sp, #0
 80073e0:	4603      	mov	r3, r0
 80073e2:	603a      	str	r2, [r7, #0]
 80073e4:	80fb      	strh	r3, [r7, #6]
 80073e6:	460b      	mov	r3, r1
 80073e8:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 80073f0:	2300      	movs	r3, #0
 80073f2:	827b      	strh	r3, [r7, #18]
 80073f4:	e020      	b.n	8007438 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 80073f6:	2300      	movs	r3, #0
 80073f8:	823b      	strh	r3, [r7, #16]
 80073fa:	e015      	b.n	8007428 <hagl_blit+0x4e>
            color = *(ptr++);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	1c9a      	adds	r2, r3, #2
 8007400:	617a      	str	r2, [r7, #20]
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8007406:	88fa      	ldrh	r2, [r7, #6]
 8007408:	8a3b      	ldrh	r3, [r7, #16]
 800740a:	4413      	add	r3, r2
 800740c:	b29b      	uxth	r3, r3
 800740e:	b218      	sxth	r0, r3
 8007410:	88ba      	ldrh	r2, [r7, #4]
 8007412:	8a7b      	ldrh	r3, [r7, #18]
 8007414:	4413      	add	r3, r2
 8007416:	b29b      	uxth	r3, r3
 8007418:	b21b      	sxth	r3, r3
 800741a:	89fa      	ldrh	r2, [r7, #14]
 800741c:	4619      	mov	r1, r3
 800741e:	f7ff fceb 	bl	8006df8 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8007422:	8a3b      	ldrh	r3, [r7, #16]
 8007424:	3301      	adds	r3, #1
 8007426:	823b      	strh	r3, [r7, #16]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	8a3a      	ldrh	r2, [r7, #16]
 800742e:	429a      	cmp	r2, r3
 8007430:	d3e4      	bcc.n	80073fc <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8007432:	8a7b      	ldrh	r3, [r7, #18]
 8007434:	3301      	adds	r3, #1
 8007436:	827b      	strh	r3, [r7, #18]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	885b      	ldrh	r3, [r3, #2]
 800743c:	8a7a      	ldrh	r2, [r7, #18]
 800743e:	429a      	cmp	r2, r3
 8007440:	d3d9      	bcc.n	80073f6 <hagl_blit+0x1c>
        }
    }
#endif
};
 8007442:	bf00      	nop
 8007444:	bf00      	nop
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 8007452:	4b12      	ldr	r3, [pc, #72]	; (800749c <hagl_clear_screen+0x50>)
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 8007458:	4b10      	ldr	r3, [pc, #64]	; (800749c <hagl_clear_screen+0x50>)
 800745a:	885b      	ldrh	r3, [r3, #2]
 800745c:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 800745e:	4b0f      	ldr	r3, [pc, #60]	; (800749c <hagl_clear_screen+0x50>)
 8007460:	889b      	ldrh	r3, [r3, #4]
 8007462:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 8007464:	4b0d      	ldr	r3, [pc, #52]	; (800749c <hagl_clear_screen+0x50>)
 8007466:	88db      	ldrh	r3, [r3, #6]
 8007468:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 800746a:	237f      	movs	r3, #127	; 0x7f
 800746c:	229f      	movs	r2, #159	; 0x9f
 800746e:	2100      	movs	r1, #0
 8007470:	2000      	movs	r0, #0
 8007472:	f7ff fc9f 	bl	8006db4 <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 8007476:	2300      	movs	r3, #0
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	237f      	movs	r3, #127	; 0x7f
 800747c:	229f      	movs	r2, #159	; 0x9f
 800747e:	2100      	movs	r1, #0
 8007480:	2000      	movs	r0, #0
 8007482:	f7ff fdb9 	bl	8006ff8 <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 8007486:	883b      	ldrh	r3, [r7, #0]
 8007488:	887a      	ldrh	r2, [r7, #2]
 800748a:	88b9      	ldrh	r1, [r7, #4]
 800748c:	88f8      	ldrh	r0, [r7, #6]
 800748e:	f7ff fc91 	bl	8006db4 <hagl_set_clip_window>
#endif
}
 8007492:	bf00      	nop
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	2000000c 	.word	0x2000000c

080074a0 <__cvt>:
 80074a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074a4:	ec55 4b10 	vmov	r4, r5, d0
 80074a8:	2d00      	cmp	r5, #0
 80074aa:	460e      	mov	r6, r1
 80074ac:	4619      	mov	r1, r3
 80074ae:	462b      	mov	r3, r5
 80074b0:	bfbb      	ittet	lt
 80074b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80074b6:	461d      	movlt	r5, r3
 80074b8:	2300      	movge	r3, #0
 80074ba:	232d      	movlt	r3, #45	; 0x2d
 80074bc:	700b      	strb	r3, [r1, #0]
 80074be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80074c4:	4691      	mov	r9, r2
 80074c6:	f023 0820 	bic.w	r8, r3, #32
 80074ca:	bfbc      	itt	lt
 80074cc:	4622      	movlt	r2, r4
 80074ce:	4614      	movlt	r4, r2
 80074d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074d4:	d005      	beq.n	80074e2 <__cvt+0x42>
 80074d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074da:	d100      	bne.n	80074de <__cvt+0x3e>
 80074dc:	3601      	adds	r6, #1
 80074de:	2102      	movs	r1, #2
 80074e0:	e000      	b.n	80074e4 <__cvt+0x44>
 80074e2:	2103      	movs	r1, #3
 80074e4:	ab03      	add	r3, sp, #12
 80074e6:	9301      	str	r3, [sp, #4]
 80074e8:	ab02      	add	r3, sp, #8
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	ec45 4b10 	vmov	d0, r4, r5
 80074f0:	4653      	mov	r3, sl
 80074f2:	4632      	mov	r2, r6
 80074f4:	f000 ff4c 	bl	8008390 <_dtoa_r>
 80074f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80074fc:	4607      	mov	r7, r0
 80074fe:	d102      	bne.n	8007506 <__cvt+0x66>
 8007500:	f019 0f01 	tst.w	r9, #1
 8007504:	d022      	beq.n	800754c <__cvt+0xac>
 8007506:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800750a:	eb07 0906 	add.w	r9, r7, r6
 800750e:	d110      	bne.n	8007532 <__cvt+0x92>
 8007510:	783b      	ldrb	r3, [r7, #0]
 8007512:	2b30      	cmp	r3, #48	; 0x30
 8007514:	d10a      	bne.n	800752c <__cvt+0x8c>
 8007516:	2200      	movs	r2, #0
 8007518:	2300      	movs	r3, #0
 800751a:	4620      	mov	r0, r4
 800751c:	4629      	mov	r1, r5
 800751e:	f7f9 fad3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007522:	b918      	cbnz	r0, 800752c <__cvt+0x8c>
 8007524:	f1c6 0601 	rsb	r6, r6, #1
 8007528:	f8ca 6000 	str.w	r6, [sl]
 800752c:	f8da 3000 	ldr.w	r3, [sl]
 8007530:	4499      	add	r9, r3
 8007532:	2200      	movs	r2, #0
 8007534:	2300      	movs	r3, #0
 8007536:	4620      	mov	r0, r4
 8007538:	4629      	mov	r1, r5
 800753a:	f7f9 fac5 	bl	8000ac8 <__aeabi_dcmpeq>
 800753e:	b108      	cbz	r0, 8007544 <__cvt+0xa4>
 8007540:	f8cd 900c 	str.w	r9, [sp, #12]
 8007544:	2230      	movs	r2, #48	; 0x30
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	454b      	cmp	r3, r9
 800754a:	d307      	bcc.n	800755c <__cvt+0xbc>
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007550:	1bdb      	subs	r3, r3, r7
 8007552:	4638      	mov	r0, r7
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	b004      	add	sp, #16
 8007558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755c:	1c59      	adds	r1, r3, #1
 800755e:	9103      	str	r1, [sp, #12]
 8007560:	701a      	strb	r2, [r3, #0]
 8007562:	e7f0      	b.n	8007546 <__cvt+0xa6>

08007564 <__exponent>:
 8007564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007566:	4603      	mov	r3, r0
 8007568:	2900      	cmp	r1, #0
 800756a:	bfb8      	it	lt
 800756c:	4249      	neglt	r1, r1
 800756e:	f803 2b02 	strb.w	r2, [r3], #2
 8007572:	bfb4      	ite	lt
 8007574:	222d      	movlt	r2, #45	; 0x2d
 8007576:	222b      	movge	r2, #43	; 0x2b
 8007578:	2909      	cmp	r1, #9
 800757a:	7042      	strb	r2, [r0, #1]
 800757c:	dd2a      	ble.n	80075d4 <__exponent+0x70>
 800757e:	f10d 0207 	add.w	r2, sp, #7
 8007582:	4617      	mov	r7, r2
 8007584:	260a      	movs	r6, #10
 8007586:	4694      	mov	ip, r2
 8007588:	fb91 f5f6 	sdiv	r5, r1, r6
 800758c:	fb06 1415 	mls	r4, r6, r5, r1
 8007590:	3430      	adds	r4, #48	; 0x30
 8007592:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007596:	460c      	mov	r4, r1
 8007598:	2c63      	cmp	r4, #99	; 0x63
 800759a:	f102 32ff 	add.w	r2, r2, #4294967295
 800759e:	4629      	mov	r1, r5
 80075a0:	dcf1      	bgt.n	8007586 <__exponent+0x22>
 80075a2:	3130      	adds	r1, #48	; 0x30
 80075a4:	f1ac 0402 	sub.w	r4, ip, #2
 80075a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80075ac:	1c41      	adds	r1, r0, #1
 80075ae:	4622      	mov	r2, r4
 80075b0:	42ba      	cmp	r2, r7
 80075b2:	d30a      	bcc.n	80075ca <__exponent+0x66>
 80075b4:	f10d 0209 	add.w	r2, sp, #9
 80075b8:	eba2 020c 	sub.w	r2, r2, ip
 80075bc:	42bc      	cmp	r4, r7
 80075be:	bf88      	it	hi
 80075c0:	2200      	movhi	r2, #0
 80075c2:	4413      	add	r3, r2
 80075c4:	1a18      	subs	r0, r3, r0
 80075c6:	b003      	add	sp, #12
 80075c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 80075ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 80075d2:	e7ed      	b.n	80075b0 <__exponent+0x4c>
 80075d4:	2330      	movs	r3, #48	; 0x30
 80075d6:	3130      	adds	r1, #48	; 0x30
 80075d8:	7083      	strb	r3, [r0, #2]
 80075da:	70c1      	strb	r1, [r0, #3]
 80075dc:	1d03      	adds	r3, r0, #4
 80075de:	e7f1      	b.n	80075c4 <__exponent+0x60>

080075e0 <_printf_float>:
 80075e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e4:	ed2d 8b02 	vpush	{d8}
 80075e8:	b08d      	sub	sp, #52	; 0x34
 80075ea:	460c      	mov	r4, r1
 80075ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80075f0:	4616      	mov	r6, r2
 80075f2:	461f      	mov	r7, r3
 80075f4:	4605      	mov	r5, r0
 80075f6:	f000 fdbb 	bl	8008170 <_localeconv_r>
 80075fa:	f8d0 a000 	ldr.w	sl, [r0]
 80075fe:	4650      	mov	r0, sl
 8007600:	f7f8 fe36 	bl	8000270 <strlen>
 8007604:	2300      	movs	r3, #0
 8007606:	930a      	str	r3, [sp, #40]	; 0x28
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	9305      	str	r3, [sp, #20]
 800760c:	f8d8 3000 	ldr.w	r3, [r8]
 8007610:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007614:	3307      	adds	r3, #7
 8007616:	f023 0307 	bic.w	r3, r3, #7
 800761a:	f103 0208 	add.w	r2, r3, #8
 800761e:	f8c8 2000 	str.w	r2, [r8]
 8007622:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007626:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800762a:	9307      	str	r3, [sp, #28]
 800762c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007630:	ee08 0a10 	vmov	s16, r0
 8007634:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007638:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800763c:	4b9e      	ldr	r3, [pc, #632]	; (80078b8 <_printf_float+0x2d8>)
 800763e:	f04f 32ff 	mov.w	r2, #4294967295
 8007642:	f7f9 fa73 	bl	8000b2c <__aeabi_dcmpun>
 8007646:	bb88      	cbnz	r0, 80076ac <_printf_float+0xcc>
 8007648:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800764c:	4b9a      	ldr	r3, [pc, #616]	; (80078b8 <_printf_float+0x2d8>)
 800764e:	f04f 32ff 	mov.w	r2, #4294967295
 8007652:	f7f9 fa4d 	bl	8000af0 <__aeabi_dcmple>
 8007656:	bb48      	cbnz	r0, 80076ac <_printf_float+0xcc>
 8007658:	2200      	movs	r2, #0
 800765a:	2300      	movs	r3, #0
 800765c:	4640      	mov	r0, r8
 800765e:	4649      	mov	r1, r9
 8007660:	f7f9 fa3c 	bl	8000adc <__aeabi_dcmplt>
 8007664:	b110      	cbz	r0, 800766c <_printf_float+0x8c>
 8007666:	232d      	movs	r3, #45	; 0x2d
 8007668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800766c:	4a93      	ldr	r2, [pc, #588]	; (80078bc <_printf_float+0x2dc>)
 800766e:	4b94      	ldr	r3, [pc, #592]	; (80078c0 <_printf_float+0x2e0>)
 8007670:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007674:	bf94      	ite	ls
 8007676:	4690      	movls	r8, r2
 8007678:	4698      	movhi	r8, r3
 800767a:	2303      	movs	r3, #3
 800767c:	6123      	str	r3, [r4, #16]
 800767e:	9b05      	ldr	r3, [sp, #20]
 8007680:	f023 0304 	bic.w	r3, r3, #4
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	f04f 0900 	mov.w	r9, #0
 800768a:	9700      	str	r7, [sp, #0]
 800768c:	4633      	mov	r3, r6
 800768e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007690:	4621      	mov	r1, r4
 8007692:	4628      	mov	r0, r5
 8007694:	f000 f9da 	bl	8007a4c <_printf_common>
 8007698:	3001      	adds	r0, #1
 800769a:	f040 8090 	bne.w	80077be <_printf_float+0x1de>
 800769e:	f04f 30ff 	mov.w	r0, #4294967295
 80076a2:	b00d      	add	sp, #52	; 0x34
 80076a4:	ecbd 8b02 	vpop	{d8}
 80076a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ac:	4642      	mov	r2, r8
 80076ae:	464b      	mov	r3, r9
 80076b0:	4640      	mov	r0, r8
 80076b2:	4649      	mov	r1, r9
 80076b4:	f7f9 fa3a 	bl	8000b2c <__aeabi_dcmpun>
 80076b8:	b140      	cbz	r0, 80076cc <_printf_float+0xec>
 80076ba:	464b      	mov	r3, r9
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bfbc      	itt	lt
 80076c0:	232d      	movlt	r3, #45	; 0x2d
 80076c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076c6:	4a7f      	ldr	r2, [pc, #508]	; (80078c4 <_printf_float+0x2e4>)
 80076c8:	4b7f      	ldr	r3, [pc, #508]	; (80078c8 <_printf_float+0x2e8>)
 80076ca:	e7d1      	b.n	8007670 <_printf_float+0x90>
 80076cc:	6863      	ldr	r3, [r4, #4]
 80076ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80076d2:	9206      	str	r2, [sp, #24]
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	d13f      	bne.n	8007758 <_printf_float+0x178>
 80076d8:	2306      	movs	r3, #6
 80076da:	6063      	str	r3, [r4, #4]
 80076dc:	9b05      	ldr	r3, [sp, #20]
 80076de:	6861      	ldr	r1, [r4, #4]
 80076e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80076e4:	2300      	movs	r3, #0
 80076e6:	9303      	str	r3, [sp, #12]
 80076e8:	ab0a      	add	r3, sp, #40	; 0x28
 80076ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80076ee:	ab09      	add	r3, sp, #36	; 0x24
 80076f0:	ec49 8b10 	vmov	d0, r8, r9
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	6022      	str	r2, [r4, #0]
 80076f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80076fc:	4628      	mov	r0, r5
 80076fe:	f7ff fecf 	bl	80074a0 <__cvt>
 8007702:	9b06      	ldr	r3, [sp, #24]
 8007704:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007706:	2b47      	cmp	r3, #71	; 0x47
 8007708:	4680      	mov	r8, r0
 800770a:	d108      	bne.n	800771e <_printf_float+0x13e>
 800770c:	1cc8      	adds	r0, r1, #3
 800770e:	db02      	blt.n	8007716 <_printf_float+0x136>
 8007710:	6863      	ldr	r3, [r4, #4]
 8007712:	4299      	cmp	r1, r3
 8007714:	dd41      	ble.n	800779a <_printf_float+0x1ba>
 8007716:	f1ab 0302 	sub.w	r3, fp, #2
 800771a:	fa5f fb83 	uxtb.w	fp, r3
 800771e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007722:	d820      	bhi.n	8007766 <_printf_float+0x186>
 8007724:	3901      	subs	r1, #1
 8007726:	465a      	mov	r2, fp
 8007728:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800772c:	9109      	str	r1, [sp, #36]	; 0x24
 800772e:	f7ff ff19 	bl	8007564 <__exponent>
 8007732:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007734:	1813      	adds	r3, r2, r0
 8007736:	2a01      	cmp	r2, #1
 8007738:	4681      	mov	r9, r0
 800773a:	6123      	str	r3, [r4, #16]
 800773c:	dc02      	bgt.n	8007744 <_printf_float+0x164>
 800773e:	6822      	ldr	r2, [r4, #0]
 8007740:	07d2      	lsls	r2, r2, #31
 8007742:	d501      	bpl.n	8007748 <_printf_float+0x168>
 8007744:	3301      	adds	r3, #1
 8007746:	6123      	str	r3, [r4, #16]
 8007748:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800774c:	2b00      	cmp	r3, #0
 800774e:	d09c      	beq.n	800768a <_printf_float+0xaa>
 8007750:	232d      	movs	r3, #45	; 0x2d
 8007752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007756:	e798      	b.n	800768a <_printf_float+0xaa>
 8007758:	9a06      	ldr	r2, [sp, #24]
 800775a:	2a47      	cmp	r2, #71	; 0x47
 800775c:	d1be      	bne.n	80076dc <_printf_float+0xfc>
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1bc      	bne.n	80076dc <_printf_float+0xfc>
 8007762:	2301      	movs	r3, #1
 8007764:	e7b9      	b.n	80076da <_printf_float+0xfa>
 8007766:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800776a:	d118      	bne.n	800779e <_printf_float+0x1be>
 800776c:	2900      	cmp	r1, #0
 800776e:	6863      	ldr	r3, [r4, #4]
 8007770:	dd0b      	ble.n	800778a <_printf_float+0x1aa>
 8007772:	6121      	str	r1, [r4, #16]
 8007774:	b913      	cbnz	r3, 800777c <_printf_float+0x19c>
 8007776:	6822      	ldr	r2, [r4, #0]
 8007778:	07d0      	lsls	r0, r2, #31
 800777a:	d502      	bpl.n	8007782 <_printf_float+0x1a2>
 800777c:	3301      	adds	r3, #1
 800777e:	440b      	add	r3, r1
 8007780:	6123      	str	r3, [r4, #16]
 8007782:	65a1      	str	r1, [r4, #88]	; 0x58
 8007784:	f04f 0900 	mov.w	r9, #0
 8007788:	e7de      	b.n	8007748 <_printf_float+0x168>
 800778a:	b913      	cbnz	r3, 8007792 <_printf_float+0x1b2>
 800778c:	6822      	ldr	r2, [r4, #0]
 800778e:	07d2      	lsls	r2, r2, #31
 8007790:	d501      	bpl.n	8007796 <_printf_float+0x1b6>
 8007792:	3302      	adds	r3, #2
 8007794:	e7f4      	b.n	8007780 <_printf_float+0x1a0>
 8007796:	2301      	movs	r3, #1
 8007798:	e7f2      	b.n	8007780 <_printf_float+0x1a0>
 800779a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800779e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077a0:	4299      	cmp	r1, r3
 80077a2:	db05      	blt.n	80077b0 <_printf_float+0x1d0>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	6121      	str	r1, [r4, #16]
 80077a8:	07d8      	lsls	r0, r3, #31
 80077aa:	d5ea      	bpl.n	8007782 <_printf_float+0x1a2>
 80077ac:	1c4b      	adds	r3, r1, #1
 80077ae:	e7e7      	b.n	8007780 <_printf_float+0x1a0>
 80077b0:	2900      	cmp	r1, #0
 80077b2:	bfd4      	ite	le
 80077b4:	f1c1 0202 	rsble	r2, r1, #2
 80077b8:	2201      	movgt	r2, #1
 80077ba:	4413      	add	r3, r2
 80077bc:	e7e0      	b.n	8007780 <_printf_float+0x1a0>
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	055a      	lsls	r2, r3, #21
 80077c2:	d407      	bmi.n	80077d4 <_printf_float+0x1f4>
 80077c4:	6923      	ldr	r3, [r4, #16]
 80077c6:	4642      	mov	r2, r8
 80077c8:	4631      	mov	r1, r6
 80077ca:	4628      	mov	r0, r5
 80077cc:	47b8      	blx	r7
 80077ce:	3001      	adds	r0, #1
 80077d0:	d12c      	bne.n	800782c <_printf_float+0x24c>
 80077d2:	e764      	b.n	800769e <_printf_float+0xbe>
 80077d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077d8:	f240 80e0 	bls.w	800799c <_printf_float+0x3bc>
 80077dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077e0:	2200      	movs	r2, #0
 80077e2:	2300      	movs	r3, #0
 80077e4:	f7f9 f970 	bl	8000ac8 <__aeabi_dcmpeq>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d034      	beq.n	8007856 <_printf_float+0x276>
 80077ec:	4a37      	ldr	r2, [pc, #220]	; (80078cc <_printf_float+0x2ec>)
 80077ee:	2301      	movs	r3, #1
 80077f0:	4631      	mov	r1, r6
 80077f2:	4628      	mov	r0, r5
 80077f4:	47b8      	blx	r7
 80077f6:	3001      	adds	r0, #1
 80077f8:	f43f af51 	beq.w	800769e <_printf_float+0xbe>
 80077fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007800:	429a      	cmp	r2, r3
 8007802:	db02      	blt.n	800780a <_printf_float+0x22a>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	07d8      	lsls	r0, r3, #31
 8007808:	d510      	bpl.n	800782c <_printf_float+0x24c>
 800780a:	ee18 3a10 	vmov	r3, s16
 800780e:	4652      	mov	r2, sl
 8007810:	4631      	mov	r1, r6
 8007812:	4628      	mov	r0, r5
 8007814:	47b8      	blx	r7
 8007816:	3001      	adds	r0, #1
 8007818:	f43f af41 	beq.w	800769e <_printf_float+0xbe>
 800781c:	f04f 0800 	mov.w	r8, #0
 8007820:	f104 091a 	add.w	r9, r4, #26
 8007824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007826:	3b01      	subs	r3, #1
 8007828:	4543      	cmp	r3, r8
 800782a:	dc09      	bgt.n	8007840 <_printf_float+0x260>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	079b      	lsls	r3, r3, #30
 8007830:	f100 8107 	bmi.w	8007a42 <_printf_float+0x462>
 8007834:	68e0      	ldr	r0, [r4, #12]
 8007836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007838:	4298      	cmp	r0, r3
 800783a:	bfb8      	it	lt
 800783c:	4618      	movlt	r0, r3
 800783e:	e730      	b.n	80076a2 <_printf_float+0xc2>
 8007840:	2301      	movs	r3, #1
 8007842:	464a      	mov	r2, r9
 8007844:	4631      	mov	r1, r6
 8007846:	4628      	mov	r0, r5
 8007848:	47b8      	blx	r7
 800784a:	3001      	adds	r0, #1
 800784c:	f43f af27 	beq.w	800769e <_printf_float+0xbe>
 8007850:	f108 0801 	add.w	r8, r8, #1
 8007854:	e7e6      	b.n	8007824 <_printf_float+0x244>
 8007856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007858:	2b00      	cmp	r3, #0
 800785a:	dc39      	bgt.n	80078d0 <_printf_float+0x2f0>
 800785c:	4a1b      	ldr	r2, [pc, #108]	; (80078cc <_printf_float+0x2ec>)
 800785e:	2301      	movs	r3, #1
 8007860:	4631      	mov	r1, r6
 8007862:	4628      	mov	r0, r5
 8007864:	47b8      	blx	r7
 8007866:	3001      	adds	r0, #1
 8007868:	f43f af19 	beq.w	800769e <_printf_float+0xbe>
 800786c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007870:	4313      	orrs	r3, r2
 8007872:	d102      	bne.n	800787a <_printf_float+0x29a>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	07d9      	lsls	r1, r3, #31
 8007878:	d5d8      	bpl.n	800782c <_printf_float+0x24c>
 800787a:	ee18 3a10 	vmov	r3, s16
 800787e:	4652      	mov	r2, sl
 8007880:	4631      	mov	r1, r6
 8007882:	4628      	mov	r0, r5
 8007884:	47b8      	blx	r7
 8007886:	3001      	adds	r0, #1
 8007888:	f43f af09 	beq.w	800769e <_printf_float+0xbe>
 800788c:	f04f 0900 	mov.w	r9, #0
 8007890:	f104 0a1a 	add.w	sl, r4, #26
 8007894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007896:	425b      	negs	r3, r3
 8007898:	454b      	cmp	r3, r9
 800789a:	dc01      	bgt.n	80078a0 <_printf_float+0x2c0>
 800789c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800789e:	e792      	b.n	80077c6 <_printf_float+0x1e6>
 80078a0:	2301      	movs	r3, #1
 80078a2:	4652      	mov	r2, sl
 80078a4:	4631      	mov	r1, r6
 80078a6:	4628      	mov	r0, r5
 80078a8:	47b8      	blx	r7
 80078aa:	3001      	adds	r0, #1
 80078ac:	f43f aef7 	beq.w	800769e <_printf_float+0xbe>
 80078b0:	f109 0901 	add.w	r9, r9, #1
 80078b4:	e7ee      	b.n	8007894 <_printf_float+0x2b4>
 80078b6:	bf00      	nop
 80078b8:	7fefffff 	.word	0x7fefffff
 80078bc:	0800e1c0 	.word	0x0800e1c0
 80078c0:	0800e1c4 	.word	0x0800e1c4
 80078c4:	0800e1c8 	.word	0x0800e1c8
 80078c8:	0800e1cc 	.word	0x0800e1cc
 80078cc:	0800e1d0 	.word	0x0800e1d0
 80078d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078d4:	429a      	cmp	r2, r3
 80078d6:	bfa8      	it	ge
 80078d8:	461a      	movge	r2, r3
 80078da:	2a00      	cmp	r2, #0
 80078dc:	4691      	mov	r9, r2
 80078de:	dc37      	bgt.n	8007950 <_printf_float+0x370>
 80078e0:	f04f 0b00 	mov.w	fp, #0
 80078e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078e8:	f104 021a 	add.w	r2, r4, #26
 80078ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078ee:	9305      	str	r3, [sp, #20]
 80078f0:	eba3 0309 	sub.w	r3, r3, r9
 80078f4:	455b      	cmp	r3, fp
 80078f6:	dc33      	bgt.n	8007960 <_printf_float+0x380>
 80078f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078fc:	429a      	cmp	r2, r3
 80078fe:	db3b      	blt.n	8007978 <_printf_float+0x398>
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	07da      	lsls	r2, r3, #31
 8007904:	d438      	bmi.n	8007978 <_printf_float+0x398>
 8007906:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800790a:	eba2 0903 	sub.w	r9, r2, r3
 800790e:	9b05      	ldr	r3, [sp, #20]
 8007910:	1ad2      	subs	r2, r2, r3
 8007912:	4591      	cmp	r9, r2
 8007914:	bfa8      	it	ge
 8007916:	4691      	movge	r9, r2
 8007918:	f1b9 0f00 	cmp.w	r9, #0
 800791c:	dc35      	bgt.n	800798a <_printf_float+0x3aa>
 800791e:	f04f 0800 	mov.w	r8, #0
 8007922:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007926:	f104 0a1a 	add.w	sl, r4, #26
 800792a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800792e:	1a9b      	subs	r3, r3, r2
 8007930:	eba3 0309 	sub.w	r3, r3, r9
 8007934:	4543      	cmp	r3, r8
 8007936:	f77f af79 	ble.w	800782c <_printf_float+0x24c>
 800793a:	2301      	movs	r3, #1
 800793c:	4652      	mov	r2, sl
 800793e:	4631      	mov	r1, r6
 8007940:	4628      	mov	r0, r5
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	f43f aeaa 	beq.w	800769e <_printf_float+0xbe>
 800794a:	f108 0801 	add.w	r8, r8, #1
 800794e:	e7ec      	b.n	800792a <_printf_float+0x34a>
 8007950:	4613      	mov	r3, r2
 8007952:	4631      	mov	r1, r6
 8007954:	4642      	mov	r2, r8
 8007956:	4628      	mov	r0, r5
 8007958:	47b8      	blx	r7
 800795a:	3001      	adds	r0, #1
 800795c:	d1c0      	bne.n	80078e0 <_printf_float+0x300>
 800795e:	e69e      	b.n	800769e <_printf_float+0xbe>
 8007960:	2301      	movs	r3, #1
 8007962:	4631      	mov	r1, r6
 8007964:	4628      	mov	r0, r5
 8007966:	9205      	str	r2, [sp, #20]
 8007968:	47b8      	blx	r7
 800796a:	3001      	adds	r0, #1
 800796c:	f43f ae97 	beq.w	800769e <_printf_float+0xbe>
 8007970:	9a05      	ldr	r2, [sp, #20]
 8007972:	f10b 0b01 	add.w	fp, fp, #1
 8007976:	e7b9      	b.n	80078ec <_printf_float+0x30c>
 8007978:	ee18 3a10 	vmov	r3, s16
 800797c:	4652      	mov	r2, sl
 800797e:	4631      	mov	r1, r6
 8007980:	4628      	mov	r0, r5
 8007982:	47b8      	blx	r7
 8007984:	3001      	adds	r0, #1
 8007986:	d1be      	bne.n	8007906 <_printf_float+0x326>
 8007988:	e689      	b.n	800769e <_printf_float+0xbe>
 800798a:	9a05      	ldr	r2, [sp, #20]
 800798c:	464b      	mov	r3, r9
 800798e:	4442      	add	r2, r8
 8007990:	4631      	mov	r1, r6
 8007992:	4628      	mov	r0, r5
 8007994:	47b8      	blx	r7
 8007996:	3001      	adds	r0, #1
 8007998:	d1c1      	bne.n	800791e <_printf_float+0x33e>
 800799a:	e680      	b.n	800769e <_printf_float+0xbe>
 800799c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800799e:	2a01      	cmp	r2, #1
 80079a0:	dc01      	bgt.n	80079a6 <_printf_float+0x3c6>
 80079a2:	07db      	lsls	r3, r3, #31
 80079a4:	d53a      	bpl.n	8007a1c <_printf_float+0x43c>
 80079a6:	2301      	movs	r3, #1
 80079a8:	4642      	mov	r2, r8
 80079aa:	4631      	mov	r1, r6
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b8      	blx	r7
 80079b0:	3001      	adds	r0, #1
 80079b2:	f43f ae74 	beq.w	800769e <_printf_float+0xbe>
 80079b6:	ee18 3a10 	vmov	r3, s16
 80079ba:	4652      	mov	r2, sl
 80079bc:	4631      	mov	r1, r6
 80079be:	4628      	mov	r0, r5
 80079c0:	47b8      	blx	r7
 80079c2:	3001      	adds	r0, #1
 80079c4:	f43f ae6b 	beq.w	800769e <_printf_float+0xbe>
 80079c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079cc:	2200      	movs	r2, #0
 80079ce:	2300      	movs	r3, #0
 80079d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80079d4:	f7f9 f878 	bl	8000ac8 <__aeabi_dcmpeq>
 80079d8:	b9d8      	cbnz	r0, 8007a12 <_printf_float+0x432>
 80079da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80079de:	f108 0201 	add.w	r2, r8, #1
 80079e2:	4631      	mov	r1, r6
 80079e4:	4628      	mov	r0, r5
 80079e6:	47b8      	blx	r7
 80079e8:	3001      	adds	r0, #1
 80079ea:	d10e      	bne.n	8007a0a <_printf_float+0x42a>
 80079ec:	e657      	b.n	800769e <_printf_float+0xbe>
 80079ee:	2301      	movs	r3, #1
 80079f0:	4652      	mov	r2, sl
 80079f2:	4631      	mov	r1, r6
 80079f4:	4628      	mov	r0, r5
 80079f6:	47b8      	blx	r7
 80079f8:	3001      	adds	r0, #1
 80079fa:	f43f ae50 	beq.w	800769e <_printf_float+0xbe>
 80079fe:	f108 0801 	add.w	r8, r8, #1
 8007a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a04:	3b01      	subs	r3, #1
 8007a06:	4543      	cmp	r3, r8
 8007a08:	dcf1      	bgt.n	80079ee <_printf_float+0x40e>
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a10:	e6da      	b.n	80077c8 <_printf_float+0x1e8>
 8007a12:	f04f 0800 	mov.w	r8, #0
 8007a16:	f104 0a1a 	add.w	sl, r4, #26
 8007a1a:	e7f2      	b.n	8007a02 <_printf_float+0x422>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	4642      	mov	r2, r8
 8007a20:	e7df      	b.n	80079e2 <_printf_float+0x402>
 8007a22:	2301      	movs	r3, #1
 8007a24:	464a      	mov	r2, r9
 8007a26:	4631      	mov	r1, r6
 8007a28:	4628      	mov	r0, r5
 8007a2a:	47b8      	blx	r7
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	f43f ae36 	beq.w	800769e <_printf_float+0xbe>
 8007a32:	f108 0801 	add.w	r8, r8, #1
 8007a36:	68e3      	ldr	r3, [r4, #12]
 8007a38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a3a:	1a5b      	subs	r3, r3, r1
 8007a3c:	4543      	cmp	r3, r8
 8007a3e:	dcf0      	bgt.n	8007a22 <_printf_float+0x442>
 8007a40:	e6f8      	b.n	8007834 <_printf_float+0x254>
 8007a42:	f04f 0800 	mov.w	r8, #0
 8007a46:	f104 0919 	add.w	r9, r4, #25
 8007a4a:	e7f4      	b.n	8007a36 <_printf_float+0x456>

08007a4c <_printf_common>:
 8007a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a50:	4616      	mov	r6, r2
 8007a52:	4699      	mov	r9, r3
 8007a54:	688a      	ldr	r2, [r1, #8]
 8007a56:	690b      	ldr	r3, [r1, #16]
 8007a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	bfb8      	it	lt
 8007a60:	4613      	movlt	r3, r2
 8007a62:	6033      	str	r3, [r6, #0]
 8007a64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a68:	4607      	mov	r7, r0
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	b10a      	cbz	r2, 8007a72 <_printf_common+0x26>
 8007a6e:	3301      	adds	r3, #1
 8007a70:	6033      	str	r3, [r6, #0]
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	0699      	lsls	r1, r3, #26
 8007a76:	bf42      	ittt	mi
 8007a78:	6833      	ldrmi	r3, [r6, #0]
 8007a7a:	3302      	addmi	r3, #2
 8007a7c:	6033      	strmi	r3, [r6, #0]
 8007a7e:	6825      	ldr	r5, [r4, #0]
 8007a80:	f015 0506 	ands.w	r5, r5, #6
 8007a84:	d106      	bne.n	8007a94 <_printf_common+0x48>
 8007a86:	f104 0a19 	add.w	sl, r4, #25
 8007a8a:	68e3      	ldr	r3, [r4, #12]
 8007a8c:	6832      	ldr	r2, [r6, #0]
 8007a8e:	1a9b      	subs	r3, r3, r2
 8007a90:	42ab      	cmp	r3, r5
 8007a92:	dc26      	bgt.n	8007ae2 <_printf_common+0x96>
 8007a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a98:	1e13      	subs	r3, r2, #0
 8007a9a:	6822      	ldr	r2, [r4, #0]
 8007a9c:	bf18      	it	ne
 8007a9e:	2301      	movne	r3, #1
 8007aa0:	0692      	lsls	r2, r2, #26
 8007aa2:	d42b      	bmi.n	8007afc <_printf_common+0xb0>
 8007aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aa8:	4649      	mov	r1, r9
 8007aaa:	4638      	mov	r0, r7
 8007aac:	47c0      	blx	r8
 8007aae:	3001      	adds	r0, #1
 8007ab0:	d01e      	beq.n	8007af0 <_printf_common+0xa4>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	6922      	ldr	r2, [r4, #16]
 8007ab6:	f003 0306 	and.w	r3, r3, #6
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	bf02      	ittt	eq
 8007abe:	68e5      	ldreq	r5, [r4, #12]
 8007ac0:	6833      	ldreq	r3, [r6, #0]
 8007ac2:	1aed      	subeq	r5, r5, r3
 8007ac4:	68a3      	ldr	r3, [r4, #8]
 8007ac6:	bf0c      	ite	eq
 8007ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007acc:	2500      	movne	r5, #0
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	bfc4      	itt	gt
 8007ad2:	1a9b      	subgt	r3, r3, r2
 8007ad4:	18ed      	addgt	r5, r5, r3
 8007ad6:	2600      	movs	r6, #0
 8007ad8:	341a      	adds	r4, #26
 8007ada:	42b5      	cmp	r5, r6
 8007adc:	d11a      	bne.n	8007b14 <_printf_common+0xc8>
 8007ade:	2000      	movs	r0, #0
 8007ae0:	e008      	b.n	8007af4 <_printf_common+0xa8>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	4652      	mov	r2, sl
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	4638      	mov	r0, r7
 8007aea:	47c0      	blx	r8
 8007aec:	3001      	adds	r0, #1
 8007aee:	d103      	bne.n	8007af8 <_printf_common+0xac>
 8007af0:	f04f 30ff 	mov.w	r0, #4294967295
 8007af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af8:	3501      	adds	r5, #1
 8007afa:	e7c6      	b.n	8007a8a <_printf_common+0x3e>
 8007afc:	18e1      	adds	r1, r4, r3
 8007afe:	1c5a      	adds	r2, r3, #1
 8007b00:	2030      	movs	r0, #48	; 0x30
 8007b02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b06:	4422      	add	r2, r4
 8007b08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b10:	3302      	adds	r3, #2
 8007b12:	e7c7      	b.n	8007aa4 <_printf_common+0x58>
 8007b14:	2301      	movs	r3, #1
 8007b16:	4622      	mov	r2, r4
 8007b18:	4649      	mov	r1, r9
 8007b1a:	4638      	mov	r0, r7
 8007b1c:	47c0      	blx	r8
 8007b1e:	3001      	adds	r0, #1
 8007b20:	d0e6      	beq.n	8007af0 <_printf_common+0xa4>
 8007b22:	3601      	adds	r6, #1
 8007b24:	e7d9      	b.n	8007ada <_printf_common+0x8e>
	...

08007b28 <_printf_i>:
 8007b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b2c:	7e0f      	ldrb	r7, [r1, #24]
 8007b2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b30:	2f78      	cmp	r7, #120	; 0x78
 8007b32:	4691      	mov	r9, r2
 8007b34:	4680      	mov	r8, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	469a      	mov	sl, r3
 8007b3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b3e:	d807      	bhi.n	8007b50 <_printf_i+0x28>
 8007b40:	2f62      	cmp	r7, #98	; 0x62
 8007b42:	d80a      	bhi.n	8007b5a <_printf_i+0x32>
 8007b44:	2f00      	cmp	r7, #0
 8007b46:	f000 80d4 	beq.w	8007cf2 <_printf_i+0x1ca>
 8007b4a:	2f58      	cmp	r7, #88	; 0x58
 8007b4c:	f000 80c0 	beq.w	8007cd0 <_printf_i+0x1a8>
 8007b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b58:	e03a      	b.n	8007bd0 <_printf_i+0xa8>
 8007b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b5e:	2b15      	cmp	r3, #21
 8007b60:	d8f6      	bhi.n	8007b50 <_printf_i+0x28>
 8007b62:	a101      	add	r1, pc, #4	; (adr r1, 8007b68 <_printf_i+0x40>)
 8007b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b68:	08007bc1 	.word	0x08007bc1
 8007b6c:	08007bd5 	.word	0x08007bd5
 8007b70:	08007b51 	.word	0x08007b51
 8007b74:	08007b51 	.word	0x08007b51
 8007b78:	08007b51 	.word	0x08007b51
 8007b7c:	08007b51 	.word	0x08007b51
 8007b80:	08007bd5 	.word	0x08007bd5
 8007b84:	08007b51 	.word	0x08007b51
 8007b88:	08007b51 	.word	0x08007b51
 8007b8c:	08007b51 	.word	0x08007b51
 8007b90:	08007b51 	.word	0x08007b51
 8007b94:	08007cd9 	.word	0x08007cd9
 8007b98:	08007c01 	.word	0x08007c01
 8007b9c:	08007c93 	.word	0x08007c93
 8007ba0:	08007b51 	.word	0x08007b51
 8007ba4:	08007b51 	.word	0x08007b51
 8007ba8:	08007cfb 	.word	0x08007cfb
 8007bac:	08007b51 	.word	0x08007b51
 8007bb0:	08007c01 	.word	0x08007c01
 8007bb4:	08007b51 	.word	0x08007b51
 8007bb8:	08007b51 	.word	0x08007b51
 8007bbc:	08007c9b 	.word	0x08007c9b
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	1d1a      	adds	r2, r3, #4
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	602a      	str	r2, [r5, #0]
 8007bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e09f      	b.n	8007d14 <_printf_i+0x1ec>
 8007bd4:	6820      	ldr	r0, [r4, #0]
 8007bd6:	682b      	ldr	r3, [r5, #0]
 8007bd8:	0607      	lsls	r7, r0, #24
 8007bda:	f103 0104 	add.w	r1, r3, #4
 8007bde:	6029      	str	r1, [r5, #0]
 8007be0:	d501      	bpl.n	8007be6 <_printf_i+0xbe>
 8007be2:	681e      	ldr	r6, [r3, #0]
 8007be4:	e003      	b.n	8007bee <_printf_i+0xc6>
 8007be6:	0646      	lsls	r6, r0, #25
 8007be8:	d5fb      	bpl.n	8007be2 <_printf_i+0xba>
 8007bea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007bee:	2e00      	cmp	r6, #0
 8007bf0:	da03      	bge.n	8007bfa <_printf_i+0xd2>
 8007bf2:	232d      	movs	r3, #45	; 0x2d
 8007bf4:	4276      	negs	r6, r6
 8007bf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bfa:	485a      	ldr	r0, [pc, #360]	; (8007d64 <_printf_i+0x23c>)
 8007bfc:	230a      	movs	r3, #10
 8007bfe:	e012      	b.n	8007c26 <_printf_i+0xfe>
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	6820      	ldr	r0, [r4, #0]
 8007c04:	1d19      	adds	r1, r3, #4
 8007c06:	6029      	str	r1, [r5, #0]
 8007c08:	0605      	lsls	r5, r0, #24
 8007c0a:	d501      	bpl.n	8007c10 <_printf_i+0xe8>
 8007c0c:	681e      	ldr	r6, [r3, #0]
 8007c0e:	e002      	b.n	8007c16 <_printf_i+0xee>
 8007c10:	0641      	lsls	r1, r0, #25
 8007c12:	d5fb      	bpl.n	8007c0c <_printf_i+0xe4>
 8007c14:	881e      	ldrh	r6, [r3, #0]
 8007c16:	4853      	ldr	r0, [pc, #332]	; (8007d64 <_printf_i+0x23c>)
 8007c18:	2f6f      	cmp	r7, #111	; 0x6f
 8007c1a:	bf0c      	ite	eq
 8007c1c:	2308      	moveq	r3, #8
 8007c1e:	230a      	movne	r3, #10
 8007c20:	2100      	movs	r1, #0
 8007c22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c26:	6865      	ldr	r5, [r4, #4]
 8007c28:	60a5      	str	r5, [r4, #8]
 8007c2a:	2d00      	cmp	r5, #0
 8007c2c:	bfa2      	ittt	ge
 8007c2e:	6821      	ldrge	r1, [r4, #0]
 8007c30:	f021 0104 	bicge.w	r1, r1, #4
 8007c34:	6021      	strge	r1, [r4, #0]
 8007c36:	b90e      	cbnz	r6, 8007c3c <_printf_i+0x114>
 8007c38:	2d00      	cmp	r5, #0
 8007c3a:	d04b      	beq.n	8007cd4 <_printf_i+0x1ac>
 8007c3c:	4615      	mov	r5, r2
 8007c3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c42:	fb03 6711 	mls	r7, r3, r1, r6
 8007c46:	5dc7      	ldrb	r7, [r0, r7]
 8007c48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c4c:	4637      	mov	r7, r6
 8007c4e:	42bb      	cmp	r3, r7
 8007c50:	460e      	mov	r6, r1
 8007c52:	d9f4      	bls.n	8007c3e <_printf_i+0x116>
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d10b      	bne.n	8007c70 <_printf_i+0x148>
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	07de      	lsls	r6, r3, #31
 8007c5c:	d508      	bpl.n	8007c70 <_printf_i+0x148>
 8007c5e:	6923      	ldr	r3, [r4, #16]
 8007c60:	6861      	ldr	r1, [r4, #4]
 8007c62:	4299      	cmp	r1, r3
 8007c64:	bfde      	ittt	le
 8007c66:	2330      	movle	r3, #48	; 0x30
 8007c68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c70:	1b52      	subs	r2, r2, r5
 8007c72:	6122      	str	r2, [r4, #16]
 8007c74:	f8cd a000 	str.w	sl, [sp]
 8007c78:	464b      	mov	r3, r9
 8007c7a:	aa03      	add	r2, sp, #12
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4640      	mov	r0, r8
 8007c80:	f7ff fee4 	bl	8007a4c <_printf_common>
 8007c84:	3001      	adds	r0, #1
 8007c86:	d14a      	bne.n	8007d1e <_printf_i+0x1f6>
 8007c88:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8c:	b004      	add	sp, #16
 8007c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	f043 0320 	orr.w	r3, r3, #32
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	4833      	ldr	r0, [pc, #204]	; (8007d68 <_printf_i+0x240>)
 8007c9c:	2778      	movs	r7, #120	; 0x78
 8007c9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	6829      	ldr	r1, [r5, #0]
 8007ca6:	061f      	lsls	r7, r3, #24
 8007ca8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cac:	d402      	bmi.n	8007cb4 <_printf_i+0x18c>
 8007cae:	065f      	lsls	r7, r3, #25
 8007cb0:	bf48      	it	mi
 8007cb2:	b2b6      	uxthmi	r6, r6
 8007cb4:	07df      	lsls	r7, r3, #31
 8007cb6:	bf48      	it	mi
 8007cb8:	f043 0320 	orrmi.w	r3, r3, #32
 8007cbc:	6029      	str	r1, [r5, #0]
 8007cbe:	bf48      	it	mi
 8007cc0:	6023      	strmi	r3, [r4, #0]
 8007cc2:	b91e      	cbnz	r6, 8007ccc <_printf_i+0x1a4>
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	f023 0320 	bic.w	r3, r3, #32
 8007cca:	6023      	str	r3, [r4, #0]
 8007ccc:	2310      	movs	r3, #16
 8007cce:	e7a7      	b.n	8007c20 <_printf_i+0xf8>
 8007cd0:	4824      	ldr	r0, [pc, #144]	; (8007d64 <_printf_i+0x23c>)
 8007cd2:	e7e4      	b.n	8007c9e <_printf_i+0x176>
 8007cd4:	4615      	mov	r5, r2
 8007cd6:	e7bd      	b.n	8007c54 <_printf_i+0x12c>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	6826      	ldr	r6, [r4, #0]
 8007cdc:	6961      	ldr	r1, [r4, #20]
 8007cde:	1d18      	adds	r0, r3, #4
 8007ce0:	6028      	str	r0, [r5, #0]
 8007ce2:	0635      	lsls	r5, r6, #24
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	d501      	bpl.n	8007cec <_printf_i+0x1c4>
 8007ce8:	6019      	str	r1, [r3, #0]
 8007cea:	e002      	b.n	8007cf2 <_printf_i+0x1ca>
 8007cec:	0670      	lsls	r0, r6, #25
 8007cee:	d5fb      	bpl.n	8007ce8 <_printf_i+0x1c0>
 8007cf0:	8019      	strh	r1, [r3, #0]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	6123      	str	r3, [r4, #16]
 8007cf6:	4615      	mov	r5, r2
 8007cf8:	e7bc      	b.n	8007c74 <_printf_i+0x14c>
 8007cfa:	682b      	ldr	r3, [r5, #0]
 8007cfc:	1d1a      	adds	r2, r3, #4
 8007cfe:	602a      	str	r2, [r5, #0]
 8007d00:	681d      	ldr	r5, [r3, #0]
 8007d02:	6862      	ldr	r2, [r4, #4]
 8007d04:	2100      	movs	r1, #0
 8007d06:	4628      	mov	r0, r5
 8007d08:	f7f8 fa62 	bl	80001d0 <memchr>
 8007d0c:	b108      	cbz	r0, 8007d12 <_printf_i+0x1ea>
 8007d0e:	1b40      	subs	r0, r0, r5
 8007d10:	6060      	str	r0, [r4, #4]
 8007d12:	6863      	ldr	r3, [r4, #4]
 8007d14:	6123      	str	r3, [r4, #16]
 8007d16:	2300      	movs	r3, #0
 8007d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d1c:	e7aa      	b.n	8007c74 <_printf_i+0x14c>
 8007d1e:	6923      	ldr	r3, [r4, #16]
 8007d20:	462a      	mov	r2, r5
 8007d22:	4649      	mov	r1, r9
 8007d24:	4640      	mov	r0, r8
 8007d26:	47d0      	blx	sl
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d0ad      	beq.n	8007c88 <_printf_i+0x160>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	079b      	lsls	r3, r3, #30
 8007d30:	d413      	bmi.n	8007d5a <_printf_i+0x232>
 8007d32:	68e0      	ldr	r0, [r4, #12]
 8007d34:	9b03      	ldr	r3, [sp, #12]
 8007d36:	4298      	cmp	r0, r3
 8007d38:	bfb8      	it	lt
 8007d3a:	4618      	movlt	r0, r3
 8007d3c:	e7a6      	b.n	8007c8c <_printf_i+0x164>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	4632      	mov	r2, r6
 8007d42:	4649      	mov	r1, r9
 8007d44:	4640      	mov	r0, r8
 8007d46:	47d0      	blx	sl
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d09d      	beq.n	8007c88 <_printf_i+0x160>
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	68e3      	ldr	r3, [r4, #12]
 8007d50:	9903      	ldr	r1, [sp, #12]
 8007d52:	1a5b      	subs	r3, r3, r1
 8007d54:	42ab      	cmp	r3, r5
 8007d56:	dcf2      	bgt.n	8007d3e <_printf_i+0x216>
 8007d58:	e7eb      	b.n	8007d32 <_printf_i+0x20a>
 8007d5a:	2500      	movs	r5, #0
 8007d5c:	f104 0619 	add.w	r6, r4, #25
 8007d60:	e7f5      	b.n	8007d4e <_printf_i+0x226>
 8007d62:	bf00      	nop
 8007d64:	0800e1d2 	.word	0x0800e1d2
 8007d68:	0800e1e3 	.word	0x0800e1e3

08007d6c <__sflush_r>:
 8007d6c:	898a      	ldrh	r2, [r1, #12]
 8007d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d72:	4605      	mov	r5, r0
 8007d74:	0710      	lsls	r0, r2, #28
 8007d76:	460c      	mov	r4, r1
 8007d78:	d458      	bmi.n	8007e2c <__sflush_r+0xc0>
 8007d7a:	684b      	ldr	r3, [r1, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	dc05      	bgt.n	8007d8c <__sflush_r+0x20>
 8007d80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	dc02      	bgt.n	8007d8c <__sflush_r+0x20>
 8007d86:	2000      	movs	r0, #0
 8007d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d8e:	2e00      	cmp	r6, #0
 8007d90:	d0f9      	beq.n	8007d86 <__sflush_r+0x1a>
 8007d92:	2300      	movs	r3, #0
 8007d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d98:	682f      	ldr	r7, [r5, #0]
 8007d9a:	6a21      	ldr	r1, [r4, #32]
 8007d9c:	602b      	str	r3, [r5, #0]
 8007d9e:	d032      	beq.n	8007e06 <__sflush_r+0x9a>
 8007da0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007da2:	89a3      	ldrh	r3, [r4, #12]
 8007da4:	075a      	lsls	r2, r3, #29
 8007da6:	d505      	bpl.n	8007db4 <__sflush_r+0x48>
 8007da8:	6863      	ldr	r3, [r4, #4]
 8007daa:	1ac0      	subs	r0, r0, r3
 8007dac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dae:	b10b      	cbz	r3, 8007db4 <__sflush_r+0x48>
 8007db0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007db2:	1ac0      	subs	r0, r0, r3
 8007db4:	2300      	movs	r3, #0
 8007db6:	4602      	mov	r2, r0
 8007db8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dba:	6a21      	ldr	r1, [r4, #32]
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	47b0      	blx	r6
 8007dc0:	1c43      	adds	r3, r0, #1
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	d106      	bne.n	8007dd4 <__sflush_r+0x68>
 8007dc6:	6829      	ldr	r1, [r5, #0]
 8007dc8:	291d      	cmp	r1, #29
 8007dca:	d82b      	bhi.n	8007e24 <__sflush_r+0xb8>
 8007dcc:	4a29      	ldr	r2, [pc, #164]	; (8007e74 <__sflush_r+0x108>)
 8007dce:	410a      	asrs	r2, r1
 8007dd0:	07d6      	lsls	r6, r2, #31
 8007dd2:	d427      	bmi.n	8007e24 <__sflush_r+0xb8>
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	6062      	str	r2, [r4, #4]
 8007dd8:	04d9      	lsls	r1, r3, #19
 8007dda:	6922      	ldr	r2, [r4, #16]
 8007ddc:	6022      	str	r2, [r4, #0]
 8007dde:	d504      	bpl.n	8007dea <__sflush_r+0x7e>
 8007de0:	1c42      	adds	r2, r0, #1
 8007de2:	d101      	bne.n	8007de8 <__sflush_r+0x7c>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	b903      	cbnz	r3, 8007dea <__sflush_r+0x7e>
 8007de8:	6560      	str	r0, [r4, #84]	; 0x54
 8007dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dec:	602f      	str	r7, [r5, #0]
 8007dee:	2900      	cmp	r1, #0
 8007df0:	d0c9      	beq.n	8007d86 <__sflush_r+0x1a>
 8007df2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007df6:	4299      	cmp	r1, r3
 8007df8:	d002      	beq.n	8007e00 <__sflush_r+0x94>
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f001 f8ba 	bl	8008f74 <_free_r>
 8007e00:	2000      	movs	r0, #0
 8007e02:	6360      	str	r0, [r4, #52]	; 0x34
 8007e04:	e7c0      	b.n	8007d88 <__sflush_r+0x1c>
 8007e06:	2301      	movs	r3, #1
 8007e08:	4628      	mov	r0, r5
 8007e0a:	47b0      	blx	r6
 8007e0c:	1c41      	adds	r1, r0, #1
 8007e0e:	d1c8      	bne.n	8007da2 <__sflush_r+0x36>
 8007e10:	682b      	ldr	r3, [r5, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0c5      	beq.n	8007da2 <__sflush_r+0x36>
 8007e16:	2b1d      	cmp	r3, #29
 8007e18:	d001      	beq.n	8007e1e <__sflush_r+0xb2>
 8007e1a:	2b16      	cmp	r3, #22
 8007e1c:	d101      	bne.n	8007e22 <__sflush_r+0xb6>
 8007e1e:	602f      	str	r7, [r5, #0]
 8007e20:	e7b1      	b.n	8007d86 <__sflush_r+0x1a>
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e28:	81a3      	strh	r3, [r4, #12]
 8007e2a:	e7ad      	b.n	8007d88 <__sflush_r+0x1c>
 8007e2c:	690f      	ldr	r7, [r1, #16]
 8007e2e:	2f00      	cmp	r7, #0
 8007e30:	d0a9      	beq.n	8007d86 <__sflush_r+0x1a>
 8007e32:	0793      	lsls	r3, r2, #30
 8007e34:	680e      	ldr	r6, [r1, #0]
 8007e36:	bf08      	it	eq
 8007e38:	694b      	ldreq	r3, [r1, #20]
 8007e3a:	600f      	str	r7, [r1, #0]
 8007e3c:	bf18      	it	ne
 8007e3e:	2300      	movne	r3, #0
 8007e40:	eba6 0807 	sub.w	r8, r6, r7
 8007e44:	608b      	str	r3, [r1, #8]
 8007e46:	f1b8 0f00 	cmp.w	r8, #0
 8007e4a:	dd9c      	ble.n	8007d86 <__sflush_r+0x1a>
 8007e4c:	6a21      	ldr	r1, [r4, #32]
 8007e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e50:	4643      	mov	r3, r8
 8007e52:	463a      	mov	r2, r7
 8007e54:	4628      	mov	r0, r5
 8007e56:	47b0      	blx	r6
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	dc06      	bgt.n	8007e6a <__sflush_r+0xfe>
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e62:	81a3      	strh	r3, [r4, #12]
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	e78e      	b.n	8007d88 <__sflush_r+0x1c>
 8007e6a:	4407      	add	r7, r0
 8007e6c:	eba8 0800 	sub.w	r8, r8, r0
 8007e70:	e7e9      	b.n	8007e46 <__sflush_r+0xda>
 8007e72:	bf00      	nop
 8007e74:	dfbffffe 	.word	0xdfbffffe

08007e78 <_fflush_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	690b      	ldr	r3, [r1, #16]
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	b913      	cbnz	r3, 8007e88 <_fflush_r+0x10>
 8007e82:	2500      	movs	r5, #0
 8007e84:	4628      	mov	r0, r5
 8007e86:	bd38      	pop	{r3, r4, r5, pc}
 8007e88:	b118      	cbz	r0, 8007e92 <_fflush_r+0x1a>
 8007e8a:	6a03      	ldr	r3, [r0, #32]
 8007e8c:	b90b      	cbnz	r3, 8007e92 <_fflush_r+0x1a>
 8007e8e:	f000 f8a7 	bl	8007fe0 <__sinit>
 8007e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0f3      	beq.n	8007e82 <_fflush_r+0xa>
 8007e9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e9c:	07d0      	lsls	r0, r2, #31
 8007e9e:	d404      	bmi.n	8007eaa <_fflush_r+0x32>
 8007ea0:	0599      	lsls	r1, r3, #22
 8007ea2:	d402      	bmi.n	8007eaa <_fflush_r+0x32>
 8007ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ea6:	f000 f9d8 	bl	800825a <__retarget_lock_acquire_recursive>
 8007eaa:	4628      	mov	r0, r5
 8007eac:	4621      	mov	r1, r4
 8007eae:	f7ff ff5d 	bl	8007d6c <__sflush_r>
 8007eb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007eb4:	07da      	lsls	r2, r3, #31
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	d4e4      	bmi.n	8007e84 <_fflush_r+0xc>
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	059b      	lsls	r3, r3, #22
 8007ebe:	d4e1      	bmi.n	8007e84 <_fflush_r+0xc>
 8007ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ec2:	f000 f9cb 	bl	800825c <__retarget_lock_release_recursive>
 8007ec6:	e7dd      	b.n	8007e84 <_fflush_r+0xc>

08007ec8 <std>:
 8007ec8:	2300      	movs	r3, #0
 8007eca:	b510      	push	{r4, lr}
 8007ecc:	4604      	mov	r4, r0
 8007ece:	e9c0 3300 	strd	r3, r3, [r0]
 8007ed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ed6:	6083      	str	r3, [r0, #8]
 8007ed8:	8181      	strh	r1, [r0, #12]
 8007eda:	6643      	str	r3, [r0, #100]	; 0x64
 8007edc:	81c2      	strh	r2, [r0, #14]
 8007ede:	6183      	str	r3, [r0, #24]
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	2208      	movs	r2, #8
 8007ee4:	305c      	adds	r0, #92	; 0x5c
 8007ee6:	f000 f93b 	bl	8008160 <memset>
 8007eea:	4b0d      	ldr	r3, [pc, #52]	; (8007f20 <std+0x58>)
 8007eec:	6263      	str	r3, [r4, #36]	; 0x24
 8007eee:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <std+0x5c>)
 8007ef0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ef2:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <std+0x60>)
 8007ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ef6:	4b0d      	ldr	r3, [pc, #52]	; (8007f2c <std+0x64>)
 8007ef8:	6323      	str	r3, [r4, #48]	; 0x30
 8007efa:	4b0d      	ldr	r3, [pc, #52]	; (8007f30 <std+0x68>)
 8007efc:	6224      	str	r4, [r4, #32]
 8007efe:	429c      	cmp	r4, r3
 8007f00:	d006      	beq.n	8007f10 <std+0x48>
 8007f02:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007f06:	4294      	cmp	r4, r2
 8007f08:	d002      	beq.n	8007f10 <std+0x48>
 8007f0a:	33d0      	adds	r3, #208	; 0xd0
 8007f0c:	429c      	cmp	r4, r3
 8007f0e:	d105      	bne.n	8007f1c <std+0x54>
 8007f10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f18:	f000 b99e 	b.w	8008258 <__retarget_lock_init_recursive>
 8007f1c:	bd10      	pop	{r4, pc}
 8007f1e:	bf00      	nop
 8007f20:	08008071 	.word	0x08008071
 8007f24:	08008093 	.word	0x08008093
 8007f28:	080080cb 	.word	0x080080cb
 8007f2c:	080080ef 	.word	0x080080ef
 8007f30:	2000a3e4 	.word	0x2000a3e4

08007f34 <stdio_exit_handler>:
 8007f34:	4a02      	ldr	r2, [pc, #8]	; (8007f40 <stdio_exit_handler+0xc>)
 8007f36:	4903      	ldr	r1, [pc, #12]	; (8007f44 <stdio_exit_handler+0x10>)
 8007f38:	4803      	ldr	r0, [pc, #12]	; (8007f48 <stdio_exit_handler+0x14>)
 8007f3a:	f000 b869 	b.w	8008010 <_fwalk_sglue>
 8007f3e:	bf00      	nop
 8007f40:	20000014 	.word	0x20000014
 8007f44:	08007e79 	.word	0x08007e79
 8007f48:	20000020 	.word	0x20000020

08007f4c <cleanup_stdio>:
 8007f4c:	6841      	ldr	r1, [r0, #4]
 8007f4e:	4b0c      	ldr	r3, [pc, #48]	; (8007f80 <cleanup_stdio+0x34>)
 8007f50:	4299      	cmp	r1, r3
 8007f52:	b510      	push	{r4, lr}
 8007f54:	4604      	mov	r4, r0
 8007f56:	d001      	beq.n	8007f5c <cleanup_stdio+0x10>
 8007f58:	f7ff ff8e 	bl	8007e78 <_fflush_r>
 8007f5c:	68a1      	ldr	r1, [r4, #8]
 8007f5e:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <cleanup_stdio+0x38>)
 8007f60:	4299      	cmp	r1, r3
 8007f62:	d002      	beq.n	8007f6a <cleanup_stdio+0x1e>
 8007f64:	4620      	mov	r0, r4
 8007f66:	f7ff ff87 	bl	8007e78 <_fflush_r>
 8007f6a:	68e1      	ldr	r1, [r4, #12]
 8007f6c:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <cleanup_stdio+0x3c>)
 8007f6e:	4299      	cmp	r1, r3
 8007f70:	d004      	beq.n	8007f7c <cleanup_stdio+0x30>
 8007f72:	4620      	mov	r0, r4
 8007f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f78:	f7ff bf7e 	b.w	8007e78 <_fflush_r>
 8007f7c:	bd10      	pop	{r4, pc}
 8007f7e:	bf00      	nop
 8007f80:	2000a3e4 	.word	0x2000a3e4
 8007f84:	2000a44c 	.word	0x2000a44c
 8007f88:	2000a4b4 	.word	0x2000a4b4

08007f8c <global_stdio_init.part.0>:
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	4b0b      	ldr	r3, [pc, #44]	; (8007fbc <global_stdio_init.part.0+0x30>)
 8007f90:	4c0b      	ldr	r4, [pc, #44]	; (8007fc0 <global_stdio_init.part.0+0x34>)
 8007f92:	4a0c      	ldr	r2, [pc, #48]	; (8007fc4 <global_stdio_init.part.0+0x38>)
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	4620      	mov	r0, r4
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2104      	movs	r1, #4
 8007f9c:	f7ff ff94 	bl	8007ec8 <std>
 8007fa0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	2109      	movs	r1, #9
 8007fa8:	f7ff ff8e 	bl	8007ec8 <std>
 8007fac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb6:	2112      	movs	r1, #18
 8007fb8:	f7ff bf86 	b.w	8007ec8 <std>
 8007fbc:	2000a51c 	.word	0x2000a51c
 8007fc0:	2000a3e4 	.word	0x2000a3e4
 8007fc4:	08007f35 	.word	0x08007f35

08007fc8 <__sfp_lock_acquire>:
 8007fc8:	4801      	ldr	r0, [pc, #4]	; (8007fd0 <__sfp_lock_acquire+0x8>)
 8007fca:	f000 b946 	b.w	800825a <__retarget_lock_acquire_recursive>
 8007fce:	bf00      	nop
 8007fd0:	2000a525 	.word	0x2000a525

08007fd4 <__sfp_lock_release>:
 8007fd4:	4801      	ldr	r0, [pc, #4]	; (8007fdc <__sfp_lock_release+0x8>)
 8007fd6:	f000 b941 	b.w	800825c <__retarget_lock_release_recursive>
 8007fda:	bf00      	nop
 8007fdc:	2000a525 	.word	0x2000a525

08007fe0 <__sinit>:
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	f7ff fff0 	bl	8007fc8 <__sfp_lock_acquire>
 8007fe8:	6a23      	ldr	r3, [r4, #32]
 8007fea:	b11b      	cbz	r3, 8007ff4 <__sinit+0x14>
 8007fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff0:	f7ff bff0 	b.w	8007fd4 <__sfp_lock_release>
 8007ff4:	4b04      	ldr	r3, [pc, #16]	; (8008008 <__sinit+0x28>)
 8007ff6:	6223      	str	r3, [r4, #32]
 8007ff8:	4b04      	ldr	r3, [pc, #16]	; (800800c <__sinit+0x2c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1f5      	bne.n	8007fec <__sinit+0xc>
 8008000:	f7ff ffc4 	bl	8007f8c <global_stdio_init.part.0>
 8008004:	e7f2      	b.n	8007fec <__sinit+0xc>
 8008006:	bf00      	nop
 8008008:	08007f4d 	.word	0x08007f4d
 800800c:	2000a51c 	.word	0x2000a51c

08008010 <_fwalk_sglue>:
 8008010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008014:	4607      	mov	r7, r0
 8008016:	4688      	mov	r8, r1
 8008018:	4614      	mov	r4, r2
 800801a:	2600      	movs	r6, #0
 800801c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008020:	f1b9 0901 	subs.w	r9, r9, #1
 8008024:	d505      	bpl.n	8008032 <_fwalk_sglue+0x22>
 8008026:	6824      	ldr	r4, [r4, #0]
 8008028:	2c00      	cmp	r4, #0
 800802a:	d1f7      	bne.n	800801c <_fwalk_sglue+0xc>
 800802c:	4630      	mov	r0, r6
 800802e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008032:	89ab      	ldrh	r3, [r5, #12]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d907      	bls.n	8008048 <_fwalk_sglue+0x38>
 8008038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800803c:	3301      	adds	r3, #1
 800803e:	d003      	beq.n	8008048 <_fwalk_sglue+0x38>
 8008040:	4629      	mov	r1, r5
 8008042:	4638      	mov	r0, r7
 8008044:	47c0      	blx	r8
 8008046:	4306      	orrs	r6, r0
 8008048:	3568      	adds	r5, #104	; 0x68
 800804a:	e7e9      	b.n	8008020 <_fwalk_sglue+0x10>

0800804c <iprintf>:
 800804c:	b40f      	push	{r0, r1, r2, r3}
 800804e:	b507      	push	{r0, r1, r2, lr}
 8008050:	4906      	ldr	r1, [pc, #24]	; (800806c <iprintf+0x20>)
 8008052:	ab04      	add	r3, sp, #16
 8008054:	6808      	ldr	r0, [r1, #0]
 8008056:	f853 2b04 	ldr.w	r2, [r3], #4
 800805a:	6881      	ldr	r1, [r0, #8]
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	f001 fc2f 	bl	80098c0 <_vfiprintf_r>
 8008062:	b003      	add	sp, #12
 8008064:	f85d eb04 	ldr.w	lr, [sp], #4
 8008068:	b004      	add	sp, #16
 800806a:	4770      	bx	lr
 800806c:	2000006c 	.word	0x2000006c

08008070 <__sread>:
 8008070:	b510      	push	{r4, lr}
 8008072:	460c      	mov	r4, r1
 8008074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008078:	f000 f8a0 	bl	80081bc <_read_r>
 800807c:	2800      	cmp	r0, #0
 800807e:	bfab      	itete	ge
 8008080:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008082:	89a3      	ldrhlt	r3, [r4, #12]
 8008084:	181b      	addge	r3, r3, r0
 8008086:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800808a:	bfac      	ite	ge
 800808c:	6563      	strge	r3, [r4, #84]	; 0x54
 800808e:	81a3      	strhlt	r3, [r4, #12]
 8008090:	bd10      	pop	{r4, pc}

08008092 <__swrite>:
 8008092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008096:	461f      	mov	r7, r3
 8008098:	898b      	ldrh	r3, [r1, #12]
 800809a:	05db      	lsls	r3, r3, #23
 800809c:	4605      	mov	r5, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	4616      	mov	r6, r2
 80080a2:	d505      	bpl.n	80080b0 <__swrite+0x1e>
 80080a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a8:	2302      	movs	r3, #2
 80080aa:	2200      	movs	r2, #0
 80080ac:	f000 f874 	bl	8008198 <_lseek_r>
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080ba:	81a3      	strh	r3, [r4, #12]
 80080bc:	4632      	mov	r2, r6
 80080be:	463b      	mov	r3, r7
 80080c0:	4628      	mov	r0, r5
 80080c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080c6:	f000 b88b 	b.w	80081e0 <_write_r>

080080ca <__sseek>:
 80080ca:	b510      	push	{r4, lr}
 80080cc:	460c      	mov	r4, r1
 80080ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d2:	f000 f861 	bl	8008198 <_lseek_r>
 80080d6:	1c43      	adds	r3, r0, #1
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	bf15      	itete	ne
 80080dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80080de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080e6:	81a3      	strheq	r3, [r4, #12]
 80080e8:	bf18      	it	ne
 80080ea:	81a3      	strhne	r3, [r4, #12]
 80080ec:	bd10      	pop	{r4, pc}

080080ee <__sclose>:
 80080ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f2:	f000 b841 	b.w	8008178 <_close_r>
	...

080080f8 <swprintf>:
 80080f8:	b40c      	push	{r2, r3}
 80080fa:	b530      	push	{r4, r5, lr}
 80080fc:	4b17      	ldr	r3, [pc, #92]	; (800815c <swprintf+0x64>)
 80080fe:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8008102:	681d      	ldr	r5, [r3, #0]
 8008104:	b09d      	sub	sp, #116	; 0x74
 8008106:	460c      	mov	r4, r1
 8008108:	d308      	bcc.n	800811c <swprintf+0x24>
 800810a:	238b      	movs	r3, #139	; 0x8b
 800810c:	602b      	str	r3, [r5, #0]
 800810e:	f04f 30ff 	mov.w	r0, #4294967295
 8008112:	b01d      	add	sp, #116	; 0x74
 8008114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008118:	b002      	add	sp, #8
 800811a:	4770      	bx	lr
 800811c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008120:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008124:	9002      	str	r0, [sp, #8]
 8008126:	9006      	str	r0, [sp, #24]
 8008128:	b1b1      	cbz	r1, 8008158 <swprintf+0x60>
 800812a:	1e4b      	subs	r3, r1, #1
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	9304      	str	r3, [sp, #16]
 8008130:	9307      	str	r3, [sp, #28]
 8008132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008136:	f8ad 3016 	strh.w	r3, [sp, #22]
 800813a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800813c:	ab21      	add	r3, sp, #132	; 0x84
 800813e:	a902      	add	r1, sp, #8
 8008140:	4628      	mov	r0, r5
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	f001 fda8 	bl	8009c98 <_svfwprintf_r>
 8008148:	2c00      	cmp	r4, #0
 800814a:	d0de      	beq.n	800810a <swprintf+0x12>
 800814c:	9b02      	ldr	r3, [sp, #8]
 800814e:	2200      	movs	r2, #0
 8008150:	42a0      	cmp	r0, r4
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	d3dd      	bcc.n	8008112 <swprintf+0x1a>
 8008156:	e7d8      	b.n	800810a <swprintf+0x12>
 8008158:	460b      	mov	r3, r1
 800815a:	e7e8      	b.n	800812e <swprintf+0x36>
 800815c:	2000006c 	.word	0x2000006c

08008160 <memset>:
 8008160:	4402      	add	r2, r0
 8008162:	4603      	mov	r3, r0
 8008164:	4293      	cmp	r3, r2
 8008166:	d100      	bne.n	800816a <memset+0xa>
 8008168:	4770      	bx	lr
 800816a:	f803 1b01 	strb.w	r1, [r3], #1
 800816e:	e7f9      	b.n	8008164 <memset+0x4>

08008170 <_localeconv_r>:
 8008170:	4800      	ldr	r0, [pc, #0]	; (8008174 <_localeconv_r+0x4>)
 8008172:	4770      	bx	lr
 8008174:	20000160 	.word	0x20000160

08008178 <_close_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4d06      	ldr	r5, [pc, #24]	; (8008194 <_close_r+0x1c>)
 800817c:	2300      	movs	r3, #0
 800817e:	4604      	mov	r4, r0
 8008180:	4608      	mov	r0, r1
 8008182:	602b      	str	r3, [r5, #0]
 8008184:	f7f9 fda7 	bl	8001cd6 <_close>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	d102      	bne.n	8008192 <_close_r+0x1a>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	b103      	cbz	r3, 8008192 <_close_r+0x1a>
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	bd38      	pop	{r3, r4, r5, pc}
 8008194:	2000a520 	.word	0x2000a520

08008198 <_lseek_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4d07      	ldr	r5, [pc, #28]	; (80081b8 <_lseek_r+0x20>)
 800819c:	4604      	mov	r4, r0
 800819e:	4608      	mov	r0, r1
 80081a0:	4611      	mov	r1, r2
 80081a2:	2200      	movs	r2, #0
 80081a4:	602a      	str	r2, [r5, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	f7f9 fdbc 	bl	8001d24 <_lseek>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_lseek_r+0x1e>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_lseek_r+0x1e>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	2000a520 	.word	0x2000a520

080081bc <_read_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4d07      	ldr	r5, [pc, #28]	; (80081dc <_read_r+0x20>)
 80081c0:	4604      	mov	r4, r0
 80081c2:	4608      	mov	r0, r1
 80081c4:	4611      	mov	r1, r2
 80081c6:	2200      	movs	r2, #0
 80081c8:	602a      	str	r2, [r5, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	f7f9 fd4a 	bl	8001c64 <_read>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d102      	bne.n	80081da <_read_r+0x1e>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	b103      	cbz	r3, 80081da <_read_r+0x1e>
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	bd38      	pop	{r3, r4, r5, pc}
 80081dc:	2000a520 	.word	0x2000a520

080081e0 <_write_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4d07      	ldr	r5, [pc, #28]	; (8008200 <_write_r+0x20>)
 80081e4:	4604      	mov	r4, r0
 80081e6:	4608      	mov	r0, r1
 80081e8:	4611      	mov	r1, r2
 80081ea:	2200      	movs	r2, #0
 80081ec:	602a      	str	r2, [r5, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	f7f9 fd55 	bl	8001c9e <_write>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d102      	bne.n	80081fe <_write_r+0x1e>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	b103      	cbz	r3, 80081fe <_write_r+0x1e>
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	bd38      	pop	{r3, r4, r5, pc}
 8008200:	2000a520 	.word	0x2000a520

08008204 <__errno>:
 8008204:	4b01      	ldr	r3, [pc, #4]	; (800820c <__errno+0x8>)
 8008206:	6818      	ldr	r0, [r3, #0]
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	2000006c 	.word	0x2000006c

08008210 <__libc_init_array>:
 8008210:	b570      	push	{r4, r5, r6, lr}
 8008212:	4d0d      	ldr	r5, [pc, #52]	; (8008248 <__libc_init_array+0x38>)
 8008214:	4c0d      	ldr	r4, [pc, #52]	; (800824c <__libc_init_array+0x3c>)
 8008216:	1b64      	subs	r4, r4, r5
 8008218:	10a4      	asrs	r4, r4, #2
 800821a:	2600      	movs	r6, #0
 800821c:	42a6      	cmp	r6, r4
 800821e:	d109      	bne.n	8008234 <__libc_init_array+0x24>
 8008220:	4d0b      	ldr	r5, [pc, #44]	; (8008250 <__libc_init_array+0x40>)
 8008222:	4c0c      	ldr	r4, [pc, #48]	; (8008254 <__libc_init_array+0x44>)
 8008224:	f002 ff36 	bl	800b094 <_init>
 8008228:	1b64      	subs	r4, r4, r5
 800822a:	10a4      	asrs	r4, r4, #2
 800822c:	2600      	movs	r6, #0
 800822e:	42a6      	cmp	r6, r4
 8008230:	d105      	bne.n	800823e <__libc_init_array+0x2e>
 8008232:	bd70      	pop	{r4, r5, r6, pc}
 8008234:	f855 3b04 	ldr.w	r3, [r5], #4
 8008238:	4798      	blx	r3
 800823a:	3601      	adds	r6, #1
 800823c:	e7ee      	b.n	800821c <__libc_init_array+0xc>
 800823e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008242:	4798      	blx	r3
 8008244:	3601      	adds	r6, #1
 8008246:	e7f2      	b.n	800822e <__libc_init_array+0x1e>
 8008248:	0800e6e8 	.word	0x0800e6e8
 800824c:	0800e6e8 	.word	0x0800e6e8
 8008250:	0800e6e8 	.word	0x0800e6e8
 8008254:	0800e6ec 	.word	0x0800e6ec

08008258 <__retarget_lock_init_recursive>:
 8008258:	4770      	bx	lr

0800825a <__retarget_lock_acquire_recursive>:
 800825a:	4770      	bx	lr

0800825c <__retarget_lock_release_recursive>:
 800825c:	4770      	bx	lr

0800825e <memcpy>:
 800825e:	440a      	add	r2, r1
 8008260:	4291      	cmp	r1, r2
 8008262:	f100 33ff 	add.w	r3, r0, #4294967295
 8008266:	d100      	bne.n	800826a <memcpy+0xc>
 8008268:	4770      	bx	lr
 800826a:	b510      	push	{r4, lr}
 800826c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008270:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008274:	4291      	cmp	r1, r2
 8008276:	d1f9      	bne.n	800826c <memcpy+0xe>
 8008278:	bd10      	pop	{r4, pc}

0800827a <quorem>:
 800827a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827e:	6903      	ldr	r3, [r0, #16]
 8008280:	690c      	ldr	r4, [r1, #16]
 8008282:	42a3      	cmp	r3, r4
 8008284:	4607      	mov	r7, r0
 8008286:	db7e      	blt.n	8008386 <quorem+0x10c>
 8008288:	3c01      	subs	r4, #1
 800828a:	f101 0814 	add.w	r8, r1, #20
 800828e:	f100 0514 	add.w	r5, r0, #20
 8008292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800829c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082a0:	3301      	adds	r3, #1
 80082a2:	429a      	cmp	r2, r3
 80082a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80082a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80082b0:	d331      	bcc.n	8008316 <quorem+0x9c>
 80082b2:	f04f 0e00 	mov.w	lr, #0
 80082b6:	4640      	mov	r0, r8
 80082b8:	46ac      	mov	ip, r5
 80082ba:	46f2      	mov	sl, lr
 80082bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80082c0:	b293      	uxth	r3, r2
 80082c2:	fb06 e303 	mla	r3, r6, r3, lr
 80082c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082ca:	0c1a      	lsrs	r2, r3, #16
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	ebaa 0303 	sub.w	r3, sl, r3
 80082d2:	f8dc a000 	ldr.w	sl, [ip]
 80082d6:	fa13 f38a 	uxtah	r3, r3, sl
 80082da:	fb06 220e 	mla	r2, r6, lr, r2
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	9b00      	ldr	r3, [sp, #0]
 80082e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082e6:	b292      	uxth	r2, r2
 80082e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80082f4:	4581      	cmp	r9, r0
 80082f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082fa:	f84c 3b04 	str.w	r3, [ip], #4
 80082fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008302:	d2db      	bcs.n	80082bc <quorem+0x42>
 8008304:	f855 300b 	ldr.w	r3, [r5, fp]
 8008308:	b92b      	cbnz	r3, 8008316 <quorem+0x9c>
 800830a:	9b01      	ldr	r3, [sp, #4]
 800830c:	3b04      	subs	r3, #4
 800830e:	429d      	cmp	r5, r3
 8008310:	461a      	mov	r2, r3
 8008312:	d32c      	bcc.n	800836e <quorem+0xf4>
 8008314:	613c      	str	r4, [r7, #16]
 8008316:	4638      	mov	r0, r7
 8008318:	f001 f9a8 	bl	800966c <__mcmp>
 800831c:	2800      	cmp	r0, #0
 800831e:	db22      	blt.n	8008366 <quorem+0xec>
 8008320:	3601      	adds	r6, #1
 8008322:	4629      	mov	r1, r5
 8008324:	2000      	movs	r0, #0
 8008326:	f858 2b04 	ldr.w	r2, [r8], #4
 800832a:	f8d1 c000 	ldr.w	ip, [r1]
 800832e:	b293      	uxth	r3, r2
 8008330:	1ac3      	subs	r3, r0, r3
 8008332:	0c12      	lsrs	r2, r2, #16
 8008334:	fa13 f38c 	uxtah	r3, r3, ip
 8008338:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800833c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008340:	b29b      	uxth	r3, r3
 8008342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008346:	45c1      	cmp	r9, r8
 8008348:	f841 3b04 	str.w	r3, [r1], #4
 800834c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008350:	d2e9      	bcs.n	8008326 <quorem+0xac>
 8008352:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008356:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800835a:	b922      	cbnz	r2, 8008366 <quorem+0xec>
 800835c:	3b04      	subs	r3, #4
 800835e:	429d      	cmp	r5, r3
 8008360:	461a      	mov	r2, r3
 8008362:	d30a      	bcc.n	800837a <quorem+0x100>
 8008364:	613c      	str	r4, [r7, #16]
 8008366:	4630      	mov	r0, r6
 8008368:	b003      	add	sp, #12
 800836a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836e:	6812      	ldr	r2, [r2, #0]
 8008370:	3b04      	subs	r3, #4
 8008372:	2a00      	cmp	r2, #0
 8008374:	d1ce      	bne.n	8008314 <quorem+0x9a>
 8008376:	3c01      	subs	r4, #1
 8008378:	e7c9      	b.n	800830e <quorem+0x94>
 800837a:	6812      	ldr	r2, [r2, #0]
 800837c:	3b04      	subs	r3, #4
 800837e:	2a00      	cmp	r2, #0
 8008380:	d1f0      	bne.n	8008364 <quorem+0xea>
 8008382:	3c01      	subs	r4, #1
 8008384:	e7eb      	b.n	800835e <quorem+0xe4>
 8008386:	2000      	movs	r0, #0
 8008388:	e7ee      	b.n	8008368 <quorem+0xee>
 800838a:	0000      	movs	r0, r0
 800838c:	0000      	movs	r0, r0
	...

08008390 <_dtoa_r>:
 8008390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008394:	ed2d 8b04 	vpush	{d8-d9}
 8008398:	69c5      	ldr	r5, [r0, #28]
 800839a:	b093      	sub	sp, #76	; 0x4c
 800839c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80083a0:	ec57 6b10 	vmov	r6, r7, d0
 80083a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80083a8:	9107      	str	r1, [sp, #28]
 80083aa:	4604      	mov	r4, r0
 80083ac:	920a      	str	r2, [sp, #40]	; 0x28
 80083ae:	930d      	str	r3, [sp, #52]	; 0x34
 80083b0:	b975      	cbnz	r5, 80083d0 <_dtoa_r+0x40>
 80083b2:	2010      	movs	r0, #16
 80083b4:	f000 fe2a 	bl	800900c <malloc>
 80083b8:	4602      	mov	r2, r0
 80083ba:	61e0      	str	r0, [r4, #28]
 80083bc:	b920      	cbnz	r0, 80083c8 <_dtoa_r+0x38>
 80083be:	4bae      	ldr	r3, [pc, #696]	; (8008678 <_dtoa_r+0x2e8>)
 80083c0:	21ef      	movs	r1, #239	; 0xef
 80083c2:	48ae      	ldr	r0, [pc, #696]	; (800867c <_dtoa_r+0x2ec>)
 80083c4:	f002 fad8 	bl	800a978 <__assert_func>
 80083c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083cc:	6005      	str	r5, [r0, #0]
 80083ce:	60c5      	str	r5, [r0, #12]
 80083d0:	69e3      	ldr	r3, [r4, #28]
 80083d2:	6819      	ldr	r1, [r3, #0]
 80083d4:	b151      	cbz	r1, 80083ec <_dtoa_r+0x5c>
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	604a      	str	r2, [r1, #4]
 80083da:	2301      	movs	r3, #1
 80083dc:	4093      	lsls	r3, r2
 80083de:	608b      	str	r3, [r1, #8]
 80083e0:	4620      	mov	r0, r4
 80083e2:	f000 ff07 	bl	80091f4 <_Bfree>
 80083e6:	69e3      	ldr	r3, [r4, #28]
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	1e3b      	subs	r3, r7, #0
 80083ee:	bfbb      	ittet	lt
 80083f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083f4:	9303      	strlt	r3, [sp, #12]
 80083f6:	2300      	movge	r3, #0
 80083f8:	2201      	movlt	r2, #1
 80083fa:	bfac      	ite	ge
 80083fc:	f8c8 3000 	strge.w	r3, [r8]
 8008400:	f8c8 2000 	strlt.w	r2, [r8]
 8008404:	4b9e      	ldr	r3, [pc, #632]	; (8008680 <_dtoa_r+0x2f0>)
 8008406:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800840a:	ea33 0308 	bics.w	r3, r3, r8
 800840e:	d11b      	bne.n	8008448 <_dtoa_r+0xb8>
 8008410:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008412:	f242 730f 	movw	r3, #9999	; 0x270f
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800841c:	4333      	orrs	r3, r6
 800841e:	f000 8593 	beq.w	8008f48 <_dtoa_r+0xbb8>
 8008422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008424:	b963      	cbnz	r3, 8008440 <_dtoa_r+0xb0>
 8008426:	4b97      	ldr	r3, [pc, #604]	; (8008684 <_dtoa_r+0x2f4>)
 8008428:	e027      	b.n	800847a <_dtoa_r+0xea>
 800842a:	4b97      	ldr	r3, [pc, #604]	; (8008688 <_dtoa_r+0x2f8>)
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	3308      	adds	r3, #8
 8008430:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	9800      	ldr	r0, [sp, #0]
 8008436:	b013      	add	sp, #76	; 0x4c
 8008438:	ecbd 8b04 	vpop	{d8-d9}
 800843c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008440:	4b90      	ldr	r3, [pc, #576]	; (8008684 <_dtoa_r+0x2f4>)
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	3303      	adds	r3, #3
 8008446:	e7f3      	b.n	8008430 <_dtoa_r+0xa0>
 8008448:	ed9d 7b02 	vldr	d7, [sp, #8]
 800844c:	2200      	movs	r2, #0
 800844e:	ec51 0b17 	vmov	r0, r1, d7
 8008452:	eeb0 8a47 	vmov.f32	s16, s14
 8008456:	eef0 8a67 	vmov.f32	s17, s15
 800845a:	2300      	movs	r3, #0
 800845c:	f7f8 fb34 	bl	8000ac8 <__aeabi_dcmpeq>
 8008460:	4681      	mov	r9, r0
 8008462:	b160      	cbz	r0, 800847e <_dtoa_r+0xee>
 8008464:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008466:	2301      	movs	r3, #1
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 8568 	beq.w	8008f42 <_dtoa_r+0xbb2>
 8008472:	4b86      	ldr	r3, [pc, #536]	; (800868c <_dtoa_r+0x2fc>)
 8008474:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008476:	6013      	str	r3, [r2, #0]
 8008478:	3b01      	subs	r3, #1
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	e7da      	b.n	8008434 <_dtoa_r+0xa4>
 800847e:	aa10      	add	r2, sp, #64	; 0x40
 8008480:	a911      	add	r1, sp, #68	; 0x44
 8008482:	4620      	mov	r0, r4
 8008484:	eeb0 0a48 	vmov.f32	s0, s16
 8008488:	eef0 0a68 	vmov.f32	s1, s17
 800848c:	f001 f994 	bl	80097b8 <__d2b>
 8008490:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008494:	4682      	mov	sl, r0
 8008496:	2d00      	cmp	r5, #0
 8008498:	d07f      	beq.n	800859a <_dtoa_r+0x20a>
 800849a:	ee18 3a90 	vmov	r3, s17
 800849e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80084a6:	ec51 0b18 	vmov	r0, r1, d8
 80084aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80084ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80084b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80084b6:	4619      	mov	r1, r3
 80084b8:	2200      	movs	r2, #0
 80084ba:	4b75      	ldr	r3, [pc, #468]	; (8008690 <_dtoa_r+0x300>)
 80084bc:	f7f7 fee4 	bl	8000288 <__aeabi_dsub>
 80084c0:	a367      	add	r3, pc, #412	; (adr r3, 8008660 <_dtoa_r+0x2d0>)
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	f7f8 f897 	bl	80005f8 <__aeabi_dmul>
 80084ca:	a367      	add	r3, pc, #412	; (adr r3, 8008668 <_dtoa_r+0x2d8>)
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	f7f7 fedc 	bl	800028c <__adddf3>
 80084d4:	4606      	mov	r6, r0
 80084d6:	4628      	mov	r0, r5
 80084d8:	460f      	mov	r7, r1
 80084da:	f7f8 f823 	bl	8000524 <__aeabi_i2d>
 80084de:	a364      	add	r3, pc, #400	; (adr r3, 8008670 <_dtoa_r+0x2e0>)
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	f7f8 f888 	bl	80005f8 <__aeabi_dmul>
 80084e8:	4602      	mov	r2, r0
 80084ea:	460b      	mov	r3, r1
 80084ec:	4630      	mov	r0, r6
 80084ee:	4639      	mov	r1, r7
 80084f0:	f7f7 fecc 	bl	800028c <__adddf3>
 80084f4:	4606      	mov	r6, r0
 80084f6:	460f      	mov	r7, r1
 80084f8:	f7f8 fb2e 	bl	8000b58 <__aeabi_d2iz>
 80084fc:	2200      	movs	r2, #0
 80084fe:	4683      	mov	fp, r0
 8008500:	2300      	movs	r3, #0
 8008502:	4630      	mov	r0, r6
 8008504:	4639      	mov	r1, r7
 8008506:	f7f8 fae9 	bl	8000adc <__aeabi_dcmplt>
 800850a:	b148      	cbz	r0, 8008520 <_dtoa_r+0x190>
 800850c:	4658      	mov	r0, fp
 800850e:	f7f8 f809 	bl	8000524 <__aeabi_i2d>
 8008512:	4632      	mov	r2, r6
 8008514:	463b      	mov	r3, r7
 8008516:	f7f8 fad7 	bl	8000ac8 <__aeabi_dcmpeq>
 800851a:	b908      	cbnz	r0, 8008520 <_dtoa_r+0x190>
 800851c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008520:	f1bb 0f16 	cmp.w	fp, #22
 8008524:	d857      	bhi.n	80085d6 <_dtoa_r+0x246>
 8008526:	4b5b      	ldr	r3, [pc, #364]	; (8008694 <_dtoa_r+0x304>)
 8008528:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	ec51 0b18 	vmov	r0, r1, d8
 8008534:	f7f8 fad2 	bl	8000adc <__aeabi_dcmplt>
 8008538:	2800      	cmp	r0, #0
 800853a:	d04e      	beq.n	80085da <_dtoa_r+0x24a>
 800853c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008540:	2300      	movs	r3, #0
 8008542:	930c      	str	r3, [sp, #48]	; 0x30
 8008544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008546:	1b5b      	subs	r3, r3, r5
 8008548:	1e5a      	subs	r2, r3, #1
 800854a:	bf45      	ittet	mi
 800854c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008550:	9305      	strmi	r3, [sp, #20]
 8008552:	2300      	movpl	r3, #0
 8008554:	2300      	movmi	r3, #0
 8008556:	9206      	str	r2, [sp, #24]
 8008558:	bf54      	ite	pl
 800855a:	9305      	strpl	r3, [sp, #20]
 800855c:	9306      	strmi	r3, [sp, #24]
 800855e:	f1bb 0f00 	cmp.w	fp, #0
 8008562:	db3c      	blt.n	80085de <_dtoa_r+0x24e>
 8008564:	9b06      	ldr	r3, [sp, #24]
 8008566:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800856a:	445b      	add	r3, fp
 800856c:	9306      	str	r3, [sp, #24]
 800856e:	2300      	movs	r3, #0
 8008570:	9308      	str	r3, [sp, #32]
 8008572:	9b07      	ldr	r3, [sp, #28]
 8008574:	2b09      	cmp	r3, #9
 8008576:	d868      	bhi.n	800864a <_dtoa_r+0x2ba>
 8008578:	2b05      	cmp	r3, #5
 800857a:	bfc4      	itt	gt
 800857c:	3b04      	subgt	r3, #4
 800857e:	9307      	strgt	r3, [sp, #28]
 8008580:	9b07      	ldr	r3, [sp, #28]
 8008582:	f1a3 0302 	sub.w	r3, r3, #2
 8008586:	bfcc      	ite	gt
 8008588:	2500      	movgt	r5, #0
 800858a:	2501      	movle	r5, #1
 800858c:	2b03      	cmp	r3, #3
 800858e:	f200 8085 	bhi.w	800869c <_dtoa_r+0x30c>
 8008592:	e8df f003 	tbb	[pc, r3]
 8008596:	3b2e      	.short	0x3b2e
 8008598:	5839      	.short	0x5839
 800859a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800859e:	441d      	add	r5, r3
 80085a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80085a4:	2b20      	cmp	r3, #32
 80085a6:	bfc1      	itttt	gt
 80085a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80085ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80085b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80085b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80085b8:	bfd6      	itet	le
 80085ba:	f1c3 0320 	rsble	r3, r3, #32
 80085be:	ea48 0003 	orrgt.w	r0, r8, r3
 80085c2:	fa06 f003 	lslle.w	r0, r6, r3
 80085c6:	f7f7 ff9d 	bl	8000504 <__aeabi_ui2d>
 80085ca:	2201      	movs	r2, #1
 80085cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80085d0:	3d01      	subs	r5, #1
 80085d2:	920e      	str	r2, [sp, #56]	; 0x38
 80085d4:	e76f      	b.n	80084b6 <_dtoa_r+0x126>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e7b3      	b.n	8008542 <_dtoa_r+0x1b2>
 80085da:	900c      	str	r0, [sp, #48]	; 0x30
 80085dc:	e7b2      	b.n	8008544 <_dtoa_r+0x1b4>
 80085de:	9b05      	ldr	r3, [sp, #20]
 80085e0:	eba3 030b 	sub.w	r3, r3, fp
 80085e4:	9305      	str	r3, [sp, #20]
 80085e6:	f1cb 0300 	rsb	r3, fp, #0
 80085ea:	9308      	str	r3, [sp, #32]
 80085ec:	2300      	movs	r3, #0
 80085ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80085f0:	e7bf      	b.n	8008572 <_dtoa_r+0x1e2>
 80085f2:	2300      	movs	r3, #0
 80085f4:	9309      	str	r3, [sp, #36]	; 0x24
 80085f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	dc52      	bgt.n	80086a2 <_dtoa_r+0x312>
 80085fc:	2301      	movs	r3, #1
 80085fe:	9301      	str	r3, [sp, #4]
 8008600:	9304      	str	r3, [sp, #16]
 8008602:	461a      	mov	r2, r3
 8008604:	920a      	str	r2, [sp, #40]	; 0x28
 8008606:	e00b      	b.n	8008620 <_dtoa_r+0x290>
 8008608:	2301      	movs	r3, #1
 800860a:	e7f3      	b.n	80085f4 <_dtoa_r+0x264>
 800860c:	2300      	movs	r3, #0
 800860e:	9309      	str	r3, [sp, #36]	; 0x24
 8008610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008612:	445b      	add	r3, fp
 8008614:	9301      	str	r3, [sp, #4]
 8008616:	3301      	adds	r3, #1
 8008618:	2b01      	cmp	r3, #1
 800861a:	9304      	str	r3, [sp, #16]
 800861c:	bfb8      	it	lt
 800861e:	2301      	movlt	r3, #1
 8008620:	69e0      	ldr	r0, [r4, #28]
 8008622:	2100      	movs	r1, #0
 8008624:	2204      	movs	r2, #4
 8008626:	f102 0614 	add.w	r6, r2, #20
 800862a:	429e      	cmp	r6, r3
 800862c:	d93d      	bls.n	80086aa <_dtoa_r+0x31a>
 800862e:	6041      	str	r1, [r0, #4]
 8008630:	4620      	mov	r0, r4
 8008632:	f000 fd9f 	bl	8009174 <_Balloc>
 8008636:	9000      	str	r0, [sp, #0]
 8008638:	2800      	cmp	r0, #0
 800863a:	d139      	bne.n	80086b0 <_dtoa_r+0x320>
 800863c:	4b16      	ldr	r3, [pc, #88]	; (8008698 <_dtoa_r+0x308>)
 800863e:	4602      	mov	r2, r0
 8008640:	f240 11af 	movw	r1, #431	; 0x1af
 8008644:	e6bd      	b.n	80083c2 <_dtoa_r+0x32>
 8008646:	2301      	movs	r3, #1
 8008648:	e7e1      	b.n	800860e <_dtoa_r+0x27e>
 800864a:	2501      	movs	r5, #1
 800864c:	2300      	movs	r3, #0
 800864e:	9307      	str	r3, [sp, #28]
 8008650:	9509      	str	r5, [sp, #36]	; 0x24
 8008652:	f04f 33ff 	mov.w	r3, #4294967295
 8008656:	9301      	str	r3, [sp, #4]
 8008658:	9304      	str	r3, [sp, #16]
 800865a:	2200      	movs	r2, #0
 800865c:	2312      	movs	r3, #18
 800865e:	e7d1      	b.n	8008604 <_dtoa_r+0x274>
 8008660:	636f4361 	.word	0x636f4361
 8008664:	3fd287a7 	.word	0x3fd287a7
 8008668:	8b60c8b3 	.word	0x8b60c8b3
 800866c:	3fc68a28 	.word	0x3fc68a28
 8008670:	509f79fb 	.word	0x509f79fb
 8008674:	3fd34413 	.word	0x3fd34413
 8008678:	0800e201 	.word	0x0800e201
 800867c:	0800e218 	.word	0x0800e218
 8008680:	7ff00000 	.word	0x7ff00000
 8008684:	0800e1fd 	.word	0x0800e1fd
 8008688:	0800e1f4 	.word	0x0800e1f4
 800868c:	0800e1d1 	.word	0x0800e1d1
 8008690:	3ff80000 	.word	0x3ff80000
 8008694:	0800e308 	.word	0x0800e308
 8008698:	0800e270 	.word	0x0800e270
 800869c:	2301      	movs	r3, #1
 800869e:	9309      	str	r3, [sp, #36]	; 0x24
 80086a0:	e7d7      	b.n	8008652 <_dtoa_r+0x2c2>
 80086a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	9304      	str	r3, [sp, #16]
 80086a8:	e7ba      	b.n	8008620 <_dtoa_r+0x290>
 80086aa:	3101      	adds	r1, #1
 80086ac:	0052      	lsls	r2, r2, #1
 80086ae:	e7ba      	b.n	8008626 <_dtoa_r+0x296>
 80086b0:	69e3      	ldr	r3, [r4, #28]
 80086b2:	9a00      	ldr	r2, [sp, #0]
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	9b04      	ldr	r3, [sp, #16]
 80086b8:	2b0e      	cmp	r3, #14
 80086ba:	f200 80a8 	bhi.w	800880e <_dtoa_r+0x47e>
 80086be:	2d00      	cmp	r5, #0
 80086c0:	f000 80a5 	beq.w	800880e <_dtoa_r+0x47e>
 80086c4:	f1bb 0f00 	cmp.w	fp, #0
 80086c8:	dd38      	ble.n	800873c <_dtoa_r+0x3ac>
 80086ca:	4bc0      	ldr	r3, [pc, #768]	; (80089cc <_dtoa_r+0x63c>)
 80086cc:	f00b 020f 	and.w	r2, fp, #15
 80086d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80086d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80086dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80086e0:	d019      	beq.n	8008716 <_dtoa_r+0x386>
 80086e2:	4bbb      	ldr	r3, [pc, #748]	; (80089d0 <_dtoa_r+0x640>)
 80086e4:	ec51 0b18 	vmov	r0, r1, d8
 80086e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086ec:	f7f8 f8ae 	bl	800084c <__aeabi_ddiv>
 80086f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086f4:	f008 080f 	and.w	r8, r8, #15
 80086f8:	2503      	movs	r5, #3
 80086fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80089d0 <_dtoa_r+0x640>
 80086fe:	f1b8 0f00 	cmp.w	r8, #0
 8008702:	d10a      	bne.n	800871a <_dtoa_r+0x38a>
 8008704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008708:	4632      	mov	r2, r6
 800870a:	463b      	mov	r3, r7
 800870c:	f7f8 f89e 	bl	800084c <__aeabi_ddiv>
 8008710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008714:	e02b      	b.n	800876e <_dtoa_r+0x3de>
 8008716:	2502      	movs	r5, #2
 8008718:	e7ef      	b.n	80086fa <_dtoa_r+0x36a>
 800871a:	f018 0f01 	tst.w	r8, #1
 800871e:	d008      	beq.n	8008732 <_dtoa_r+0x3a2>
 8008720:	4630      	mov	r0, r6
 8008722:	4639      	mov	r1, r7
 8008724:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008728:	f7f7 ff66 	bl	80005f8 <__aeabi_dmul>
 800872c:	3501      	adds	r5, #1
 800872e:	4606      	mov	r6, r0
 8008730:	460f      	mov	r7, r1
 8008732:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008736:	f109 0908 	add.w	r9, r9, #8
 800873a:	e7e0      	b.n	80086fe <_dtoa_r+0x36e>
 800873c:	f000 809f 	beq.w	800887e <_dtoa_r+0x4ee>
 8008740:	f1cb 0600 	rsb	r6, fp, #0
 8008744:	4ba1      	ldr	r3, [pc, #644]	; (80089cc <_dtoa_r+0x63c>)
 8008746:	4fa2      	ldr	r7, [pc, #648]	; (80089d0 <_dtoa_r+0x640>)
 8008748:	f006 020f 	and.w	r2, r6, #15
 800874c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	ec51 0b18 	vmov	r0, r1, d8
 8008758:	f7f7 ff4e 	bl	80005f8 <__aeabi_dmul>
 800875c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008760:	1136      	asrs	r6, r6, #4
 8008762:	2300      	movs	r3, #0
 8008764:	2502      	movs	r5, #2
 8008766:	2e00      	cmp	r6, #0
 8008768:	d17e      	bne.n	8008868 <_dtoa_r+0x4d8>
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1d0      	bne.n	8008710 <_dtoa_r+0x380>
 800876e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008770:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	f000 8084 	beq.w	8008882 <_dtoa_r+0x4f2>
 800877a:	4b96      	ldr	r3, [pc, #600]	; (80089d4 <_dtoa_r+0x644>)
 800877c:	2200      	movs	r2, #0
 800877e:	4640      	mov	r0, r8
 8008780:	4649      	mov	r1, r9
 8008782:	f7f8 f9ab 	bl	8000adc <__aeabi_dcmplt>
 8008786:	2800      	cmp	r0, #0
 8008788:	d07b      	beq.n	8008882 <_dtoa_r+0x4f2>
 800878a:	9b04      	ldr	r3, [sp, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d078      	beq.n	8008882 <_dtoa_r+0x4f2>
 8008790:	9b01      	ldr	r3, [sp, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	dd39      	ble.n	800880a <_dtoa_r+0x47a>
 8008796:	4b90      	ldr	r3, [pc, #576]	; (80089d8 <_dtoa_r+0x648>)
 8008798:	2200      	movs	r2, #0
 800879a:	4640      	mov	r0, r8
 800879c:	4649      	mov	r1, r9
 800879e:	f7f7 ff2b 	bl	80005f8 <__aeabi_dmul>
 80087a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087a6:	9e01      	ldr	r6, [sp, #4]
 80087a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80087ac:	3501      	adds	r5, #1
 80087ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80087b2:	4628      	mov	r0, r5
 80087b4:	f7f7 feb6 	bl	8000524 <__aeabi_i2d>
 80087b8:	4642      	mov	r2, r8
 80087ba:	464b      	mov	r3, r9
 80087bc:	f7f7 ff1c 	bl	80005f8 <__aeabi_dmul>
 80087c0:	4b86      	ldr	r3, [pc, #536]	; (80089dc <_dtoa_r+0x64c>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	f7f7 fd62 	bl	800028c <__adddf3>
 80087c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80087cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087d0:	9303      	str	r3, [sp, #12]
 80087d2:	2e00      	cmp	r6, #0
 80087d4:	d158      	bne.n	8008888 <_dtoa_r+0x4f8>
 80087d6:	4b82      	ldr	r3, [pc, #520]	; (80089e0 <_dtoa_r+0x650>)
 80087d8:	2200      	movs	r2, #0
 80087da:	4640      	mov	r0, r8
 80087dc:	4649      	mov	r1, r9
 80087de:	f7f7 fd53 	bl	8000288 <__aeabi_dsub>
 80087e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087e6:	4680      	mov	r8, r0
 80087e8:	4689      	mov	r9, r1
 80087ea:	f7f8 f995 	bl	8000b18 <__aeabi_dcmpgt>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	f040 8296 	bne.w	8008d20 <_dtoa_r+0x990>
 80087f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80087f8:	4640      	mov	r0, r8
 80087fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087fe:	4649      	mov	r1, r9
 8008800:	f7f8 f96c 	bl	8000adc <__aeabi_dcmplt>
 8008804:	2800      	cmp	r0, #0
 8008806:	f040 8289 	bne.w	8008d1c <_dtoa_r+0x98c>
 800880a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800880e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008810:	2b00      	cmp	r3, #0
 8008812:	f2c0 814e 	blt.w	8008ab2 <_dtoa_r+0x722>
 8008816:	f1bb 0f0e 	cmp.w	fp, #14
 800881a:	f300 814a 	bgt.w	8008ab2 <_dtoa_r+0x722>
 800881e:	4b6b      	ldr	r3, [pc, #428]	; (80089cc <_dtoa_r+0x63c>)
 8008820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008824:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800882a:	2b00      	cmp	r3, #0
 800882c:	f280 80dc 	bge.w	80089e8 <_dtoa_r+0x658>
 8008830:	9b04      	ldr	r3, [sp, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	f300 80d8 	bgt.w	80089e8 <_dtoa_r+0x658>
 8008838:	f040 826f 	bne.w	8008d1a <_dtoa_r+0x98a>
 800883c:	4b68      	ldr	r3, [pc, #416]	; (80089e0 <_dtoa_r+0x650>)
 800883e:	2200      	movs	r2, #0
 8008840:	4640      	mov	r0, r8
 8008842:	4649      	mov	r1, r9
 8008844:	f7f7 fed8 	bl	80005f8 <__aeabi_dmul>
 8008848:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800884c:	f7f8 f95a 	bl	8000b04 <__aeabi_dcmpge>
 8008850:	9e04      	ldr	r6, [sp, #16]
 8008852:	4637      	mov	r7, r6
 8008854:	2800      	cmp	r0, #0
 8008856:	f040 8245 	bne.w	8008ce4 <_dtoa_r+0x954>
 800885a:	9d00      	ldr	r5, [sp, #0]
 800885c:	2331      	movs	r3, #49	; 0x31
 800885e:	f805 3b01 	strb.w	r3, [r5], #1
 8008862:	f10b 0b01 	add.w	fp, fp, #1
 8008866:	e241      	b.n	8008cec <_dtoa_r+0x95c>
 8008868:	07f2      	lsls	r2, r6, #31
 800886a:	d505      	bpl.n	8008878 <_dtoa_r+0x4e8>
 800886c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008870:	f7f7 fec2 	bl	80005f8 <__aeabi_dmul>
 8008874:	3501      	adds	r5, #1
 8008876:	2301      	movs	r3, #1
 8008878:	1076      	asrs	r6, r6, #1
 800887a:	3708      	adds	r7, #8
 800887c:	e773      	b.n	8008766 <_dtoa_r+0x3d6>
 800887e:	2502      	movs	r5, #2
 8008880:	e775      	b.n	800876e <_dtoa_r+0x3de>
 8008882:	9e04      	ldr	r6, [sp, #16]
 8008884:	465f      	mov	r7, fp
 8008886:	e792      	b.n	80087ae <_dtoa_r+0x41e>
 8008888:	9900      	ldr	r1, [sp, #0]
 800888a:	4b50      	ldr	r3, [pc, #320]	; (80089cc <_dtoa_r+0x63c>)
 800888c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008890:	4431      	add	r1, r6
 8008892:	9102      	str	r1, [sp, #8]
 8008894:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008896:	eeb0 9a47 	vmov.f32	s18, s14
 800889a:	eef0 9a67 	vmov.f32	s19, s15
 800889e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80088a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088a6:	2900      	cmp	r1, #0
 80088a8:	d044      	beq.n	8008934 <_dtoa_r+0x5a4>
 80088aa:	494e      	ldr	r1, [pc, #312]	; (80089e4 <_dtoa_r+0x654>)
 80088ac:	2000      	movs	r0, #0
 80088ae:	f7f7 ffcd 	bl	800084c <__aeabi_ddiv>
 80088b2:	ec53 2b19 	vmov	r2, r3, d9
 80088b6:	f7f7 fce7 	bl	8000288 <__aeabi_dsub>
 80088ba:	9d00      	ldr	r5, [sp, #0]
 80088bc:	ec41 0b19 	vmov	d9, r0, r1
 80088c0:	4649      	mov	r1, r9
 80088c2:	4640      	mov	r0, r8
 80088c4:	f7f8 f948 	bl	8000b58 <__aeabi_d2iz>
 80088c8:	4606      	mov	r6, r0
 80088ca:	f7f7 fe2b 	bl	8000524 <__aeabi_i2d>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4640      	mov	r0, r8
 80088d4:	4649      	mov	r1, r9
 80088d6:	f7f7 fcd7 	bl	8000288 <__aeabi_dsub>
 80088da:	3630      	adds	r6, #48	; 0x30
 80088dc:	f805 6b01 	strb.w	r6, [r5], #1
 80088e0:	ec53 2b19 	vmov	r2, r3, d9
 80088e4:	4680      	mov	r8, r0
 80088e6:	4689      	mov	r9, r1
 80088e8:	f7f8 f8f8 	bl	8000adc <__aeabi_dcmplt>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d164      	bne.n	80089ba <_dtoa_r+0x62a>
 80088f0:	4642      	mov	r2, r8
 80088f2:	464b      	mov	r3, r9
 80088f4:	4937      	ldr	r1, [pc, #220]	; (80089d4 <_dtoa_r+0x644>)
 80088f6:	2000      	movs	r0, #0
 80088f8:	f7f7 fcc6 	bl	8000288 <__aeabi_dsub>
 80088fc:	ec53 2b19 	vmov	r2, r3, d9
 8008900:	f7f8 f8ec 	bl	8000adc <__aeabi_dcmplt>
 8008904:	2800      	cmp	r0, #0
 8008906:	f040 80b6 	bne.w	8008a76 <_dtoa_r+0x6e6>
 800890a:	9b02      	ldr	r3, [sp, #8]
 800890c:	429d      	cmp	r5, r3
 800890e:	f43f af7c 	beq.w	800880a <_dtoa_r+0x47a>
 8008912:	4b31      	ldr	r3, [pc, #196]	; (80089d8 <_dtoa_r+0x648>)
 8008914:	ec51 0b19 	vmov	r0, r1, d9
 8008918:	2200      	movs	r2, #0
 800891a:	f7f7 fe6d 	bl	80005f8 <__aeabi_dmul>
 800891e:	4b2e      	ldr	r3, [pc, #184]	; (80089d8 <_dtoa_r+0x648>)
 8008920:	ec41 0b19 	vmov	d9, r0, r1
 8008924:	2200      	movs	r2, #0
 8008926:	4640      	mov	r0, r8
 8008928:	4649      	mov	r1, r9
 800892a:	f7f7 fe65 	bl	80005f8 <__aeabi_dmul>
 800892e:	4680      	mov	r8, r0
 8008930:	4689      	mov	r9, r1
 8008932:	e7c5      	b.n	80088c0 <_dtoa_r+0x530>
 8008934:	ec51 0b17 	vmov	r0, r1, d7
 8008938:	f7f7 fe5e 	bl	80005f8 <__aeabi_dmul>
 800893c:	9b02      	ldr	r3, [sp, #8]
 800893e:	9d00      	ldr	r5, [sp, #0]
 8008940:	930f      	str	r3, [sp, #60]	; 0x3c
 8008942:	ec41 0b19 	vmov	d9, r0, r1
 8008946:	4649      	mov	r1, r9
 8008948:	4640      	mov	r0, r8
 800894a:	f7f8 f905 	bl	8000b58 <__aeabi_d2iz>
 800894e:	4606      	mov	r6, r0
 8008950:	f7f7 fde8 	bl	8000524 <__aeabi_i2d>
 8008954:	3630      	adds	r6, #48	; 0x30
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	4640      	mov	r0, r8
 800895c:	4649      	mov	r1, r9
 800895e:	f7f7 fc93 	bl	8000288 <__aeabi_dsub>
 8008962:	f805 6b01 	strb.w	r6, [r5], #1
 8008966:	9b02      	ldr	r3, [sp, #8]
 8008968:	429d      	cmp	r5, r3
 800896a:	4680      	mov	r8, r0
 800896c:	4689      	mov	r9, r1
 800896e:	f04f 0200 	mov.w	r2, #0
 8008972:	d124      	bne.n	80089be <_dtoa_r+0x62e>
 8008974:	4b1b      	ldr	r3, [pc, #108]	; (80089e4 <_dtoa_r+0x654>)
 8008976:	ec51 0b19 	vmov	r0, r1, d9
 800897a:	f7f7 fc87 	bl	800028c <__adddf3>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	4640      	mov	r0, r8
 8008984:	4649      	mov	r1, r9
 8008986:	f7f8 f8c7 	bl	8000b18 <__aeabi_dcmpgt>
 800898a:	2800      	cmp	r0, #0
 800898c:	d173      	bne.n	8008a76 <_dtoa_r+0x6e6>
 800898e:	ec53 2b19 	vmov	r2, r3, d9
 8008992:	4914      	ldr	r1, [pc, #80]	; (80089e4 <_dtoa_r+0x654>)
 8008994:	2000      	movs	r0, #0
 8008996:	f7f7 fc77 	bl	8000288 <__aeabi_dsub>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4640      	mov	r0, r8
 80089a0:	4649      	mov	r1, r9
 80089a2:	f7f8 f89b 	bl	8000adc <__aeabi_dcmplt>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	f43f af2f 	beq.w	800880a <_dtoa_r+0x47a>
 80089ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80089ae:	1e6b      	subs	r3, r5, #1
 80089b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80089b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089b6:	2b30      	cmp	r3, #48	; 0x30
 80089b8:	d0f8      	beq.n	80089ac <_dtoa_r+0x61c>
 80089ba:	46bb      	mov	fp, r7
 80089bc:	e04a      	b.n	8008a54 <_dtoa_r+0x6c4>
 80089be:	4b06      	ldr	r3, [pc, #24]	; (80089d8 <_dtoa_r+0x648>)
 80089c0:	f7f7 fe1a 	bl	80005f8 <__aeabi_dmul>
 80089c4:	4680      	mov	r8, r0
 80089c6:	4689      	mov	r9, r1
 80089c8:	e7bd      	b.n	8008946 <_dtoa_r+0x5b6>
 80089ca:	bf00      	nop
 80089cc:	0800e308 	.word	0x0800e308
 80089d0:	0800e2e0 	.word	0x0800e2e0
 80089d4:	3ff00000 	.word	0x3ff00000
 80089d8:	40240000 	.word	0x40240000
 80089dc:	401c0000 	.word	0x401c0000
 80089e0:	40140000 	.word	0x40140000
 80089e4:	3fe00000 	.word	0x3fe00000
 80089e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80089ec:	9d00      	ldr	r5, [sp, #0]
 80089ee:	4642      	mov	r2, r8
 80089f0:	464b      	mov	r3, r9
 80089f2:	4630      	mov	r0, r6
 80089f4:	4639      	mov	r1, r7
 80089f6:	f7f7 ff29 	bl	800084c <__aeabi_ddiv>
 80089fa:	f7f8 f8ad 	bl	8000b58 <__aeabi_d2iz>
 80089fe:	9001      	str	r0, [sp, #4]
 8008a00:	f7f7 fd90 	bl	8000524 <__aeabi_i2d>
 8008a04:	4642      	mov	r2, r8
 8008a06:	464b      	mov	r3, r9
 8008a08:	f7f7 fdf6 	bl	80005f8 <__aeabi_dmul>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4630      	mov	r0, r6
 8008a12:	4639      	mov	r1, r7
 8008a14:	f7f7 fc38 	bl	8000288 <__aeabi_dsub>
 8008a18:	9e01      	ldr	r6, [sp, #4]
 8008a1a:	9f04      	ldr	r7, [sp, #16]
 8008a1c:	3630      	adds	r6, #48	; 0x30
 8008a1e:	f805 6b01 	strb.w	r6, [r5], #1
 8008a22:	9e00      	ldr	r6, [sp, #0]
 8008a24:	1bae      	subs	r6, r5, r6
 8008a26:	42b7      	cmp	r7, r6
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	d134      	bne.n	8008a98 <_dtoa_r+0x708>
 8008a2e:	f7f7 fc2d 	bl	800028c <__adddf3>
 8008a32:	4642      	mov	r2, r8
 8008a34:	464b      	mov	r3, r9
 8008a36:	4606      	mov	r6, r0
 8008a38:	460f      	mov	r7, r1
 8008a3a:	f7f8 f86d 	bl	8000b18 <__aeabi_dcmpgt>
 8008a3e:	b9c8      	cbnz	r0, 8008a74 <_dtoa_r+0x6e4>
 8008a40:	4642      	mov	r2, r8
 8008a42:	464b      	mov	r3, r9
 8008a44:	4630      	mov	r0, r6
 8008a46:	4639      	mov	r1, r7
 8008a48:	f7f8 f83e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a4c:	b110      	cbz	r0, 8008a54 <_dtoa_r+0x6c4>
 8008a4e:	9b01      	ldr	r3, [sp, #4]
 8008a50:	07db      	lsls	r3, r3, #31
 8008a52:	d40f      	bmi.n	8008a74 <_dtoa_r+0x6e4>
 8008a54:	4651      	mov	r1, sl
 8008a56:	4620      	mov	r0, r4
 8008a58:	f000 fbcc 	bl	80091f4 <_Bfree>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a60:	702b      	strb	r3, [r5, #0]
 8008a62:	f10b 0301 	add.w	r3, fp, #1
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f43f ace2 	beq.w	8008434 <_dtoa_r+0xa4>
 8008a70:	601d      	str	r5, [r3, #0]
 8008a72:	e4df      	b.n	8008434 <_dtoa_r+0xa4>
 8008a74:	465f      	mov	r7, fp
 8008a76:	462b      	mov	r3, r5
 8008a78:	461d      	mov	r5, r3
 8008a7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a7e:	2a39      	cmp	r2, #57	; 0x39
 8008a80:	d106      	bne.n	8008a90 <_dtoa_r+0x700>
 8008a82:	9a00      	ldr	r2, [sp, #0]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d1f7      	bne.n	8008a78 <_dtoa_r+0x6e8>
 8008a88:	9900      	ldr	r1, [sp, #0]
 8008a8a:	2230      	movs	r2, #48	; 0x30
 8008a8c:	3701      	adds	r7, #1
 8008a8e:	700a      	strb	r2, [r1, #0]
 8008a90:	781a      	ldrb	r2, [r3, #0]
 8008a92:	3201      	adds	r2, #1
 8008a94:	701a      	strb	r2, [r3, #0]
 8008a96:	e790      	b.n	80089ba <_dtoa_r+0x62a>
 8008a98:	4ba3      	ldr	r3, [pc, #652]	; (8008d28 <_dtoa_r+0x998>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f7f7 fdac 	bl	80005f8 <__aeabi_dmul>
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	460f      	mov	r7, r1
 8008aa8:	f7f8 f80e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d09e      	beq.n	80089ee <_dtoa_r+0x65e>
 8008ab0:	e7d0      	b.n	8008a54 <_dtoa_r+0x6c4>
 8008ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ab4:	2a00      	cmp	r2, #0
 8008ab6:	f000 80ca 	beq.w	8008c4e <_dtoa_r+0x8be>
 8008aba:	9a07      	ldr	r2, [sp, #28]
 8008abc:	2a01      	cmp	r2, #1
 8008abe:	f300 80ad 	bgt.w	8008c1c <_dtoa_r+0x88c>
 8008ac2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ac4:	2a00      	cmp	r2, #0
 8008ac6:	f000 80a5 	beq.w	8008c14 <_dtoa_r+0x884>
 8008aca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ace:	9e08      	ldr	r6, [sp, #32]
 8008ad0:	9d05      	ldr	r5, [sp, #20]
 8008ad2:	9a05      	ldr	r2, [sp, #20]
 8008ad4:	441a      	add	r2, r3
 8008ad6:	9205      	str	r2, [sp, #20]
 8008ad8:	9a06      	ldr	r2, [sp, #24]
 8008ada:	2101      	movs	r1, #1
 8008adc:	441a      	add	r2, r3
 8008ade:	4620      	mov	r0, r4
 8008ae0:	9206      	str	r2, [sp, #24]
 8008ae2:	f000 fc3d 	bl	8009360 <__i2b>
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	b165      	cbz	r5, 8008b04 <_dtoa_r+0x774>
 8008aea:	9b06      	ldr	r3, [sp, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	dd09      	ble.n	8008b04 <_dtoa_r+0x774>
 8008af0:	42ab      	cmp	r3, r5
 8008af2:	9a05      	ldr	r2, [sp, #20]
 8008af4:	bfa8      	it	ge
 8008af6:	462b      	movge	r3, r5
 8008af8:	1ad2      	subs	r2, r2, r3
 8008afa:	9205      	str	r2, [sp, #20]
 8008afc:	9a06      	ldr	r2, [sp, #24]
 8008afe:	1aed      	subs	r5, r5, r3
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	9306      	str	r3, [sp, #24]
 8008b04:	9b08      	ldr	r3, [sp, #32]
 8008b06:	b1f3      	cbz	r3, 8008b46 <_dtoa_r+0x7b6>
 8008b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 80a3 	beq.w	8008c56 <_dtoa_r+0x8c6>
 8008b10:	2e00      	cmp	r6, #0
 8008b12:	dd10      	ble.n	8008b36 <_dtoa_r+0x7a6>
 8008b14:	4639      	mov	r1, r7
 8008b16:	4632      	mov	r2, r6
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fce1 	bl	80094e0 <__pow5mult>
 8008b1e:	4652      	mov	r2, sl
 8008b20:	4601      	mov	r1, r0
 8008b22:	4607      	mov	r7, r0
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 fc31 	bl	800938c <__multiply>
 8008b2a:	4651      	mov	r1, sl
 8008b2c:	4680      	mov	r8, r0
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 fb60 	bl	80091f4 <_Bfree>
 8008b34:	46c2      	mov	sl, r8
 8008b36:	9b08      	ldr	r3, [sp, #32]
 8008b38:	1b9a      	subs	r2, r3, r6
 8008b3a:	d004      	beq.n	8008b46 <_dtoa_r+0x7b6>
 8008b3c:	4651      	mov	r1, sl
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f000 fcce 	bl	80094e0 <__pow5mult>
 8008b44:	4682      	mov	sl, r0
 8008b46:	2101      	movs	r1, #1
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 fc09 	bl	8009360 <__i2b>
 8008b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	4606      	mov	r6, r0
 8008b54:	f340 8081 	ble.w	8008c5a <_dtoa_r+0x8ca>
 8008b58:	461a      	mov	r2, r3
 8008b5a:	4601      	mov	r1, r0
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f000 fcbf 	bl	80094e0 <__pow5mult>
 8008b62:	9b07      	ldr	r3, [sp, #28]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	4606      	mov	r6, r0
 8008b68:	dd7a      	ble.n	8008c60 <_dtoa_r+0x8d0>
 8008b6a:	f04f 0800 	mov.w	r8, #0
 8008b6e:	6933      	ldr	r3, [r6, #16]
 8008b70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b74:	6918      	ldr	r0, [r3, #16]
 8008b76:	f000 fba5 	bl	80092c4 <__hi0bits>
 8008b7a:	f1c0 0020 	rsb	r0, r0, #32
 8008b7e:	9b06      	ldr	r3, [sp, #24]
 8008b80:	4418      	add	r0, r3
 8008b82:	f010 001f 	ands.w	r0, r0, #31
 8008b86:	f000 8094 	beq.w	8008cb2 <_dtoa_r+0x922>
 8008b8a:	f1c0 0320 	rsb	r3, r0, #32
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	f340 8085 	ble.w	8008c9e <_dtoa_r+0x90e>
 8008b94:	9b05      	ldr	r3, [sp, #20]
 8008b96:	f1c0 001c 	rsb	r0, r0, #28
 8008b9a:	4403      	add	r3, r0
 8008b9c:	9305      	str	r3, [sp, #20]
 8008b9e:	9b06      	ldr	r3, [sp, #24]
 8008ba0:	4403      	add	r3, r0
 8008ba2:	4405      	add	r5, r0
 8008ba4:	9306      	str	r3, [sp, #24]
 8008ba6:	9b05      	ldr	r3, [sp, #20]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	dd05      	ble.n	8008bb8 <_dtoa_r+0x828>
 8008bac:	4651      	mov	r1, sl
 8008bae:	461a      	mov	r2, r3
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 fcef 	bl	8009594 <__lshift>
 8008bb6:	4682      	mov	sl, r0
 8008bb8:	9b06      	ldr	r3, [sp, #24]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	dd05      	ble.n	8008bca <_dtoa_r+0x83a>
 8008bbe:	4631      	mov	r1, r6
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f000 fce6 	bl	8009594 <__lshift>
 8008bc8:	4606      	mov	r6, r0
 8008bca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d072      	beq.n	8008cb6 <_dtoa_r+0x926>
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	4650      	mov	r0, sl
 8008bd4:	f000 fd4a 	bl	800966c <__mcmp>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	da6c      	bge.n	8008cb6 <_dtoa_r+0x926>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	4651      	mov	r1, sl
 8008be0:	220a      	movs	r2, #10
 8008be2:	4620      	mov	r0, r4
 8008be4:	f000 fb28 	bl	8009238 <__multadd>
 8008be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008bee:	4682      	mov	sl, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 81b0 	beq.w	8008f56 <_dtoa_r+0xbc6>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	220a      	movs	r2, #10
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f000 fb1b 	bl	8009238 <__multadd>
 8008c02:	9b01      	ldr	r3, [sp, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	4607      	mov	r7, r0
 8008c08:	f300 8096 	bgt.w	8008d38 <_dtoa_r+0x9a8>
 8008c0c:	9b07      	ldr	r3, [sp, #28]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	dc59      	bgt.n	8008cc6 <_dtoa_r+0x936>
 8008c12:	e091      	b.n	8008d38 <_dtoa_r+0x9a8>
 8008c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c1a:	e758      	b.n	8008ace <_dtoa_r+0x73e>
 8008c1c:	9b04      	ldr	r3, [sp, #16]
 8008c1e:	1e5e      	subs	r6, r3, #1
 8008c20:	9b08      	ldr	r3, [sp, #32]
 8008c22:	42b3      	cmp	r3, r6
 8008c24:	bfbf      	itttt	lt
 8008c26:	9b08      	ldrlt	r3, [sp, #32]
 8008c28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008c2a:	9608      	strlt	r6, [sp, #32]
 8008c2c:	1af3      	sublt	r3, r6, r3
 8008c2e:	bfb4      	ite	lt
 8008c30:	18d2      	addlt	r2, r2, r3
 8008c32:	1b9e      	subge	r6, r3, r6
 8008c34:	9b04      	ldr	r3, [sp, #16]
 8008c36:	bfbc      	itt	lt
 8008c38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008c3a:	2600      	movlt	r6, #0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	bfb7      	itett	lt
 8008c40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008c44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008c48:	1a9d      	sublt	r5, r3, r2
 8008c4a:	2300      	movlt	r3, #0
 8008c4c:	e741      	b.n	8008ad2 <_dtoa_r+0x742>
 8008c4e:	9e08      	ldr	r6, [sp, #32]
 8008c50:	9d05      	ldr	r5, [sp, #20]
 8008c52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c54:	e748      	b.n	8008ae8 <_dtoa_r+0x758>
 8008c56:	9a08      	ldr	r2, [sp, #32]
 8008c58:	e770      	b.n	8008b3c <_dtoa_r+0x7ac>
 8008c5a:	9b07      	ldr	r3, [sp, #28]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	dc19      	bgt.n	8008c94 <_dtoa_r+0x904>
 8008c60:	9b02      	ldr	r3, [sp, #8]
 8008c62:	b9bb      	cbnz	r3, 8008c94 <_dtoa_r+0x904>
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c6a:	b99b      	cbnz	r3, 8008c94 <_dtoa_r+0x904>
 8008c6c:	9b03      	ldr	r3, [sp, #12]
 8008c6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c72:	0d1b      	lsrs	r3, r3, #20
 8008c74:	051b      	lsls	r3, r3, #20
 8008c76:	b183      	cbz	r3, 8008c9a <_dtoa_r+0x90a>
 8008c78:	9b05      	ldr	r3, [sp, #20]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	9305      	str	r3, [sp, #20]
 8008c7e:	9b06      	ldr	r3, [sp, #24]
 8008c80:	3301      	adds	r3, #1
 8008c82:	9306      	str	r3, [sp, #24]
 8008c84:	f04f 0801 	mov.w	r8, #1
 8008c88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f47f af6f 	bne.w	8008b6e <_dtoa_r+0x7de>
 8008c90:	2001      	movs	r0, #1
 8008c92:	e774      	b.n	8008b7e <_dtoa_r+0x7ee>
 8008c94:	f04f 0800 	mov.w	r8, #0
 8008c98:	e7f6      	b.n	8008c88 <_dtoa_r+0x8f8>
 8008c9a:	4698      	mov	r8, r3
 8008c9c:	e7f4      	b.n	8008c88 <_dtoa_r+0x8f8>
 8008c9e:	d082      	beq.n	8008ba6 <_dtoa_r+0x816>
 8008ca0:	9a05      	ldr	r2, [sp, #20]
 8008ca2:	331c      	adds	r3, #28
 8008ca4:	441a      	add	r2, r3
 8008ca6:	9205      	str	r2, [sp, #20]
 8008ca8:	9a06      	ldr	r2, [sp, #24]
 8008caa:	441a      	add	r2, r3
 8008cac:	441d      	add	r5, r3
 8008cae:	9206      	str	r2, [sp, #24]
 8008cb0:	e779      	b.n	8008ba6 <_dtoa_r+0x816>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	e7f4      	b.n	8008ca0 <_dtoa_r+0x910>
 8008cb6:	9b04      	ldr	r3, [sp, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	dc37      	bgt.n	8008d2c <_dtoa_r+0x99c>
 8008cbc:	9b07      	ldr	r3, [sp, #28]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	dd34      	ble.n	8008d2c <_dtoa_r+0x99c>
 8008cc2:	9b04      	ldr	r3, [sp, #16]
 8008cc4:	9301      	str	r3, [sp, #4]
 8008cc6:	9b01      	ldr	r3, [sp, #4]
 8008cc8:	b963      	cbnz	r3, 8008ce4 <_dtoa_r+0x954>
 8008cca:	4631      	mov	r1, r6
 8008ccc:	2205      	movs	r2, #5
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f000 fab2 	bl	8009238 <__multadd>
 8008cd4:	4601      	mov	r1, r0
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	4650      	mov	r0, sl
 8008cda:	f000 fcc7 	bl	800966c <__mcmp>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	f73f adbb 	bgt.w	800885a <_dtoa_r+0x4ca>
 8008ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ce6:	9d00      	ldr	r5, [sp, #0]
 8008ce8:	ea6f 0b03 	mvn.w	fp, r3
 8008cec:	f04f 0800 	mov.w	r8, #0
 8008cf0:	4631      	mov	r1, r6
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f000 fa7e 	bl	80091f4 <_Bfree>
 8008cf8:	2f00      	cmp	r7, #0
 8008cfa:	f43f aeab 	beq.w	8008a54 <_dtoa_r+0x6c4>
 8008cfe:	f1b8 0f00 	cmp.w	r8, #0
 8008d02:	d005      	beq.n	8008d10 <_dtoa_r+0x980>
 8008d04:	45b8      	cmp	r8, r7
 8008d06:	d003      	beq.n	8008d10 <_dtoa_r+0x980>
 8008d08:	4641      	mov	r1, r8
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f000 fa72 	bl	80091f4 <_Bfree>
 8008d10:	4639      	mov	r1, r7
 8008d12:	4620      	mov	r0, r4
 8008d14:	f000 fa6e 	bl	80091f4 <_Bfree>
 8008d18:	e69c      	b.n	8008a54 <_dtoa_r+0x6c4>
 8008d1a:	2600      	movs	r6, #0
 8008d1c:	4637      	mov	r7, r6
 8008d1e:	e7e1      	b.n	8008ce4 <_dtoa_r+0x954>
 8008d20:	46bb      	mov	fp, r7
 8008d22:	4637      	mov	r7, r6
 8008d24:	e599      	b.n	800885a <_dtoa_r+0x4ca>
 8008d26:	bf00      	nop
 8008d28:	40240000 	.word	0x40240000
 8008d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 80c8 	beq.w	8008ec4 <_dtoa_r+0xb34>
 8008d34:	9b04      	ldr	r3, [sp, #16]
 8008d36:	9301      	str	r3, [sp, #4]
 8008d38:	2d00      	cmp	r5, #0
 8008d3a:	dd05      	ble.n	8008d48 <_dtoa_r+0x9b8>
 8008d3c:	4639      	mov	r1, r7
 8008d3e:	462a      	mov	r2, r5
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 fc27 	bl	8009594 <__lshift>
 8008d46:	4607      	mov	r7, r0
 8008d48:	f1b8 0f00 	cmp.w	r8, #0
 8008d4c:	d05b      	beq.n	8008e06 <_dtoa_r+0xa76>
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	4620      	mov	r0, r4
 8008d52:	f000 fa0f 	bl	8009174 <_Balloc>
 8008d56:	4605      	mov	r5, r0
 8008d58:	b928      	cbnz	r0, 8008d66 <_dtoa_r+0x9d6>
 8008d5a:	4b83      	ldr	r3, [pc, #524]	; (8008f68 <_dtoa_r+0xbd8>)
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008d62:	f7ff bb2e 	b.w	80083c2 <_dtoa_r+0x32>
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	3202      	adds	r2, #2
 8008d6a:	0092      	lsls	r2, r2, #2
 8008d6c:	f107 010c 	add.w	r1, r7, #12
 8008d70:	300c      	adds	r0, #12
 8008d72:	f7ff fa74 	bl	800825e <memcpy>
 8008d76:	2201      	movs	r2, #1
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 fc0a 	bl	8009594 <__lshift>
 8008d80:	9b00      	ldr	r3, [sp, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	9308      	str	r3, [sp, #32]
 8008d8e:	9b02      	ldr	r3, [sp, #8]
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	46b8      	mov	r8, r7
 8008d96:	9306      	str	r3, [sp, #24]
 8008d98:	4607      	mov	r7, r0
 8008d9a:	9b04      	ldr	r3, [sp, #16]
 8008d9c:	4631      	mov	r1, r6
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	4650      	mov	r0, sl
 8008da2:	9301      	str	r3, [sp, #4]
 8008da4:	f7ff fa69 	bl	800827a <quorem>
 8008da8:	4641      	mov	r1, r8
 8008daa:	9002      	str	r0, [sp, #8]
 8008dac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008db0:	4650      	mov	r0, sl
 8008db2:	f000 fc5b 	bl	800966c <__mcmp>
 8008db6:	463a      	mov	r2, r7
 8008db8:	9005      	str	r0, [sp, #20]
 8008dba:	4631      	mov	r1, r6
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f000 fc71 	bl	80096a4 <__mdiff>
 8008dc2:	68c2      	ldr	r2, [r0, #12]
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	bb02      	cbnz	r2, 8008e0a <_dtoa_r+0xa7a>
 8008dc8:	4601      	mov	r1, r0
 8008dca:	4650      	mov	r0, sl
 8008dcc:	f000 fc4e 	bl	800966c <__mcmp>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	9209      	str	r2, [sp, #36]	; 0x24
 8008dd8:	f000 fa0c 	bl	80091f4 <_Bfree>
 8008ddc:	9b07      	ldr	r3, [sp, #28]
 8008dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008de0:	9d04      	ldr	r5, [sp, #16]
 8008de2:	ea43 0102 	orr.w	r1, r3, r2
 8008de6:	9b06      	ldr	r3, [sp, #24]
 8008de8:	4319      	orrs	r1, r3
 8008dea:	d110      	bne.n	8008e0e <_dtoa_r+0xa7e>
 8008dec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008df0:	d029      	beq.n	8008e46 <_dtoa_r+0xab6>
 8008df2:	9b05      	ldr	r3, [sp, #20]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	dd02      	ble.n	8008dfe <_dtoa_r+0xa6e>
 8008df8:	9b02      	ldr	r3, [sp, #8]
 8008dfa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008dfe:	9b01      	ldr	r3, [sp, #4]
 8008e00:	f883 9000 	strb.w	r9, [r3]
 8008e04:	e774      	b.n	8008cf0 <_dtoa_r+0x960>
 8008e06:	4638      	mov	r0, r7
 8008e08:	e7ba      	b.n	8008d80 <_dtoa_r+0x9f0>
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	e7e1      	b.n	8008dd2 <_dtoa_r+0xa42>
 8008e0e:	9b05      	ldr	r3, [sp, #20]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	db04      	blt.n	8008e1e <_dtoa_r+0xa8e>
 8008e14:	9907      	ldr	r1, [sp, #28]
 8008e16:	430b      	orrs	r3, r1
 8008e18:	9906      	ldr	r1, [sp, #24]
 8008e1a:	430b      	orrs	r3, r1
 8008e1c:	d120      	bne.n	8008e60 <_dtoa_r+0xad0>
 8008e1e:	2a00      	cmp	r2, #0
 8008e20:	dded      	ble.n	8008dfe <_dtoa_r+0xa6e>
 8008e22:	4651      	mov	r1, sl
 8008e24:	2201      	movs	r2, #1
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 fbb4 	bl	8009594 <__lshift>
 8008e2c:	4631      	mov	r1, r6
 8008e2e:	4682      	mov	sl, r0
 8008e30:	f000 fc1c 	bl	800966c <__mcmp>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	dc03      	bgt.n	8008e40 <_dtoa_r+0xab0>
 8008e38:	d1e1      	bne.n	8008dfe <_dtoa_r+0xa6e>
 8008e3a:	f019 0f01 	tst.w	r9, #1
 8008e3e:	d0de      	beq.n	8008dfe <_dtoa_r+0xa6e>
 8008e40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e44:	d1d8      	bne.n	8008df8 <_dtoa_r+0xa68>
 8008e46:	9a01      	ldr	r2, [sp, #4]
 8008e48:	2339      	movs	r3, #57	; 0x39
 8008e4a:	7013      	strb	r3, [r2, #0]
 8008e4c:	462b      	mov	r3, r5
 8008e4e:	461d      	mov	r5, r3
 8008e50:	3b01      	subs	r3, #1
 8008e52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e56:	2a39      	cmp	r2, #57	; 0x39
 8008e58:	d06c      	beq.n	8008f34 <_dtoa_r+0xba4>
 8008e5a:	3201      	adds	r2, #1
 8008e5c:	701a      	strb	r2, [r3, #0]
 8008e5e:	e747      	b.n	8008cf0 <_dtoa_r+0x960>
 8008e60:	2a00      	cmp	r2, #0
 8008e62:	dd07      	ble.n	8008e74 <_dtoa_r+0xae4>
 8008e64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e68:	d0ed      	beq.n	8008e46 <_dtoa_r+0xab6>
 8008e6a:	9a01      	ldr	r2, [sp, #4]
 8008e6c:	f109 0301 	add.w	r3, r9, #1
 8008e70:	7013      	strb	r3, [r2, #0]
 8008e72:	e73d      	b.n	8008cf0 <_dtoa_r+0x960>
 8008e74:	9b04      	ldr	r3, [sp, #16]
 8008e76:	9a08      	ldr	r2, [sp, #32]
 8008e78:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d043      	beq.n	8008f08 <_dtoa_r+0xb78>
 8008e80:	4651      	mov	r1, sl
 8008e82:	2300      	movs	r3, #0
 8008e84:	220a      	movs	r2, #10
 8008e86:	4620      	mov	r0, r4
 8008e88:	f000 f9d6 	bl	8009238 <__multadd>
 8008e8c:	45b8      	cmp	r8, r7
 8008e8e:	4682      	mov	sl, r0
 8008e90:	f04f 0300 	mov.w	r3, #0
 8008e94:	f04f 020a 	mov.w	r2, #10
 8008e98:	4641      	mov	r1, r8
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	d107      	bne.n	8008eae <_dtoa_r+0xb1e>
 8008e9e:	f000 f9cb 	bl	8009238 <__multadd>
 8008ea2:	4680      	mov	r8, r0
 8008ea4:	4607      	mov	r7, r0
 8008ea6:	9b04      	ldr	r3, [sp, #16]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	9304      	str	r3, [sp, #16]
 8008eac:	e775      	b.n	8008d9a <_dtoa_r+0xa0a>
 8008eae:	f000 f9c3 	bl	8009238 <__multadd>
 8008eb2:	4639      	mov	r1, r7
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	220a      	movs	r2, #10
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f000 f9bc 	bl	8009238 <__multadd>
 8008ec0:	4607      	mov	r7, r0
 8008ec2:	e7f0      	b.n	8008ea6 <_dtoa_r+0xb16>
 8008ec4:	9b04      	ldr	r3, [sp, #16]
 8008ec6:	9301      	str	r3, [sp, #4]
 8008ec8:	9d00      	ldr	r5, [sp, #0]
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4650      	mov	r0, sl
 8008ece:	f7ff f9d4 	bl	800827a <quorem>
 8008ed2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008ed6:	9b00      	ldr	r3, [sp, #0]
 8008ed8:	f805 9b01 	strb.w	r9, [r5], #1
 8008edc:	1aea      	subs	r2, r5, r3
 8008ede:	9b01      	ldr	r3, [sp, #4]
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	dd07      	ble.n	8008ef4 <_dtoa_r+0xb64>
 8008ee4:	4651      	mov	r1, sl
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	220a      	movs	r2, #10
 8008eea:	4620      	mov	r0, r4
 8008eec:	f000 f9a4 	bl	8009238 <__multadd>
 8008ef0:	4682      	mov	sl, r0
 8008ef2:	e7ea      	b.n	8008eca <_dtoa_r+0xb3a>
 8008ef4:	9b01      	ldr	r3, [sp, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	bfc8      	it	gt
 8008efa:	461d      	movgt	r5, r3
 8008efc:	9b00      	ldr	r3, [sp, #0]
 8008efe:	bfd8      	it	le
 8008f00:	2501      	movle	r5, #1
 8008f02:	441d      	add	r5, r3
 8008f04:	f04f 0800 	mov.w	r8, #0
 8008f08:	4651      	mov	r1, sl
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	f000 fb41 	bl	8009594 <__lshift>
 8008f12:	4631      	mov	r1, r6
 8008f14:	4682      	mov	sl, r0
 8008f16:	f000 fba9 	bl	800966c <__mcmp>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	dc96      	bgt.n	8008e4c <_dtoa_r+0xabc>
 8008f1e:	d102      	bne.n	8008f26 <_dtoa_r+0xb96>
 8008f20:	f019 0f01 	tst.w	r9, #1
 8008f24:	d192      	bne.n	8008e4c <_dtoa_r+0xabc>
 8008f26:	462b      	mov	r3, r5
 8008f28:	461d      	mov	r5, r3
 8008f2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f2e:	2a30      	cmp	r2, #48	; 0x30
 8008f30:	d0fa      	beq.n	8008f28 <_dtoa_r+0xb98>
 8008f32:	e6dd      	b.n	8008cf0 <_dtoa_r+0x960>
 8008f34:	9a00      	ldr	r2, [sp, #0]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d189      	bne.n	8008e4e <_dtoa_r+0xabe>
 8008f3a:	f10b 0b01 	add.w	fp, fp, #1
 8008f3e:	2331      	movs	r3, #49	; 0x31
 8008f40:	e796      	b.n	8008e70 <_dtoa_r+0xae0>
 8008f42:	4b0a      	ldr	r3, [pc, #40]	; (8008f6c <_dtoa_r+0xbdc>)
 8008f44:	f7ff ba99 	b.w	800847a <_dtoa_r+0xea>
 8008f48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f47f aa6d 	bne.w	800842a <_dtoa_r+0x9a>
 8008f50:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <_dtoa_r+0xbe0>)
 8008f52:	f7ff ba92 	b.w	800847a <_dtoa_r+0xea>
 8008f56:	9b01      	ldr	r3, [sp, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	dcb5      	bgt.n	8008ec8 <_dtoa_r+0xb38>
 8008f5c:	9b07      	ldr	r3, [sp, #28]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	f73f aeb1 	bgt.w	8008cc6 <_dtoa_r+0x936>
 8008f64:	e7b0      	b.n	8008ec8 <_dtoa_r+0xb38>
 8008f66:	bf00      	nop
 8008f68:	0800e270 	.word	0x0800e270
 8008f6c:	0800e1d0 	.word	0x0800e1d0
 8008f70:	0800e1f4 	.word	0x0800e1f4

08008f74 <_free_r>:
 8008f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f76:	2900      	cmp	r1, #0
 8008f78:	d044      	beq.n	8009004 <_free_r+0x90>
 8008f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f7e:	9001      	str	r0, [sp, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f1a1 0404 	sub.w	r4, r1, #4
 8008f86:	bfb8      	it	lt
 8008f88:	18e4      	addlt	r4, r4, r3
 8008f8a:	f000 f8e7 	bl	800915c <__malloc_lock>
 8008f8e:	4a1e      	ldr	r2, [pc, #120]	; (8009008 <_free_r+0x94>)
 8008f90:	9801      	ldr	r0, [sp, #4]
 8008f92:	6813      	ldr	r3, [r2, #0]
 8008f94:	b933      	cbnz	r3, 8008fa4 <_free_r+0x30>
 8008f96:	6063      	str	r3, [r4, #4]
 8008f98:	6014      	str	r4, [r2, #0]
 8008f9a:	b003      	add	sp, #12
 8008f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fa0:	f000 b8e2 	b.w	8009168 <__malloc_unlock>
 8008fa4:	42a3      	cmp	r3, r4
 8008fa6:	d908      	bls.n	8008fba <_free_r+0x46>
 8008fa8:	6825      	ldr	r5, [r4, #0]
 8008faa:	1961      	adds	r1, r4, r5
 8008fac:	428b      	cmp	r3, r1
 8008fae:	bf01      	itttt	eq
 8008fb0:	6819      	ldreq	r1, [r3, #0]
 8008fb2:	685b      	ldreq	r3, [r3, #4]
 8008fb4:	1949      	addeq	r1, r1, r5
 8008fb6:	6021      	streq	r1, [r4, #0]
 8008fb8:	e7ed      	b.n	8008f96 <_free_r+0x22>
 8008fba:	461a      	mov	r2, r3
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	b10b      	cbz	r3, 8008fc4 <_free_r+0x50>
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	d9fa      	bls.n	8008fba <_free_r+0x46>
 8008fc4:	6811      	ldr	r1, [r2, #0]
 8008fc6:	1855      	adds	r5, r2, r1
 8008fc8:	42a5      	cmp	r5, r4
 8008fca:	d10b      	bne.n	8008fe4 <_free_r+0x70>
 8008fcc:	6824      	ldr	r4, [r4, #0]
 8008fce:	4421      	add	r1, r4
 8008fd0:	1854      	adds	r4, r2, r1
 8008fd2:	42a3      	cmp	r3, r4
 8008fd4:	6011      	str	r1, [r2, #0]
 8008fd6:	d1e0      	bne.n	8008f9a <_free_r+0x26>
 8008fd8:	681c      	ldr	r4, [r3, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	6053      	str	r3, [r2, #4]
 8008fde:	440c      	add	r4, r1
 8008fe0:	6014      	str	r4, [r2, #0]
 8008fe2:	e7da      	b.n	8008f9a <_free_r+0x26>
 8008fe4:	d902      	bls.n	8008fec <_free_r+0x78>
 8008fe6:	230c      	movs	r3, #12
 8008fe8:	6003      	str	r3, [r0, #0]
 8008fea:	e7d6      	b.n	8008f9a <_free_r+0x26>
 8008fec:	6825      	ldr	r5, [r4, #0]
 8008fee:	1961      	adds	r1, r4, r5
 8008ff0:	428b      	cmp	r3, r1
 8008ff2:	bf04      	itt	eq
 8008ff4:	6819      	ldreq	r1, [r3, #0]
 8008ff6:	685b      	ldreq	r3, [r3, #4]
 8008ff8:	6063      	str	r3, [r4, #4]
 8008ffa:	bf04      	itt	eq
 8008ffc:	1949      	addeq	r1, r1, r5
 8008ffe:	6021      	streq	r1, [r4, #0]
 8009000:	6054      	str	r4, [r2, #4]
 8009002:	e7ca      	b.n	8008f9a <_free_r+0x26>
 8009004:	b003      	add	sp, #12
 8009006:	bd30      	pop	{r4, r5, pc}
 8009008:	2000a528 	.word	0x2000a528

0800900c <malloc>:
 800900c:	4b02      	ldr	r3, [pc, #8]	; (8009018 <malloc+0xc>)
 800900e:	4601      	mov	r1, r0
 8009010:	6818      	ldr	r0, [r3, #0]
 8009012:	f000 b823 	b.w	800905c <_malloc_r>
 8009016:	bf00      	nop
 8009018:	2000006c 	.word	0x2000006c

0800901c <sbrk_aligned>:
 800901c:	b570      	push	{r4, r5, r6, lr}
 800901e:	4e0e      	ldr	r6, [pc, #56]	; (8009058 <sbrk_aligned+0x3c>)
 8009020:	460c      	mov	r4, r1
 8009022:	6831      	ldr	r1, [r6, #0]
 8009024:	4605      	mov	r5, r0
 8009026:	b911      	cbnz	r1, 800902e <sbrk_aligned+0x12>
 8009028:	f001 fc96 	bl	800a958 <_sbrk_r>
 800902c:	6030      	str	r0, [r6, #0]
 800902e:	4621      	mov	r1, r4
 8009030:	4628      	mov	r0, r5
 8009032:	f001 fc91 	bl	800a958 <_sbrk_r>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	d00a      	beq.n	8009050 <sbrk_aligned+0x34>
 800903a:	1cc4      	adds	r4, r0, #3
 800903c:	f024 0403 	bic.w	r4, r4, #3
 8009040:	42a0      	cmp	r0, r4
 8009042:	d007      	beq.n	8009054 <sbrk_aligned+0x38>
 8009044:	1a21      	subs	r1, r4, r0
 8009046:	4628      	mov	r0, r5
 8009048:	f001 fc86 	bl	800a958 <_sbrk_r>
 800904c:	3001      	adds	r0, #1
 800904e:	d101      	bne.n	8009054 <sbrk_aligned+0x38>
 8009050:	f04f 34ff 	mov.w	r4, #4294967295
 8009054:	4620      	mov	r0, r4
 8009056:	bd70      	pop	{r4, r5, r6, pc}
 8009058:	2000a52c 	.word	0x2000a52c

0800905c <_malloc_r>:
 800905c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009060:	1ccd      	adds	r5, r1, #3
 8009062:	f025 0503 	bic.w	r5, r5, #3
 8009066:	3508      	adds	r5, #8
 8009068:	2d0c      	cmp	r5, #12
 800906a:	bf38      	it	cc
 800906c:	250c      	movcc	r5, #12
 800906e:	2d00      	cmp	r5, #0
 8009070:	4607      	mov	r7, r0
 8009072:	db01      	blt.n	8009078 <_malloc_r+0x1c>
 8009074:	42a9      	cmp	r1, r5
 8009076:	d905      	bls.n	8009084 <_malloc_r+0x28>
 8009078:	230c      	movs	r3, #12
 800907a:	603b      	str	r3, [r7, #0]
 800907c:	2600      	movs	r6, #0
 800907e:	4630      	mov	r0, r6
 8009080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009084:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009158 <_malloc_r+0xfc>
 8009088:	f000 f868 	bl	800915c <__malloc_lock>
 800908c:	f8d8 3000 	ldr.w	r3, [r8]
 8009090:	461c      	mov	r4, r3
 8009092:	bb5c      	cbnz	r4, 80090ec <_malloc_r+0x90>
 8009094:	4629      	mov	r1, r5
 8009096:	4638      	mov	r0, r7
 8009098:	f7ff ffc0 	bl	800901c <sbrk_aligned>
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	4604      	mov	r4, r0
 80090a0:	d155      	bne.n	800914e <_malloc_r+0xf2>
 80090a2:	f8d8 4000 	ldr.w	r4, [r8]
 80090a6:	4626      	mov	r6, r4
 80090a8:	2e00      	cmp	r6, #0
 80090aa:	d145      	bne.n	8009138 <_malloc_r+0xdc>
 80090ac:	2c00      	cmp	r4, #0
 80090ae:	d048      	beq.n	8009142 <_malloc_r+0xe6>
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	4631      	mov	r1, r6
 80090b4:	4638      	mov	r0, r7
 80090b6:	eb04 0903 	add.w	r9, r4, r3
 80090ba:	f001 fc4d 	bl	800a958 <_sbrk_r>
 80090be:	4581      	cmp	r9, r0
 80090c0:	d13f      	bne.n	8009142 <_malloc_r+0xe6>
 80090c2:	6821      	ldr	r1, [r4, #0]
 80090c4:	1a6d      	subs	r5, r5, r1
 80090c6:	4629      	mov	r1, r5
 80090c8:	4638      	mov	r0, r7
 80090ca:	f7ff ffa7 	bl	800901c <sbrk_aligned>
 80090ce:	3001      	adds	r0, #1
 80090d0:	d037      	beq.n	8009142 <_malloc_r+0xe6>
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	442b      	add	r3, r5
 80090d6:	6023      	str	r3, [r4, #0]
 80090d8:	f8d8 3000 	ldr.w	r3, [r8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d038      	beq.n	8009152 <_malloc_r+0xf6>
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	42a2      	cmp	r2, r4
 80090e4:	d12b      	bne.n	800913e <_malloc_r+0xe2>
 80090e6:	2200      	movs	r2, #0
 80090e8:	605a      	str	r2, [r3, #4]
 80090ea:	e00f      	b.n	800910c <_malloc_r+0xb0>
 80090ec:	6822      	ldr	r2, [r4, #0]
 80090ee:	1b52      	subs	r2, r2, r5
 80090f0:	d41f      	bmi.n	8009132 <_malloc_r+0xd6>
 80090f2:	2a0b      	cmp	r2, #11
 80090f4:	d917      	bls.n	8009126 <_malloc_r+0xca>
 80090f6:	1961      	adds	r1, r4, r5
 80090f8:	42a3      	cmp	r3, r4
 80090fa:	6025      	str	r5, [r4, #0]
 80090fc:	bf18      	it	ne
 80090fe:	6059      	strne	r1, [r3, #4]
 8009100:	6863      	ldr	r3, [r4, #4]
 8009102:	bf08      	it	eq
 8009104:	f8c8 1000 	streq.w	r1, [r8]
 8009108:	5162      	str	r2, [r4, r5]
 800910a:	604b      	str	r3, [r1, #4]
 800910c:	4638      	mov	r0, r7
 800910e:	f104 060b 	add.w	r6, r4, #11
 8009112:	f000 f829 	bl	8009168 <__malloc_unlock>
 8009116:	f026 0607 	bic.w	r6, r6, #7
 800911a:	1d23      	adds	r3, r4, #4
 800911c:	1af2      	subs	r2, r6, r3
 800911e:	d0ae      	beq.n	800907e <_malloc_r+0x22>
 8009120:	1b9b      	subs	r3, r3, r6
 8009122:	50a3      	str	r3, [r4, r2]
 8009124:	e7ab      	b.n	800907e <_malloc_r+0x22>
 8009126:	42a3      	cmp	r3, r4
 8009128:	6862      	ldr	r2, [r4, #4]
 800912a:	d1dd      	bne.n	80090e8 <_malloc_r+0x8c>
 800912c:	f8c8 2000 	str.w	r2, [r8]
 8009130:	e7ec      	b.n	800910c <_malloc_r+0xb0>
 8009132:	4623      	mov	r3, r4
 8009134:	6864      	ldr	r4, [r4, #4]
 8009136:	e7ac      	b.n	8009092 <_malloc_r+0x36>
 8009138:	4634      	mov	r4, r6
 800913a:	6876      	ldr	r6, [r6, #4]
 800913c:	e7b4      	b.n	80090a8 <_malloc_r+0x4c>
 800913e:	4613      	mov	r3, r2
 8009140:	e7cc      	b.n	80090dc <_malloc_r+0x80>
 8009142:	230c      	movs	r3, #12
 8009144:	603b      	str	r3, [r7, #0]
 8009146:	4638      	mov	r0, r7
 8009148:	f000 f80e 	bl	8009168 <__malloc_unlock>
 800914c:	e797      	b.n	800907e <_malloc_r+0x22>
 800914e:	6025      	str	r5, [r4, #0]
 8009150:	e7dc      	b.n	800910c <_malloc_r+0xb0>
 8009152:	605b      	str	r3, [r3, #4]
 8009154:	deff      	udf	#255	; 0xff
 8009156:	bf00      	nop
 8009158:	2000a528 	.word	0x2000a528

0800915c <__malloc_lock>:
 800915c:	4801      	ldr	r0, [pc, #4]	; (8009164 <__malloc_lock+0x8>)
 800915e:	f7ff b87c 	b.w	800825a <__retarget_lock_acquire_recursive>
 8009162:	bf00      	nop
 8009164:	2000a524 	.word	0x2000a524

08009168 <__malloc_unlock>:
 8009168:	4801      	ldr	r0, [pc, #4]	; (8009170 <__malloc_unlock+0x8>)
 800916a:	f7ff b877 	b.w	800825c <__retarget_lock_release_recursive>
 800916e:	bf00      	nop
 8009170:	2000a524 	.word	0x2000a524

08009174 <_Balloc>:
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	69c6      	ldr	r6, [r0, #28]
 8009178:	4604      	mov	r4, r0
 800917a:	460d      	mov	r5, r1
 800917c:	b976      	cbnz	r6, 800919c <_Balloc+0x28>
 800917e:	2010      	movs	r0, #16
 8009180:	f7ff ff44 	bl	800900c <malloc>
 8009184:	4602      	mov	r2, r0
 8009186:	61e0      	str	r0, [r4, #28]
 8009188:	b920      	cbnz	r0, 8009194 <_Balloc+0x20>
 800918a:	4b18      	ldr	r3, [pc, #96]	; (80091ec <_Balloc+0x78>)
 800918c:	4818      	ldr	r0, [pc, #96]	; (80091f0 <_Balloc+0x7c>)
 800918e:	216b      	movs	r1, #107	; 0x6b
 8009190:	f001 fbf2 	bl	800a978 <__assert_func>
 8009194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009198:	6006      	str	r6, [r0, #0]
 800919a:	60c6      	str	r6, [r0, #12]
 800919c:	69e6      	ldr	r6, [r4, #28]
 800919e:	68f3      	ldr	r3, [r6, #12]
 80091a0:	b183      	cbz	r3, 80091c4 <_Balloc+0x50>
 80091a2:	69e3      	ldr	r3, [r4, #28]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091aa:	b9b8      	cbnz	r0, 80091dc <_Balloc+0x68>
 80091ac:	2101      	movs	r1, #1
 80091ae:	fa01 f605 	lsl.w	r6, r1, r5
 80091b2:	1d72      	adds	r2, r6, #5
 80091b4:	0092      	lsls	r2, r2, #2
 80091b6:	4620      	mov	r0, r4
 80091b8:	f001 fbfc 	bl	800a9b4 <_calloc_r>
 80091bc:	b160      	cbz	r0, 80091d8 <_Balloc+0x64>
 80091be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091c2:	e00e      	b.n	80091e2 <_Balloc+0x6e>
 80091c4:	2221      	movs	r2, #33	; 0x21
 80091c6:	2104      	movs	r1, #4
 80091c8:	4620      	mov	r0, r4
 80091ca:	f001 fbf3 	bl	800a9b4 <_calloc_r>
 80091ce:	69e3      	ldr	r3, [r4, #28]
 80091d0:	60f0      	str	r0, [r6, #12]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1e4      	bne.n	80091a2 <_Balloc+0x2e>
 80091d8:	2000      	movs	r0, #0
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	6802      	ldr	r2, [r0, #0]
 80091de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091e2:	2300      	movs	r3, #0
 80091e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091e8:	e7f7      	b.n	80091da <_Balloc+0x66>
 80091ea:	bf00      	nop
 80091ec:	0800e201 	.word	0x0800e201
 80091f0:	0800e281 	.word	0x0800e281

080091f4 <_Bfree>:
 80091f4:	b570      	push	{r4, r5, r6, lr}
 80091f6:	69c6      	ldr	r6, [r0, #28]
 80091f8:	4605      	mov	r5, r0
 80091fa:	460c      	mov	r4, r1
 80091fc:	b976      	cbnz	r6, 800921c <_Bfree+0x28>
 80091fe:	2010      	movs	r0, #16
 8009200:	f7ff ff04 	bl	800900c <malloc>
 8009204:	4602      	mov	r2, r0
 8009206:	61e8      	str	r0, [r5, #28]
 8009208:	b920      	cbnz	r0, 8009214 <_Bfree+0x20>
 800920a:	4b09      	ldr	r3, [pc, #36]	; (8009230 <_Bfree+0x3c>)
 800920c:	4809      	ldr	r0, [pc, #36]	; (8009234 <_Bfree+0x40>)
 800920e:	218f      	movs	r1, #143	; 0x8f
 8009210:	f001 fbb2 	bl	800a978 <__assert_func>
 8009214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009218:	6006      	str	r6, [r0, #0]
 800921a:	60c6      	str	r6, [r0, #12]
 800921c:	b13c      	cbz	r4, 800922e <_Bfree+0x3a>
 800921e:	69eb      	ldr	r3, [r5, #28]
 8009220:	6862      	ldr	r2, [r4, #4]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009228:	6021      	str	r1, [r4, #0]
 800922a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800922e:	bd70      	pop	{r4, r5, r6, pc}
 8009230:	0800e201 	.word	0x0800e201
 8009234:	0800e281 	.word	0x0800e281

08009238 <__multadd>:
 8009238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800923c:	690d      	ldr	r5, [r1, #16]
 800923e:	4607      	mov	r7, r0
 8009240:	460c      	mov	r4, r1
 8009242:	461e      	mov	r6, r3
 8009244:	f101 0c14 	add.w	ip, r1, #20
 8009248:	2000      	movs	r0, #0
 800924a:	f8dc 3000 	ldr.w	r3, [ip]
 800924e:	b299      	uxth	r1, r3
 8009250:	fb02 6101 	mla	r1, r2, r1, r6
 8009254:	0c1e      	lsrs	r6, r3, #16
 8009256:	0c0b      	lsrs	r3, r1, #16
 8009258:	fb02 3306 	mla	r3, r2, r6, r3
 800925c:	b289      	uxth	r1, r1
 800925e:	3001      	adds	r0, #1
 8009260:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009264:	4285      	cmp	r5, r0
 8009266:	f84c 1b04 	str.w	r1, [ip], #4
 800926a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800926e:	dcec      	bgt.n	800924a <__multadd+0x12>
 8009270:	b30e      	cbz	r6, 80092b6 <__multadd+0x7e>
 8009272:	68a3      	ldr	r3, [r4, #8]
 8009274:	42ab      	cmp	r3, r5
 8009276:	dc19      	bgt.n	80092ac <__multadd+0x74>
 8009278:	6861      	ldr	r1, [r4, #4]
 800927a:	4638      	mov	r0, r7
 800927c:	3101      	adds	r1, #1
 800927e:	f7ff ff79 	bl	8009174 <_Balloc>
 8009282:	4680      	mov	r8, r0
 8009284:	b928      	cbnz	r0, 8009292 <__multadd+0x5a>
 8009286:	4602      	mov	r2, r0
 8009288:	4b0c      	ldr	r3, [pc, #48]	; (80092bc <__multadd+0x84>)
 800928a:	480d      	ldr	r0, [pc, #52]	; (80092c0 <__multadd+0x88>)
 800928c:	21ba      	movs	r1, #186	; 0xba
 800928e:	f001 fb73 	bl	800a978 <__assert_func>
 8009292:	6922      	ldr	r2, [r4, #16]
 8009294:	3202      	adds	r2, #2
 8009296:	f104 010c 	add.w	r1, r4, #12
 800929a:	0092      	lsls	r2, r2, #2
 800929c:	300c      	adds	r0, #12
 800929e:	f7fe ffde 	bl	800825e <memcpy>
 80092a2:	4621      	mov	r1, r4
 80092a4:	4638      	mov	r0, r7
 80092a6:	f7ff ffa5 	bl	80091f4 <_Bfree>
 80092aa:	4644      	mov	r4, r8
 80092ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092b0:	3501      	adds	r5, #1
 80092b2:	615e      	str	r6, [r3, #20]
 80092b4:	6125      	str	r5, [r4, #16]
 80092b6:	4620      	mov	r0, r4
 80092b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092bc:	0800e270 	.word	0x0800e270
 80092c0:	0800e281 	.word	0x0800e281

080092c4 <__hi0bits>:
 80092c4:	0c03      	lsrs	r3, r0, #16
 80092c6:	041b      	lsls	r3, r3, #16
 80092c8:	b9d3      	cbnz	r3, 8009300 <__hi0bits+0x3c>
 80092ca:	0400      	lsls	r0, r0, #16
 80092cc:	2310      	movs	r3, #16
 80092ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80092d2:	bf04      	itt	eq
 80092d4:	0200      	lsleq	r0, r0, #8
 80092d6:	3308      	addeq	r3, #8
 80092d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80092dc:	bf04      	itt	eq
 80092de:	0100      	lsleq	r0, r0, #4
 80092e0:	3304      	addeq	r3, #4
 80092e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80092e6:	bf04      	itt	eq
 80092e8:	0080      	lsleq	r0, r0, #2
 80092ea:	3302      	addeq	r3, #2
 80092ec:	2800      	cmp	r0, #0
 80092ee:	db05      	blt.n	80092fc <__hi0bits+0x38>
 80092f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80092f4:	f103 0301 	add.w	r3, r3, #1
 80092f8:	bf08      	it	eq
 80092fa:	2320      	moveq	r3, #32
 80092fc:	4618      	mov	r0, r3
 80092fe:	4770      	bx	lr
 8009300:	2300      	movs	r3, #0
 8009302:	e7e4      	b.n	80092ce <__hi0bits+0xa>

08009304 <__lo0bits>:
 8009304:	6803      	ldr	r3, [r0, #0]
 8009306:	f013 0207 	ands.w	r2, r3, #7
 800930a:	d00c      	beq.n	8009326 <__lo0bits+0x22>
 800930c:	07d9      	lsls	r1, r3, #31
 800930e:	d422      	bmi.n	8009356 <__lo0bits+0x52>
 8009310:	079a      	lsls	r2, r3, #30
 8009312:	bf49      	itett	mi
 8009314:	085b      	lsrmi	r3, r3, #1
 8009316:	089b      	lsrpl	r3, r3, #2
 8009318:	6003      	strmi	r3, [r0, #0]
 800931a:	2201      	movmi	r2, #1
 800931c:	bf5c      	itt	pl
 800931e:	6003      	strpl	r3, [r0, #0]
 8009320:	2202      	movpl	r2, #2
 8009322:	4610      	mov	r0, r2
 8009324:	4770      	bx	lr
 8009326:	b299      	uxth	r1, r3
 8009328:	b909      	cbnz	r1, 800932e <__lo0bits+0x2a>
 800932a:	0c1b      	lsrs	r3, r3, #16
 800932c:	2210      	movs	r2, #16
 800932e:	b2d9      	uxtb	r1, r3
 8009330:	b909      	cbnz	r1, 8009336 <__lo0bits+0x32>
 8009332:	3208      	adds	r2, #8
 8009334:	0a1b      	lsrs	r3, r3, #8
 8009336:	0719      	lsls	r1, r3, #28
 8009338:	bf04      	itt	eq
 800933a:	091b      	lsreq	r3, r3, #4
 800933c:	3204      	addeq	r2, #4
 800933e:	0799      	lsls	r1, r3, #30
 8009340:	bf04      	itt	eq
 8009342:	089b      	lsreq	r3, r3, #2
 8009344:	3202      	addeq	r2, #2
 8009346:	07d9      	lsls	r1, r3, #31
 8009348:	d403      	bmi.n	8009352 <__lo0bits+0x4e>
 800934a:	085b      	lsrs	r3, r3, #1
 800934c:	f102 0201 	add.w	r2, r2, #1
 8009350:	d003      	beq.n	800935a <__lo0bits+0x56>
 8009352:	6003      	str	r3, [r0, #0]
 8009354:	e7e5      	b.n	8009322 <__lo0bits+0x1e>
 8009356:	2200      	movs	r2, #0
 8009358:	e7e3      	b.n	8009322 <__lo0bits+0x1e>
 800935a:	2220      	movs	r2, #32
 800935c:	e7e1      	b.n	8009322 <__lo0bits+0x1e>
	...

08009360 <__i2b>:
 8009360:	b510      	push	{r4, lr}
 8009362:	460c      	mov	r4, r1
 8009364:	2101      	movs	r1, #1
 8009366:	f7ff ff05 	bl	8009174 <_Balloc>
 800936a:	4602      	mov	r2, r0
 800936c:	b928      	cbnz	r0, 800937a <__i2b+0x1a>
 800936e:	4b05      	ldr	r3, [pc, #20]	; (8009384 <__i2b+0x24>)
 8009370:	4805      	ldr	r0, [pc, #20]	; (8009388 <__i2b+0x28>)
 8009372:	f240 1145 	movw	r1, #325	; 0x145
 8009376:	f001 faff 	bl	800a978 <__assert_func>
 800937a:	2301      	movs	r3, #1
 800937c:	6144      	str	r4, [r0, #20]
 800937e:	6103      	str	r3, [r0, #16]
 8009380:	bd10      	pop	{r4, pc}
 8009382:	bf00      	nop
 8009384:	0800e270 	.word	0x0800e270
 8009388:	0800e281 	.word	0x0800e281

0800938c <__multiply>:
 800938c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009390:	4691      	mov	r9, r2
 8009392:	690a      	ldr	r2, [r1, #16]
 8009394:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009398:	429a      	cmp	r2, r3
 800939a:	bfb8      	it	lt
 800939c:	460b      	movlt	r3, r1
 800939e:	460c      	mov	r4, r1
 80093a0:	bfbc      	itt	lt
 80093a2:	464c      	movlt	r4, r9
 80093a4:	4699      	movlt	r9, r3
 80093a6:	6927      	ldr	r7, [r4, #16]
 80093a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80093ac:	68a3      	ldr	r3, [r4, #8]
 80093ae:	6861      	ldr	r1, [r4, #4]
 80093b0:	eb07 060a 	add.w	r6, r7, sl
 80093b4:	42b3      	cmp	r3, r6
 80093b6:	b085      	sub	sp, #20
 80093b8:	bfb8      	it	lt
 80093ba:	3101      	addlt	r1, #1
 80093bc:	f7ff feda 	bl	8009174 <_Balloc>
 80093c0:	b930      	cbnz	r0, 80093d0 <__multiply+0x44>
 80093c2:	4602      	mov	r2, r0
 80093c4:	4b44      	ldr	r3, [pc, #272]	; (80094d8 <__multiply+0x14c>)
 80093c6:	4845      	ldr	r0, [pc, #276]	; (80094dc <__multiply+0x150>)
 80093c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80093cc:	f001 fad4 	bl	800a978 <__assert_func>
 80093d0:	f100 0514 	add.w	r5, r0, #20
 80093d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093d8:	462b      	mov	r3, r5
 80093da:	2200      	movs	r2, #0
 80093dc:	4543      	cmp	r3, r8
 80093de:	d321      	bcc.n	8009424 <__multiply+0x98>
 80093e0:	f104 0314 	add.w	r3, r4, #20
 80093e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80093e8:	f109 0314 	add.w	r3, r9, #20
 80093ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80093f0:	9202      	str	r2, [sp, #8]
 80093f2:	1b3a      	subs	r2, r7, r4
 80093f4:	3a15      	subs	r2, #21
 80093f6:	f022 0203 	bic.w	r2, r2, #3
 80093fa:	3204      	adds	r2, #4
 80093fc:	f104 0115 	add.w	r1, r4, #21
 8009400:	428f      	cmp	r7, r1
 8009402:	bf38      	it	cc
 8009404:	2204      	movcc	r2, #4
 8009406:	9201      	str	r2, [sp, #4]
 8009408:	9a02      	ldr	r2, [sp, #8]
 800940a:	9303      	str	r3, [sp, #12]
 800940c:	429a      	cmp	r2, r3
 800940e:	d80c      	bhi.n	800942a <__multiply+0x9e>
 8009410:	2e00      	cmp	r6, #0
 8009412:	dd03      	ble.n	800941c <__multiply+0x90>
 8009414:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009418:	2b00      	cmp	r3, #0
 800941a:	d05b      	beq.n	80094d4 <__multiply+0x148>
 800941c:	6106      	str	r6, [r0, #16]
 800941e:	b005      	add	sp, #20
 8009420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009424:	f843 2b04 	str.w	r2, [r3], #4
 8009428:	e7d8      	b.n	80093dc <__multiply+0x50>
 800942a:	f8b3 a000 	ldrh.w	sl, [r3]
 800942e:	f1ba 0f00 	cmp.w	sl, #0
 8009432:	d024      	beq.n	800947e <__multiply+0xf2>
 8009434:	f104 0e14 	add.w	lr, r4, #20
 8009438:	46a9      	mov	r9, r5
 800943a:	f04f 0c00 	mov.w	ip, #0
 800943e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009442:	f8d9 1000 	ldr.w	r1, [r9]
 8009446:	fa1f fb82 	uxth.w	fp, r2
 800944a:	b289      	uxth	r1, r1
 800944c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009450:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009454:	f8d9 2000 	ldr.w	r2, [r9]
 8009458:	4461      	add	r1, ip
 800945a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800945e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009462:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009466:	b289      	uxth	r1, r1
 8009468:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800946c:	4577      	cmp	r7, lr
 800946e:	f849 1b04 	str.w	r1, [r9], #4
 8009472:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009476:	d8e2      	bhi.n	800943e <__multiply+0xb2>
 8009478:	9a01      	ldr	r2, [sp, #4]
 800947a:	f845 c002 	str.w	ip, [r5, r2]
 800947e:	9a03      	ldr	r2, [sp, #12]
 8009480:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009484:	3304      	adds	r3, #4
 8009486:	f1b9 0f00 	cmp.w	r9, #0
 800948a:	d021      	beq.n	80094d0 <__multiply+0x144>
 800948c:	6829      	ldr	r1, [r5, #0]
 800948e:	f104 0c14 	add.w	ip, r4, #20
 8009492:	46ae      	mov	lr, r5
 8009494:	f04f 0a00 	mov.w	sl, #0
 8009498:	f8bc b000 	ldrh.w	fp, [ip]
 800949c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80094a0:	fb09 220b 	mla	r2, r9, fp, r2
 80094a4:	4452      	add	r2, sl
 80094a6:	b289      	uxth	r1, r1
 80094a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094ac:	f84e 1b04 	str.w	r1, [lr], #4
 80094b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80094b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80094b8:	f8be 1000 	ldrh.w	r1, [lr]
 80094bc:	fb09 110a 	mla	r1, r9, sl, r1
 80094c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80094c4:	4567      	cmp	r7, ip
 80094c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80094ca:	d8e5      	bhi.n	8009498 <__multiply+0x10c>
 80094cc:	9a01      	ldr	r2, [sp, #4]
 80094ce:	50a9      	str	r1, [r5, r2]
 80094d0:	3504      	adds	r5, #4
 80094d2:	e799      	b.n	8009408 <__multiply+0x7c>
 80094d4:	3e01      	subs	r6, #1
 80094d6:	e79b      	b.n	8009410 <__multiply+0x84>
 80094d8:	0800e270 	.word	0x0800e270
 80094dc:	0800e281 	.word	0x0800e281

080094e0 <__pow5mult>:
 80094e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094e4:	4615      	mov	r5, r2
 80094e6:	f012 0203 	ands.w	r2, r2, #3
 80094ea:	4606      	mov	r6, r0
 80094ec:	460f      	mov	r7, r1
 80094ee:	d007      	beq.n	8009500 <__pow5mult+0x20>
 80094f0:	4c25      	ldr	r4, [pc, #148]	; (8009588 <__pow5mult+0xa8>)
 80094f2:	3a01      	subs	r2, #1
 80094f4:	2300      	movs	r3, #0
 80094f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094fa:	f7ff fe9d 	bl	8009238 <__multadd>
 80094fe:	4607      	mov	r7, r0
 8009500:	10ad      	asrs	r5, r5, #2
 8009502:	d03d      	beq.n	8009580 <__pow5mult+0xa0>
 8009504:	69f4      	ldr	r4, [r6, #28]
 8009506:	b97c      	cbnz	r4, 8009528 <__pow5mult+0x48>
 8009508:	2010      	movs	r0, #16
 800950a:	f7ff fd7f 	bl	800900c <malloc>
 800950e:	4602      	mov	r2, r0
 8009510:	61f0      	str	r0, [r6, #28]
 8009512:	b928      	cbnz	r0, 8009520 <__pow5mult+0x40>
 8009514:	4b1d      	ldr	r3, [pc, #116]	; (800958c <__pow5mult+0xac>)
 8009516:	481e      	ldr	r0, [pc, #120]	; (8009590 <__pow5mult+0xb0>)
 8009518:	f240 11b3 	movw	r1, #435	; 0x1b3
 800951c:	f001 fa2c 	bl	800a978 <__assert_func>
 8009520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009524:	6004      	str	r4, [r0, #0]
 8009526:	60c4      	str	r4, [r0, #12]
 8009528:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800952c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009530:	b94c      	cbnz	r4, 8009546 <__pow5mult+0x66>
 8009532:	f240 2171 	movw	r1, #625	; 0x271
 8009536:	4630      	mov	r0, r6
 8009538:	f7ff ff12 	bl	8009360 <__i2b>
 800953c:	2300      	movs	r3, #0
 800953e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009542:	4604      	mov	r4, r0
 8009544:	6003      	str	r3, [r0, #0]
 8009546:	f04f 0900 	mov.w	r9, #0
 800954a:	07eb      	lsls	r3, r5, #31
 800954c:	d50a      	bpl.n	8009564 <__pow5mult+0x84>
 800954e:	4639      	mov	r1, r7
 8009550:	4622      	mov	r2, r4
 8009552:	4630      	mov	r0, r6
 8009554:	f7ff ff1a 	bl	800938c <__multiply>
 8009558:	4639      	mov	r1, r7
 800955a:	4680      	mov	r8, r0
 800955c:	4630      	mov	r0, r6
 800955e:	f7ff fe49 	bl	80091f4 <_Bfree>
 8009562:	4647      	mov	r7, r8
 8009564:	106d      	asrs	r5, r5, #1
 8009566:	d00b      	beq.n	8009580 <__pow5mult+0xa0>
 8009568:	6820      	ldr	r0, [r4, #0]
 800956a:	b938      	cbnz	r0, 800957c <__pow5mult+0x9c>
 800956c:	4622      	mov	r2, r4
 800956e:	4621      	mov	r1, r4
 8009570:	4630      	mov	r0, r6
 8009572:	f7ff ff0b 	bl	800938c <__multiply>
 8009576:	6020      	str	r0, [r4, #0]
 8009578:	f8c0 9000 	str.w	r9, [r0]
 800957c:	4604      	mov	r4, r0
 800957e:	e7e4      	b.n	800954a <__pow5mult+0x6a>
 8009580:	4638      	mov	r0, r7
 8009582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009586:	bf00      	nop
 8009588:	0800e3d0 	.word	0x0800e3d0
 800958c:	0800e201 	.word	0x0800e201
 8009590:	0800e281 	.word	0x0800e281

08009594 <__lshift>:
 8009594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009598:	460c      	mov	r4, r1
 800959a:	6849      	ldr	r1, [r1, #4]
 800959c:	6923      	ldr	r3, [r4, #16]
 800959e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095a2:	68a3      	ldr	r3, [r4, #8]
 80095a4:	4607      	mov	r7, r0
 80095a6:	4691      	mov	r9, r2
 80095a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095ac:	f108 0601 	add.w	r6, r8, #1
 80095b0:	42b3      	cmp	r3, r6
 80095b2:	db0b      	blt.n	80095cc <__lshift+0x38>
 80095b4:	4638      	mov	r0, r7
 80095b6:	f7ff fddd 	bl	8009174 <_Balloc>
 80095ba:	4605      	mov	r5, r0
 80095bc:	b948      	cbnz	r0, 80095d2 <__lshift+0x3e>
 80095be:	4602      	mov	r2, r0
 80095c0:	4b28      	ldr	r3, [pc, #160]	; (8009664 <__lshift+0xd0>)
 80095c2:	4829      	ldr	r0, [pc, #164]	; (8009668 <__lshift+0xd4>)
 80095c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80095c8:	f001 f9d6 	bl	800a978 <__assert_func>
 80095cc:	3101      	adds	r1, #1
 80095ce:	005b      	lsls	r3, r3, #1
 80095d0:	e7ee      	b.n	80095b0 <__lshift+0x1c>
 80095d2:	2300      	movs	r3, #0
 80095d4:	f100 0114 	add.w	r1, r0, #20
 80095d8:	f100 0210 	add.w	r2, r0, #16
 80095dc:	4618      	mov	r0, r3
 80095de:	4553      	cmp	r3, sl
 80095e0:	db33      	blt.n	800964a <__lshift+0xb6>
 80095e2:	6920      	ldr	r0, [r4, #16]
 80095e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095e8:	f104 0314 	add.w	r3, r4, #20
 80095ec:	f019 091f 	ands.w	r9, r9, #31
 80095f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095f8:	d02b      	beq.n	8009652 <__lshift+0xbe>
 80095fa:	f1c9 0e20 	rsb	lr, r9, #32
 80095fe:	468a      	mov	sl, r1
 8009600:	2200      	movs	r2, #0
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	fa00 f009 	lsl.w	r0, r0, r9
 8009608:	4310      	orrs	r0, r2
 800960a:	f84a 0b04 	str.w	r0, [sl], #4
 800960e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009612:	459c      	cmp	ip, r3
 8009614:	fa22 f20e 	lsr.w	r2, r2, lr
 8009618:	d8f3      	bhi.n	8009602 <__lshift+0x6e>
 800961a:	ebac 0304 	sub.w	r3, ip, r4
 800961e:	3b15      	subs	r3, #21
 8009620:	f023 0303 	bic.w	r3, r3, #3
 8009624:	3304      	adds	r3, #4
 8009626:	f104 0015 	add.w	r0, r4, #21
 800962a:	4584      	cmp	ip, r0
 800962c:	bf38      	it	cc
 800962e:	2304      	movcc	r3, #4
 8009630:	50ca      	str	r2, [r1, r3]
 8009632:	b10a      	cbz	r2, 8009638 <__lshift+0xa4>
 8009634:	f108 0602 	add.w	r6, r8, #2
 8009638:	3e01      	subs	r6, #1
 800963a:	4638      	mov	r0, r7
 800963c:	612e      	str	r6, [r5, #16]
 800963e:	4621      	mov	r1, r4
 8009640:	f7ff fdd8 	bl	80091f4 <_Bfree>
 8009644:	4628      	mov	r0, r5
 8009646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964a:	f842 0f04 	str.w	r0, [r2, #4]!
 800964e:	3301      	adds	r3, #1
 8009650:	e7c5      	b.n	80095de <__lshift+0x4a>
 8009652:	3904      	subs	r1, #4
 8009654:	f853 2b04 	ldr.w	r2, [r3], #4
 8009658:	f841 2f04 	str.w	r2, [r1, #4]!
 800965c:	459c      	cmp	ip, r3
 800965e:	d8f9      	bhi.n	8009654 <__lshift+0xc0>
 8009660:	e7ea      	b.n	8009638 <__lshift+0xa4>
 8009662:	bf00      	nop
 8009664:	0800e270 	.word	0x0800e270
 8009668:	0800e281 	.word	0x0800e281

0800966c <__mcmp>:
 800966c:	b530      	push	{r4, r5, lr}
 800966e:	6902      	ldr	r2, [r0, #16]
 8009670:	690c      	ldr	r4, [r1, #16]
 8009672:	1b12      	subs	r2, r2, r4
 8009674:	d10e      	bne.n	8009694 <__mcmp+0x28>
 8009676:	f100 0314 	add.w	r3, r0, #20
 800967a:	3114      	adds	r1, #20
 800967c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009680:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009684:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009688:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800968c:	42a5      	cmp	r5, r4
 800968e:	d003      	beq.n	8009698 <__mcmp+0x2c>
 8009690:	d305      	bcc.n	800969e <__mcmp+0x32>
 8009692:	2201      	movs	r2, #1
 8009694:	4610      	mov	r0, r2
 8009696:	bd30      	pop	{r4, r5, pc}
 8009698:	4283      	cmp	r3, r0
 800969a:	d3f3      	bcc.n	8009684 <__mcmp+0x18>
 800969c:	e7fa      	b.n	8009694 <__mcmp+0x28>
 800969e:	f04f 32ff 	mov.w	r2, #4294967295
 80096a2:	e7f7      	b.n	8009694 <__mcmp+0x28>

080096a4 <__mdiff>:
 80096a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a8:	460c      	mov	r4, r1
 80096aa:	4606      	mov	r6, r0
 80096ac:	4611      	mov	r1, r2
 80096ae:	4620      	mov	r0, r4
 80096b0:	4690      	mov	r8, r2
 80096b2:	f7ff ffdb 	bl	800966c <__mcmp>
 80096b6:	1e05      	subs	r5, r0, #0
 80096b8:	d110      	bne.n	80096dc <__mdiff+0x38>
 80096ba:	4629      	mov	r1, r5
 80096bc:	4630      	mov	r0, r6
 80096be:	f7ff fd59 	bl	8009174 <_Balloc>
 80096c2:	b930      	cbnz	r0, 80096d2 <__mdiff+0x2e>
 80096c4:	4b3a      	ldr	r3, [pc, #232]	; (80097b0 <__mdiff+0x10c>)
 80096c6:	4602      	mov	r2, r0
 80096c8:	f240 2137 	movw	r1, #567	; 0x237
 80096cc:	4839      	ldr	r0, [pc, #228]	; (80097b4 <__mdiff+0x110>)
 80096ce:	f001 f953 	bl	800a978 <__assert_func>
 80096d2:	2301      	movs	r3, #1
 80096d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096dc:	bfa4      	itt	ge
 80096de:	4643      	movge	r3, r8
 80096e0:	46a0      	movge	r8, r4
 80096e2:	4630      	mov	r0, r6
 80096e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80096e8:	bfa6      	itte	ge
 80096ea:	461c      	movge	r4, r3
 80096ec:	2500      	movge	r5, #0
 80096ee:	2501      	movlt	r5, #1
 80096f0:	f7ff fd40 	bl	8009174 <_Balloc>
 80096f4:	b920      	cbnz	r0, 8009700 <__mdiff+0x5c>
 80096f6:	4b2e      	ldr	r3, [pc, #184]	; (80097b0 <__mdiff+0x10c>)
 80096f8:	4602      	mov	r2, r0
 80096fa:	f240 2145 	movw	r1, #581	; 0x245
 80096fe:	e7e5      	b.n	80096cc <__mdiff+0x28>
 8009700:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009704:	6926      	ldr	r6, [r4, #16]
 8009706:	60c5      	str	r5, [r0, #12]
 8009708:	f104 0914 	add.w	r9, r4, #20
 800970c:	f108 0514 	add.w	r5, r8, #20
 8009710:	f100 0e14 	add.w	lr, r0, #20
 8009714:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009718:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800971c:	f108 0210 	add.w	r2, r8, #16
 8009720:	46f2      	mov	sl, lr
 8009722:	2100      	movs	r1, #0
 8009724:	f859 3b04 	ldr.w	r3, [r9], #4
 8009728:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800972c:	fa11 f88b 	uxtah	r8, r1, fp
 8009730:	b299      	uxth	r1, r3
 8009732:	0c1b      	lsrs	r3, r3, #16
 8009734:	eba8 0801 	sub.w	r8, r8, r1
 8009738:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800973c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009740:	fa1f f888 	uxth.w	r8, r8
 8009744:	1419      	asrs	r1, r3, #16
 8009746:	454e      	cmp	r6, r9
 8009748:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800974c:	f84a 3b04 	str.w	r3, [sl], #4
 8009750:	d8e8      	bhi.n	8009724 <__mdiff+0x80>
 8009752:	1b33      	subs	r3, r6, r4
 8009754:	3b15      	subs	r3, #21
 8009756:	f023 0303 	bic.w	r3, r3, #3
 800975a:	3304      	adds	r3, #4
 800975c:	3415      	adds	r4, #21
 800975e:	42a6      	cmp	r6, r4
 8009760:	bf38      	it	cc
 8009762:	2304      	movcc	r3, #4
 8009764:	441d      	add	r5, r3
 8009766:	4473      	add	r3, lr
 8009768:	469e      	mov	lr, r3
 800976a:	462e      	mov	r6, r5
 800976c:	4566      	cmp	r6, ip
 800976e:	d30e      	bcc.n	800978e <__mdiff+0xea>
 8009770:	f10c 0203 	add.w	r2, ip, #3
 8009774:	1b52      	subs	r2, r2, r5
 8009776:	f022 0203 	bic.w	r2, r2, #3
 800977a:	3d03      	subs	r5, #3
 800977c:	45ac      	cmp	ip, r5
 800977e:	bf38      	it	cc
 8009780:	2200      	movcc	r2, #0
 8009782:	4413      	add	r3, r2
 8009784:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009788:	b17a      	cbz	r2, 80097aa <__mdiff+0x106>
 800978a:	6107      	str	r7, [r0, #16]
 800978c:	e7a4      	b.n	80096d8 <__mdiff+0x34>
 800978e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009792:	fa11 f288 	uxtah	r2, r1, r8
 8009796:	1414      	asrs	r4, r2, #16
 8009798:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800979c:	b292      	uxth	r2, r2
 800979e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80097a2:	f84e 2b04 	str.w	r2, [lr], #4
 80097a6:	1421      	asrs	r1, r4, #16
 80097a8:	e7e0      	b.n	800976c <__mdiff+0xc8>
 80097aa:	3f01      	subs	r7, #1
 80097ac:	e7ea      	b.n	8009784 <__mdiff+0xe0>
 80097ae:	bf00      	nop
 80097b0:	0800e270 	.word	0x0800e270
 80097b4:	0800e281 	.word	0x0800e281

080097b8 <__d2b>:
 80097b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097bc:	460f      	mov	r7, r1
 80097be:	2101      	movs	r1, #1
 80097c0:	ec59 8b10 	vmov	r8, r9, d0
 80097c4:	4616      	mov	r6, r2
 80097c6:	f7ff fcd5 	bl	8009174 <_Balloc>
 80097ca:	4604      	mov	r4, r0
 80097cc:	b930      	cbnz	r0, 80097dc <__d2b+0x24>
 80097ce:	4602      	mov	r2, r0
 80097d0:	4b24      	ldr	r3, [pc, #144]	; (8009864 <__d2b+0xac>)
 80097d2:	4825      	ldr	r0, [pc, #148]	; (8009868 <__d2b+0xb0>)
 80097d4:	f240 310f 	movw	r1, #783	; 0x30f
 80097d8:	f001 f8ce 	bl	800a978 <__assert_func>
 80097dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80097e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097e4:	bb2d      	cbnz	r5, 8009832 <__d2b+0x7a>
 80097e6:	9301      	str	r3, [sp, #4]
 80097e8:	f1b8 0300 	subs.w	r3, r8, #0
 80097ec:	d026      	beq.n	800983c <__d2b+0x84>
 80097ee:	4668      	mov	r0, sp
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	f7ff fd87 	bl	8009304 <__lo0bits>
 80097f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80097fa:	b1e8      	cbz	r0, 8009838 <__d2b+0x80>
 80097fc:	f1c0 0320 	rsb	r3, r0, #32
 8009800:	fa02 f303 	lsl.w	r3, r2, r3
 8009804:	430b      	orrs	r3, r1
 8009806:	40c2      	lsrs	r2, r0
 8009808:	6163      	str	r3, [r4, #20]
 800980a:	9201      	str	r2, [sp, #4]
 800980c:	9b01      	ldr	r3, [sp, #4]
 800980e:	61a3      	str	r3, [r4, #24]
 8009810:	2b00      	cmp	r3, #0
 8009812:	bf14      	ite	ne
 8009814:	2202      	movne	r2, #2
 8009816:	2201      	moveq	r2, #1
 8009818:	6122      	str	r2, [r4, #16]
 800981a:	b1bd      	cbz	r5, 800984c <__d2b+0x94>
 800981c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009820:	4405      	add	r5, r0
 8009822:	603d      	str	r5, [r7, #0]
 8009824:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009828:	6030      	str	r0, [r6, #0]
 800982a:	4620      	mov	r0, r4
 800982c:	b003      	add	sp, #12
 800982e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009836:	e7d6      	b.n	80097e6 <__d2b+0x2e>
 8009838:	6161      	str	r1, [r4, #20]
 800983a:	e7e7      	b.n	800980c <__d2b+0x54>
 800983c:	a801      	add	r0, sp, #4
 800983e:	f7ff fd61 	bl	8009304 <__lo0bits>
 8009842:	9b01      	ldr	r3, [sp, #4]
 8009844:	6163      	str	r3, [r4, #20]
 8009846:	3020      	adds	r0, #32
 8009848:	2201      	movs	r2, #1
 800984a:	e7e5      	b.n	8009818 <__d2b+0x60>
 800984c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009850:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009854:	6038      	str	r0, [r7, #0]
 8009856:	6918      	ldr	r0, [r3, #16]
 8009858:	f7ff fd34 	bl	80092c4 <__hi0bits>
 800985c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009860:	e7e2      	b.n	8009828 <__d2b+0x70>
 8009862:	bf00      	nop
 8009864:	0800e270 	.word	0x0800e270
 8009868:	0800e281 	.word	0x0800e281

0800986c <__sfputc_r>:
 800986c:	6893      	ldr	r3, [r2, #8]
 800986e:	3b01      	subs	r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	b410      	push	{r4}
 8009874:	6093      	str	r3, [r2, #8]
 8009876:	da08      	bge.n	800988a <__sfputc_r+0x1e>
 8009878:	6994      	ldr	r4, [r2, #24]
 800987a:	42a3      	cmp	r3, r4
 800987c:	db01      	blt.n	8009882 <__sfputc_r+0x16>
 800987e:	290a      	cmp	r1, #10
 8009880:	d103      	bne.n	800988a <__sfputc_r+0x1e>
 8009882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009886:	f000 bf7d 	b.w	800a784 <__swbuf_r>
 800988a:	6813      	ldr	r3, [r2, #0]
 800988c:	1c58      	adds	r0, r3, #1
 800988e:	6010      	str	r0, [r2, #0]
 8009890:	7019      	strb	r1, [r3, #0]
 8009892:	4608      	mov	r0, r1
 8009894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009898:	4770      	bx	lr

0800989a <__sfputs_r>:
 800989a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989c:	4606      	mov	r6, r0
 800989e:	460f      	mov	r7, r1
 80098a0:	4614      	mov	r4, r2
 80098a2:	18d5      	adds	r5, r2, r3
 80098a4:	42ac      	cmp	r4, r5
 80098a6:	d101      	bne.n	80098ac <__sfputs_r+0x12>
 80098a8:	2000      	movs	r0, #0
 80098aa:	e007      	b.n	80098bc <__sfputs_r+0x22>
 80098ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b0:	463a      	mov	r2, r7
 80098b2:	4630      	mov	r0, r6
 80098b4:	f7ff ffda 	bl	800986c <__sfputc_r>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d1f3      	bne.n	80098a4 <__sfputs_r+0xa>
 80098bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098c0 <_vfiprintf_r>:
 80098c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c4:	460d      	mov	r5, r1
 80098c6:	b09d      	sub	sp, #116	; 0x74
 80098c8:	4614      	mov	r4, r2
 80098ca:	4698      	mov	r8, r3
 80098cc:	4606      	mov	r6, r0
 80098ce:	b118      	cbz	r0, 80098d8 <_vfiprintf_r+0x18>
 80098d0:	6a03      	ldr	r3, [r0, #32]
 80098d2:	b90b      	cbnz	r3, 80098d8 <_vfiprintf_r+0x18>
 80098d4:	f7fe fb84 	bl	8007fe0 <__sinit>
 80098d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098da:	07d9      	lsls	r1, r3, #31
 80098dc:	d405      	bmi.n	80098ea <_vfiprintf_r+0x2a>
 80098de:	89ab      	ldrh	r3, [r5, #12]
 80098e0:	059a      	lsls	r2, r3, #22
 80098e2:	d402      	bmi.n	80098ea <_vfiprintf_r+0x2a>
 80098e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098e6:	f7fe fcb8 	bl	800825a <__retarget_lock_acquire_recursive>
 80098ea:	89ab      	ldrh	r3, [r5, #12]
 80098ec:	071b      	lsls	r3, r3, #28
 80098ee:	d501      	bpl.n	80098f4 <_vfiprintf_r+0x34>
 80098f0:	692b      	ldr	r3, [r5, #16]
 80098f2:	b99b      	cbnz	r3, 800991c <_vfiprintf_r+0x5c>
 80098f4:	4629      	mov	r1, r5
 80098f6:	4630      	mov	r0, r6
 80098f8:	f000 ff82 	bl	800a800 <__swsetup_r>
 80098fc:	b170      	cbz	r0, 800991c <_vfiprintf_r+0x5c>
 80098fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009900:	07dc      	lsls	r4, r3, #31
 8009902:	d504      	bpl.n	800990e <_vfiprintf_r+0x4e>
 8009904:	f04f 30ff 	mov.w	r0, #4294967295
 8009908:	b01d      	add	sp, #116	; 0x74
 800990a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990e:	89ab      	ldrh	r3, [r5, #12]
 8009910:	0598      	lsls	r0, r3, #22
 8009912:	d4f7      	bmi.n	8009904 <_vfiprintf_r+0x44>
 8009914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009916:	f7fe fca1 	bl	800825c <__retarget_lock_release_recursive>
 800991a:	e7f3      	b.n	8009904 <_vfiprintf_r+0x44>
 800991c:	2300      	movs	r3, #0
 800991e:	9309      	str	r3, [sp, #36]	; 0x24
 8009920:	2320      	movs	r3, #32
 8009922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009926:	f8cd 800c 	str.w	r8, [sp, #12]
 800992a:	2330      	movs	r3, #48	; 0x30
 800992c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009ae0 <_vfiprintf_r+0x220>
 8009930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009934:	f04f 0901 	mov.w	r9, #1
 8009938:	4623      	mov	r3, r4
 800993a:	469a      	mov	sl, r3
 800993c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009940:	b10a      	cbz	r2, 8009946 <_vfiprintf_r+0x86>
 8009942:	2a25      	cmp	r2, #37	; 0x25
 8009944:	d1f9      	bne.n	800993a <_vfiprintf_r+0x7a>
 8009946:	ebba 0b04 	subs.w	fp, sl, r4
 800994a:	d00b      	beq.n	8009964 <_vfiprintf_r+0xa4>
 800994c:	465b      	mov	r3, fp
 800994e:	4622      	mov	r2, r4
 8009950:	4629      	mov	r1, r5
 8009952:	4630      	mov	r0, r6
 8009954:	f7ff ffa1 	bl	800989a <__sfputs_r>
 8009958:	3001      	adds	r0, #1
 800995a:	f000 80a9 	beq.w	8009ab0 <_vfiprintf_r+0x1f0>
 800995e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009960:	445a      	add	r2, fp
 8009962:	9209      	str	r2, [sp, #36]	; 0x24
 8009964:	f89a 3000 	ldrb.w	r3, [sl]
 8009968:	2b00      	cmp	r3, #0
 800996a:	f000 80a1 	beq.w	8009ab0 <_vfiprintf_r+0x1f0>
 800996e:	2300      	movs	r3, #0
 8009970:	f04f 32ff 	mov.w	r2, #4294967295
 8009974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009978:	f10a 0a01 	add.w	sl, sl, #1
 800997c:	9304      	str	r3, [sp, #16]
 800997e:	9307      	str	r3, [sp, #28]
 8009980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009984:	931a      	str	r3, [sp, #104]	; 0x68
 8009986:	4654      	mov	r4, sl
 8009988:	2205      	movs	r2, #5
 800998a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800998e:	4854      	ldr	r0, [pc, #336]	; (8009ae0 <_vfiprintf_r+0x220>)
 8009990:	f7f6 fc1e 	bl	80001d0 <memchr>
 8009994:	9a04      	ldr	r2, [sp, #16]
 8009996:	b9d8      	cbnz	r0, 80099d0 <_vfiprintf_r+0x110>
 8009998:	06d1      	lsls	r1, r2, #27
 800999a:	bf44      	itt	mi
 800999c:	2320      	movmi	r3, #32
 800999e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099a2:	0713      	lsls	r3, r2, #28
 80099a4:	bf44      	itt	mi
 80099a6:	232b      	movmi	r3, #43	; 0x2b
 80099a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099ac:	f89a 3000 	ldrb.w	r3, [sl]
 80099b0:	2b2a      	cmp	r3, #42	; 0x2a
 80099b2:	d015      	beq.n	80099e0 <_vfiprintf_r+0x120>
 80099b4:	9a07      	ldr	r2, [sp, #28]
 80099b6:	4654      	mov	r4, sl
 80099b8:	2000      	movs	r0, #0
 80099ba:	f04f 0c0a 	mov.w	ip, #10
 80099be:	4621      	mov	r1, r4
 80099c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099c4:	3b30      	subs	r3, #48	; 0x30
 80099c6:	2b09      	cmp	r3, #9
 80099c8:	d94d      	bls.n	8009a66 <_vfiprintf_r+0x1a6>
 80099ca:	b1b0      	cbz	r0, 80099fa <_vfiprintf_r+0x13a>
 80099cc:	9207      	str	r2, [sp, #28]
 80099ce:	e014      	b.n	80099fa <_vfiprintf_r+0x13a>
 80099d0:	eba0 0308 	sub.w	r3, r0, r8
 80099d4:	fa09 f303 	lsl.w	r3, r9, r3
 80099d8:	4313      	orrs	r3, r2
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	46a2      	mov	sl, r4
 80099de:	e7d2      	b.n	8009986 <_vfiprintf_r+0xc6>
 80099e0:	9b03      	ldr	r3, [sp, #12]
 80099e2:	1d19      	adds	r1, r3, #4
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	9103      	str	r1, [sp, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	bfbb      	ittet	lt
 80099ec:	425b      	neglt	r3, r3
 80099ee:	f042 0202 	orrlt.w	r2, r2, #2
 80099f2:	9307      	strge	r3, [sp, #28]
 80099f4:	9307      	strlt	r3, [sp, #28]
 80099f6:	bfb8      	it	lt
 80099f8:	9204      	strlt	r2, [sp, #16]
 80099fa:	7823      	ldrb	r3, [r4, #0]
 80099fc:	2b2e      	cmp	r3, #46	; 0x2e
 80099fe:	d10c      	bne.n	8009a1a <_vfiprintf_r+0x15a>
 8009a00:	7863      	ldrb	r3, [r4, #1]
 8009a02:	2b2a      	cmp	r3, #42	; 0x2a
 8009a04:	d134      	bne.n	8009a70 <_vfiprintf_r+0x1b0>
 8009a06:	9b03      	ldr	r3, [sp, #12]
 8009a08:	1d1a      	adds	r2, r3, #4
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	9203      	str	r2, [sp, #12]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	bfb8      	it	lt
 8009a12:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a16:	3402      	adds	r4, #2
 8009a18:	9305      	str	r3, [sp, #20]
 8009a1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009af0 <_vfiprintf_r+0x230>
 8009a1e:	7821      	ldrb	r1, [r4, #0]
 8009a20:	2203      	movs	r2, #3
 8009a22:	4650      	mov	r0, sl
 8009a24:	f7f6 fbd4 	bl	80001d0 <memchr>
 8009a28:	b138      	cbz	r0, 8009a3a <_vfiprintf_r+0x17a>
 8009a2a:	9b04      	ldr	r3, [sp, #16]
 8009a2c:	eba0 000a 	sub.w	r0, r0, sl
 8009a30:	2240      	movs	r2, #64	; 0x40
 8009a32:	4082      	lsls	r2, r0
 8009a34:	4313      	orrs	r3, r2
 8009a36:	3401      	adds	r4, #1
 8009a38:	9304      	str	r3, [sp, #16]
 8009a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a3e:	4829      	ldr	r0, [pc, #164]	; (8009ae4 <_vfiprintf_r+0x224>)
 8009a40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a44:	2206      	movs	r2, #6
 8009a46:	f7f6 fbc3 	bl	80001d0 <memchr>
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	d03f      	beq.n	8009ace <_vfiprintf_r+0x20e>
 8009a4e:	4b26      	ldr	r3, [pc, #152]	; (8009ae8 <_vfiprintf_r+0x228>)
 8009a50:	bb1b      	cbnz	r3, 8009a9a <_vfiprintf_r+0x1da>
 8009a52:	9b03      	ldr	r3, [sp, #12]
 8009a54:	3307      	adds	r3, #7
 8009a56:	f023 0307 	bic.w	r3, r3, #7
 8009a5a:	3308      	adds	r3, #8
 8009a5c:	9303      	str	r3, [sp, #12]
 8009a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a60:	443b      	add	r3, r7
 8009a62:	9309      	str	r3, [sp, #36]	; 0x24
 8009a64:	e768      	b.n	8009938 <_vfiprintf_r+0x78>
 8009a66:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	2001      	movs	r0, #1
 8009a6e:	e7a6      	b.n	80099be <_vfiprintf_r+0xfe>
 8009a70:	2300      	movs	r3, #0
 8009a72:	3401      	adds	r4, #1
 8009a74:	9305      	str	r3, [sp, #20]
 8009a76:	4619      	mov	r1, r3
 8009a78:	f04f 0c0a 	mov.w	ip, #10
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a82:	3a30      	subs	r2, #48	; 0x30
 8009a84:	2a09      	cmp	r2, #9
 8009a86:	d903      	bls.n	8009a90 <_vfiprintf_r+0x1d0>
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d0c6      	beq.n	8009a1a <_vfiprintf_r+0x15a>
 8009a8c:	9105      	str	r1, [sp, #20]
 8009a8e:	e7c4      	b.n	8009a1a <_vfiprintf_r+0x15a>
 8009a90:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a94:	4604      	mov	r4, r0
 8009a96:	2301      	movs	r3, #1
 8009a98:	e7f0      	b.n	8009a7c <_vfiprintf_r+0x1bc>
 8009a9a:	ab03      	add	r3, sp, #12
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	462a      	mov	r2, r5
 8009aa0:	4b12      	ldr	r3, [pc, #72]	; (8009aec <_vfiprintf_r+0x22c>)
 8009aa2:	a904      	add	r1, sp, #16
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f7fd fd9b 	bl	80075e0 <_printf_float>
 8009aaa:	4607      	mov	r7, r0
 8009aac:	1c78      	adds	r0, r7, #1
 8009aae:	d1d6      	bne.n	8009a5e <_vfiprintf_r+0x19e>
 8009ab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ab2:	07d9      	lsls	r1, r3, #31
 8009ab4:	d405      	bmi.n	8009ac2 <_vfiprintf_r+0x202>
 8009ab6:	89ab      	ldrh	r3, [r5, #12]
 8009ab8:	059a      	lsls	r2, r3, #22
 8009aba:	d402      	bmi.n	8009ac2 <_vfiprintf_r+0x202>
 8009abc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009abe:	f7fe fbcd 	bl	800825c <__retarget_lock_release_recursive>
 8009ac2:	89ab      	ldrh	r3, [r5, #12]
 8009ac4:	065b      	lsls	r3, r3, #25
 8009ac6:	f53f af1d 	bmi.w	8009904 <_vfiprintf_r+0x44>
 8009aca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009acc:	e71c      	b.n	8009908 <_vfiprintf_r+0x48>
 8009ace:	ab03      	add	r3, sp, #12
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	462a      	mov	r2, r5
 8009ad4:	4b05      	ldr	r3, [pc, #20]	; (8009aec <_vfiprintf_r+0x22c>)
 8009ad6:	a904      	add	r1, sp, #16
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f7fe f825 	bl	8007b28 <_printf_i>
 8009ade:	e7e4      	b.n	8009aaa <_vfiprintf_r+0x1ea>
 8009ae0:	0800e3dc 	.word	0x0800e3dc
 8009ae4:	0800e3e6 	.word	0x0800e3e6
 8009ae8:	080075e1 	.word	0x080075e1
 8009aec:	0800989b 	.word	0x0800989b
 8009af0:	0800e3e2 	.word	0x0800e3e2

08009af4 <__swhatbuf_r>:
 8009af4:	b570      	push	{r4, r5, r6, lr}
 8009af6:	460c      	mov	r4, r1
 8009af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009afc:	2900      	cmp	r1, #0
 8009afe:	b096      	sub	sp, #88	; 0x58
 8009b00:	4615      	mov	r5, r2
 8009b02:	461e      	mov	r6, r3
 8009b04:	da0d      	bge.n	8009b22 <__swhatbuf_r+0x2e>
 8009b06:	89a3      	ldrh	r3, [r4, #12]
 8009b08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b0c:	f04f 0100 	mov.w	r1, #0
 8009b10:	bf0c      	ite	eq
 8009b12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b16:	2340      	movne	r3, #64	; 0x40
 8009b18:	2000      	movs	r0, #0
 8009b1a:	6031      	str	r1, [r6, #0]
 8009b1c:	602b      	str	r3, [r5, #0]
 8009b1e:	b016      	add	sp, #88	; 0x58
 8009b20:	bd70      	pop	{r4, r5, r6, pc}
 8009b22:	466a      	mov	r2, sp
 8009b24:	f000 fef6 	bl	800a914 <_fstat_r>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	dbec      	blt.n	8009b06 <__swhatbuf_r+0x12>
 8009b2c:	9901      	ldr	r1, [sp, #4]
 8009b2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009b32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009b36:	4259      	negs	r1, r3
 8009b38:	4159      	adcs	r1, r3
 8009b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b3e:	e7eb      	b.n	8009b18 <__swhatbuf_r+0x24>

08009b40 <__smakebuf_r>:
 8009b40:	898b      	ldrh	r3, [r1, #12]
 8009b42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b44:	079d      	lsls	r5, r3, #30
 8009b46:	4606      	mov	r6, r0
 8009b48:	460c      	mov	r4, r1
 8009b4a:	d507      	bpl.n	8009b5c <__smakebuf_r+0x1c>
 8009b4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	6123      	str	r3, [r4, #16]
 8009b54:	2301      	movs	r3, #1
 8009b56:	6163      	str	r3, [r4, #20]
 8009b58:	b002      	add	sp, #8
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}
 8009b5c:	ab01      	add	r3, sp, #4
 8009b5e:	466a      	mov	r2, sp
 8009b60:	f7ff ffc8 	bl	8009af4 <__swhatbuf_r>
 8009b64:	9900      	ldr	r1, [sp, #0]
 8009b66:	4605      	mov	r5, r0
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f7ff fa77 	bl	800905c <_malloc_r>
 8009b6e:	b948      	cbnz	r0, 8009b84 <__smakebuf_r+0x44>
 8009b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b74:	059a      	lsls	r2, r3, #22
 8009b76:	d4ef      	bmi.n	8009b58 <__smakebuf_r+0x18>
 8009b78:	f023 0303 	bic.w	r3, r3, #3
 8009b7c:	f043 0302 	orr.w	r3, r3, #2
 8009b80:	81a3      	strh	r3, [r4, #12]
 8009b82:	e7e3      	b.n	8009b4c <__smakebuf_r+0xc>
 8009b84:	89a3      	ldrh	r3, [r4, #12]
 8009b86:	6020      	str	r0, [r4, #0]
 8009b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b8c:	81a3      	strh	r3, [r4, #12]
 8009b8e:	9b00      	ldr	r3, [sp, #0]
 8009b90:	6163      	str	r3, [r4, #20]
 8009b92:	9b01      	ldr	r3, [sp, #4]
 8009b94:	6120      	str	r0, [r4, #16]
 8009b96:	b15b      	cbz	r3, 8009bb0 <__smakebuf_r+0x70>
 8009b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f000 fecb 	bl	800a938 <_isatty_r>
 8009ba2:	b128      	cbz	r0, 8009bb0 <__smakebuf_r+0x70>
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	f023 0303 	bic.w	r3, r3, #3
 8009baa:	f043 0301 	orr.w	r3, r3, #1
 8009bae:	81a3      	strh	r3, [r4, #12]
 8009bb0:	89a3      	ldrh	r3, [r4, #12]
 8009bb2:	431d      	orrs	r5, r3
 8009bb4:	81a5      	strh	r5, [r4, #12]
 8009bb6:	e7cf      	b.n	8009b58 <__smakebuf_r+0x18>

08009bb8 <wcvt>:
 8009bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	b085      	sub	sp, #20
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	461d      	mov	r5, r3
 8009bc2:	4614      	mov	r4, r2
 8009bc4:	bfbc      	itt	lt
 8009bc6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009bca:	4614      	movlt	r4, r2
 8009bcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009bce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009bd0:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8009bd4:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8009bd8:	bfb6      	itet	lt
 8009bda:	461d      	movlt	r5, r3
 8009bdc:	2300      	movge	r3, #0
 8009bde:	232d      	movlt	r3, #45	; 0x2d
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009be4:	f023 0820 	bic.w	r8, r3, #32
 8009be8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bec:	d005      	beq.n	8009bfa <wcvt+0x42>
 8009bee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009bf2:	d100      	bne.n	8009bf6 <wcvt+0x3e>
 8009bf4:	3601      	adds	r6, #1
 8009bf6:	2102      	movs	r1, #2
 8009bf8:	e000      	b.n	8009bfc <wcvt+0x44>
 8009bfa:	2103      	movs	r1, #3
 8009bfc:	ab03      	add	r3, sp, #12
 8009bfe:	9301      	str	r3, [sp, #4]
 8009c00:	ab02      	add	r3, sp, #8
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	ec45 4b10 	vmov	d0, r4, r5
 8009c08:	4653      	mov	r3, sl
 8009c0a:	4632      	mov	r2, r6
 8009c0c:	f7fe fbc0 	bl	8008390 <_dtoa_r>
 8009c10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c14:	4607      	mov	r7, r0
 8009c16:	d112      	bne.n	8009c3e <wcvt+0x86>
 8009c18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c1a:	07db      	lsls	r3, r3, #31
 8009c1c:	d40f      	bmi.n	8009c3e <wcvt+0x86>
 8009c1e:	9b03      	ldr	r3, [sp, #12]
 8009c20:	1bdb      	subs	r3, r3, r7
 8009c22:	f8cb 3000 	str.w	r3, [fp]
 8009c26:	2300      	movs	r3, #0
 8009c28:	f8db 2000 	ldr.w	r2, [fp]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	dd02      	ble.n	8009c36 <wcvt+0x7e>
 8009c30:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009c32:	4293      	cmp	r3, r2
 8009c34:	db2a      	blt.n	8009c8c <wcvt+0xd4>
 8009c36:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009c38:	b005      	add	sp, #20
 8009c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c42:	eb07 0906 	add.w	r9, r7, r6
 8009c46:	d110      	bne.n	8009c6a <wcvt+0xb2>
 8009c48:	783b      	ldrb	r3, [r7, #0]
 8009c4a:	2b30      	cmp	r3, #48	; 0x30
 8009c4c:	d10a      	bne.n	8009c64 <wcvt+0xac>
 8009c4e:	2200      	movs	r2, #0
 8009c50:	2300      	movs	r3, #0
 8009c52:	4620      	mov	r0, r4
 8009c54:	4629      	mov	r1, r5
 8009c56:	f7f6 ff37 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c5a:	b918      	cbnz	r0, 8009c64 <wcvt+0xac>
 8009c5c:	f1c6 0601 	rsb	r6, r6, #1
 8009c60:	f8ca 6000 	str.w	r6, [sl]
 8009c64:	f8da 3000 	ldr.w	r3, [sl]
 8009c68:	4499      	add	r9, r3
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	4620      	mov	r0, r4
 8009c70:	4629      	mov	r1, r5
 8009c72:	f7f6 ff29 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c76:	b108      	cbz	r0, 8009c7c <wcvt+0xc4>
 8009c78:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c7c:	2230      	movs	r2, #48	; 0x30
 8009c7e:	9b03      	ldr	r3, [sp, #12]
 8009c80:	454b      	cmp	r3, r9
 8009c82:	d2cc      	bcs.n	8009c1e <wcvt+0x66>
 8009c84:	1c59      	adds	r1, r3, #1
 8009c86:	9103      	str	r1, [sp, #12]
 8009c88:	701a      	strb	r2, [r3, #0]
 8009c8a:	e7f8      	b.n	8009c7e <wcvt+0xc6>
 8009c8c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009c8e:	5cfa      	ldrb	r2, [r7, r3]
 8009c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009c94:	3301      	adds	r3, #1
 8009c96:	e7c7      	b.n	8009c28 <wcvt+0x70>

08009c98 <_svfwprintf_r>:
 8009c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	ed2d 8b04 	vpush	{d8-d9}
 8009ca0:	b0d3      	sub	sp, #332	; 0x14c
 8009ca2:	461d      	mov	r5, r3
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	4689      	mov	r9, r1
 8009ca8:	9319      	str	r3, [sp, #100]	; 0x64
 8009caa:	4683      	mov	fp, r0
 8009cac:	920b      	str	r2, [sp, #44]	; 0x2c
 8009cae:	f7fe fa5f 	bl	8008170 <_localeconv_r>
 8009cb2:	6803      	ldr	r3, [r0, #0]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	9316      	str	r3, [sp, #88]	; 0x58
 8009cb8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009cbc:	061e      	lsls	r6, r3, #24
 8009cbe:	d51a      	bpl.n	8009cf6 <_svfwprintf_r+0x5e>
 8009cc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cc4:	b9bb      	cbnz	r3, 8009cf6 <_svfwprintf_r+0x5e>
 8009cc6:	2140      	movs	r1, #64	; 0x40
 8009cc8:	4658      	mov	r0, fp
 8009cca:	f7ff f9c7 	bl	800905c <_malloc_r>
 8009cce:	f8c9 0000 	str.w	r0, [r9]
 8009cd2:	f8c9 0010 	str.w	r0, [r9, #16]
 8009cd6:	b958      	cbnz	r0, 8009cf0 <_svfwprintf_r+0x58>
 8009cd8:	230c      	movs	r3, #12
 8009cda:	f8cb 3000 	str.w	r3, [fp]
 8009cde:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ce4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009ce6:	b053      	add	sp, #332	; 0x14c
 8009ce8:	ecbd 8b04 	vpop	{d8-d9}
 8009cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf0:	2340      	movs	r3, #64	; 0x40
 8009cf2:	f8c9 3014 	str.w	r3, [r9, #20]
 8009cf6:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 8009f28 <_svfwprintf_r+0x290>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cfe:	9311      	str	r3, [sp, #68]	; 0x44
 8009d00:	930d      	str	r3, [sp, #52]	; 0x34
 8009d02:	eeb0 8a47 	vmov.f32	s16, s14
 8009d06:	eef0 8a67 	vmov.f32	s17, s15
 8009d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d0c:	461c      	mov	r4, r3
 8009d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d12:	b10a      	cbz	r2, 8009d18 <_svfwprintf_r+0x80>
 8009d14:	2a25      	cmp	r2, #37	; 0x25
 8009d16:	d1f9      	bne.n	8009d0c <_svfwprintf_r+0x74>
 8009d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d1a:	42a3      	cmp	r3, r4
 8009d1c:	d00d      	beq.n	8009d3a <_svfwprintf_r+0xa2>
 8009d1e:	1ae6      	subs	r6, r4, r3
 8009d20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d22:	4633      	mov	r3, r6
 8009d24:	4649      	mov	r1, r9
 8009d26:	4658      	mov	r0, fp
 8009d28:	f000 fef2 	bl	800ab10 <__ssputs_r>
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	f000 80e7 	beq.w	8009f00 <_svfwprintf_r+0x268>
 8009d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d34:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 8009d38:	930d      	str	r3, [sp, #52]	; 0x34
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 80df 	beq.w	8009f00 <_svfwprintf_r+0x268>
 8009d42:	2300      	movs	r3, #0
 8009d44:	1d21      	adds	r1, r4, #4
 8009d46:	9315      	str	r3, [sp, #84]	; 0x54
 8009d48:	461a      	mov	r2, r3
 8009d4a:	f04f 34ff 	mov.w	r4, #4294967295
 8009d4e:	930c      	str	r3, [sp, #48]	; 0x30
 8009d50:	461f      	mov	r7, r3
 8009d52:	200a      	movs	r0, #10
 8009d54:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d58:	9609      	str	r6, [sp, #36]	; 0x24
 8009d5a:	910b      	str	r1, [sp, #44]	; 0x2c
 8009d5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d5e:	2939      	cmp	r1, #57	; 0x39
 8009d60:	d84c      	bhi.n	8009dfc <_svfwprintf_r+0x164>
 8009d62:	291f      	cmp	r1, #31
 8009d64:	d94f      	bls.n	8009e06 <_svfwprintf_r+0x16e>
 8009d66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d68:	3920      	subs	r1, #32
 8009d6a:	2919      	cmp	r1, #25
 8009d6c:	d84a      	bhi.n	8009e04 <_svfwprintf_r+0x16c>
 8009d6e:	e8df f001 	tbb	[pc, r1]
 8009d72:	496b      	.short	0x496b
 8009d74:	49497049 	.word	0x49497049
 8009d78:	49494949 	.word	0x49494949
 8009d7c:	7a496c73 	.word	0x7a496c73
 8009d80:	9a97497d 	.word	0x9a97497d
 8009d84:	9a9a9a9a 	.word	0x9a9a9a9a
 8009d88:	9a9a9a9a 	.word	0x9a9a9a9a
 8009d8c:	2933      	cmp	r1, #51	; 0x33
 8009d8e:	d839      	bhi.n	8009e04 <_svfwprintf_r+0x16c>
 8009d90:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009d94:	003800e2 	.word	0x003800e2
 8009d98:	003800e2 	.word	0x003800e2
 8009d9c:	00380038 	.word	0x00380038
 8009da0:	009b0038 	.word	0x009b0038
 8009da4:	00380038 	.word	0x00380038
 8009da8:	00380038 	.word	0x00380038
 8009dac:	00380038 	.word	0x00380038
 8009db0:	00380038 	.word	0x00380038
 8009db4:	00380038 	.word	0x00380038
 8009db8:	031c0038 	.word	0x031c0038
 8009dbc:	00380038 	.word	0x00380038
 8009dc0:	00380038 	.word	0x00380038
 8009dc4:	00380038 	.word	0x00380038
 8009dc8:	00380038 	.word	0x00380038
 8009dcc:	00380038 	.word	0x00380038
 8009dd0:	00d000a4 	.word	0x00d000a4
 8009dd4:	00e200e2 	.word	0x00e200e2
 8009dd8:	009e00e2 	.word	0x009e00e2
 8009ddc:	003800d0 	.word	0x003800d0
 8009de0:	00a10038 	.word	0x00a10038
 8009de4:	02820038 	.word	0x02820038
 8009de8:	02b10293 	.word	0x02b10293
 8009dec:	003800a1 	.word	0x003800a1
 8009df0:	003802c0 	.word	0x003802c0
 8009df4:	00380310 	.word	0x00380310
 8009df8:	00420038 	.word	0x00420038
 8009dfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dfe:	3945      	subs	r1, #69	; 0x45
 8009e00:	2933      	cmp	r1, #51	; 0x33
 8009e02:	d9c3      	bls.n	8009d8c <_svfwprintf_r+0xf4>
 8009e04:	b113      	cbz	r3, 8009e0c <_svfwprintf_r+0x174>
 8009e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d079      	beq.n	8009f00 <_svfwprintf_r+0x268>
 8009e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0e:	932a      	str	r3, [sp, #168]	; 0xa8
 8009e10:	2300      	movs	r3, #0
 8009e12:	9315      	str	r3, [sp, #84]	; 0x54
 8009e14:	950a      	str	r5, [sp, #40]	; 0x28
 8009e16:	e080      	b.n	8009f1a <_svfwprintf_r+0x282>
 8009e18:	b103      	cbz	r3, 8009e1c <_svfwprintf_r+0x184>
 8009e1a:	9215      	str	r2, [sp, #84]	; 0x54
 8009e1c:	4b44      	ldr	r3, [pc, #272]	; (8009f30 <_svfwprintf_r+0x298>)
 8009e1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e20:	462a      	mov	r2, r5
 8009e22:	06f8      	lsls	r0, r7, #27
 8009e24:	f852 3b04 	ldr.w	r3, [r2], #4
 8009e28:	920a      	str	r2, [sp, #40]	; 0x28
 8009e2a:	d402      	bmi.n	8009e32 <_svfwprintf_r+0x19a>
 8009e2c:	0679      	lsls	r1, r7, #25
 8009e2e:	bf48      	it	mi
 8009e30:	b29b      	uxthmi	r3, r3
 8009e32:	07fa      	lsls	r2, r7, #31
 8009e34:	d506      	bpl.n	8009e44 <_svfwprintf_r+0x1ac>
 8009e36:	b12b      	cbz	r3, 8009e44 <_svfwprintf_r+0x1ac>
 8009e38:	2230      	movs	r2, #48	; 0x30
 8009e3a:	921a      	str	r2, [sp, #104]	; 0x68
 8009e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e3e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009e40:	f047 0702 	orr.w	r7, r7, #2
 8009e44:	2202      	movs	r2, #2
 8009e46:	e240      	b.n	800a2ca <_svfwprintf_r+0x632>
 8009e48:	b90a      	cbnz	r2, 8009e4e <_svfwprintf_r+0x1b6>
 8009e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e50:	e780      	b.n	8009d54 <_svfwprintf_r+0xbc>
 8009e52:	f047 0701 	orr.w	r7, r7, #1
 8009e56:	e7fa      	b.n	8009e4e <_svfwprintf_r+0x1b6>
 8009e58:	f855 1b04 	ldr.w	r1, [r5], #4
 8009e5c:	910c      	str	r1, [sp, #48]	; 0x30
 8009e5e:	2900      	cmp	r1, #0
 8009e60:	daf5      	bge.n	8009e4e <_svfwprintf_r+0x1b6>
 8009e62:	4249      	negs	r1, r1
 8009e64:	910c      	str	r1, [sp, #48]	; 0x30
 8009e66:	f047 0704 	orr.w	r7, r7, #4
 8009e6a:	e7f0      	b.n	8009e4e <_svfwprintf_r+0x1b6>
 8009e6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e6e:	f851 4b04 	ldr.w	r4, [r1], #4
 8009e72:	9409      	str	r4, [sp, #36]	; 0x24
 8009e74:	2c2a      	cmp	r4, #42	; 0x2a
 8009e76:	d111      	bne.n	8009e9c <_svfwprintf_r+0x204>
 8009e78:	f855 4b04 	ldr.w	r4, [r5], #4
 8009e7c:	910b      	str	r1, [sp, #44]	; 0x2c
 8009e7e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8009e82:	e7e4      	b.n	8009e4e <_svfwprintf_r+0x1b6>
 8009e84:	fb00 6404 	mla	r4, r0, r4, r6
 8009e88:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e8c:	9609      	str	r6, [sp, #36]	; 0x24
 8009e8e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009e90:	3e30      	subs	r6, #48	; 0x30
 8009e92:	2e09      	cmp	r6, #9
 8009e94:	d9f6      	bls.n	8009e84 <_svfwprintf_r+0x1ec>
 8009e96:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8009e9a:	e75e      	b.n	8009d5a <_svfwprintf_r+0xc2>
 8009e9c:	2400      	movs	r4, #0
 8009e9e:	e7f6      	b.n	8009e8e <_svfwprintf_r+0x1f6>
 8009ea0:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8009ea4:	e7d3      	b.n	8009e4e <_svfwprintf_r+0x1b6>
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	910c      	str	r1, [sp, #48]	; 0x30
 8009eaa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009eac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009eae:	fb00 1106 	mla	r1, r0, r6, r1
 8009eb2:	3930      	subs	r1, #48	; 0x30
 8009eb4:	910c      	str	r1, [sp, #48]	; 0x30
 8009eb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009eb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ebc:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ebe:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8009ec2:	2909      	cmp	r1, #9
 8009ec4:	9609      	str	r6, [sp, #36]	; 0x24
 8009ec6:	d9f0      	bls.n	8009eaa <_svfwprintf_r+0x212>
 8009ec8:	e748      	b.n	8009d5c <_svfwprintf_r+0xc4>
 8009eca:	f047 0708 	orr.w	r7, r7, #8
 8009ece:	e7be      	b.n	8009e4e <_svfwprintf_r+0x1b6>
 8009ed0:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8009ed4:	e7bb      	b.n	8009e4e <_svfwprintf_r+0x1b6>
 8009ed6:	f047 0710 	orr.w	r7, r7, #16
 8009eda:	e7b8      	b.n	8009e4e <_svfwprintf_r+0x1b6>
 8009edc:	b103      	cbz	r3, 8009ee0 <_svfwprintf_r+0x248>
 8009ede:	9215      	str	r2, [sp, #84]	; 0x54
 8009ee0:	462b      	mov	r3, r5
 8009ee2:	06fd      	lsls	r5, r7, #27
 8009ee4:	f853 0b04 	ldr.w	r0, [r3], #4
 8009ee8:	930a      	str	r3, [sp, #40]	; 0x28
 8009eea:	d412      	bmi.n	8009f12 <_svfwprintf_r+0x27a>
 8009eec:	f000 fdc6 	bl	800aa7c <btowc>
 8009ef0:	1c44      	adds	r4, r0, #1
 8009ef2:	d10e      	bne.n	8009f12 <_svfwprintf_r+0x27a>
 8009ef4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009efc:	f8a9 300c 	strh.w	r3, [r9, #12]
 8009f00:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009f04:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009f08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f0a:	bf18      	it	ne
 8009f0c:	f04f 33ff 	movne.w	r3, #4294967295
 8009f10:	e6e7      	b.n	8009ce2 <_svfwprintf_r+0x4a>
 8009f12:	2300      	movs	r3, #0
 8009f14:	902a      	str	r0, [sp, #168]	; 0xa8
 8009f16:	932b      	str	r3, [sp, #172]	; 0xac
 8009f18:	9315      	str	r3, [sp, #84]	; 0x54
 8009f1a:	4698      	mov	r8, r3
 8009f1c:	2401      	movs	r4, #1
 8009f1e:	461e      	mov	r6, r3
 8009f20:	461d      	mov	r5, r3
 8009f22:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8009f26:	e101      	b.n	800a12c <_svfwprintf_r+0x494>
	...
 8009f30:	0800e474 	.word	0x0800e474
 8009f34:	b103      	cbz	r3, 8009f38 <_svfwprintf_r+0x2a0>
 8009f36:	9215      	str	r2, [sp, #84]	; 0x54
 8009f38:	462a      	mov	r2, r5
 8009f3a:	06f9      	lsls	r1, r7, #27
 8009f3c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009f40:	920a      	str	r2, [sp, #40]	; 0x28
 8009f42:	d402      	bmi.n	8009f4a <_svfwprintf_r+0x2b2>
 8009f44:	067a      	lsls	r2, r7, #25
 8009f46:	bf48      	it	mi
 8009f48:	b21b      	sxthmi	r3, r3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	da02      	bge.n	8009f54 <_svfwprintf_r+0x2bc>
 8009f4e:	222d      	movs	r2, #45	; 0x2d
 8009f50:	425b      	negs	r3, r3
 8009f52:	9215      	str	r2, [sp, #84]	; 0x54
 8009f54:	2201      	movs	r2, #1
 8009f56:	e1ba      	b.n	800a2ce <_svfwprintf_r+0x636>
 8009f58:	b103      	cbz	r3, 8009f5c <_svfwprintf_r+0x2c4>
 8009f5a:	9215      	str	r2, [sp, #84]	; 0x54
 8009f5c:	3507      	adds	r5, #7
 8009f5e:	f025 0307 	bic.w	r3, r5, #7
 8009f62:	ecb3 7b02 	vldmia	r3!, {d7}
 8009f66:	930a      	str	r3, [sp, #40]	; 0x28
 8009f68:	eeb0 8a47 	vmov.f32	s16, s14
 8009f6c:	eef0 8a67 	vmov.f32	s17, s15
 8009f70:	ee18 3a90 	vmov	r3, s17
 8009f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f78:	ee09 3a90 	vmov	s19, r3
 8009f7c:	eeb0 9a47 	vmov.f32	s18, s14
 8009f80:	4ba6      	ldr	r3, [pc, #664]	; (800a21c <_svfwprintf_r+0x584>)
 8009f82:	ec51 0b19 	vmov	r0, r1, d9
 8009f86:	f04f 32ff 	mov.w	r2, #4294967295
 8009f8a:	f7f6 fdcf 	bl	8000b2c <__aeabi_dcmpun>
 8009f8e:	b9f0      	cbnz	r0, 8009fce <_svfwprintf_r+0x336>
 8009f90:	4ba2      	ldr	r3, [pc, #648]	; (800a21c <_svfwprintf_r+0x584>)
 8009f92:	ec51 0b19 	vmov	r0, r1, d9
 8009f96:	f04f 32ff 	mov.w	r2, #4294967295
 8009f9a:	f7f6 fda9 	bl	8000af0 <__aeabi_dcmple>
 8009f9e:	b9b0      	cbnz	r0, 8009fce <_svfwprintf_r+0x336>
 8009fa0:	ec51 0b18 	vmov	r0, r1, d8
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f7f6 fd98 	bl	8000adc <__aeabi_dcmplt>
 8009fac:	b108      	cbz	r0, 8009fb2 <_svfwprintf_r+0x31a>
 8009fae:	232d      	movs	r3, #45	; 0x2d
 8009fb0:	9315      	str	r3, [sp, #84]	; 0x54
 8009fb2:	4a9b      	ldr	r2, [pc, #620]	; (800a220 <_svfwprintf_r+0x588>)
 8009fb4:	4b9b      	ldr	r3, [pc, #620]	; (800a224 <_svfwprintf_r+0x58c>)
 8009fb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fb8:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8009fbc:	2947      	cmp	r1, #71	; 0x47
 8009fbe:	bf94      	ite	ls
 8009fc0:	4692      	movls	sl, r2
 8009fc2:	469a      	movhi	sl, r3
 8009fc4:	f04f 0800 	mov.w	r8, #0
 8009fc8:	2403      	movs	r4, #3
 8009fca:	4646      	mov	r6, r8
 8009fcc:	e3d4      	b.n	800a778 <_svfwprintf_r+0xae0>
 8009fce:	ec53 2b18 	vmov	r2, r3, d8
 8009fd2:	ec51 0b18 	vmov	r0, r1, d8
 8009fd6:	f7f6 fda9 	bl	8000b2c <__aeabi_dcmpun>
 8009fda:	b140      	cbz	r0, 8009fee <_svfwprintf_r+0x356>
 8009fdc:	ee18 3a90 	vmov	r3, s17
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	bfbc      	itt	lt
 8009fe4:	232d      	movlt	r3, #45	; 0x2d
 8009fe6:	9315      	strlt	r3, [sp, #84]	; 0x54
 8009fe8:	4a8f      	ldr	r2, [pc, #572]	; (800a228 <_svfwprintf_r+0x590>)
 8009fea:	4b90      	ldr	r3, [pc, #576]	; (800a22c <_svfwprintf_r+0x594>)
 8009fec:	e7e3      	b.n	8009fb6 <_svfwprintf_r+0x31e>
 8009fee:	1c63      	adds	r3, r4, #1
 8009ff0:	f000 810e 	beq.w	800a210 <_svfwprintf_r+0x578>
 8009ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff6:	f023 0320 	bic.w	r3, r3, #32
 8009ffa:	2b47      	cmp	r3, #71	; 0x47
 8009ffc:	d102      	bne.n	800a004 <_svfwprintf_r+0x36c>
 8009ffe:	2c00      	cmp	r4, #0
 800a000:	bf08      	it	eq
 800a002:	2401      	moveq	r4, #1
 800a004:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 800a008:	930e      	str	r3, [sp, #56]	; 0x38
 800a00a:	2328      	movs	r3, #40	; 0x28
 800a00c:	9307      	str	r3, [sp, #28]
 800a00e:	ab19      	add	r3, sp, #100	; 0x64
 800a010:	9305      	str	r3, [sp, #20]
 800a012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a014:	9304      	str	r3, [sp, #16]
 800a016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a018:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800a01c:	ae18      	add	r6, sp, #96	; 0x60
 800a01e:	ad17      	add	r5, sp, #92	; 0x5c
 800a020:	e9cd 4300 	strd	r4, r3, [sp]
 800a024:	f8cd 8018 	str.w	r8, [sp, #24]
 800a028:	ec53 2b18 	vmov	r2, r3, d8
 800a02c:	9603      	str	r6, [sp, #12]
 800a02e:	9502      	str	r5, [sp, #8]
 800a030:	4658      	mov	r0, fp
 800a032:	f7ff fdc1 	bl	8009bb8 <wcvt>
 800a036:	4540      	cmp	r0, r8
 800a038:	4682      	mov	sl, r0
 800a03a:	f040 80eb 	bne.w	800a214 <_svfwprintf_r+0x57c>
 800a03e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a040:	2928      	cmp	r1, #40	; 0x28
 800a042:	f340 80e7 	ble.w	800a214 <_svfwprintf_r+0x57c>
 800a046:	0089      	lsls	r1, r1, #2
 800a048:	4658      	mov	r0, fp
 800a04a:	f7ff f807 	bl	800905c <_malloc_r>
 800a04e:	4680      	mov	r8, r0
 800a050:	2800      	cmp	r0, #0
 800a052:	f43f af4f 	beq.w	8009ef4 <_svfwprintf_r+0x25c>
 800a056:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a058:	9502      	str	r5, [sp, #8]
 800a05a:	e9cd 0306 	strd	r0, r3, [sp, #24]
 800a05e:	ab19      	add	r3, sp, #100	; 0x64
 800a060:	9305      	str	r3, [sp, #20]
 800a062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a064:	e9cd 6303 	strd	r6, r3, [sp, #12]
 800a068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a06a:	4658      	mov	r0, fp
 800a06c:	e9cd 4300 	strd	r4, r3, [sp]
 800a070:	ec53 2b18 	vmov	r2, r3, d8
 800a074:	f7ff fda0 	bl	8009bb8 <wcvt>
 800a078:	4682      	mov	sl, r0
 800a07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a07c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800a07e:	f023 0320 	bic.w	r3, r3, #32
 800a082:	2b47      	cmp	r3, #71	; 0x47
 800a084:	f040 80d6 	bne.w	800a234 <_svfwprintf_r+0x59c>
 800a088:	1cee      	adds	r6, r5, #3
 800a08a:	db02      	blt.n	800a092 <_svfwprintf_r+0x3fa>
 800a08c:	42ac      	cmp	r4, r5
 800a08e:	f280 80e9 	bge.w	800a264 <_svfwprintf_r+0x5cc>
 800a092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a094:	3b02      	subs	r3, #2
 800a096:	9309      	str	r3, [sp, #36]	; 0x24
 800a098:	1e6b      	subs	r3, r5, #1
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a09e:	9318      	str	r3, [sp, #96]	; 0x60
 800a0a0:	bfb8      	it	lt
 800a0a2:	f1c5 0301 	rsblt	r3, r5, #1
 800a0a6:	921c      	str	r2, [sp, #112]	; 0x70
 800a0a8:	bfb4      	ite	lt
 800a0aa:	222d      	movlt	r2, #45	; 0x2d
 800a0ac:	222b      	movge	r2, #43	; 0x2b
 800a0ae:	2b09      	cmp	r3, #9
 800a0b0:	921d      	str	r2, [sp, #116]	; 0x74
 800a0b2:	f340 80d1 	ble.w	800a258 <_svfwprintf_r+0x5c0>
 800a0b6:	a92a      	add	r1, sp, #168	; 0xa8
 800a0b8:	250a      	movs	r5, #10
 800a0ba:	460a      	mov	r2, r1
 800a0bc:	fb93 f4f5 	sdiv	r4, r3, r5
 800a0c0:	fb05 3014 	mls	r0, r5, r4, r3
 800a0c4:	3030      	adds	r0, #48	; 0x30
 800a0c6:	f842 0c04 	str.w	r0, [r2, #-4]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	2863      	cmp	r0, #99	; 0x63
 800a0ce:	f1a1 0104 	sub.w	r1, r1, #4
 800a0d2:	4623      	mov	r3, r4
 800a0d4:	dcf1      	bgt.n	800a0ba <_svfwprintf_r+0x422>
 800a0d6:	3330      	adds	r3, #48	; 0x30
 800a0d8:	f841 3c04 	str.w	r3, [r1, #-4]
 800a0dc:	f1a2 0008 	sub.w	r0, r2, #8
 800a0e0:	ab1d      	add	r3, sp, #116	; 0x74
 800a0e2:	a92a      	add	r1, sp, #168	; 0xa8
 800a0e4:	4288      	cmp	r0, r1
 800a0e6:	f0c0 80b2 	bcc.w	800a24e <_svfwprintf_r+0x5b6>
 800a0ea:	f10d 03b3 	add.w	r3, sp, #179	; 0xb3
 800a0ee:	1a9b      	subs	r3, r3, r2
 800a0f0:	f023 0303 	bic.w	r3, r3, #3
 800a0f4:	3a0b      	subs	r2, #11
 800a0f6:	428a      	cmp	r2, r1
 800a0f8:	bf88      	it	hi
 800a0fa:	2300      	movhi	r3, #0
 800a0fc:	aa1e      	add	r2, sp, #120	; 0x78
 800a0fe:	18d4      	adds	r4, r2, r3
 800a100:	ab1c      	add	r3, sp, #112	; 0x70
 800a102:	1ae4      	subs	r4, r4, r3
 800a104:	10a3      	asrs	r3, r4, #2
 800a106:	9311      	str	r3, [sp, #68]	; 0x44
 800a108:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 800a110:	dc02      	bgt.n	800a118 <_svfwprintf_r+0x480>
 800a112:	f017 0501 	ands.w	r5, r7, #1
 800a116:	d001      	beq.n	800a11c <_svfwprintf_r+0x484>
 800a118:	3401      	adds	r4, #1
 800a11a:	2500      	movs	r5, #0
 800a11c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a11e:	2e00      	cmp	r6, #0
 800a120:	f000 8180 	beq.w	800a424 <_svfwprintf_r+0x78c>
 800a124:	232d      	movs	r3, #45	; 0x2d
 800a126:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a128:	9315      	str	r3, [sp, #84]	; 0x54
 800a12a:	2600      	movs	r6, #0
 800a12c:	42a6      	cmp	r6, r4
 800a12e:	4633      	mov	r3, r6
 800a130:	bfb8      	it	lt
 800a132:	4623      	movlt	r3, r4
 800a134:	930e      	str	r3, [sp, #56]	; 0x38
 800a136:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a138:	b113      	cbz	r3, 800a140 <_svfwprintf_r+0x4a8>
 800a13a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a13c:	3301      	adds	r3, #1
 800a13e:	930e      	str	r3, [sp, #56]	; 0x38
 800a140:	f017 0302 	ands.w	r3, r7, #2
 800a144:	9312      	str	r3, [sp, #72]	; 0x48
 800a146:	bf1e      	ittt	ne
 800a148:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 800a14a:	3302      	addne	r3, #2
 800a14c:	930e      	strne	r3, [sp, #56]	; 0x38
 800a14e:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 800a152:	9313      	str	r3, [sp, #76]	; 0x4c
 800a154:	f000 8168 	beq.w	800a428 <_svfwprintf_r+0x790>
 800a158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a15a:	b143      	cbz	r3, 800a16e <_svfwprintf_r+0x4d6>
 800a15c:	2304      	movs	r3, #4
 800a15e:	aa15      	add	r2, sp, #84	; 0x54
 800a160:	4649      	mov	r1, r9
 800a162:	4658      	mov	r0, fp
 800a164:	f000 fcd4 	bl	800ab10 <__ssputs_r>
 800a168:	3001      	adds	r0, #1
 800a16a:	f000 8170 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a16e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a170:	b143      	cbz	r3, 800a184 <_svfwprintf_r+0x4ec>
 800a172:	2308      	movs	r3, #8
 800a174:	aa1a      	add	r2, sp, #104	; 0x68
 800a176:	4649      	mov	r1, r9
 800a178:	4658      	mov	r0, fp
 800a17a:	f000 fcc9 	bl	800ab10 <__ssputs_r>
 800a17e:	3001      	adds	r0, #1
 800a180:	f000 8165 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a184:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a186:	2b80      	cmp	r3, #128	; 0x80
 800a188:	d113      	bne.n	800a1b2 <_svfwprintf_r+0x51a>
 800a18a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a18c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a18e:	1a9b      	subs	r3, r3, r2
 800a190:	2b00      	cmp	r3, #0
 800a192:	9310      	str	r3, [sp, #64]	; 0x40
 800a194:	dd0d      	ble.n	800a1b2 <_svfwprintf_r+0x51a>
 800a196:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a198:	4a25      	ldr	r2, [pc, #148]	; (800a230 <_svfwprintf_r+0x598>)
 800a19a:	2b10      	cmp	r3, #16
 800a19c:	f300 816c 	bgt.w	800a478 <_svfwprintf_r+0x7e0>
 800a1a0:	4a23      	ldr	r2, [pc, #140]	; (800a230 <_svfwprintf_r+0x598>)
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	4658      	mov	r0, fp
 800a1a8:	f000 fcb2 	bl	800ab10 <__ssputs_r>
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	f000 814e 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a1b2:	1b36      	subs	r6, r6, r4
 800a1b4:	2e00      	cmp	r6, #0
 800a1b6:	dd0c      	ble.n	800a1d2 <_svfwprintf_r+0x53a>
 800a1b8:	2e10      	cmp	r6, #16
 800a1ba:	4a1d      	ldr	r2, [pc, #116]	; (800a230 <_svfwprintf_r+0x598>)
 800a1bc:	f300 8167 	bgt.w	800a48e <_svfwprintf_r+0x7f6>
 800a1c0:	4a1b      	ldr	r2, [pc, #108]	; (800a230 <_svfwprintf_r+0x598>)
 800a1c2:	00b3      	lsls	r3, r6, #2
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	4658      	mov	r0, fp
 800a1c8:	f000 fca2 	bl	800ab10 <__ssputs_r>
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	f000 813e 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a1d2:	05f9      	lsls	r1, r7, #23
 800a1d4:	f100 8164 	bmi.w	800a4a0 <_svfwprintf_r+0x808>
 800a1d8:	00a3      	lsls	r3, r4, #2
 800a1da:	4652      	mov	r2, sl
 800a1dc:	4649      	mov	r1, r9
 800a1de:	4658      	mov	r0, fp
 800a1e0:	f000 fc96 	bl	800ab10 <__ssputs_r>
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	f000 8132 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a1ea:	077a      	lsls	r2, r7, #29
 800a1ec:	f100 8282 	bmi.w	800a6f4 <_svfwprintf_r+0xa5c>
 800a1f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a1f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a1f6:	428a      	cmp	r2, r1
 800a1f8:	bfac      	ite	ge
 800a1fa:	189b      	addge	r3, r3, r2
 800a1fc:	185b      	addlt	r3, r3, r1
 800a1fe:	930d      	str	r3, [sp, #52]	; 0x34
 800a200:	f1b8 0f00 	cmp.w	r8, #0
 800a204:	d057      	beq.n	800a2b6 <_svfwprintf_r+0x61e>
 800a206:	4641      	mov	r1, r8
 800a208:	4658      	mov	r0, fp
 800a20a:	f7fe feb3 	bl	8008f74 <_free_r>
 800a20e:	e052      	b.n	800a2b6 <_svfwprintf_r+0x61e>
 800a210:	2406      	movs	r4, #6
 800a212:	e6f7      	b.n	800a004 <_svfwprintf_r+0x36c>
 800a214:	f04f 0800 	mov.w	r8, #0
 800a218:	e72f      	b.n	800a07a <_svfwprintf_r+0x3e2>
 800a21a:	bf00      	nop
 800a21c:	7fefffff 	.word	0x7fefffff
 800a220:	0800e3f0 	.word	0x0800e3f0
 800a224:	0800e400 	.word	0x0800e400
 800a228:	0800e410 	.word	0x0800e410
 800a22c:	0800e420 	.word	0x0800e420
 800a230:	0800e500 	.word	0x0800e500
 800a234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a236:	2b66      	cmp	r3, #102	; 0x66
 800a238:	f47f af2e 	bne.w	800a098 <_svfwprintf_r+0x400>
 800a23c:	f007 0301 	and.w	r3, r7, #1
 800a240:	2d00      	cmp	r5, #0
 800a242:	ea43 0304 	orr.w	r3, r3, r4
 800a246:	dc17      	bgt.n	800a278 <_svfwprintf_r+0x5e0>
 800a248:	b313      	cbz	r3, 800a290 <_svfwprintf_r+0x5f8>
 800a24a:	3402      	adds	r4, #2
 800a24c:	e766      	b.n	800a11c <_svfwprintf_r+0x484>
 800a24e:	f850 4b04 	ldr.w	r4, [r0], #4
 800a252:	f843 4f04 	str.w	r4, [r3, #4]!
 800a256:	e745      	b.n	800a0e4 <_svfwprintf_r+0x44c>
 800a258:	2230      	movs	r2, #48	; 0x30
 800a25a:	4413      	add	r3, r2
 800a25c:	921e      	str	r2, [sp, #120]	; 0x78
 800a25e:	931f      	str	r3, [sp, #124]	; 0x7c
 800a260:	ac20      	add	r4, sp, #128	; 0x80
 800a262:	e74d      	b.n	800a100 <_svfwprintf_r+0x468>
 800a264:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a266:	42ab      	cmp	r3, r5
 800a268:	dd0a      	ble.n	800a280 <_svfwprintf_r+0x5e8>
 800a26a:	2d00      	cmp	r5, #0
 800a26c:	bfd4      	ite	le
 800a26e:	f1c5 0402 	rsble	r4, r5, #2
 800a272:	2401      	movgt	r4, #1
 800a274:	441c      	add	r4, r3
 800a276:	e006      	b.n	800a286 <_svfwprintf_r+0x5ee>
 800a278:	b143      	cbz	r3, 800a28c <_svfwprintf_r+0x5f4>
 800a27a:	3401      	adds	r4, #1
 800a27c:	442c      	add	r4, r5
 800a27e:	e74d      	b.n	800a11c <_svfwprintf_r+0x484>
 800a280:	07fc      	lsls	r4, r7, #31
 800a282:	d507      	bpl.n	800a294 <_svfwprintf_r+0x5fc>
 800a284:	1c6c      	adds	r4, r5, #1
 800a286:	2367      	movs	r3, #103	; 0x67
 800a288:	9309      	str	r3, [sp, #36]	; 0x24
 800a28a:	e747      	b.n	800a11c <_svfwprintf_r+0x484>
 800a28c:	462c      	mov	r4, r5
 800a28e:	e745      	b.n	800a11c <_svfwprintf_r+0x484>
 800a290:	2401      	movs	r4, #1
 800a292:	e743      	b.n	800a11c <_svfwprintf_r+0x484>
 800a294:	462c      	mov	r4, r5
 800a296:	e7f6      	b.n	800a286 <_svfwprintf_r+0x5ee>
 800a298:	b103      	cbz	r3, 800a29c <_svfwprintf_r+0x604>
 800a29a:	9215      	str	r2, [sp, #84]	; 0x54
 800a29c:	1d2b      	adds	r3, r5, #4
 800a29e:	06f8      	lsls	r0, r7, #27
 800a2a0:	930a      	str	r3, [sp, #40]	; 0x28
 800a2a2:	d503      	bpl.n	800a2ac <_svfwprintf_r+0x614>
 800a2a4:	682b      	ldr	r3, [r5, #0]
 800a2a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2a8:	601a      	str	r2, [r3, #0]
 800a2aa:	e004      	b.n	800a2b6 <_svfwprintf_r+0x61e>
 800a2ac:	0679      	lsls	r1, r7, #25
 800a2ae:	d5f9      	bpl.n	800a2a4 <_svfwprintf_r+0x60c>
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2b4:	801a      	strh	r2, [r3, #0]
 800a2b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a2b8:	e527      	b.n	8009d0a <_svfwprintf_r+0x72>
 800a2ba:	462a      	mov	r2, r5
 800a2bc:	f017 0110 	ands.w	r1, r7, #16
 800a2c0:	f852 3b04 	ldr.w	r3, [r2], #4
 800a2c4:	920a      	str	r2, [sp, #40]	; 0x28
 800a2c6:	d011      	beq.n	800a2ec <_svfwprintf_r+0x654>
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	9115      	str	r1, [sp, #84]	; 0x54
 800a2ce:	1c66      	adds	r6, r4, #1
 800a2d0:	f000 822d 	beq.w	800a72e <_svfwprintf_r+0xa96>
 800a2d4:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f040 822c 	bne.w	800a736 <_svfwprintf_r+0xa9e>
 800a2de:	2c00      	cmp	r4, #0
 800a2e0:	f000 8098 	beq.w	800a414 <_svfwprintf_r+0x77c>
 800a2e4:	2a01      	cmp	r2, #1
 800a2e6:	f040 8229 	bne.w	800a73c <_svfwprintf_r+0xaa4>
 800a2ea:	e075      	b.n	800a3d8 <_svfwprintf_r+0x740>
 800a2ec:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 800a2f0:	d0eb      	beq.n	800a2ca <_svfwprintf_r+0x632>
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	e7e8      	b.n	800a2c8 <_svfwprintf_r+0x630>
 800a2f6:	462a      	mov	r2, r5
 800a2f8:	2178      	movs	r1, #120	; 0x78
 800a2fa:	f852 3b04 	ldr.w	r3, [r2], #4
 800a2fe:	920a      	str	r2, [sp, #40]	; 0x28
 800a300:	2230      	movs	r2, #48	; 0x30
 800a302:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 800a306:	4a9e      	ldr	r2, [pc, #632]	; (800a580 <_svfwprintf_r+0x8e8>)
 800a308:	920f      	str	r2, [sp, #60]	; 0x3c
 800a30a:	f047 0702 	orr.w	r7, r7, #2
 800a30e:	2202      	movs	r2, #2
 800a310:	9109      	str	r1, [sp, #36]	; 0x24
 800a312:	e7da      	b.n	800a2ca <_svfwprintf_r+0x632>
 800a314:	462b      	mov	r3, r5
 800a316:	2600      	movs	r6, #0
 800a318:	f853 ab04 	ldr.w	sl, [r3], #4
 800a31c:	930a      	str	r3, [sp, #40]	; 0x28
 800a31e:	f017 0510 	ands.w	r5, r7, #16
 800a322:	9615      	str	r6, [sp, #84]	; 0x54
 800a324:	d12d      	bne.n	800a382 <_svfwprintf_r+0x6ea>
 800a326:	1c62      	adds	r2, r4, #1
 800a328:	d014      	beq.n	800a354 <_svfwprintf_r+0x6bc>
 800a32a:	4622      	mov	r2, r4
 800a32c:	4629      	mov	r1, r5
 800a32e:	4650      	mov	r0, sl
 800a330:	4626      	mov	r6, r4
 800a332:	f7f5 ff4d 	bl	80001d0 <memchr>
 800a336:	b108      	cbz	r0, 800a33c <_svfwprintf_r+0x6a4>
 800a338:	eba0 060a 	sub.w	r6, r0, sl
 800a33c:	2e27      	cmp	r6, #39	; 0x27
 800a33e:	d90e      	bls.n	800a35e <_svfwprintf_r+0x6c6>
 800a340:	1c71      	adds	r1, r6, #1
 800a342:	0089      	lsls	r1, r1, #2
 800a344:	4658      	mov	r0, fp
 800a346:	f7fe fe89 	bl	800905c <_malloc_r>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	f43f add2 	beq.w	8009ef4 <_svfwprintf_r+0x25c>
 800a350:	4680      	mov	r8, r0
 800a352:	e007      	b.n	800a364 <_svfwprintf_r+0x6cc>
 800a354:	4650      	mov	r0, sl
 800a356:	f7f5 ff8b 	bl	8000270 <strlen>
 800a35a:	4606      	mov	r6, r0
 800a35c:	e7ee      	b.n	800a33c <_svfwprintf_r+0x6a4>
 800a35e:	f04f 0800 	mov.w	r8, #0
 800a362:	a82a      	add	r0, sp, #168	; 0xa8
 800a364:	4634      	mov	r4, r6
 800a366:	2300      	movs	r3, #0
 800a368:	42b3      	cmp	r3, r6
 800a36a:	d104      	bne.n	800a376 <_svfwprintf_r+0x6de>
 800a36c:	2600      	movs	r6, #0
 800a36e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800a372:	4682      	mov	sl, r0
 800a374:	e6da      	b.n	800a12c <_svfwprintf_r+0x494>
 800a376:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800a37a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800a37e:	3301      	adds	r3, #1
 800a380:	e7f2      	b.n	800a368 <_svfwprintf_r+0x6d0>
 800a382:	1c63      	adds	r3, r4, #1
 800a384:	d011      	beq.n	800a3aa <_svfwprintf_r+0x712>
 800a386:	4622      	mov	r2, r4
 800a388:	4631      	mov	r1, r6
 800a38a:	4650      	mov	r0, sl
 800a38c:	f000 fab3 	bl	800a8f6 <wmemchr>
 800a390:	4680      	mov	r8, r0
 800a392:	2800      	cmp	r0, #0
 800a394:	f43f ae19 	beq.w	8009fca <_svfwprintf_r+0x332>
 800a398:	eba0 080a 	sub.w	r8, r0, sl
 800a39c:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800a3a0:	4544      	cmp	r4, r8
 800a3a2:	bfa8      	it	ge
 800a3a4:	4644      	movge	r4, r8
 800a3a6:	46b0      	mov	r8, r6
 800a3a8:	e60f      	b.n	8009fca <_svfwprintf_r+0x332>
 800a3aa:	4650      	mov	r0, sl
 800a3ac:	f000 fa9a 	bl	800a8e4 <wcslen>
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	e7f8      	b.n	800a3a6 <_svfwprintf_r+0x70e>
 800a3b4:	462a      	mov	r2, r5
 800a3b6:	06fe      	lsls	r6, r7, #27
 800a3b8:	f852 3b04 	ldr.w	r3, [r2], #4
 800a3bc:	920a      	str	r2, [sp, #40]	; 0x28
 800a3be:	d501      	bpl.n	800a3c4 <_svfwprintf_r+0x72c>
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	e782      	b.n	800a2ca <_svfwprintf_r+0x632>
 800a3c4:	067d      	lsls	r5, r7, #25
 800a3c6:	bf48      	it	mi
 800a3c8:	b29b      	uxthmi	r3, r3
 800a3ca:	e7f9      	b.n	800a3c0 <_svfwprintf_r+0x728>
 800a3cc:	b103      	cbz	r3, 800a3d0 <_svfwprintf_r+0x738>
 800a3ce:	9215      	str	r2, [sp, #84]	; 0x54
 800a3d0:	4b6c      	ldr	r3, [pc, #432]	; (800a584 <_svfwprintf_r+0x8ec>)
 800a3d2:	e524      	b.n	8009e1e <_svfwprintf_r+0x186>
 800a3d4:	2b09      	cmp	r3, #9
 800a3d6:	d804      	bhi.n	800a3e2 <_svfwprintf_r+0x74a>
 800a3d8:	3330      	adds	r3, #48	; 0x30
 800a3da:	9351      	str	r3, [sp, #324]	; 0x144
 800a3dc:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 800a3e0:	e1c2      	b.n	800a768 <_svfwprintf_r+0xad0>
 800a3e2:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800a3e6:	250a      	movs	r5, #10
 800a3e8:	fbb3 f0f5 	udiv	r0, r3, r5
 800a3ec:	fb05 3210 	mls	r2, r5, r0, r3
 800a3f0:	3230      	adds	r2, #48	; 0x30
 800a3f2:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	2a09      	cmp	r2, #9
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	d8f4      	bhi.n	800a3e8 <_svfwprintf_r+0x750>
 800a3fe:	e1b3      	b.n	800a768 <_svfwprintf_r+0xad0>
 800a400:	f003 020f 	and.w	r2, r3, #15
 800a404:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a406:	091b      	lsrs	r3, r3, #4
 800a408:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a40c:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800a410:	d1f6      	bne.n	800a400 <_svfwprintf_r+0x768>
 800a412:	e1a9      	b.n	800a768 <_svfwprintf_r+0xad0>
 800a414:	b91a      	cbnz	r2, 800a41e <_svfwprintf_r+0x786>
 800a416:	07f8      	lsls	r0, r7, #31
 800a418:	d501      	bpl.n	800a41e <_svfwprintf_r+0x786>
 800a41a:	2330      	movs	r3, #48	; 0x30
 800a41c:	e7dd      	b.n	800a3da <_svfwprintf_r+0x742>
 800a41e:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800a422:	e1a1      	b.n	800a768 <_svfwprintf_r+0xad0>
 800a424:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a426:	e681      	b.n	800a12c <_svfwprintf_r+0x494>
 800a428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a42a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a42c:	1a9b      	subs	r3, r3, r2
 800a42e:	2b00      	cmp	r3, #0
 800a430:	9310      	str	r3, [sp, #64]	; 0x40
 800a432:	f77f ae91 	ble.w	800a158 <_svfwprintf_r+0x4c0>
 800a436:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a438:	2b10      	cmp	r3, #16
 800a43a:	dc11      	bgt.n	800a460 <_svfwprintf_r+0x7c8>
 800a43c:	4a52      	ldr	r2, [pc, #328]	; (800a588 <_svfwprintf_r+0x8f0>)
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4649      	mov	r1, r9
 800a442:	4658      	mov	r0, fp
 800a444:	f000 fb64 	bl	800ab10 <__ssputs_r>
 800a448:	3001      	adds	r0, #1
 800a44a:	f47f ae85 	bne.w	800a158 <_svfwprintf_r+0x4c0>
 800a44e:	f1b8 0f00 	cmp.w	r8, #0
 800a452:	f43f ad55 	beq.w	8009f00 <_svfwprintf_r+0x268>
 800a456:	4641      	mov	r1, r8
 800a458:	4658      	mov	r0, fp
 800a45a:	f7fe fd8b 	bl	8008f74 <_free_r>
 800a45e:	e54f      	b.n	8009f00 <_svfwprintf_r+0x268>
 800a460:	4a49      	ldr	r2, [pc, #292]	; (800a588 <_svfwprintf_r+0x8f0>)
 800a462:	2340      	movs	r3, #64	; 0x40
 800a464:	4649      	mov	r1, r9
 800a466:	4658      	mov	r0, fp
 800a468:	f000 fb52 	bl	800ab10 <__ssputs_r>
 800a46c:	3001      	adds	r0, #1
 800a46e:	d0ee      	beq.n	800a44e <_svfwprintf_r+0x7b6>
 800a470:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a472:	3b10      	subs	r3, #16
 800a474:	9310      	str	r3, [sp, #64]	; 0x40
 800a476:	e7de      	b.n	800a436 <_svfwprintf_r+0x79e>
 800a478:	2340      	movs	r3, #64	; 0x40
 800a47a:	4649      	mov	r1, r9
 800a47c:	4658      	mov	r0, fp
 800a47e:	f000 fb47 	bl	800ab10 <__ssputs_r>
 800a482:	3001      	adds	r0, #1
 800a484:	d0e3      	beq.n	800a44e <_svfwprintf_r+0x7b6>
 800a486:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a488:	3b10      	subs	r3, #16
 800a48a:	9310      	str	r3, [sp, #64]	; 0x40
 800a48c:	e683      	b.n	800a196 <_svfwprintf_r+0x4fe>
 800a48e:	2340      	movs	r3, #64	; 0x40
 800a490:	4649      	mov	r1, r9
 800a492:	4658      	mov	r0, fp
 800a494:	f000 fb3c 	bl	800ab10 <__ssputs_r>
 800a498:	3001      	adds	r0, #1
 800a49a:	d0d8      	beq.n	800a44e <_svfwprintf_r+0x7b6>
 800a49c:	3e10      	subs	r6, #16
 800a49e:	e68b      	b.n	800a1b8 <_svfwprintf_r+0x520>
 800a4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a2:	2b65      	cmp	r3, #101	; 0x65
 800a4a4:	f240 80e4 	bls.w	800a670 <_svfwprintf_r+0x9d8>
 800a4a8:	ec51 0b18 	vmov	r0, r1, d8
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	f7f6 fb0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4b4:	b358      	cbz	r0, 800a50e <_svfwprintf_r+0x876>
 800a4b6:	4a35      	ldr	r2, [pc, #212]	; (800a58c <_svfwprintf_r+0x8f4>)
 800a4b8:	2304      	movs	r3, #4
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	4658      	mov	r0, fp
 800a4be:	f000 fb27 	bl	800ab10 <__ssputs_r>
 800a4c2:	3001      	adds	r0, #1
 800a4c4:	d0c3      	beq.n	800a44e <_svfwprintf_r+0x7b6>
 800a4c6:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	db02      	blt.n	800a4d4 <_svfwprintf_r+0x83c>
 800a4ce:	07fb      	lsls	r3, r7, #31
 800a4d0:	f57f ae8b 	bpl.w	800a1ea <_svfwprintf_r+0x552>
 800a4d4:	2304      	movs	r3, #4
 800a4d6:	aa16      	add	r2, sp, #88	; 0x58
 800a4d8:	4649      	mov	r1, r9
 800a4da:	4658      	mov	r0, fp
 800a4dc:	f000 fb18 	bl	800ab10 <__ssputs_r>
 800a4e0:	3001      	adds	r0, #1
 800a4e2:	d0b4      	beq.n	800a44e <_svfwprintf_r+0x7b6>
 800a4e4:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800a4e6:	3c01      	subs	r4, #1
 800a4e8:	2c00      	cmp	r4, #0
 800a4ea:	f77f ae7e 	ble.w	800a1ea <_svfwprintf_r+0x552>
 800a4ee:	4d28      	ldr	r5, [pc, #160]	; (800a590 <_svfwprintf_r+0x8f8>)
 800a4f0:	2c10      	cmp	r4, #16
 800a4f2:	dc02      	bgt.n	800a4fa <_svfwprintf_r+0x862>
 800a4f4:	00a3      	lsls	r3, r4, #2
 800a4f6:	4a26      	ldr	r2, [pc, #152]	; (800a590 <_svfwprintf_r+0x8f8>)
 800a4f8:	e670      	b.n	800a1dc <_svfwprintf_r+0x544>
 800a4fa:	2340      	movs	r3, #64	; 0x40
 800a4fc:	462a      	mov	r2, r5
 800a4fe:	4649      	mov	r1, r9
 800a500:	4658      	mov	r0, fp
 800a502:	f000 fb05 	bl	800ab10 <__ssputs_r>
 800a506:	3001      	adds	r0, #1
 800a508:	d0a1      	beq.n	800a44e <_svfwprintf_r+0x7b6>
 800a50a:	3c10      	subs	r4, #16
 800a50c:	e7f0      	b.n	800a4f0 <_svfwprintf_r+0x858>
 800a50e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a510:	2b00      	cmp	r3, #0
 800a512:	dc3f      	bgt.n	800a594 <_svfwprintf_r+0x8fc>
 800a514:	4a1d      	ldr	r2, [pc, #116]	; (800a58c <_svfwprintf_r+0x8f4>)
 800a516:	2304      	movs	r3, #4
 800a518:	4649      	mov	r1, r9
 800a51a:	4658      	mov	r0, fp
 800a51c:	f000 faf8 	bl	800ab10 <__ssputs_r>
 800a520:	3001      	adds	r0, #1
 800a522:	d094      	beq.n	800a44e <_svfwprintf_r+0x7b6>
 800a524:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 800a528:	4313      	orrs	r3, r2
 800a52a:	f007 0201 	and.w	r2, r7, #1
 800a52e:	4313      	orrs	r3, r2
 800a530:	f43f ae5b 	beq.w	800a1ea <_svfwprintf_r+0x552>
 800a534:	2304      	movs	r3, #4
 800a536:	aa16      	add	r2, sp, #88	; 0x58
 800a538:	4649      	mov	r1, r9
 800a53a:	4658      	mov	r0, fp
 800a53c:	f000 fae8 	bl	800ab10 <__ssputs_r>
 800a540:	3001      	adds	r0, #1
 800a542:	d084      	beq.n	800a44e <_svfwprintf_r+0x7b6>
 800a544:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a546:	2c00      	cmp	r4, #0
 800a548:	da0c      	bge.n	800a564 <_svfwprintf_r+0x8cc>
 800a54a:	4d11      	ldr	r5, [pc, #68]	; (800a590 <_svfwprintf_r+0x8f8>)
 800a54c:	4264      	negs	r4, r4
 800a54e:	2c10      	cmp	r4, #16
 800a550:	dc0b      	bgt.n	800a56a <_svfwprintf_r+0x8d2>
 800a552:	4a0f      	ldr	r2, [pc, #60]	; (800a590 <_svfwprintf_r+0x8f8>)
 800a554:	00a3      	lsls	r3, r4, #2
 800a556:	4649      	mov	r1, r9
 800a558:	4658      	mov	r0, fp
 800a55a:	f000 fad9 	bl	800ab10 <__ssputs_r>
 800a55e:	3001      	adds	r0, #1
 800a560:	f43f af75 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a564:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	e637      	b.n	800a1da <_svfwprintf_r+0x542>
 800a56a:	2340      	movs	r3, #64	; 0x40
 800a56c:	462a      	mov	r2, r5
 800a56e:	4649      	mov	r1, r9
 800a570:	4658      	mov	r0, fp
 800a572:	f000 facd 	bl	800ab10 <__ssputs_r>
 800a576:	3001      	adds	r0, #1
 800a578:	f43f af69 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a57c:	3c10      	subs	r4, #16
 800a57e:	e7e6      	b.n	800a54e <_svfwprintf_r+0x8b6>
 800a580:	0800e474 	.word	0x0800e474
 800a584:	0800e430 	.word	0x0800e430
 800a588:	0800e4c0 	.word	0x0800e4c0
 800a58c:	0800e4b8 	.word	0x0800e4b8
 800a590:	0800e500 	.word	0x0800e500
 800a594:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800a596:	f344 041d 	sbfx	r4, r4, #0, #30
 800a59a:	42ac      	cmp	r4, r5
 800a59c:	bfa8      	it	ge
 800a59e:	462c      	movge	r4, r5
 800a5a0:	2c00      	cmp	r4, #0
 800a5a2:	dc20      	bgt.n	800a5e6 <_svfwprintf_r+0x94e>
 800a5a4:	2c00      	cmp	r4, #0
 800a5a6:	bfac      	ite	ge
 800a5a8:	1b2e      	subge	r6, r5, r4
 800a5aa:	462e      	movlt	r6, r5
 800a5ac:	2e00      	cmp	r6, #0
 800a5ae:	dd0b      	ble.n	800a5c8 <_svfwprintf_r+0x930>
 800a5b0:	4c72      	ldr	r4, [pc, #456]	; (800a77c <_svfwprintf_r+0xae4>)
 800a5b2:	2e10      	cmp	r6, #16
 800a5b4:	dc20      	bgt.n	800a5f8 <_svfwprintf_r+0x960>
 800a5b6:	4a71      	ldr	r2, [pc, #452]	; (800a77c <_svfwprintf_r+0xae4>)
 800a5b8:	00b3      	lsls	r3, r6, #2
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	4658      	mov	r0, fp
 800a5be:	f000 faa7 	bl	800ab10 <__ssputs_r>
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	f43f af43 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a5c8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	ea4f 0585 	mov.w	r5, r5, lsl #2
 800a5d2:	da1c      	bge.n	800a60e <_svfwprintf_r+0x976>
 800a5d4:	2304      	movs	r3, #4
 800a5d6:	aa16      	add	r2, sp, #88	; 0x58
 800a5d8:	4649      	mov	r1, r9
 800a5da:	4658      	mov	r0, fp
 800a5dc:	f000 fa98 	bl	800ab10 <__ssputs_r>
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	d116      	bne.n	800a612 <_svfwprintf_r+0x97a>
 800a5e4:	e733      	b.n	800a44e <_svfwprintf_r+0x7b6>
 800a5e6:	00a3      	lsls	r3, r4, #2
 800a5e8:	4652      	mov	r2, sl
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	4658      	mov	r0, fp
 800a5ee:	f000 fa8f 	bl	800ab10 <__ssputs_r>
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	d1d6      	bne.n	800a5a4 <_svfwprintf_r+0x90c>
 800a5f6:	e72a      	b.n	800a44e <_svfwprintf_r+0x7b6>
 800a5f8:	2340      	movs	r3, #64	; 0x40
 800a5fa:	4622      	mov	r2, r4
 800a5fc:	4649      	mov	r1, r9
 800a5fe:	4658      	mov	r0, fp
 800a600:	f000 fa86 	bl	800ab10 <__ssputs_r>
 800a604:	3001      	adds	r0, #1
 800a606:	f43f af22 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a60a:	3e10      	subs	r6, #16
 800a60c:	e7d1      	b.n	800a5b2 <_svfwprintf_r+0x91a>
 800a60e:	07fe      	lsls	r6, r7, #31
 800a610:	d4e0      	bmi.n	800a5d4 <_svfwprintf_r+0x93c>
 800a612:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a614:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a616:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 800a61a:	10a4      	asrs	r4, r4, #2
 800a61c:	1a9b      	subs	r3, r3, r2
 800a61e:	429c      	cmp	r4, r3
 800a620:	bfa8      	it	ge
 800a622:	461c      	movge	r4, r3
 800a624:	2c00      	cmp	r4, #0
 800a626:	dd09      	ble.n	800a63c <_svfwprintf_r+0x9a4>
 800a628:	00a3      	lsls	r3, r4, #2
 800a62a:	eb0a 0205 	add.w	r2, sl, r5
 800a62e:	4649      	mov	r1, r9
 800a630:	4658      	mov	r0, fp
 800a632:	f000 fa6d 	bl	800ab10 <__ssputs_r>
 800a636:	3001      	adds	r0, #1
 800a638:	f43f af09 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a63c:	e9dd 3518 	ldrd	r3, r5, [sp, #96]	; 0x60
 800a640:	2c00      	cmp	r4, #0
 800a642:	eba5 0503 	sub.w	r5, r5, r3
 800a646:	bfa8      	it	ge
 800a648:	1b2d      	subge	r5, r5, r4
 800a64a:	2d00      	cmp	r5, #0
 800a64c:	f77f adcd 	ble.w	800a1ea <_svfwprintf_r+0x552>
 800a650:	4c4a      	ldr	r4, [pc, #296]	; (800a77c <_svfwprintf_r+0xae4>)
 800a652:	2d10      	cmp	r5, #16
 800a654:	dc01      	bgt.n	800a65a <_svfwprintf_r+0x9c2>
 800a656:	00ab      	lsls	r3, r5, #2
 800a658:	e74d      	b.n	800a4f6 <_svfwprintf_r+0x85e>
 800a65a:	2340      	movs	r3, #64	; 0x40
 800a65c:	4622      	mov	r2, r4
 800a65e:	4649      	mov	r1, r9
 800a660:	4658      	mov	r0, fp
 800a662:	f000 fa55 	bl	800ab10 <__ssputs_r>
 800a666:	3001      	adds	r0, #1
 800a668:	f43f aef1 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a66c:	3d10      	subs	r5, #16
 800a66e:	e7f0      	b.n	800a652 <_svfwprintf_r+0x9ba>
 800a670:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a672:	2b01      	cmp	r3, #1
 800a674:	4652      	mov	r2, sl
 800a676:	f04f 0304 	mov.w	r3, #4
 800a67a:	4649      	mov	r1, r9
 800a67c:	4658      	mov	r0, fp
 800a67e:	dc01      	bgt.n	800a684 <_svfwprintf_r+0x9ec>
 800a680:	07fc      	lsls	r4, r7, #31
 800a682:	d51b      	bpl.n	800a6bc <_svfwprintf_r+0xa24>
 800a684:	f000 fa44 	bl	800ab10 <__ssputs_r>
 800a688:	3001      	adds	r0, #1
 800a68a:	f43f aee0 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a68e:	2304      	movs	r3, #4
 800a690:	aa16      	add	r2, sp, #88	; 0x58
 800a692:	4649      	mov	r1, r9
 800a694:	4658      	mov	r0, fp
 800a696:	f000 fa3b 	bl	800ab10 <__ssputs_r>
 800a69a:	3001      	adds	r0, #1
 800a69c:	f43f aed7 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a6a0:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800a6a2:	ec51 0b18 	vmov	r0, r1, d8
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	3c01      	subs	r4, #1
 800a6ac:	f7f6 fa0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6b0:	b968      	cbnz	r0, 800a6ce <_svfwprintf_r+0xa36>
 800a6b2:	00a3      	lsls	r3, r4, #2
 800a6b4:	f10a 0204 	add.w	r2, sl, #4
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	4658      	mov	r0, fp
 800a6bc:	f000 fa28 	bl	800ab10 <__ssputs_r>
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	f43f aec4 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a6c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6c8:	aa1c      	add	r2, sp, #112	; 0x70
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	e586      	b.n	800a1dc <_svfwprintf_r+0x544>
 800a6ce:	2c00      	cmp	r4, #0
 800a6d0:	ddf9      	ble.n	800a6c6 <_svfwprintf_r+0xa2e>
 800a6d2:	4d2a      	ldr	r5, [pc, #168]	; (800a77c <_svfwprintf_r+0xae4>)
 800a6d4:	2c10      	cmp	r4, #16
 800a6d6:	dc02      	bgt.n	800a6de <_svfwprintf_r+0xa46>
 800a6d8:	4a28      	ldr	r2, [pc, #160]	; (800a77c <_svfwprintf_r+0xae4>)
 800a6da:	00a3      	lsls	r3, r4, #2
 800a6dc:	e7ec      	b.n	800a6b8 <_svfwprintf_r+0xa20>
 800a6de:	2340      	movs	r3, #64	; 0x40
 800a6e0:	462a      	mov	r2, r5
 800a6e2:	4649      	mov	r1, r9
 800a6e4:	4658      	mov	r0, fp
 800a6e6:	f000 fa13 	bl	800ab10 <__ssputs_r>
 800a6ea:	3001      	adds	r0, #1
 800a6ec:	f43f aeaf 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a6f0:	3c10      	subs	r4, #16
 800a6f2:	e7ef      	b.n	800a6d4 <_svfwprintf_r+0xa3c>
 800a6f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6f8:	1a9c      	subs	r4, r3, r2
 800a6fa:	2c00      	cmp	r4, #0
 800a6fc:	f77f ad78 	ble.w	800a1f0 <_svfwprintf_r+0x558>
 800a700:	2c10      	cmp	r4, #16
 800a702:	dc09      	bgt.n	800a718 <_svfwprintf_r+0xa80>
 800a704:	4a1e      	ldr	r2, [pc, #120]	; (800a780 <_svfwprintf_r+0xae8>)
 800a706:	00a3      	lsls	r3, r4, #2
 800a708:	4649      	mov	r1, r9
 800a70a:	4658      	mov	r0, fp
 800a70c:	f000 fa00 	bl	800ab10 <__ssputs_r>
 800a710:	3001      	adds	r0, #1
 800a712:	f47f ad6d 	bne.w	800a1f0 <_svfwprintf_r+0x558>
 800a716:	e69a      	b.n	800a44e <_svfwprintf_r+0x7b6>
 800a718:	4a19      	ldr	r2, [pc, #100]	; (800a780 <_svfwprintf_r+0xae8>)
 800a71a:	2340      	movs	r3, #64	; 0x40
 800a71c:	4649      	mov	r1, r9
 800a71e:	4658      	mov	r0, fp
 800a720:	f000 f9f6 	bl	800ab10 <__ssputs_r>
 800a724:	3001      	adds	r0, #1
 800a726:	f43f ae92 	beq.w	800a44e <_svfwprintf_r+0x7b6>
 800a72a:	3c10      	subs	r4, #16
 800a72c:	e7e8      	b.n	800a700 <_svfwprintf_r+0xa68>
 800a72e:	4639      	mov	r1, r7
 800a730:	2b00      	cmp	r3, #0
 800a732:	f43f add7 	beq.w	800a2e4 <_svfwprintf_r+0x64c>
 800a736:	2a01      	cmp	r2, #1
 800a738:	f43f ae4c 	beq.w	800a3d4 <_svfwprintf_r+0x73c>
 800a73c:	2a02      	cmp	r2, #2
 800a73e:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800a742:	f43f ae5d 	beq.w	800a400 <_svfwprintf_r+0x768>
 800a746:	f003 0207 	and.w	r2, r3, #7
 800a74a:	3230      	adds	r2, #48	; 0x30
 800a74c:	08db      	lsrs	r3, r3, #3
 800a74e:	4650      	mov	r0, sl
 800a750:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800a754:	d1f7      	bne.n	800a746 <_svfwprintf_r+0xaae>
 800a756:	07cd      	lsls	r5, r1, #31
 800a758:	d506      	bpl.n	800a768 <_svfwprintf_r+0xad0>
 800a75a:	2a30      	cmp	r2, #48	; 0x30
 800a75c:	d004      	beq.n	800a768 <_svfwprintf_r+0xad0>
 800a75e:	2330      	movs	r3, #48	; 0x30
 800a760:	f84a 3c04 	str.w	r3, [sl, #-4]
 800a764:	f1a0 0a08 	sub.w	sl, r0, #8
 800a768:	ab52      	add	r3, sp, #328	; 0x148
 800a76a:	eba3 030a 	sub.w	r3, r3, sl
 800a76e:	4626      	mov	r6, r4
 800a770:	460f      	mov	r7, r1
 800a772:	109c      	asrs	r4, r3, #2
 800a774:	f04f 0800 	mov.w	r8, #0
 800a778:	4645      	mov	r5, r8
 800a77a:	e4d7      	b.n	800a12c <_svfwprintf_r+0x494>
 800a77c:	0800e500 	.word	0x0800e500
 800a780:	0800e4c0 	.word	0x0800e4c0

0800a784 <__swbuf_r>:
 800a784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a786:	460e      	mov	r6, r1
 800a788:	4614      	mov	r4, r2
 800a78a:	4605      	mov	r5, r0
 800a78c:	b118      	cbz	r0, 800a796 <__swbuf_r+0x12>
 800a78e:	6a03      	ldr	r3, [r0, #32]
 800a790:	b90b      	cbnz	r3, 800a796 <__swbuf_r+0x12>
 800a792:	f7fd fc25 	bl	8007fe0 <__sinit>
 800a796:	69a3      	ldr	r3, [r4, #24]
 800a798:	60a3      	str	r3, [r4, #8]
 800a79a:	89a3      	ldrh	r3, [r4, #12]
 800a79c:	071a      	lsls	r2, r3, #28
 800a79e:	d525      	bpl.n	800a7ec <__swbuf_r+0x68>
 800a7a0:	6923      	ldr	r3, [r4, #16]
 800a7a2:	b31b      	cbz	r3, 800a7ec <__swbuf_r+0x68>
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	6922      	ldr	r2, [r4, #16]
 800a7a8:	1a98      	subs	r0, r3, r2
 800a7aa:	6963      	ldr	r3, [r4, #20]
 800a7ac:	b2f6      	uxtb	r6, r6
 800a7ae:	4283      	cmp	r3, r0
 800a7b0:	4637      	mov	r7, r6
 800a7b2:	dc04      	bgt.n	800a7be <__swbuf_r+0x3a>
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	f7fd fb5e 	bl	8007e78 <_fflush_r>
 800a7bc:	b9e0      	cbnz	r0, 800a7f8 <__swbuf_r+0x74>
 800a7be:	68a3      	ldr	r3, [r4, #8]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	60a3      	str	r3, [r4, #8]
 800a7c4:	6823      	ldr	r3, [r4, #0]
 800a7c6:	1c5a      	adds	r2, r3, #1
 800a7c8:	6022      	str	r2, [r4, #0]
 800a7ca:	701e      	strb	r6, [r3, #0]
 800a7cc:	6962      	ldr	r2, [r4, #20]
 800a7ce:	1c43      	adds	r3, r0, #1
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d004      	beq.n	800a7de <__swbuf_r+0x5a>
 800a7d4:	89a3      	ldrh	r3, [r4, #12]
 800a7d6:	07db      	lsls	r3, r3, #31
 800a7d8:	d506      	bpl.n	800a7e8 <__swbuf_r+0x64>
 800a7da:	2e0a      	cmp	r6, #10
 800a7dc:	d104      	bne.n	800a7e8 <__swbuf_r+0x64>
 800a7de:	4621      	mov	r1, r4
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	f7fd fb49 	bl	8007e78 <_fflush_r>
 800a7e6:	b938      	cbnz	r0, 800a7f8 <__swbuf_r+0x74>
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7ec:	4621      	mov	r1, r4
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	f000 f806 	bl	800a800 <__swsetup_r>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	d0d5      	beq.n	800a7a4 <__swbuf_r+0x20>
 800a7f8:	f04f 37ff 	mov.w	r7, #4294967295
 800a7fc:	e7f4      	b.n	800a7e8 <__swbuf_r+0x64>
	...

0800a800 <__swsetup_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4b2a      	ldr	r3, [pc, #168]	; (800a8ac <__swsetup_r+0xac>)
 800a804:	4605      	mov	r5, r0
 800a806:	6818      	ldr	r0, [r3, #0]
 800a808:	460c      	mov	r4, r1
 800a80a:	b118      	cbz	r0, 800a814 <__swsetup_r+0x14>
 800a80c:	6a03      	ldr	r3, [r0, #32]
 800a80e:	b90b      	cbnz	r3, 800a814 <__swsetup_r+0x14>
 800a810:	f7fd fbe6 	bl	8007fe0 <__sinit>
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a81a:	0718      	lsls	r0, r3, #28
 800a81c:	d422      	bmi.n	800a864 <__swsetup_r+0x64>
 800a81e:	06d9      	lsls	r1, r3, #27
 800a820:	d407      	bmi.n	800a832 <__swsetup_r+0x32>
 800a822:	2309      	movs	r3, #9
 800a824:	602b      	str	r3, [r5, #0]
 800a826:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	f04f 30ff 	mov.w	r0, #4294967295
 800a830:	e034      	b.n	800a89c <__swsetup_r+0x9c>
 800a832:	0758      	lsls	r0, r3, #29
 800a834:	d512      	bpl.n	800a85c <__swsetup_r+0x5c>
 800a836:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a838:	b141      	cbz	r1, 800a84c <__swsetup_r+0x4c>
 800a83a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a83e:	4299      	cmp	r1, r3
 800a840:	d002      	beq.n	800a848 <__swsetup_r+0x48>
 800a842:	4628      	mov	r0, r5
 800a844:	f7fe fb96 	bl	8008f74 <_free_r>
 800a848:	2300      	movs	r3, #0
 800a84a:	6363      	str	r3, [r4, #52]	; 0x34
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a852:	81a3      	strh	r3, [r4, #12]
 800a854:	2300      	movs	r3, #0
 800a856:	6063      	str	r3, [r4, #4]
 800a858:	6923      	ldr	r3, [r4, #16]
 800a85a:	6023      	str	r3, [r4, #0]
 800a85c:	89a3      	ldrh	r3, [r4, #12]
 800a85e:	f043 0308 	orr.w	r3, r3, #8
 800a862:	81a3      	strh	r3, [r4, #12]
 800a864:	6923      	ldr	r3, [r4, #16]
 800a866:	b94b      	cbnz	r3, 800a87c <__swsetup_r+0x7c>
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a86e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a872:	d003      	beq.n	800a87c <__swsetup_r+0x7c>
 800a874:	4621      	mov	r1, r4
 800a876:	4628      	mov	r0, r5
 800a878:	f7ff f962 	bl	8009b40 <__smakebuf_r>
 800a87c:	89a0      	ldrh	r0, [r4, #12]
 800a87e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a882:	f010 0301 	ands.w	r3, r0, #1
 800a886:	d00a      	beq.n	800a89e <__swsetup_r+0x9e>
 800a888:	2300      	movs	r3, #0
 800a88a:	60a3      	str	r3, [r4, #8]
 800a88c:	6963      	ldr	r3, [r4, #20]
 800a88e:	425b      	negs	r3, r3
 800a890:	61a3      	str	r3, [r4, #24]
 800a892:	6923      	ldr	r3, [r4, #16]
 800a894:	b943      	cbnz	r3, 800a8a8 <__swsetup_r+0xa8>
 800a896:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a89a:	d1c4      	bne.n	800a826 <__swsetup_r+0x26>
 800a89c:	bd38      	pop	{r3, r4, r5, pc}
 800a89e:	0781      	lsls	r1, r0, #30
 800a8a0:	bf58      	it	pl
 800a8a2:	6963      	ldrpl	r3, [r4, #20]
 800a8a4:	60a3      	str	r3, [r4, #8]
 800a8a6:	e7f4      	b.n	800a892 <__swsetup_r+0x92>
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	e7f7      	b.n	800a89c <__swsetup_r+0x9c>
 800a8ac:	2000006c 	.word	0x2000006c

0800a8b0 <memmove>:
 800a8b0:	4288      	cmp	r0, r1
 800a8b2:	b510      	push	{r4, lr}
 800a8b4:	eb01 0402 	add.w	r4, r1, r2
 800a8b8:	d902      	bls.n	800a8c0 <memmove+0x10>
 800a8ba:	4284      	cmp	r4, r0
 800a8bc:	4623      	mov	r3, r4
 800a8be:	d807      	bhi.n	800a8d0 <memmove+0x20>
 800a8c0:	1e43      	subs	r3, r0, #1
 800a8c2:	42a1      	cmp	r1, r4
 800a8c4:	d008      	beq.n	800a8d8 <memmove+0x28>
 800a8c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8ce:	e7f8      	b.n	800a8c2 <memmove+0x12>
 800a8d0:	4402      	add	r2, r0
 800a8d2:	4601      	mov	r1, r0
 800a8d4:	428a      	cmp	r2, r1
 800a8d6:	d100      	bne.n	800a8da <memmove+0x2a>
 800a8d8:	bd10      	pop	{r4, pc}
 800a8da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8e2:	e7f7      	b.n	800a8d4 <memmove+0x24>

0800a8e4 <wcslen>:
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	3204      	adds	r2, #4
 800a8ea:	6819      	ldr	r1, [r3, #0]
 800a8ec:	2900      	cmp	r1, #0
 800a8ee:	d1fa      	bne.n	800a8e6 <wcslen+0x2>
 800a8f0:	1a18      	subs	r0, r3, r0
 800a8f2:	1080      	asrs	r0, r0, #2
 800a8f4:	4770      	bx	lr

0800a8f6 <wmemchr>:
 800a8f6:	b530      	push	{r4, r5, lr}
 800a8f8:	2400      	movs	r4, #0
 800a8fa:	4294      	cmp	r4, r2
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	d102      	bne.n	800a906 <wmemchr+0x10>
 800a900:	2300      	movs	r3, #0
 800a902:	4618      	mov	r0, r3
 800a904:	bd30      	pop	{r4, r5, pc}
 800a906:	681d      	ldr	r5, [r3, #0]
 800a908:	428d      	cmp	r5, r1
 800a90a:	f100 0004 	add.w	r0, r0, #4
 800a90e:	d0f8      	beq.n	800a902 <wmemchr+0xc>
 800a910:	3401      	adds	r4, #1
 800a912:	e7f2      	b.n	800a8fa <wmemchr+0x4>

0800a914 <_fstat_r>:
 800a914:	b538      	push	{r3, r4, r5, lr}
 800a916:	4d07      	ldr	r5, [pc, #28]	; (800a934 <_fstat_r+0x20>)
 800a918:	2300      	movs	r3, #0
 800a91a:	4604      	mov	r4, r0
 800a91c:	4608      	mov	r0, r1
 800a91e:	4611      	mov	r1, r2
 800a920:	602b      	str	r3, [r5, #0]
 800a922:	f7f7 f9e4 	bl	8001cee <_fstat>
 800a926:	1c43      	adds	r3, r0, #1
 800a928:	d102      	bne.n	800a930 <_fstat_r+0x1c>
 800a92a:	682b      	ldr	r3, [r5, #0]
 800a92c:	b103      	cbz	r3, 800a930 <_fstat_r+0x1c>
 800a92e:	6023      	str	r3, [r4, #0]
 800a930:	bd38      	pop	{r3, r4, r5, pc}
 800a932:	bf00      	nop
 800a934:	2000a520 	.word	0x2000a520

0800a938 <_isatty_r>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	4d06      	ldr	r5, [pc, #24]	; (800a954 <_isatty_r+0x1c>)
 800a93c:	2300      	movs	r3, #0
 800a93e:	4604      	mov	r4, r0
 800a940:	4608      	mov	r0, r1
 800a942:	602b      	str	r3, [r5, #0]
 800a944:	f7f7 f9e3 	bl	8001d0e <_isatty>
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	d102      	bne.n	800a952 <_isatty_r+0x1a>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	b103      	cbz	r3, 800a952 <_isatty_r+0x1a>
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	bd38      	pop	{r3, r4, r5, pc}
 800a954:	2000a520 	.word	0x2000a520

0800a958 <_sbrk_r>:
 800a958:	b538      	push	{r3, r4, r5, lr}
 800a95a:	4d06      	ldr	r5, [pc, #24]	; (800a974 <_sbrk_r+0x1c>)
 800a95c:	2300      	movs	r3, #0
 800a95e:	4604      	mov	r4, r0
 800a960:	4608      	mov	r0, r1
 800a962:	602b      	str	r3, [r5, #0]
 800a964:	f7f7 f9ec 	bl	8001d40 <_sbrk>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	d102      	bne.n	800a972 <_sbrk_r+0x1a>
 800a96c:	682b      	ldr	r3, [r5, #0]
 800a96e:	b103      	cbz	r3, 800a972 <_sbrk_r+0x1a>
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	2000a520 	.word	0x2000a520

0800a978 <__assert_func>:
 800a978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a97a:	4614      	mov	r4, r2
 800a97c:	461a      	mov	r2, r3
 800a97e:	4b09      	ldr	r3, [pc, #36]	; (800a9a4 <__assert_func+0x2c>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4605      	mov	r5, r0
 800a984:	68d8      	ldr	r0, [r3, #12]
 800a986:	b14c      	cbz	r4, 800a99c <__assert_func+0x24>
 800a988:	4b07      	ldr	r3, [pc, #28]	; (800a9a8 <__assert_func+0x30>)
 800a98a:	9100      	str	r1, [sp, #0]
 800a98c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a990:	4906      	ldr	r1, [pc, #24]	; (800a9ac <__assert_func+0x34>)
 800a992:	462b      	mov	r3, r5
 800a994:	f000 f916 	bl	800abc4 <fiprintf>
 800a998:	f000 f926 	bl	800abe8 <abort>
 800a99c:	4b04      	ldr	r3, [pc, #16]	; (800a9b0 <__assert_func+0x38>)
 800a99e:	461c      	mov	r4, r3
 800a9a0:	e7f3      	b.n	800a98a <__assert_func+0x12>
 800a9a2:	bf00      	nop
 800a9a4:	2000006c 	.word	0x2000006c
 800a9a8:	0800e54a 	.word	0x0800e54a
 800a9ac:	0800e557 	.word	0x0800e557
 800a9b0:	0800e585 	.word	0x0800e585

0800a9b4 <_calloc_r>:
 800a9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9b6:	fba1 2402 	umull	r2, r4, r1, r2
 800a9ba:	b94c      	cbnz	r4, 800a9d0 <_calloc_r+0x1c>
 800a9bc:	4611      	mov	r1, r2
 800a9be:	9201      	str	r2, [sp, #4]
 800a9c0:	f7fe fb4c 	bl	800905c <_malloc_r>
 800a9c4:	9a01      	ldr	r2, [sp, #4]
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	b930      	cbnz	r0, 800a9d8 <_calloc_r+0x24>
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	b003      	add	sp, #12
 800a9ce:	bd30      	pop	{r4, r5, pc}
 800a9d0:	220c      	movs	r2, #12
 800a9d2:	6002      	str	r2, [r0, #0]
 800a9d4:	2500      	movs	r5, #0
 800a9d6:	e7f8      	b.n	800a9ca <_calloc_r+0x16>
 800a9d8:	4621      	mov	r1, r4
 800a9da:	f7fd fbc1 	bl	8008160 <memset>
 800a9de:	e7f4      	b.n	800a9ca <_calloc_r+0x16>

0800a9e0 <__ascii_mbtowc>:
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	b901      	cbnz	r1, 800a9e6 <__ascii_mbtowc+0x6>
 800a9e4:	a901      	add	r1, sp, #4
 800a9e6:	b142      	cbz	r2, 800a9fa <__ascii_mbtowc+0x1a>
 800a9e8:	b14b      	cbz	r3, 800a9fe <__ascii_mbtowc+0x1e>
 800a9ea:	7813      	ldrb	r3, [r2, #0]
 800a9ec:	600b      	str	r3, [r1, #0]
 800a9ee:	7812      	ldrb	r2, [r2, #0]
 800a9f0:	1e10      	subs	r0, r2, #0
 800a9f2:	bf18      	it	ne
 800a9f4:	2001      	movne	r0, #1
 800a9f6:	b002      	add	sp, #8
 800a9f8:	4770      	bx	lr
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	e7fb      	b.n	800a9f6 <__ascii_mbtowc+0x16>
 800a9fe:	f06f 0001 	mvn.w	r0, #1
 800aa02:	e7f8      	b.n	800a9f6 <__ascii_mbtowc+0x16>

0800aa04 <_realloc_r>:
 800aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa08:	4680      	mov	r8, r0
 800aa0a:	4614      	mov	r4, r2
 800aa0c:	460e      	mov	r6, r1
 800aa0e:	b921      	cbnz	r1, 800aa1a <_realloc_r+0x16>
 800aa10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa14:	4611      	mov	r1, r2
 800aa16:	f7fe bb21 	b.w	800905c <_malloc_r>
 800aa1a:	b92a      	cbnz	r2, 800aa28 <_realloc_r+0x24>
 800aa1c:	f7fe faaa 	bl	8008f74 <_free_r>
 800aa20:	4625      	mov	r5, r4
 800aa22:	4628      	mov	r0, r5
 800aa24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa28:	f000 f8e5 	bl	800abf6 <_malloc_usable_size_r>
 800aa2c:	4284      	cmp	r4, r0
 800aa2e:	4607      	mov	r7, r0
 800aa30:	d802      	bhi.n	800aa38 <_realloc_r+0x34>
 800aa32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa36:	d812      	bhi.n	800aa5e <_realloc_r+0x5a>
 800aa38:	4621      	mov	r1, r4
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	f7fe fb0e 	bl	800905c <_malloc_r>
 800aa40:	4605      	mov	r5, r0
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d0ed      	beq.n	800aa22 <_realloc_r+0x1e>
 800aa46:	42bc      	cmp	r4, r7
 800aa48:	4622      	mov	r2, r4
 800aa4a:	4631      	mov	r1, r6
 800aa4c:	bf28      	it	cs
 800aa4e:	463a      	movcs	r2, r7
 800aa50:	f7fd fc05 	bl	800825e <memcpy>
 800aa54:	4631      	mov	r1, r6
 800aa56:	4640      	mov	r0, r8
 800aa58:	f7fe fa8c 	bl	8008f74 <_free_r>
 800aa5c:	e7e1      	b.n	800aa22 <_realloc_r+0x1e>
 800aa5e:	4635      	mov	r5, r6
 800aa60:	e7df      	b.n	800aa22 <_realloc_r+0x1e>

0800aa62 <__ascii_wctomb>:
 800aa62:	b149      	cbz	r1, 800aa78 <__ascii_wctomb+0x16>
 800aa64:	2aff      	cmp	r2, #255	; 0xff
 800aa66:	bf85      	ittet	hi
 800aa68:	238a      	movhi	r3, #138	; 0x8a
 800aa6a:	6003      	strhi	r3, [r0, #0]
 800aa6c:	700a      	strbls	r2, [r1, #0]
 800aa6e:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa72:	bf98      	it	ls
 800aa74:	2001      	movls	r0, #1
 800aa76:	4770      	bx	lr
 800aa78:	4608      	mov	r0, r1
 800aa7a:	4770      	bx	lr

0800aa7c <btowc>:
 800aa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa7e:	1c43      	adds	r3, r0, #1
 800aa80:	b087      	sub	sp, #28
 800aa82:	d103      	bne.n	800aa8c <btowc+0x10>
 800aa84:	f04f 30ff 	mov.w	r0, #4294967295
 800aa88:	b007      	add	sp, #28
 800aa8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa8c:	4d1c      	ldr	r5, [pc, #112]	; (800ab00 <btowc+0x84>)
 800aa8e:	f88d 000b 	strb.w	r0, [sp, #11]
 800aa92:	ae04      	add	r6, sp, #16
 800aa94:	2208      	movs	r2, #8
 800aa96:	2100      	movs	r1, #0
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f7fd fb61 	bl	8008160 <memset>
 800aa9e:	682f      	ldr	r7, [r5, #0]
 800aaa0:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800aaa2:	b9fc      	cbnz	r4, 800aae4 <btowc+0x68>
 800aaa4:	2050      	movs	r0, #80	; 0x50
 800aaa6:	f7fe fab1 	bl	800900c <malloc>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	6478      	str	r0, [r7, #68]	; 0x44
 800aaae:	b920      	cbnz	r0, 800aaba <btowc+0x3e>
 800aab0:	4b14      	ldr	r3, [pc, #80]	; (800ab04 <btowc+0x88>)
 800aab2:	4815      	ldr	r0, [pc, #84]	; (800ab08 <btowc+0x8c>)
 800aab4:	2118      	movs	r1, #24
 800aab6:	f7ff ff5f 	bl	800a978 <__assert_func>
 800aaba:	682b      	ldr	r3, [r5, #0]
 800aabc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aabe:	e9c3 4400 	strd	r4, r4, [r3]
 800aac2:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800aac6:	e9c3 4404 	strd	r4, r4, [r3, #16]
 800aaca:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 800aace:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 800aad2:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 800aad6:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 800aada:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 800aade:	619c      	str	r4, [r3, #24]
 800aae0:	771c      	strb	r4, [r3, #28]
 800aae2:	625c      	str	r4, [r3, #36]	; 0x24
 800aae4:	4b09      	ldr	r3, [pc, #36]	; (800ab0c <btowc+0x90>)
 800aae6:	9600      	str	r6, [sp, #0]
 800aae8:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 800aaec:	6828      	ldr	r0, [r5, #0]
 800aaee:	2301      	movs	r3, #1
 800aaf0:	f10d 020b 	add.w	r2, sp, #11
 800aaf4:	a903      	add	r1, sp, #12
 800aaf6:	47a0      	blx	r4
 800aaf8:	2801      	cmp	r0, #1
 800aafa:	d8c3      	bhi.n	800aa84 <btowc+0x8>
 800aafc:	9803      	ldr	r0, [sp, #12]
 800aafe:	e7c3      	b.n	800aa88 <btowc+0xc>
 800ab00:	2000006c 	.word	0x2000006c
 800ab04:	0800e201 	.word	0x0800e201
 800ab08:	0800e586 	.word	0x0800e586
 800ab0c:	20000070 	.word	0x20000070

0800ab10 <__ssputs_r>:
 800ab10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab14:	688e      	ldr	r6, [r1, #8]
 800ab16:	461f      	mov	r7, r3
 800ab18:	42be      	cmp	r6, r7
 800ab1a:	680b      	ldr	r3, [r1, #0]
 800ab1c:	4682      	mov	sl, r0
 800ab1e:	460c      	mov	r4, r1
 800ab20:	4690      	mov	r8, r2
 800ab22:	d82c      	bhi.n	800ab7e <__ssputs_r+0x6e>
 800ab24:	898a      	ldrh	r2, [r1, #12]
 800ab26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab2a:	d026      	beq.n	800ab7a <__ssputs_r+0x6a>
 800ab2c:	6965      	ldr	r5, [r4, #20]
 800ab2e:	6909      	ldr	r1, [r1, #16]
 800ab30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab34:	eba3 0901 	sub.w	r9, r3, r1
 800ab38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab3c:	1c7b      	adds	r3, r7, #1
 800ab3e:	444b      	add	r3, r9
 800ab40:	106d      	asrs	r5, r5, #1
 800ab42:	429d      	cmp	r5, r3
 800ab44:	bf38      	it	cc
 800ab46:	461d      	movcc	r5, r3
 800ab48:	0553      	lsls	r3, r2, #21
 800ab4a:	d527      	bpl.n	800ab9c <__ssputs_r+0x8c>
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	f7fe fa85 	bl	800905c <_malloc_r>
 800ab52:	4606      	mov	r6, r0
 800ab54:	b360      	cbz	r0, 800abb0 <__ssputs_r+0xa0>
 800ab56:	6921      	ldr	r1, [r4, #16]
 800ab58:	464a      	mov	r2, r9
 800ab5a:	f7fd fb80 	bl	800825e <memcpy>
 800ab5e:	89a3      	ldrh	r3, [r4, #12]
 800ab60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab68:	81a3      	strh	r3, [r4, #12]
 800ab6a:	6126      	str	r6, [r4, #16]
 800ab6c:	6165      	str	r5, [r4, #20]
 800ab6e:	444e      	add	r6, r9
 800ab70:	eba5 0509 	sub.w	r5, r5, r9
 800ab74:	6026      	str	r6, [r4, #0]
 800ab76:	60a5      	str	r5, [r4, #8]
 800ab78:	463e      	mov	r6, r7
 800ab7a:	42be      	cmp	r6, r7
 800ab7c:	d900      	bls.n	800ab80 <__ssputs_r+0x70>
 800ab7e:	463e      	mov	r6, r7
 800ab80:	6820      	ldr	r0, [r4, #0]
 800ab82:	4632      	mov	r2, r6
 800ab84:	4641      	mov	r1, r8
 800ab86:	f7ff fe93 	bl	800a8b0 <memmove>
 800ab8a:	68a3      	ldr	r3, [r4, #8]
 800ab8c:	1b9b      	subs	r3, r3, r6
 800ab8e:	60a3      	str	r3, [r4, #8]
 800ab90:	6823      	ldr	r3, [r4, #0]
 800ab92:	4433      	add	r3, r6
 800ab94:	6023      	str	r3, [r4, #0]
 800ab96:	2000      	movs	r0, #0
 800ab98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab9c:	462a      	mov	r2, r5
 800ab9e:	f7ff ff31 	bl	800aa04 <_realloc_r>
 800aba2:	4606      	mov	r6, r0
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d1e0      	bne.n	800ab6a <__ssputs_r+0x5a>
 800aba8:	6921      	ldr	r1, [r4, #16]
 800abaa:	4650      	mov	r0, sl
 800abac:	f7fe f9e2 	bl	8008f74 <_free_r>
 800abb0:	230c      	movs	r3, #12
 800abb2:	f8ca 3000 	str.w	r3, [sl]
 800abb6:	89a3      	ldrh	r3, [r4, #12]
 800abb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abbc:	81a3      	strh	r3, [r4, #12]
 800abbe:	f04f 30ff 	mov.w	r0, #4294967295
 800abc2:	e7e9      	b.n	800ab98 <__ssputs_r+0x88>

0800abc4 <fiprintf>:
 800abc4:	b40e      	push	{r1, r2, r3}
 800abc6:	b503      	push	{r0, r1, lr}
 800abc8:	4601      	mov	r1, r0
 800abca:	ab03      	add	r3, sp, #12
 800abcc:	4805      	ldr	r0, [pc, #20]	; (800abe4 <fiprintf+0x20>)
 800abce:	f853 2b04 	ldr.w	r2, [r3], #4
 800abd2:	6800      	ldr	r0, [r0, #0]
 800abd4:	9301      	str	r3, [sp, #4]
 800abd6:	f7fe fe73 	bl	80098c0 <_vfiprintf_r>
 800abda:	b002      	add	sp, #8
 800abdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800abe0:	b003      	add	sp, #12
 800abe2:	4770      	bx	lr
 800abe4:	2000006c 	.word	0x2000006c

0800abe8 <abort>:
 800abe8:	b508      	push	{r3, lr}
 800abea:	2006      	movs	r0, #6
 800abec:	f000 f834 	bl	800ac58 <raise>
 800abf0:	2001      	movs	r0, #1
 800abf2:	f7f7 f82d 	bl	8001c50 <_exit>

0800abf6 <_malloc_usable_size_r>:
 800abf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abfa:	1f18      	subs	r0, r3, #4
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	bfbc      	itt	lt
 800ac00:	580b      	ldrlt	r3, [r1, r0]
 800ac02:	18c0      	addlt	r0, r0, r3
 800ac04:	4770      	bx	lr

0800ac06 <_raise_r>:
 800ac06:	291f      	cmp	r1, #31
 800ac08:	b538      	push	{r3, r4, r5, lr}
 800ac0a:	4604      	mov	r4, r0
 800ac0c:	460d      	mov	r5, r1
 800ac0e:	d904      	bls.n	800ac1a <_raise_r+0x14>
 800ac10:	2316      	movs	r3, #22
 800ac12:	6003      	str	r3, [r0, #0]
 800ac14:	f04f 30ff 	mov.w	r0, #4294967295
 800ac18:	bd38      	pop	{r3, r4, r5, pc}
 800ac1a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ac1c:	b112      	cbz	r2, 800ac24 <_raise_r+0x1e>
 800ac1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac22:	b94b      	cbnz	r3, 800ac38 <_raise_r+0x32>
 800ac24:	4620      	mov	r0, r4
 800ac26:	f000 f831 	bl	800ac8c <_getpid_r>
 800ac2a:	462a      	mov	r2, r5
 800ac2c:	4601      	mov	r1, r0
 800ac2e:	4620      	mov	r0, r4
 800ac30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac34:	f000 b818 	b.w	800ac68 <_kill_r>
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d00a      	beq.n	800ac52 <_raise_r+0x4c>
 800ac3c:	1c59      	adds	r1, r3, #1
 800ac3e:	d103      	bne.n	800ac48 <_raise_r+0x42>
 800ac40:	2316      	movs	r3, #22
 800ac42:	6003      	str	r3, [r0, #0]
 800ac44:	2001      	movs	r0, #1
 800ac46:	e7e7      	b.n	800ac18 <_raise_r+0x12>
 800ac48:	2400      	movs	r4, #0
 800ac4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac4e:	4628      	mov	r0, r5
 800ac50:	4798      	blx	r3
 800ac52:	2000      	movs	r0, #0
 800ac54:	e7e0      	b.n	800ac18 <_raise_r+0x12>
	...

0800ac58 <raise>:
 800ac58:	4b02      	ldr	r3, [pc, #8]	; (800ac64 <raise+0xc>)
 800ac5a:	4601      	mov	r1, r0
 800ac5c:	6818      	ldr	r0, [r3, #0]
 800ac5e:	f7ff bfd2 	b.w	800ac06 <_raise_r>
 800ac62:	bf00      	nop
 800ac64:	2000006c 	.word	0x2000006c

0800ac68 <_kill_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	4d07      	ldr	r5, [pc, #28]	; (800ac88 <_kill_r+0x20>)
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	4604      	mov	r4, r0
 800ac70:	4608      	mov	r0, r1
 800ac72:	4611      	mov	r1, r2
 800ac74:	602b      	str	r3, [r5, #0]
 800ac76:	f7f6 ffdb 	bl	8001c30 <_kill>
 800ac7a:	1c43      	adds	r3, r0, #1
 800ac7c:	d102      	bne.n	800ac84 <_kill_r+0x1c>
 800ac7e:	682b      	ldr	r3, [r5, #0]
 800ac80:	b103      	cbz	r3, 800ac84 <_kill_r+0x1c>
 800ac82:	6023      	str	r3, [r4, #0]
 800ac84:	bd38      	pop	{r3, r4, r5, pc}
 800ac86:	bf00      	nop
 800ac88:	2000a520 	.word	0x2000a520

0800ac8c <_getpid_r>:
 800ac8c:	f7f6 bfc8 	b.w	8001c20 <_getpid>

0800ac90 <log>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	ed2d 8b02 	vpush	{d8}
 800ac96:	ec55 4b10 	vmov	r4, r5, d0
 800ac9a:	f000 f841 	bl	800ad20 <__ieee754_log>
 800ac9e:	4622      	mov	r2, r4
 800aca0:	462b      	mov	r3, r5
 800aca2:	4620      	mov	r0, r4
 800aca4:	4629      	mov	r1, r5
 800aca6:	eeb0 8a40 	vmov.f32	s16, s0
 800acaa:	eef0 8a60 	vmov.f32	s17, s1
 800acae:	f7f5 ff3d 	bl	8000b2c <__aeabi_dcmpun>
 800acb2:	b998      	cbnz	r0, 800acdc <log+0x4c>
 800acb4:	2200      	movs	r2, #0
 800acb6:	2300      	movs	r3, #0
 800acb8:	4620      	mov	r0, r4
 800acba:	4629      	mov	r1, r5
 800acbc:	f7f5 ff2c 	bl	8000b18 <__aeabi_dcmpgt>
 800acc0:	b960      	cbnz	r0, 800acdc <log+0x4c>
 800acc2:	2200      	movs	r2, #0
 800acc4:	2300      	movs	r3, #0
 800acc6:	4620      	mov	r0, r4
 800acc8:	4629      	mov	r1, r5
 800acca:	f7f5 fefd 	bl	8000ac8 <__aeabi_dcmpeq>
 800acce:	b160      	cbz	r0, 800acea <log+0x5a>
 800acd0:	f7fd fa98 	bl	8008204 <__errno>
 800acd4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800ad00 <log+0x70>
 800acd8:	2322      	movs	r3, #34	; 0x22
 800acda:	6003      	str	r3, [r0, #0]
 800acdc:	eeb0 0a48 	vmov.f32	s0, s16
 800ace0:	eef0 0a68 	vmov.f32	s1, s17
 800ace4:	ecbd 8b02 	vpop	{d8}
 800ace8:	bd38      	pop	{r3, r4, r5, pc}
 800acea:	f7fd fa8b 	bl	8008204 <__errno>
 800acee:	ecbd 8b02 	vpop	{d8}
 800acf2:	2321      	movs	r3, #33	; 0x21
 800acf4:	6003      	str	r3, [r0, #0]
 800acf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acfa:	4803      	ldr	r0, [pc, #12]	; (800ad08 <log+0x78>)
 800acfc:	f000 b808 	b.w	800ad10 <nan>
 800ad00:	00000000 	.word	0x00000000
 800ad04:	fff00000 	.word	0xfff00000
 800ad08:	0800e585 	.word	0x0800e585
 800ad0c:	00000000 	.word	0x00000000

0800ad10 <nan>:
 800ad10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ad18 <nan+0x8>
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	00000000 	.word	0x00000000
 800ad1c:	7ff80000 	.word	0x7ff80000

0800ad20 <__ieee754_log>:
 800ad20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad24:	ec51 0b10 	vmov	r0, r1, d0
 800ad28:	ed2d 8b04 	vpush	{d8-d9}
 800ad2c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ad30:	b083      	sub	sp, #12
 800ad32:	460d      	mov	r5, r1
 800ad34:	da29      	bge.n	800ad8a <__ieee754_log+0x6a>
 800ad36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad3a:	4303      	orrs	r3, r0
 800ad3c:	ee10 2a10 	vmov	r2, s0
 800ad40:	d10c      	bne.n	800ad5c <__ieee754_log+0x3c>
 800ad42:	49cf      	ldr	r1, [pc, #828]	; (800b080 <__ieee754_log+0x360>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	2300      	movs	r3, #0
 800ad48:	2000      	movs	r0, #0
 800ad4a:	f7f5 fd7f 	bl	800084c <__aeabi_ddiv>
 800ad4e:	ec41 0b10 	vmov	d0, r0, r1
 800ad52:	b003      	add	sp, #12
 800ad54:	ecbd 8b04 	vpop	{d8-d9}
 800ad58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5c:	2900      	cmp	r1, #0
 800ad5e:	da05      	bge.n	800ad6c <__ieee754_log+0x4c>
 800ad60:	460b      	mov	r3, r1
 800ad62:	f7f5 fa91 	bl	8000288 <__aeabi_dsub>
 800ad66:	2200      	movs	r2, #0
 800ad68:	2300      	movs	r3, #0
 800ad6a:	e7ee      	b.n	800ad4a <__ieee754_log+0x2a>
 800ad6c:	4bc5      	ldr	r3, [pc, #788]	; (800b084 <__ieee754_log+0x364>)
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f7f5 fc42 	bl	80005f8 <__aeabi_dmul>
 800ad74:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ad78:	460d      	mov	r5, r1
 800ad7a:	4ac3      	ldr	r2, [pc, #780]	; (800b088 <__ieee754_log+0x368>)
 800ad7c:	4295      	cmp	r5, r2
 800ad7e:	dd06      	ble.n	800ad8e <__ieee754_log+0x6e>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	f7f5 fa82 	bl	800028c <__adddf3>
 800ad88:	e7e1      	b.n	800ad4e <__ieee754_log+0x2e>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	e7f5      	b.n	800ad7a <__ieee754_log+0x5a>
 800ad8e:	152c      	asrs	r4, r5, #20
 800ad90:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ad94:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ad98:	441c      	add	r4, r3
 800ad9a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ad9e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ada2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ada6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800adaa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800adae:	ea42 0105 	orr.w	r1, r2, r5
 800adb2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800adb6:	2200      	movs	r2, #0
 800adb8:	4bb4      	ldr	r3, [pc, #720]	; (800b08c <__ieee754_log+0x36c>)
 800adba:	f7f5 fa65 	bl	8000288 <__aeabi_dsub>
 800adbe:	1cab      	adds	r3, r5, #2
 800adc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	4682      	mov	sl, r0
 800adc8:	468b      	mov	fp, r1
 800adca:	f04f 0200 	mov.w	r2, #0
 800adce:	dc53      	bgt.n	800ae78 <__ieee754_log+0x158>
 800add0:	2300      	movs	r3, #0
 800add2:	f7f5 fe79 	bl	8000ac8 <__aeabi_dcmpeq>
 800add6:	b1d0      	cbz	r0, 800ae0e <__ieee754_log+0xee>
 800add8:	2c00      	cmp	r4, #0
 800adda:	f000 8122 	beq.w	800b022 <__ieee754_log+0x302>
 800adde:	4620      	mov	r0, r4
 800ade0:	f7f5 fba0 	bl	8000524 <__aeabi_i2d>
 800ade4:	a390      	add	r3, pc, #576	; (adr r3, 800b028 <__ieee754_log+0x308>)
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	4606      	mov	r6, r0
 800adec:	460f      	mov	r7, r1
 800adee:	f7f5 fc03 	bl	80005f8 <__aeabi_dmul>
 800adf2:	a38f      	add	r3, pc, #572	; (adr r3, 800b030 <__ieee754_log+0x310>)
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	4604      	mov	r4, r0
 800adfa:	460d      	mov	r5, r1
 800adfc:	4630      	mov	r0, r6
 800adfe:	4639      	mov	r1, r7
 800ae00:	f7f5 fbfa 	bl	80005f8 <__aeabi_dmul>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	4620      	mov	r0, r4
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	e7ba      	b.n	800ad84 <__ieee754_log+0x64>
 800ae0e:	a38a      	add	r3, pc, #552	; (adr r3, 800b038 <__ieee754_log+0x318>)
 800ae10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae14:	4650      	mov	r0, sl
 800ae16:	4659      	mov	r1, fp
 800ae18:	f7f5 fbee 	bl	80005f8 <__aeabi_dmul>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	2000      	movs	r0, #0
 800ae22:	499b      	ldr	r1, [pc, #620]	; (800b090 <__ieee754_log+0x370>)
 800ae24:	f7f5 fa30 	bl	8000288 <__aeabi_dsub>
 800ae28:	4652      	mov	r2, sl
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	460f      	mov	r7, r1
 800ae2e:	465b      	mov	r3, fp
 800ae30:	4650      	mov	r0, sl
 800ae32:	4659      	mov	r1, fp
 800ae34:	f7f5 fbe0 	bl	80005f8 <__aeabi_dmul>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	4639      	mov	r1, r7
 800ae40:	f7f5 fbda 	bl	80005f8 <__aeabi_dmul>
 800ae44:	4606      	mov	r6, r0
 800ae46:	460f      	mov	r7, r1
 800ae48:	b914      	cbnz	r4, 800ae50 <__ieee754_log+0x130>
 800ae4a:	4632      	mov	r2, r6
 800ae4c:	463b      	mov	r3, r7
 800ae4e:	e0a2      	b.n	800af96 <__ieee754_log+0x276>
 800ae50:	4620      	mov	r0, r4
 800ae52:	f7f5 fb67 	bl	8000524 <__aeabi_i2d>
 800ae56:	a374      	add	r3, pc, #464	; (adr r3, 800b028 <__ieee754_log+0x308>)
 800ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5c:	4680      	mov	r8, r0
 800ae5e:	4689      	mov	r9, r1
 800ae60:	f7f5 fbca 	bl	80005f8 <__aeabi_dmul>
 800ae64:	a372      	add	r3, pc, #456	; (adr r3, 800b030 <__ieee754_log+0x310>)
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	460d      	mov	r5, r1
 800ae6e:	4640      	mov	r0, r8
 800ae70:	4649      	mov	r1, r9
 800ae72:	f7f5 fbc1 	bl	80005f8 <__aeabi_dmul>
 800ae76:	e0a7      	b.n	800afc8 <__ieee754_log+0x2a8>
 800ae78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae7c:	f7f5 fa06 	bl	800028c <__adddf3>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4650      	mov	r0, sl
 800ae86:	4659      	mov	r1, fp
 800ae88:	f7f5 fce0 	bl	800084c <__aeabi_ddiv>
 800ae8c:	ec41 0b18 	vmov	d8, r0, r1
 800ae90:	4620      	mov	r0, r4
 800ae92:	f7f5 fb47 	bl	8000524 <__aeabi_i2d>
 800ae96:	ec53 2b18 	vmov	r2, r3, d8
 800ae9a:	ec41 0b19 	vmov	d9, r0, r1
 800ae9e:	ec51 0b18 	vmov	r0, r1, d8
 800aea2:	f7f5 fba9 	bl	80005f8 <__aeabi_dmul>
 800aea6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800aeaa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800aeae:	9301      	str	r3, [sp, #4]
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	4680      	mov	r8, r0
 800aeb6:	4689      	mov	r9, r1
 800aeb8:	f7f5 fb9e 	bl	80005f8 <__aeabi_dmul>
 800aebc:	a360      	add	r3, pc, #384	; (adr r3, 800b040 <__ieee754_log+0x320>)
 800aebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec2:	4606      	mov	r6, r0
 800aec4:	460f      	mov	r7, r1
 800aec6:	f7f5 fb97 	bl	80005f8 <__aeabi_dmul>
 800aeca:	a35f      	add	r3, pc, #380	; (adr r3, 800b048 <__ieee754_log+0x328>)
 800aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed0:	f7f5 f9dc 	bl	800028c <__adddf3>
 800aed4:	4632      	mov	r2, r6
 800aed6:	463b      	mov	r3, r7
 800aed8:	f7f5 fb8e 	bl	80005f8 <__aeabi_dmul>
 800aedc:	a35c      	add	r3, pc, #368	; (adr r3, 800b050 <__ieee754_log+0x330>)
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	f7f5 f9d3 	bl	800028c <__adddf3>
 800aee6:	4632      	mov	r2, r6
 800aee8:	463b      	mov	r3, r7
 800aeea:	f7f5 fb85 	bl	80005f8 <__aeabi_dmul>
 800aeee:	a35a      	add	r3, pc, #360	; (adr r3, 800b058 <__ieee754_log+0x338>)
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	f7f5 f9ca 	bl	800028c <__adddf3>
 800aef8:	4642      	mov	r2, r8
 800aefa:	464b      	mov	r3, r9
 800aefc:	f7f5 fb7c 	bl	80005f8 <__aeabi_dmul>
 800af00:	a357      	add	r3, pc, #348	; (adr r3, 800b060 <__ieee754_log+0x340>)
 800af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af06:	4680      	mov	r8, r0
 800af08:	4689      	mov	r9, r1
 800af0a:	4630      	mov	r0, r6
 800af0c:	4639      	mov	r1, r7
 800af0e:	f7f5 fb73 	bl	80005f8 <__aeabi_dmul>
 800af12:	a355      	add	r3, pc, #340	; (adr r3, 800b068 <__ieee754_log+0x348>)
 800af14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af18:	f7f5 f9b8 	bl	800028c <__adddf3>
 800af1c:	4632      	mov	r2, r6
 800af1e:	463b      	mov	r3, r7
 800af20:	f7f5 fb6a 	bl	80005f8 <__aeabi_dmul>
 800af24:	a352      	add	r3, pc, #328	; (adr r3, 800b070 <__ieee754_log+0x350>)
 800af26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2a:	f7f5 f9af 	bl	800028c <__adddf3>
 800af2e:	4632      	mov	r2, r6
 800af30:	463b      	mov	r3, r7
 800af32:	f7f5 fb61 	bl	80005f8 <__aeabi_dmul>
 800af36:	460b      	mov	r3, r1
 800af38:	4602      	mov	r2, r0
 800af3a:	4649      	mov	r1, r9
 800af3c:	4640      	mov	r0, r8
 800af3e:	f7f5 f9a5 	bl	800028c <__adddf3>
 800af42:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800af46:	9b01      	ldr	r3, [sp, #4]
 800af48:	3551      	adds	r5, #81	; 0x51
 800af4a:	431d      	orrs	r5, r3
 800af4c:	2d00      	cmp	r5, #0
 800af4e:	4680      	mov	r8, r0
 800af50:	4689      	mov	r9, r1
 800af52:	dd48      	ble.n	800afe6 <__ieee754_log+0x2c6>
 800af54:	4b4e      	ldr	r3, [pc, #312]	; (800b090 <__ieee754_log+0x370>)
 800af56:	2200      	movs	r2, #0
 800af58:	4650      	mov	r0, sl
 800af5a:	4659      	mov	r1, fp
 800af5c:	f7f5 fb4c 	bl	80005f8 <__aeabi_dmul>
 800af60:	4652      	mov	r2, sl
 800af62:	465b      	mov	r3, fp
 800af64:	f7f5 fb48 	bl	80005f8 <__aeabi_dmul>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4606      	mov	r6, r0
 800af6e:	460f      	mov	r7, r1
 800af70:	4640      	mov	r0, r8
 800af72:	4649      	mov	r1, r9
 800af74:	f7f5 f98a 	bl	800028c <__adddf3>
 800af78:	ec53 2b18 	vmov	r2, r3, d8
 800af7c:	f7f5 fb3c 	bl	80005f8 <__aeabi_dmul>
 800af80:	4680      	mov	r8, r0
 800af82:	4689      	mov	r9, r1
 800af84:	b964      	cbnz	r4, 800afa0 <__ieee754_log+0x280>
 800af86:	4602      	mov	r2, r0
 800af88:	460b      	mov	r3, r1
 800af8a:	4630      	mov	r0, r6
 800af8c:	4639      	mov	r1, r7
 800af8e:	f7f5 f97b 	bl	8000288 <__aeabi_dsub>
 800af92:	4602      	mov	r2, r0
 800af94:	460b      	mov	r3, r1
 800af96:	4650      	mov	r0, sl
 800af98:	4659      	mov	r1, fp
 800af9a:	f7f5 f975 	bl	8000288 <__aeabi_dsub>
 800af9e:	e6d6      	b.n	800ad4e <__ieee754_log+0x2e>
 800afa0:	a321      	add	r3, pc, #132	; (adr r3, 800b028 <__ieee754_log+0x308>)
 800afa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa6:	ec51 0b19 	vmov	r0, r1, d9
 800afaa:	f7f5 fb25 	bl	80005f8 <__aeabi_dmul>
 800afae:	a320      	add	r3, pc, #128	; (adr r3, 800b030 <__ieee754_log+0x310>)
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	4604      	mov	r4, r0
 800afb6:	460d      	mov	r5, r1
 800afb8:	ec51 0b19 	vmov	r0, r1, d9
 800afbc:	f7f5 fb1c 	bl	80005f8 <__aeabi_dmul>
 800afc0:	4642      	mov	r2, r8
 800afc2:	464b      	mov	r3, r9
 800afc4:	f7f5 f962 	bl	800028c <__adddf3>
 800afc8:	4602      	mov	r2, r0
 800afca:	460b      	mov	r3, r1
 800afcc:	4630      	mov	r0, r6
 800afce:	4639      	mov	r1, r7
 800afd0:	f7f5 f95a 	bl	8000288 <__aeabi_dsub>
 800afd4:	4652      	mov	r2, sl
 800afd6:	465b      	mov	r3, fp
 800afd8:	f7f5 f956 	bl	8000288 <__aeabi_dsub>
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	4620      	mov	r0, r4
 800afe2:	4629      	mov	r1, r5
 800afe4:	e7d9      	b.n	800af9a <__ieee754_log+0x27a>
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	4650      	mov	r0, sl
 800afec:	4659      	mov	r1, fp
 800afee:	f7f5 f94b 	bl	8000288 <__aeabi_dsub>
 800aff2:	ec53 2b18 	vmov	r2, r3, d8
 800aff6:	f7f5 faff 	bl	80005f8 <__aeabi_dmul>
 800affa:	4606      	mov	r6, r0
 800affc:	460f      	mov	r7, r1
 800affe:	2c00      	cmp	r4, #0
 800b000:	f43f af23 	beq.w	800ae4a <__ieee754_log+0x12a>
 800b004:	a308      	add	r3, pc, #32	; (adr r3, 800b028 <__ieee754_log+0x308>)
 800b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00a:	ec51 0b19 	vmov	r0, r1, d9
 800b00e:	f7f5 faf3 	bl	80005f8 <__aeabi_dmul>
 800b012:	a307      	add	r3, pc, #28	; (adr r3, 800b030 <__ieee754_log+0x310>)
 800b014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b018:	4604      	mov	r4, r0
 800b01a:	460d      	mov	r5, r1
 800b01c:	ec51 0b19 	vmov	r0, r1, d9
 800b020:	e727      	b.n	800ae72 <__ieee754_log+0x152>
 800b022:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800b078 <__ieee754_log+0x358>
 800b026:	e694      	b.n	800ad52 <__ieee754_log+0x32>
 800b028:	fee00000 	.word	0xfee00000
 800b02c:	3fe62e42 	.word	0x3fe62e42
 800b030:	35793c76 	.word	0x35793c76
 800b034:	3dea39ef 	.word	0x3dea39ef
 800b038:	55555555 	.word	0x55555555
 800b03c:	3fd55555 	.word	0x3fd55555
 800b040:	df3e5244 	.word	0xdf3e5244
 800b044:	3fc2f112 	.word	0x3fc2f112
 800b048:	96cb03de 	.word	0x96cb03de
 800b04c:	3fc74664 	.word	0x3fc74664
 800b050:	94229359 	.word	0x94229359
 800b054:	3fd24924 	.word	0x3fd24924
 800b058:	55555593 	.word	0x55555593
 800b05c:	3fe55555 	.word	0x3fe55555
 800b060:	d078c69f 	.word	0xd078c69f
 800b064:	3fc39a09 	.word	0x3fc39a09
 800b068:	1d8e78af 	.word	0x1d8e78af
 800b06c:	3fcc71c5 	.word	0x3fcc71c5
 800b070:	9997fa04 	.word	0x9997fa04
 800b074:	3fd99999 	.word	0x3fd99999
	...
 800b080:	c3500000 	.word	0xc3500000
 800b084:	43500000 	.word	0x43500000
 800b088:	7fefffff 	.word	0x7fefffff
 800b08c:	3ff00000 	.word	0x3ff00000
 800b090:	3fe00000 	.word	0x3fe00000

0800b094 <_init>:
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b096:	bf00      	nop
 800b098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b09a:	bc08      	pop	{r3}
 800b09c:	469e      	mov	lr, r3
 800b09e:	4770      	bx	lr

0800b0a0 <_fini>:
 800b0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a2:	bf00      	nop
 800b0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0a6:	bc08      	pop	{r3}
 800b0a8:	469e      	mov	lr, r3
 800b0aa:	4770      	bx	lr
