
cyclingSpeedometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b50c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d48  0800b6a0  0800b6a0  0001b6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3e8  0800e3e8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3e8  0800e3e8  0001e3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3f0  0800e3f0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3f0  0800e3f0  0001e3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3f4  0800e3f4  0001e3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e3f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a3b4  200001dc  0800e5d4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000a590  0800e5d4  0002a590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a93c  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e4b  00000000  00000000  0003ab8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c0  00000000  00000000  0003e9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001267  00000000  00000000  00040198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a878  00000000  00000000  000413ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020369  00000000  00000000  0006bc77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb7c5  00000000  00000000  0008bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007588  00000000  00000000  001877a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0018ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b684 	.word	0x0800b684

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800b684 	.word	0x0800b684

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_DMA_Init+0x38>)
 8000f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <MX_DMA_Init+0x38>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6493      	str	r3, [r2, #72]	; 0x48
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_DMA_Init+0x38>)
 8000f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	200f      	movs	r0, #15
 8000f68:	f001 fcab 	bl	80028c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f6c:	200f      	movs	r0, #15
 8000f6e:	f001 fcc4 	bl	80028fa <HAL_NVIC_EnableIRQ>

}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000

08000f80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	4b39      	ldr	r3, [pc, #228]	; (800107c <MX_GPIO_Init+0xfc>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a38      	ldr	r2, [pc, #224]	; (800107c <MX_GPIO_Init+0xfc>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b36      	ldr	r3, [pc, #216]	; (800107c <MX_GPIO_Init+0xfc>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <MX_GPIO_Init+0xfc>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a32      	ldr	r2, [pc, #200]	; (800107c <MX_GPIO_Init+0xfc>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <MX_GPIO_Init+0xfc>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <MX_GPIO_Init+0xfc>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a2c      	ldr	r2, [pc, #176]	; (800107c <MX_GPIO_Init+0xfc>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <MX_GPIO_Init+0xfc>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f640 0104 	movw	r1, #2052	; 0x804
 8000fe4:	4826      	ldr	r0, [pc, #152]	; (8001080 <MX_GPIO_Init+0x100>)
 8000fe6:	f002 f85d 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff0:	4823      	ldr	r0, [pc, #140]	; (8001080 <MX_GPIO_Init+0x100>)
 8000ff2:	f002 f857 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HALL_SENSOR_Pin;
 8000ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001000:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4619      	mov	r1, r3
 800100c:	481d      	ldr	r0, [pc, #116]	; (8001084 <MX_GPIO_Init+0x104>)
 800100e:	f001 fe87 	bl	8002d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L_BUTTON_Pin;
 8001012:	2320      	movs	r3, #32
 8001014:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101a:	2301      	movs	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(L_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4619      	mov	r1, r3
 8001024:	4817      	ldr	r0, [pc, #92]	; (8001084 <MX_GPIO_Init+0x104>)
 8001026:	f001 fe7b 	bl	8002d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 800102a:	f641 0304 	movw	r3, #6148	; 0x1804
 800102e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	4619      	mov	r1, r3
 8001042:	480f      	ldr	r0, [pc, #60]	; (8001080 <MX_GPIO_Init+0x100>)
 8001044:	f001 fe6c 	bl	8002d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = R_BUTTON_Pin|M_BUTTON_Pin;
 8001048:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800104c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001052:	2301      	movs	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	4619      	mov	r1, r3
 800105c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001060:	f001 fe5e 	bl	8002d20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	210a      	movs	r1, #10
 8001068:	2028      	movs	r0, #40	; 0x28
 800106a:	f001 fc2a 	bl	80028c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800106e:	2028      	movs	r0, #40	; 0x28
 8001070:	f001 fc43 	bl	80028fa <HAL_NVIC_EnableIRQ>

}
 8001074:	bf00      	nop
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000
 8001080:	48000400 	.word	0x48000400
 8001084:	48000800 	.word	0x48000800

08001088 <speedValue>:

float speed = 0;


float speedValue(uint32_t period, uint8_t wheelSize_inch)
{
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
	float wheelSize_m = (float)wheelSize_inch * 0.0254;
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800109e:	ee17 0a90 	vmov	r0, s15
 80010a2:	f7ff fa51 	bl	8000548 <__aeabi_f2d>
 80010a6:	a335      	add	r3, pc, #212	; (adr r3, 800117c <speedValue+0xf4>)
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	f7ff faa4 	bl	80005f8 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	f7ff fd76 	bl	8000ba8 <__aeabi_d2f>
 80010bc:	4603      	mov	r3, r0
 80010be:	617b      	str	r3, [r7, #20]
	float radius_m = wheelSize_m / 2;
 80010c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80010c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80010c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010cc:	edc7 7a04 	vstr	s15, [r7, #16]
	float period_s = 0.001 * (float)period;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010da:	ee17 0a90 	vmov	r0, s15
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	a328      	add	r3, pc, #160	; (adr r3, 8001184 <speedValue+0xfc>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff fa86 	bl	80005f8 <__aeabi_dmul>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fd58 	bl	8000ba8 <__aeabi_d2f>
 80010f8:	4603      	mov	r3, r0
 80010fa:	60fb      	str	r3, [r7, #12]

	if(period > 0)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d01e      	beq.n	8001140 <speedValue+0xb8>
	speed = (2.0*3.14*radius_m)/period_s;
 8001102:	6938      	ldr	r0, [r7, #16]
 8001104:	f7ff fa20 	bl	8000548 <__aeabi_f2d>
 8001108:	a320      	add	r3, pc, #128	; (adr r3, 800118c <speedValue+0x104>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fa73 	bl	80005f8 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4614      	mov	r4, r2
 8001118:	461d      	mov	r5, r3
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f7ff fa14 	bl	8000548 <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4620      	mov	r0, r4
 8001126:	4629      	mov	r1, r5
 8001128:	f7ff fb90 	bl	800084c <__aeabi_ddiv>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fd38 	bl	8000ba8 <__aeabi_d2f>
 8001138:	4603      	mov	r3, r0
 800113a:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <speedValue+0xe8>)
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e003      	b.n	8001148 <speedValue+0xc0>
	else speed = 0.0;
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <speedValue+0xe8>)
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

	return speed*3600/1000;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <speedValue+0xe8>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001174 <speedValue+0xec>
 8001152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001156:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001178 <speedValue+0xf0>
 800115a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800115e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001162:	eeb0 0a67 	vmov.f32	s0, s15
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bdb0      	pop	{r4, r5, r7, pc}
 800116c:	f3af 8000 	nop.w
 8001170:	200001f8 	.word	0x200001f8
 8001174:	45610000 	.word	0x45610000
 8001178:	447a0000 	.word	0x447a0000
 800117c:	25460aa6 	.word	0x25460aa6
 8001180:	3f9a0275 	.word	0x3f9a0275
 8001184:	d2f1a9fc 	.word	0xd2f1a9fc
 8001188:	3f50624d 	.word	0x3f50624d
 800118c:	51eb851f 	.word	0x51eb851f
 8001190:	40191eb8 	.word	0x40191eb8
 8001194:	00000000 	.word	0x00000000

08001198 <distanceCovered>:

float distanceCovered(uint32_t hallCounter, uint8_t wheelSize_inch)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	float wheelSize_m = (float)wheelSize_inch * 0.0254;
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ae:	ee17 0a90 	vmov	r0, s15
 80011b2:	f7ff f9c9 	bl	8000548 <__aeabi_f2d>
 80011b6:	a31d      	add	r3, pc, #116	; (adr r3, 800122c <distanceCovered+0x94>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f7ff fa1c 	bl	80005f8 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fcee 	bl	8000ba8 <__aeabi_d2f>
 80011cc:	4603      	mov	r3, r0
 80011ce:	617b      	str	r3, [r7, #20]
	float radius_m = wheelSize_m / 2;
 80011d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80011d4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011dc:	edc7 7a04 	vstr	s15, [r7, #16]
	float distance_m = 2 * 3.14 * radius_m;
 80011e0:	6938      	ldr	r0, [r7, #16]
 80011e2:	f7ff f9b1 	bl	8000548 <__aeabi_f2d>
 80011e6:	a313      	add	r3, pc, #76	; (adr r3, 8001234 <distanceCovered+0x9c>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fcd6 	bl	8000ba8 <__aeabi_d2f>
 80011fc:	4603      	mov	r3, r0
 80011fe:	60fb      	str	r3, [r7, #12]

	return (float)hallCounter*(float)distance_m/1000;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800120a:	edd7 7a03 	vldr	s15, [r7, #12]
 800120e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001212:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001228 <distanceCovered+0x90>
 8001216:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800121a:	eef0 7a66 	vmov.f32	s15, s13
}
 800121e:	eeb0 0a67 	vmov.f32	s0, s15
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	447a0000 	.word	0x447a0000
 800122c:	25460aa6 	.word	0x25460aa6
 8001230:	3f9a0275 	.word	0x3f9a0275
 8001234:	51eb851f 	.word	0x51eb851f
 8001238:	40191eb8 	.word	0x40191eb8

0800123c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001242:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <MX_I2C1_Init+0x78>)
 8001244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001248:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <MX_I2C1_Init+0x7c>)
 800124a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001254:	2201      	movs	r2, #1
 8001256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_I2C1_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001278:	f001 ff44 	bl	8003104 <HAL_I2C_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001282:	f000 fe23 	bl	8001ecc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001286:	2100      	movs	r1, #0
 8001288:	4809      	ldr	r0, [pc, #36]	; (80012b0 <MX_I2C1_Init+0x74>)
 800128a:	f002 fcbd 	bl	8003c08 <HAL_I2CEx_ConfigAnalogFilter>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001294:	f000 fe1a 	bl	8001ecc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001298:	2100      	movs	r1, #0
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_I2C1_Init+0x74>)
 800129c:	f002 fcff 	bl	8003c9e <HAL_I2CEx_ConfigDigitalFilter>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012a6:	f000 fe11 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200001fc 	.word	0x200001fc
 80012b4:	40005400 	.word	0x40005400
 80012b8:	10909cec 	.word	0x10909cec

080012bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0ac      	sub	sp, #176	; 0xb0
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2288      	movs	r2, #136	; 0x88
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f007 fa37 	bl	8008750 <memset>
  if(i2cHandle->Instance==I2C1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a21      	ldr	r2, [pc, #132]	; (800136c <HAL_I2C_MspInit+0xb0>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d13a      	bne.n	8001362 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012ec:	2340      	movs	r3, #64	; 0x40
 80012ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 fb81 	bl	8004a00 <HAL_RCCEx_PeriphCLKConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001304:	f000 fde2 	bl	8001ecc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_I2C_MspInit+0xb4>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130c:	4a18      	ldr	r2, [pc, #96]	; (8001370 <HAL_I2C_MspInit+0xb4>)
 800130e:	f043 0302 	orr.w	r3, r3, #2
 8001312:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <HAL_I2C_MspInit+0xb4>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001320:	23c0      	movs	r3, #192	; 0xc0
 8001322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001326:	2312      	movs	r3, #18
 8001328:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001338:	2304      	movs	r3, #4
 800133a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001342:	4619      	mov	r1, r3
 8001344:	480b      	ldr	r0, [pc, #44]	; (8001374 <HAL_I2C_MspInit+0xb8>)
 8001346:	f001 fceb 	bl	8002d20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_I2C_MspInit+0xb4>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_I2C_MspInit+0xb4>)
 8001350:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001354:	6593      	str	r3, [r2, #88]	; 0x58
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_I2C_MspInit+0xb4>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001362:	bf00      	nop
 8001364:	37b0      	adds	r7, #176	; 0xb0
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40005400 	.word	0x40005400
 8001370:	40021000 	.word	0x40021000
 8001374:	48000400 	.word	0x48000400

08001378 <lcd_cmd>:
#define ST7735S_GAMCTRP1		0xe0
#define ST7735S_GAMCTRN1		0xe1

//Sets DC and CS state for SPI cmd transmit
static void lcd_cmd(uint8_t cmd)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <lcd_cmd+0x44>)
 800138a:	f001 fe8b 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001394:	4809      	ldr	r0, [pc, #36]	; (80013bc <lcd_cmd+0x44>)
 8001396:	f001 fe85 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800139a:	1df9      	adds	r1, r7, #7
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	2201      	movs	r2, #1
 80013a2:	4807      	ldr	r0, [pc, #28]	; (80013c0 <lcd_cmd+0x48>)
 80013a4:	f004 f88b 	bl	80054be <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ae:	4803      	ldr	r0, [pc, #12]	; (80013bc <lcd_cmd+0x44>)
 80013b0:	f001 fe78 	bl	80030a4 <HAL_GPIO_WritePin>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	48000400 	.word	0x48000400
 80013c0:	2000a270 	.word	0x2000a270

080013c4 <lcd_data>:

//Sets DC and CS state for SPI data transmit
static void lcd_data(uint8_t data)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <lcd_data+0x44>)
 80013d6:	f001 fe65 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e0:	4809      	ldr	r0, [pc, #36]	; (8001408 <lcd_data+0x44>)
 80013e2:	f001 fe5f 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80013e6:	1df9      	adds	r1, r7, #7
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	2201      	movs	r2, #1
 80013ee:	4807      	ldr	r0, [pc, #28]	; (800140c <lcd_data+0x48>)
 80013f0:	f004 f865 	bl	80054be <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fa:	4803      	ldr	r0, [pc, #12]	; (8001408 <lcd_data+0x44>)
 80013fc:	f001 fe52 	bl	80030a4 <HAL_GPIO_WritePin>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	48000400 	.word	0x48000400
 800140c:	2000a270 	.word	0x2000a270

08001410 <lcd_send>:

#define CMD(x)				((x) | 0x100)

//Sends cmd or data to tft
static void lcd_send(uint16_t value)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
	if(value & 0x100) {
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <lcd_send+0x20>
		lcd_cmd(value);
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ffa5 	bl	8001378 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 800142e:	e004      	b.n	800143a <lcd_send+0x2a>
		lcd_data(value);
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ffc5 	bl	80013c4 <lcd_data>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <lcd_init>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

void lcd_init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
	int i;

	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	2104      	movs	r1, #4
 800144e:	4817      	ldr	r0, [pc, #92]	; (80014ac <lcd_init+0x68>)
 8001450:	f001 fe28 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001454:	2064      	movs	r0, #100	; 0x64
 8001456:	f001 f935 	bl	80026c4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800145a:	2201      	movs	r2, #1
 800145c:	2104      	movs	r1, #4
 800145e:	4813      	ldr	r0, [pc, #76]	; (80014ac <lcd_init+0x68>)
 8001460:	f001 fe20 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001464:	2064      	movs	r0, #100	; 0x64
 8001466:	f001 f92d 	bl	80026c4 <HAL_Delay>

	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	e009      	b.n	8001484 <lcd_init+0x40>
		lcd_send(init_table[i]);
 8001470:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <lcd_init+0x6c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ffc9 	bl	8001410 <lcd_send>
	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3301      	adds	r3, #1
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b4b      	cmp	r3, #75	; 0x4b
 8001488:	d9f2      	bls.n	8001470 <lcd_init+0x2c>
	}

	HAL_Delay(200);
 800148a:	20c8      	movs	r0, #200	; 0xc8
 800148c:	f001 f91a 	bl	80026c4 <HAL_Delay>
	lcd_cmd(ST7735S_SLPOUT);
 8001490:	2011      	movs	r0, #17
 8001492:	f7ff ff71 	bl	8001378 <lcd_cmd>
	HAL_Delay(120);
 8001496:	2078      	movs	r0, #120	; 0x78
 8001498:	f001 f914 	bl	80026c4 <HAL_Delay>

	lcd_cmd(ST7735S_DISPON);
 800149c:	2029      	movs	r0, #41	; 0x29
 800149e:	f7ff ff6b 	bl	8001378 <lcd_cmd>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	48000400 	.word	0x48000400
 80014b0:	0800b9d8 	.word	0x0800b9d8

080014b4 <lcd_data16>:



//Sends 16bits, 8 bits + 8 bits one by one
static void lcd_data16(uint16_t value)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff7c 	bl	80013c4 <lcd_data>
	lcd_data(value);
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff77 	bl	80013c4 <lcd_data>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <lcd_set_window>:
#define LCD_OFFSET_X  1
#define LCD_OFFSET_Y  2

//Caset sets starting and ending columns of the drawing area
static void lcd_set_window(int x, int y, int width, int height)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 80014ec:	202a      	movs	r0, #42	; 0x2a
 80014ee:	f7ff ff43 	bl	8001378 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ffda 	bl	80014b4 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	b29a      	uxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	b29b      	uxth	r3, r3
 8001508:	4413      	add	r3, r2
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ffd1 	bl	80014b4 <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 8001512:	202b      	movs	r0, #43	; 0x2b
 8001514:	f7ff ff30 	bl	8001378 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	b29b      	uxth	r3, r3
 800151c:	3302      	adds	r3, #2
 800151e:	b29b      	uxth	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ffc7 	bl	80014b4 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	b29a      	uxth	r2, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	4413      	add	r3, r2
 8001530:	b29b      	uxth	r3, r3
 8001532:	3301      	adds	r3, #1
 8001534:	b29b      	uxth	r3, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ffbc 	bl	80014b4 <lcd_data16>
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <lcd_put_pixel>:


static uint16_t frame_buffer[LCD_WIDTH*LCD_HEIGHT];

void lcd_put_pixel(int x, int y, uint16_t color)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	4613      	mov	r3, r2
 8001550:	80fb      	strh	r3, [r7, #6]
	frame_buffer[ x + y * LCD_WIDTH] = color;
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	015b      	lsls	r3, r3, #5
 800155c:	461a      	mov	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	4905      	ldr	r1, [pc, #20]	; (8001578 <lcd_put_pixel+0x34>)
 8001564:	88fa      	ldrh	r2, [r7, #6]
 8001566:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000250 	.word	0x20000250

0800157c <lcd_copy>:

void lcd_copy(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	22a0      	movs	r2, #160	; 0xa0
 8001584:	2100      	movs	r1, #0
 8001586:	2000      	movs	r0, #0
 8001588:	f7ff ffa9 	bl	80014de <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 800158c:	202c      	movs	r0, #44	; 0x2c
 800158e:	f7ff fef3 	bl	8001378 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001598:	4808      	ldr	r0, [pc, #32]	; (80015bc <lcd_copy+0x40>)
 800159a:	f001 fd83 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <lcd_copy+0x40>)
 80015a6:	f001 fd7d 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 80015aa:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80015ae:	4904      	ldr	r1, [pc, #16]	; (80015c0 <lcd_copy+0x44>)
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <lcd_copy+0x48>)
 80015b2:	f004 f8f9 	bl	80057a8 <HAL_SPI_Transmit_DMA>

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	48000400 	.word	0x48000400
 80015c0:	20000250 	.word	0x20000250
 80015c4:	2000a270 	.word	0x2000a270

080015c8 <lcd_transfer_done>:

void lcd_transfer_done(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d2:	4802      	ldr	r0, [pc, #8]	; (80015dc <lcd_transfer_done+0x14>)
 80015d4:	f001 fd66 	bl	80030a4 <HAL_GPIO_WritePin>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	48000400 	.word	0x48000400

080015e0 <lps_read_reg>:
#define TIMEOUT                 100

//Function responsible for:
//Reading data from lps25hb registers
static uint8_t lps_read_reg(uint8_t reg)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af04      	add	r7, sp, #16
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	2364      	movs	r3, #100	; 0x64
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	2301      	movs	r3, #1
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	f107 030f 	add.w	r3, r7, #15
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2301      	movs	r3, #1
 8001602:	21ba      	movs	r1, #186	; 0xba
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <lps_read_reg+0x34>)
 8001606:	f001 ff2d 	bl	8003464 <HAL_I2C_Mem_Read>

    return value;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200001fc 	.word	0x200001fc

08001618 <lps_write_reg>:

//Function responsible for:
//Writing data to lps25hb registers
static void lps_write_reg(uint8_t reg, uint8_t value)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af04      	add	r7, sp, #16
 800161e:	4603      	mov	r3, r0
 8001620:	460a      	mov	r2, r1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	4613      	mov	r3, r2
 8001626:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	b29a      	uxth	r2, r3
 800162c:	2364      	movs	r3, #100	; 0x64
 800162e:	9302      	str	r3, [sp, #8]
 8001630:	2301      	movs	r3, #1
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	1dbb      	adds	r3, r7, #6
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2301      	movs	r3, #1
 800163a:	21ba      	movs	r1, #186	; 0xba
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <lps_write_reg+0x34>)
 800163e:	f001 fdfd 	bl	800323c <HAL_I2C_Mem_Write>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200001fc 	.word	0x200001fc

08001650 <lps25hb_init>:

HAL_StatusTypeDef lps25hb_init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	if (lps_read_reg(LPS25HB_WHO_AM_I) != 0xbd)
 8001654:	200f      	movs	r0, #15
 8001656:	f7ff ffc3 	bl	80015e0 <lps_read_reg>
 800165a:	4603      	mov	r3, r0
 800165c:	2bbd      	cmp	r3, #189	; 0xbd
 800165e:	d001      	beq.n	8001664 <lps25hb_init+0x14>
		 return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e00c      	b.n	800167e <lps25hb_init+0x2e>

	lps_write_reg(LPS25HB_CTRL_REG1,  0xC0);
 8001664:	21c0      	movs	r1, #192	; 0xc0
 8001666:	2020      	movs	r0, #32
 8001668:	f7ff ffd6 	bl	8001618 <lps_write_reg>
	lps_write_reg(LPS25HB_CTRL_REG2,  0x40);
 800166c:	2140      	movs	r1, #64	; 0x40
 800166e:	2021      	movs	r0, #33	; 0x21
 8001670:	f7ff ffd2 	bl	8001618 <lps_write_reg>
	lps_write_reg(LPS25HB_FIFO_CTRL,  0xDF);
 8001674:	21df      	movs	r1, #223	; 0xdf
 8001676:	202e      	movs	r0, #46	; 0x2e
 8001678:	f7ff ffce 	bl	8001618 <lps_write_reg>

	return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <lps25hb_read_temp>:

float lps25hb_read_temp(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af04      	add	r7, sp, #16
     int16_t temp;

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, sizeof(temp), TIMEOUT) != HAL_OK)
 800168a:	2364      	movs	r3, #100	; 0x64
 800168c:	9302      	str	r3, [sp, #8]
 800168e:	2302      	movs	r3, #2
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	1dbb      	adds	r3, r7, #6
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2301      	movs	r3, #1
 8001698:	22ab      	movs	r2, #171	; 0xab
 800169a:	21ba      	movs	r1, #186	; 0xba
 800169c:	480d      	ldr	r0, [pc, #52]	; (80016d4 <lps25hb_read_temp+0x50>)
 800169e:	f001 fee1 	bl	8003464 <HAL_I2C_Mem_Read>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <lps25hb_read_temp+0x28>
         Error_Handler();
 80016a8:	f000 fc10 	bl	8001ecc <Error_Handler>

     return 42.5f + temp / 480.0f;
 80016ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b0:	ee07 3a90 	vmov	s15, r3
 80016b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80016d8 <lps25hb_read_temp+0x54>
 80016bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80016dc <lps25hb_read_temp+0x58>
 80016c4:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80016c8:	eeb0 0a67 	vmov.f32	s0, s15
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001fc 	.word	0x200001fc
 80016d8:	43f00000 	.word	0x43f00000
 80016dc:	422a0000 	.word	0x422a0000

080016e0 <lps25hb_read_pressure>:

float lps25hb_read_pressure(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af04      	add	r7, sp, #16
     int32_t pressure = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_PRESS_OUT_XL | 0x80, 1, (int8_t*)&pressure, 3, TIMEOUT) != HAL_OK)
 80016ea:	2364      	movs	r3, #100	; 0x64
 80016ec:	9302      	str	r3, [sp, #8]
 80016ee:	2303      	movs	r3, #3
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2301      	movs	r3, #1
 80016f8:	22a8      	movs	r2, #168	; 0xa8
 80016fa:	21ba      	movs	r1, #186	; 0xba
 80016fc:	480b      	ldr	r0, [pc, #44]	; (800172c <lps25hb_read_pressure+0x4c>)
 80016fe:	f001 feb1 	bl	8003464 <HAL_I2C_Mem_Read>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <lps25hb_read_pressure+0x2c>
         Error_Handler();
 8001708:	f000 fbe0 	bl	8001ecc <Error_Handler>

     return pressure / 4096.0f;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001716:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001730 <lps25hb_read_pressure+0x50>
 800171a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800171e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001722:	eeb0 0a67 	vmov.f32	s0, s15
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200001fc 	.word	0x200001fc
 8001730:	45800000 	.word	0x45800000

08001734 <heightDiff>:

volatile float minimum_h = 0;
volatile float maximum_h = 0;

float heightDiff(float h)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(h < minimum_h) {
 800173e:	4b14      	ldr	r3, [pc, #80]	; (8001790 <heightDiff+0x5c>)
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	ed97 7a01 	vldr	s14, [r7, #4]
 8001748:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800174c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001750:	d502      	bpl.n	8001758 <heightDiff+0x24>
		minimum_h = h;
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <heightDiff+0x5c>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6013      	str	r3, [r2, #0]
	}

	if(h > maximum_h) {
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <heightDiff+0x60>)
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001762:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	dd02      	ble.n	8001772 <heightDiff+0x3e>
		maximum_h = h;
 800176c:	4a09      	ldr	r2, [pc, #36]	; (8001794 <heightDiff+0x60>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
	}

	return maximum_h - minimum_h;
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <heightDiff+0x60>)
 8001774:	ed93 7a00 	vldr	s14, [r3]
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <heightDiff+0x5c>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001782:	eeb0 0a67 	vmov.f32	s0, s15
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	2000a250 	.word	0x2000a250
 8001794:	2000a254 	.word	0x2000a254

08001798 <__io_putchar>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
int __io_putchar(int ch)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	if(ch == '\n') {
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b0a      	cmp	r3, #10
 80017a4:	d102      	bne.n	80017ac <__io_putchar+0x14>
		__io_putchar('\r');
 80017a6:	200d      	movs	r0, #13
 80017a8:	f7ff fff6 	bl	8001798 <__io_putchar>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80017ac:	1d39      	adds	r1, r7, #4
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	2201      	movs	r2, #1
 80017b4:	4803      	ldr	r0, [pc, #12]	; (80017c4 <__io_putchar+0x2c>)
 80017b6:	f004 fe61 	bl	800647c <HAL_UART_Transmit>

	return 1;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000a3b8 	.word	0x2000a3b8

080017c8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_SPI_TxCpltCallback+0x1c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d101      	bne.n	80017dc <HAL_SPI_TxCpltCallback+0x14>
		{
			lcd_transfer_done();
 80017d8:	f7ff fef6 	bl	80015c8 <lcd_transfer_done>
		}
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	2000a270 	.word	0x2000a270

080017e8 <HAL_TIM_PeriodElapsedCallback>:
volatile uint32_t timer_seconds = 0;
volatile uint32_t old_time = 0;
volatile uint32_t current_time = 0;
volatile uint32_t period = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	if(htim == &htim6) {
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d108      	bne.n	800180a <HAL_TIM_PeriodElapsedCallback+0x22>
		current_time = 0;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
		old_time = 0;
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
		period = 0;
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
	}
	if(htim == &htim7){
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d104      	bne.n	800181c <HAL_TIM_PeriodElapsedCallback+0x34>
			timer_seconds++;
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800181a:	6013      	str	r3, [r2, #0]
		}
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	2000a320 	.word	0x2000a320
 800182c:	2000a260 	.word	0x2000a260
 8001830:	2000a25c 	.word	0x2000a25c
 8001834:	2000a264 	.word	0x2000a264
 8001838:	2000a36c 	.word	0x2000a36c
 800183c:	2000a258 	.word	0x2000a258

08001840 <HAL_GPIO_EXTI_Callback>:
volatile uint32_t hallCounter = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == HALL_SENSOR_Pin) {
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001850:	d118      	bne.n	8001884 <HAL_GPIO_EXTI_Callback+0x44>
		//Save time
		current_time = HAL_GetTick();
 8001852:	f000 ff2b 	bl	80026ac <HAL_GetTick>
 8001856:	4603      	mov	r3, r0
 8001858:	4a0c      	ldr	r2, [pc, #48]	; (800188c <HAL_GPIO_EXTI_Callback+0x4c>)
 800185a:	6013      	str	r3, [r2, #0]
		//Count the period
		period = current_time - old_time;
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_GPIO_EXTI_Callback+0x4c>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_GPIO_EXTI_Callback+0x50>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <HAL_GPIO_EXTI_Callback+0x54>)
 8001868:	6013      	str	r3, [r2, #0]
		old_time = current_time;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_GPIO_EXTI_Callback+0x4c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <HAL_GPIO_EXTI_Callback+0x50>)
 8001870:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_GPIO_EXTI_Callback+0x58>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
		hallCounter++;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_GPIO_EXTI_Callback+0x5c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	4a06      	ldr	r2, [pc, #24]	; (800189c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001882:	6013      	str	r3, [r2, #0]
	}
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000a260 	.word	0x2000a260
 8001890:	2000a25c 	.word	0x2000a25c
 8001894:	2000a264 	.word	0x2000a264
 8001898:	2000a320 	.word	0x2000a320
 800189c:	2000a268 	.word	0x2000a268

080018a0 <convert_time>:

void convert_time(uint32_t timer_seconds, uint32_t *hours, uint32_t *minutes, uint32_t *seconds)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
	*seconds = timer_seconds % 60;
 80018ae:	68f9      	ldr	r1, [r7, #12]
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <convert_time+0x74>)
 80018b2:	fba3 2301 	umull	r2, r3, r3, r1
 80018b6:	095a      	lsrs	r2, r3, #5
 80018b8:	4613      	mov	r3, r2
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	1a9b      	subs	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	1aca      	subs	r2, r1, r3
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	601a      	str	r2, [r3, #0]
	*minutes = (timer_seconds/60) % 60;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4a12      	ldr	r2, [pc, #72]	; (8001914 <convert_time+0x74>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	0959      	lsrs	r1, r3, #5
 80018d0:	4b10      	ldr	r3, [pc, #64]	; (8001914 <convert_time+0x74>)
 80018d2:	fba3 2301 	umull	r2, r3, r3, r1
 80018d6:	095a      	lsrs	r2, r3, #5
 80018d8:	4613      	mov	r3, r2
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	1aca      	subs	r2, r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	601a      	str	r2, [r3, #0]
	*hours = (timer_seconds/3600) % 24;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <convert_time+0x78>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	0ad9      	lsrs	r1, r3, #11
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <convert_time+0x7c>)
 80018f2:	fba3 2301 	umull	r2, r3, r3, r1
 80018f6:	091a      	lsrs	r2, r3, #4
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	1aca      	subs	r2, r1, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	601a      	str	r2, [r3, #0]
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	88888889 	.word	0x88888889
 8001918:	91a2b3c5 	.word	0x91a2b3c5
 800191c:	aaaaaaab 	.word	0xaaaaaaab

08001920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001926:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001928:	f000 fe57 	bl	80025da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192c:	f000 fa7c 	bl	8001e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001930:	f7ff fb26 	bl	8000f80 <MX_GPIO_Init>
  MX_DMA_Init();
 8001934:	f7ff fb06 	bl	8000f44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001938:	f000 fd9a 	bl	8002470 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800193c:	f000 fce6 	bl	800230c <MX_TIM6_Init>
  MX_I2C1_Init();
 8001940:	f7ff fc7c 	bl	800123c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001944:	f000 fac8 	bl	8001ed8 <MX_SPI2_Init>
  MX_TIM7_Init();
 8001948:	f000 fd18 	bl	800237c <MX_TIM7_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim6);
 800194c:	48d4      	ldr	r0, [pc, #848]	; (8001ca0 <main+0x380>)
 800194e:	f004 fa6d 	bl	8005e2c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001952:	48d4      	ldr	r0, [pc, #848]	; (8001ca4 <main+0x384>)
 8001954:	f004 fa6a 	bl	8005e2c <HAL_TIM_Base_Start_IT>
  lps25hb_init();
 8001958:	f7ff fe7a 	bl	8001650 <lps25hb_init>
  lcd_init();
 800195c:	f7ff fd72 	bl	8001444 <lcd_init>
  //Variables
  uint8_t counter1 = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
  uint8_t counter2 = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
  uint8_t counter3 = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
  uint8_t whichButton = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	f887 31f4 	strb.w	r3, [r7, #500]	; 0x1f4
  uint32_t hours,minutes,seconds;
  float distance = 0;
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  float heightDifference = 0;
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  float h = 0;
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
  float p0 = lps25hb_read_pressure();
 8001990:	f7ff fea6 	bl	80016e0 <lps25hb_read_pressure>
 8001994:	ed87 0a79 	vstr	s0, [r7, #484]	; 0x1e4

  while (1)
  {

	float temp = lps25hb_read_temp() + 273.15;
 8001998:	f7ff fe74 	bl	8001684 <lps25hb_read_temp>
 800199c:	ee10 3a10 	vmov	r3, s0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fdd1 	bl	8000548 <__aeabi_f2d>
 80019a6:	a3ba      	add	r3, pc, #744	; (adr r3, 8001c90 <main+0x370>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe fc6e 	bl	800028c <__adddf3>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f7ff f8f6 	bl	8000ba8 <__aeabi_d2f>
 80019bc:	4603      	mov	r3, r0
 80019be:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	float p = lps25hb_read_pressure();
 80019c2:	f7ff fe8d 	bl	80016e0 <lps25hb_read_pressure>
 80019c6:	ed87 0a77 	vstr	s0, [r7, #476]	; 0x1dc
	float temperature_C = lps25hb_read_temp();
 80019ca:	f7ff fe5b 	bl	8001684 <lps25hb_read_temp>
 80019ce:	ed87 0a76 	vstr	s0, [r7, #472]	; 0x1d8
	wheelSize = counter3;
 80019d2:	4ab5      	ldr	r2, [pc, #724]	; (8001ca8 <main+0x388>)
 80019d4:	f897 31f5 	ldrb.w	r3, [r7, #501]	; 0x1f5
 80019d8:	7013      	strb	r3, [r2, #0]
	speed = speedValue(period, wheelSize);
 80019da:	4bb4      	ldr	r3, [pc, #720]	; (8001cac <main+0x38c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4ab2      	ldr	r2, [pc, #712]	; (8001ca8 <main+0x388>)
 80019e0:	7812      	ldrb	r2, [r2, #0]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fb4f 	bl	8001088 <speedValue>
 80019ea:	eef0 7a40 	vmov.f32	s15, s0
 80019ee:	4bb0      	ldr	r3, [pc, #704]	; (8001cb0 <main+0x390>)
 80019f0:	edc3 7a00 	vstr	s15, [r3]


	//DISPLAY PART

	hagl_clear_screen();
 80019f4:	f006 f834 	bl	8007a60 <hagl_clear_screen>
	wchar_t timer_display[16];
	wchar_t distance_display[16];
	wchar_t heightDiff_display[16];
	wchar_t wheelSize_display[16];

	swprintf(heightDiff_display, 16, L"%d m", (uint16_t)heightDifference);
 80019f8:	edd7 7a7b 	vldr	s15, [r7, #492]	; 0x1ec
 80019fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a00:	ee17 3a90 	vmov	r3, s15
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8001a0a:	4aaa      	ldr	r2, [pc, #680]	; (8001cb4 <main+0x394>)
 8001a0c:	2110      	movs	r1, #16
 8001a0e:	f006 fe6b 	bl	80086e8 <swprintf>
	swprintf(temperature_display,16,L"%d°C", (uint8_t)temperature_C);
 8001a12:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8001a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a1a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a1e:	793b      	ldrb	r3, [r7, #4]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8001a26:	4aa4      	ldr	r2, [pc, #656]	; (8001cb8 <main+0x398>)
 8001a28:	2110      	movs	r1, #16
 8001a2a:	f006 fe5d 	bl	80086e8 <swprintf>
	swprintf(h_display,16, L"%.2f m", h);
 8001a2e:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8001a32:	f7fe fd89 	bl	8000548 <__aeabi_f2d>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001a3e:	e9cd 2300 	strd	r2, r3, [sp]
 8001a42:	4a9e      	ldr	r2, [pc, #632]	; (8001cbc <main+0x39c>)
 8001a44:	2110      	movs	r1, #16
 8001a46:	f006 fe4f 	bl	80086e8 <swprintf>
	swprintf(speed_display,16, L"%.2f km/h", speed);
 8001a4a:	4b99      	ldr	r3, [pc, #612]	; (8001cb0 <main+0x390>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd7a 	bl	8000548 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	f107 000c 	add.w	r0, r7, #12
 8001a5c:	e9cd 2300 	strd	r2, r3, [sp]
 8001a60:	4a97      	ldr	r2, [pc, #604]	; (8001cc0 <main+0x3a0>)
 8001a62:	2110      	movs	r1, #16
 8001a64:	f006 fe40 	bl	80086e8 <swprintf>
	swprintf(timer_display,16, L"%02lu:%02lu:%02lu", hours,minutes,seconds);
 8001a68:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 8001a6c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a70:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8001a74:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8001a78:	9201      	str	r2, [sp, #4]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4a91      	ldr	r2, [pc, #580]	; (8001cc4 <main+0x3a4>)
 8001a80:	2110      	movs	r1, #16
 8001a82:	f006 fe31 	bl	80086e8 <swprintf>
	swprintf(distance_display,16,L"%.2f km",(float)distance);
 8001a86:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 8001a8a:	f7fe fd5d 	bl	8000548 <__aeabi_f2d>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8001a96:	e9cd 2300 	strd	r2, r3, [sp]
 8001a9a:	4a8b      	ldr	r2, [pc, #556]	; (8001cc8 <main+0x3a8>)
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	f006 fe23 	bl	80086e8 <swprintf>
	swprintf(wheelSize_display,16,L"%Wheel Size: %d \n  (inch)", wheelSize);
 8001aa2:	4b81      	ldr	r3, [pc, #516]	; (8001ca8 <main+0x388>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	f507 70c6 	add.w	r0, r7, #396	; 0x18c
 8001aaa:	4a88      	ldr	r2, [pc, #544]	; (8001ccc <main+0x3ac>)
 8001aac:	2110      	movs	r1, #16
 8001aae:	f006 fe1b 	bl	80086e8 <swprintf>




	//BUTTON PART
	 if(HAL_GPIO_ReadPin(L_BUTTON_GPIO_Port, L_BUTTON_Pin) == GPIO_PIN_RESET) {
 8001ab2:	2120      	movs	r1, #32
 8001ab4:	4886      	ldr	r0, [pc, #536]	; (8001cd0 <main+0x3b0>)
 8001ab6:	f001 fadd 	bl	8003074 <HAL_GPIO_ReadPin>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d119      	bne.n	8001af4 <main+0x1d4>
		 counter1++;
 8001ac0:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
		 whichButton = 1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f887 31f4 	strb.w	r3, [r7, #500]	; 0x1f4
		 timer_seconds = 0;
 8001ad0:	4b80      	ldr	r3, [pc, #512]	; (8001cd4 <main+0x3b4>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
		 if(counter1 > 4){
 8001ad6:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d902      	bls.n	8001ae4 <main+0x1c4>
			 counter1 = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
		 }
		 while(HAL_GPIO_ReadPin(L_BUTTON_GPIO_Port,L_BUTTON_Pin) == GPIO_PIN_RESET);
 8001ae4:	bf00      	nop
 8001ae6:	2120      	movs	r1, #32
 8001ae8:	4879      	ldr	r0, [pc, #484]	; (8001cd0 <main+0x3b0>)
 8001aea:	f001 fac3 	bl	8003074 <HAL_GPIO_ReadPin>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f8      	beq.n	8001ae6 <main+0x1c6>
	 }
	 if(HAL_GPIO_ReadPin(M_BUTTON_GPIO_Port, M_BUTTON_Pin) == GPIO_PIN_RESET) {
 8001af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afc:	f001 faba 	bl	8003074 <HAL_GPIO_ReadPin>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d118      	bne.n	8001b38 <main+0x218>
		 counter2++;
 8001b06:	f897 31f6 	ldrb.w	r3, [r7, #502]	; 0x1f6
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
		 whichButton = 2;
 8001b10:	2302      	movs	r3, #2
 8001b12:	f887 31f4 	strb.w	r3, [r7, #500]	; 0x1f4
		 if(counter2 > 2) {
 8001b16:	f897 31f6 	ldrb.w	r3, [r7, #502]	; 0x1f6
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d902      	bls.n	8001b24 <main+0x204>
			 counter2 = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
		 }
		 while(HAL_GPIO_ReadPin(M_BUTTON_GPIO_Port,M_BUTTON_Pin) == GPIO_PIN_RESET);
 8001b24:	bf00      	nop
 8001b26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2e:	f001 faa1 	bl	8003074 <HAL_GPIO_ReadPin>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f6      	beq.n	8001b26 <main+0x206>
	 }
	 if(HAL_GPIO_ReadPin(R_BUTTON_GPIO_Port, R_BUTTON_Pin) == GPIO_PIN_RESET) {
 8001b38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b40:	f001 fa98 	bl	8003074 <HAL_GPIO_ReadPin>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d115      	bne.n	8001b76 <main+0x256>
		 counter3++;
 8001b4a:	f897 31f5 	ldrb.w	r3, [r7, #501]	; 0x1f5
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
		 if(counter3 > 30){
 8001b54:	f897 31f5 	ldrb.w	r3, [r7, #501]	; 0x1f5
 8001b58:	2b1e      	cmp	r3, #30
 8001b5a:	d902      	bls.n	8001b62 <main+0x242>
			 counter3 = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
		 }
		 while(HAL_GPIO_ReadPin(R_BUTTON_GPIO_Port,R_BUTTON_Pin) == GPIO_PIN_RESET);
 8001b62:	bf00      	nop
 8001b64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6c:	f001 fa82 	bl	8003074 <HAL_GPIO_ReadPin>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f6      	beq.n	8001b64 <main+0x244>
	 }

	 //INTERFACE PART
	 switch(whichButton) {
 8001b76:	f897 31f4 	ldrb.w	r3, [r7, #500]	; 0x1f4
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d003      	beq.n	8001b86 <main+0x266>
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	f000 8104 	beq.w	8001d8c <main+0x46c>
 8001b84:	e12d      	b.n	8001de2 <main+0x4c2>
	 //1.Trip mode
	 case 1:
		 	if(counter1 == 1){
 8001b86:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d10b      	bne.n	8001ba6 <main+0x286>
		 		hagl_put_text(L"   Press again \n  to start trip",0,45,WHITE,font9x18B_KOI8_R);
 8001b8e:	4b52      	ldr	r3, [pc, #328]	; (8001cd8 <main+0x3b8>)
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b96:	222d      	movs	r2, #45	; 0x2d
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4850      	ldr	r0, [pc, #320]	; (8001cdc <main+0x3bc>)
 8001b9c:	f005 fed8 	bl	8007950 <hagl_put_text>
		 		lcd_copy();
 8001ba0:	f7ff fcec 	bl	800157c <lcd_copy>
		 	}
		 	else if(counter1 == 4) {
		 		whichButton = 0;
		 		hallCounter = 0;
		 	}
			break;
 8001ba4:	e129      	b.n	8001dfa <main+0x4da>
		 	else if(counter1 == 2){
 8001ba6:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	f040 809a 	bne.w	8001ce4 <main+0x3c4>
				distance = distanceCovered(hallCounter, 28);
 8001bb0:	4b4b      	ldr	r3, [pc, #300]	; (8001ce0 <main+0x3c0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	211c      	movs	r1, #28
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff faee 	bl	8001198 <distanceCovered>
 8001bbc:	ed87 0a7c 	vstr	s0, [r7, #496]	; 0x1f0
				convert_time(timer_seconds, &hours, &minutes, &seconds);
 8001bc0:	4b44      	ldr	r3, [pc, #272]	; (8001cd4 <main+0x3b4>)
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001bc8:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8001bcc:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 8001bd0:	f7ff fe66 	bl	80018a0 <convert_time>
				h = -29.271769 * temp * log(p / p0);
 8001bd4:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 8001bd8:	f7fe fcb6 	bl	8000548 <__aeabi_f2d>
 8001bdc:	a32e      	add	r3, pc, #184	; (adr r3, 8001c98 <main+0x378>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	f7fe fd09 	bl	80005f8 <__aeabi_dmul>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4614      	mov	r4, r2
 8001bec:	461d      	mov	r5, r3
 8001bee:	ed97 7a77 	vldr	s14, [r7, #476]	; 0x1dc
 8001bf2:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
 8001bf6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bfa:	ee16 0a90 	vmov	r0, s13
 8001bfe:	f7fe fca3 	bl	8000548 <__aeabi_f2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	ec43 2b10 	vmov	d0, r2, r3
 8001c0a:	f009 fb39 	bl	800b280 <log>
 8001c0e:	ec53 2b10 	vmov	r2, r3, d0
 8001c12:	4620      	mov	r0, r4
 8001c14:	4629      	mov	r1, r5
 8001c16:	f7fe fcef 	bl	80005f8 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7fe ffc1 	bl	8000ba8 <__aeabi_d2f>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
				heightDifference = heightDiff(h);
 8001c2c:	ed97 0a7a 	vldr	s0, [r7, #488]	; 0x1e8
 8001c30:	f7ff fd80 	bl	8001734 <heightDiff>
 8001c34:	ed87 0a7b 	vstr	s0, [r7, #492]	; 0x1ec
				hagl_put_text(speed_display,40,55,WHITE, font9x18B_KOI8_R);
 8001c38:	f107 000c 	add.w	r0, r7, #12
 8001c3c:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <main+0x3b8>)
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c44:	2237      	movs	r2, #55	; 0x37
 8001c46:	2128      	movs	r1, #40	; 0x28
 8001c48:	f005 fe82 	bl	8007950 <hagl_put_text>
				hagl_put_text(distance_display,40,25,WHITE,font9x18B_KOI8_R);
 8001c4c:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <main+0x3b8>)
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c58:	2219      	movs	r2, #25
 8001c5a:	2128      	movs	r1, #40	; 0x28
 8001c5c:	f005 fe78 	bl	8007950 <hagl_put_text>
				hagl_put_text(temperature_display, 0, 0, WHITE, font9x18B_KOI8_R);
 8001c60:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <main+0x3b8>)
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	f005 fe6e 	bl	8007950 <hagl_put_text>
				hagl_put_text(timer_display,40,85,WHITE,font9x18B_KOI8_R);
 8001c74:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <main+0x3b8>)
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c80:	2255      	movs	r2, #85	; 0x55
 8001c82:	2128      	movs	r1, #40	; 0x28
 8001c84:	f005 fe64 	bl	8007950 <hagl_put_text>
				lcd_copy();
 8001c88:	f7ff fc78 	bl	800157c <lcd_copy>
			break;
 8001c8c:	e0b5      	b.n	8001dfa <main+0x4da>
 8001c8e:	bf00      	nop
 8001c90:	66666666 	.word	0x66666666
 8001c94:	40711266 	.word	0x40711266
 8001c98:	a737110e 	.word	0xa737110e
 8001c9c:	c03d4592 	.word	0xc03d4592
 8001ca0:	2000a320 	.word	0x2000a320
 8001ca4:	2000a36c 	.word	0x2000a36c
 8001ca8:	2000a26c 	.word	0x2000a26c
 8001cac:	2000a264 	.word	0x2000a264
 8001cb0:	200001f8 	.word	0x200001f8
 8001cb4:	0800b6a0 	.word	0x0800b6a0
 8001cb8:	0800b6b4 	.word	0x0800b6b4
 8001cbc:	0800b6c8 	.word	0x0800b6c8
 8001cc0:	0800b6e4 	.word	0x0800b6e4
 8001cc4:	0800b70c 	.word	0x0800b70c
 8001cc8:	0800b754 	.word	0x0800b754
 8001ccc:	0800b774 	.word	0x0800b774
 8001cd0:	48000800 	.word	0x48000800
 8001cd4:	2000a258 	.word	0x2000a258
 8001cd8:	0800ba70 	.word	0x0800ba70
 8001cdc:	0800b7dc 	.word	0x0800b7dc
 8001ce0:	2000a268 	.word	0x2000a268
		 	else if(counter1 == 3){
 8001ce4:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d144      	bne.n	8001d76 <main+0x456>
		 		hagl_put_text(L"Trip finished!",0,0,WHITE,font9x18B_KOI8_R);
 8001cec:	4b45      	ldr	r3, [pc, #276]	; (8001e04 <main+0x4e4>)
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4843      	ldr	r0, [pc, #268]	; (8001e08 <main+0x4e8>)
 8001cfa:	f005 fe29 	bl	8007950 <hagl_put_text>
		 		hagl_put_text(L"Dist: ",0,25,WHITE,font9x18B_KOI8_R);
 8001cfe:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <main+0x4e4>)
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d06:	2219      	movs	r2, #25
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4840      	ldr	r0, [pc, #256]	; (8001e0c <main+0x4ec>)
 8001d0c:	f005 fe20 	bl	8007950 <hagl_put_text>
		 		hagl_put_text(distance_display,70,25,WHITE,font9x18B_KOI8_R);
 8001d10:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8001d14:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <main+0x4e4>)
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d1c:	2219      	movs	r2, #25
 8001d1e:	2146      	movs	r1, #70	; 0x46
 8001d20:	f005 fe16 	bl	8007950 <hagl_put_text>
		 		hagl_put_text(L"Time: ",0,45,WHITE,font9x18B_KOI8_R);
 8001d24:	4b37      	ldr	r3, [pc, #220]	; (8001e04 <main+0x4e4>)
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d2c:	222d      	movs	r2, #45	; 0x2d
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4837      	ldr	r0, [pc, #220]	; (8001e10 <main+0x4f0>)
 8001d32:	f005 fe0d 	bl	8007950 <hagl_put_text>
		 		hagl_put_text(timer_display,60,45,WHITE,font9x18B_KOI8_R);
 8001d36:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8001d3a:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <main+0x4e4>)
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d42:	222d      	movs	r2, #45	; 0x2d
 8001d44:	213c      	movs	r1, #60	; 0x3c
 8001d46:	f005 fe03 	bl	8007950 <hagl_put_text>
		 		hagl_put_text(L"H diff: ",0,65,WHITE,font9x18B_KOI8_R);
 8001d4a:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <main+0x4e4>)
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d52:	2241      	movs	r2, #65	; 0x41
 8001d54:	2100      	movs	r1, #0
 8001d56:	482f      	ldr	r0, [pc, #188]	; (8001e14 <main+0x4f4>)
 8001d58:	f005 fdfa 	bl	8007950 <hagl_put_text>
		 		hagl_put_text(heightDiff_display, 100,65,WHITE,font9x18B_KOI8_R);
 8001d5c:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8001d60:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <main+0x4e4>)
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d68:	2241      	movs	r2, #65	; 0x41
 8001d6a:	2164      	movs	r1, #100	; 0x64
 8001d6c:	f005 fdf0 	bl	8007950 <hagl_put_text>
		 		lcd_copy();
 8001d70:	f7ff fc04 	bl	800157c <lcd_copy>
			break;
 8001d74:	e041      	b.n	8001dfa <main+0x4da>
		 	else if(counter1 == 4) {
 8001d76:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d13d      	bne.n	8001dfa <main+0x4da>
		 		whichButton = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f887 31f4 	strb.w	r3, [r7, #500]	; 0x1f4
		 		hallCounter = 0;
 8001d84:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <main+0x4f8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
			break;
 8001d8a:	e036      	b.n	8001dfa <main+0x4da>
	//2. Wheel size config mode
	 case 2:
		 	if(counter2 == 1) {
 8001d8c:	f897 31f6 	ldrb.w	r3, [r7, #502]	; 0x1f6
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d11e      	bne.n	8001dd2 <main+0x4b2>
				hagl_put_text(wheelSize_display, 0,40,WHITE,font9x18B_KOI8_R);
 8001d94:	f507 70c6 	add.w	r0, r7, #396	; 0x18c
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <main+0x4e4>)
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da0:	2228      	movs	r2, #40	; 0x28
 8001da2:	2100      	movs	r1, #0
 8001da4:	f005 fdd4 	bl	8007950 <hagl_put_text>
				hagl_put_text(L"2.Accept",0,60,WHITE,font9x18B_KOI8_R);
 8001da8:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <main+0x4e4>)
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db0:	223c      	movs	r2, #60	; 0x3c
 8001db2:	2100      	movs	r1, #0
 8001db4:	4819      	ldr	r0, [pc, #100]	; (8001e1c <main+0x4fc>)
 8001db6:	f005 fdcb 	bl	8007950 <hagl_put_text>
				hagl_put_text(L"3.Change size ",0,80,WHITE,font9x18B_KOI8_R);
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <main+0x4e4>)
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc2:	2250      	movs	r2, #80	; 0x50
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4816      	ldr	r0, [pc, #88]	; (8001e20 <main+0x500>)
 8001dc8:	f005 fdc2 	bl	8007950 <hagl_put_text>
				lcd_copy();
 8001dcc:	f7ff fbd6 	bl	800157c <lcd_copy>
		 	}
		 	else if(counter2 == 2) {
		 		whichButton = 0;
		 	}
		 	break;
 8001dd0:	e015      	b.n	8001dfe <main+0x4de>
		 	else if(counter2 == 2) {
 8001dd2:	f897 31f6 	ldrb.w	r3, [r7, #502]	; 0x1f6
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d111      	bne.n	8001dfe <main+0x4de>
		 		whichButton = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f887 31f4 	strb.w	r3, [r7, #500]	; 0x1f4
		 	break;
 8001de0:	e00d      	b.n	8001dfe <main+0x4de>
	//Default - menu
	 default:
		 	hagl_put_text(L"Mode:\n 1.Trip mode\n 2.Wheel size",10,25,WHITE,font9x18B_KOI8_R);
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <main+0x4e4>)
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dea:	2219      	movs	r2, #25
 8001dec:	210a      	movs	r1, #10
 8001dee:	480d      	ldr	r0, [pc, #52]	; (8001e24 <main+0x504>)
 8001df0:	f005 fdae 	bl	8007950 <hagl_put_text>
		 	lcd_copy();
 8001df4:	f7ff fbc2 	bl	800157c <lcd_copy>
			break;
 8001df8:	e002      	b.n	8001e00 <main+0x4e0>
			break;
 8001dfa:	bf00      	nop
 8001dfc:	e5cc      	b.n	8001998 <main+0x78>
		 	break;
 8001dfe:	bf00      	nop
  {
 8001e00:	e5ca      	b.n	8001998 <main+0x78>
 8001e02:	bf00      	nop
 8001e04:	0800ba70 	.word	0x0800ba70
 8001e08:	0800b85c 	.word	0x0800b85c
 8001e0c:	0800b898 	.word	0x0800b898
 8001e10:	0800b8b4 	.word	0x0800b8b4
 8001e14:	0800b8d0 	.word	0x0800b8d0
 8001e18:	2000a268 	.word	0x2000a268
 8001e1c:	0800b8f4 	.word	0x0800b8f4
 8001e20:	0800b918 	.word	0x0800b918
 8001e24:	0800b954 	.word	0x0800b954

08001e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b096      	sub	sp, #88	; 0x58
 8001e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	2244      	movs	r2, #68	; 0x44
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f006 fc8a 	bl	8008750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e3c:	463b      	mov	r3, r7
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e4e:	f001 ff81 	bl	8003d54 <HAL_PWREx_ControlVoltageScaling>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001e58:	f000 f838 	bl	8001ecc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e60:	2301      	movs	r3, #1
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001e68:	2360      	movs	r3, #96	; 0x60
 8001e6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001e70:	2301      	movs	r3, #1
 8001e72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e74:	2301      	movs	r3, #1
 8001e76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001e78:	2328      	movs	r3, #40	; 0x28
 8001e7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001e7c:	2307      	movs	r3, #7
 8001e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e80:	2302      	movs	r3, #2
 8001e82:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e84:	2302      	movs	r3, #2
 8001e86:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f001 ffb7 	bl	8003e00 <HAL_RCC_OscConfig>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001e98:	f000 f818 	bl	8001ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 fb7f 	bl	80045b8 <HAL_RCC_ClockConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ec0:	f000 f804 	bl	8001ecc <Error_Handler>
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3758      	adds	r7, #88	; 0x58
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <Error_Handler+0x8>
	...

08001ed8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <MX_SPI2_Init+0x74>)
 8001ede:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <MX_SPI2_Init+0x78>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <MX_SPI2_Init+0x74>)
 8001ee4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ee8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <MX_SPI2_Init+0x74>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ef0:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <MX_SPI2_Init+0x74>)
 8001ef2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ef6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <MX_SPI2_Init+0x74>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <MX_SPI2_Init+0x74>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <MX_SPI2_Init+0x74>)
 8001f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f0a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <MX_SPI2_Init+0x74>)
 8001f0e:	2210      	movs	r2, #16
 8001f10:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <MX_SPI2_Init+0x74>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <MX_SPI2_Init+0x74>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <MX_SPI2_Init+0x74>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <MX_SPI2_Init+0x74>)
 8001f26:	2207      	movs	r2, #7
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <MX_SPI2_Init+0x74>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <MX_SPI2_Init+0x74>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f36:	4805      	ldr	r0, [pc, #20]	; (8001f4c <MX_SPI2_Init+0x74>)
 8001f38:	f003 fa1e 	bl	8005378 <HAL_SPI_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001f42:	f7ff ffc3 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000a270 	.word	0x2000a270
 8001f50:	40003800 	.word	0x40003800

08001f54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a3a      	ldr	r2, [pc, #232]	; (800205c <HAL_SPI_MspInit+0x108>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d16d      	bne.n	8002052 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f76:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	4a39      	ldr	r2, [pc, #228]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f80:	6593      	str	r3, [r2, #88]	; 0x58
 8001f82:	4b37      	ldr	r3, [pc, #220]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	4a33      	ldr	r2, [pc, #204]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9a:	4b31      	ldr	r3, [pc, #196]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	4a2d      	ldr	r2, [pc, #180]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb2:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fce:	2305      	movs	r3, #5
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4822      	ldr	r0, [pc, #136]	; (8002064 <HAL_SPI_MspInit+0x110>)
 8001fda:	f000 fea1 	bl	8002d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ff0:	2305      	movs	r3, #5
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	481b      	ldr	r0, [pc, #108]	; (8002068 <HAL_SPI_MspInit+0x114>)
 8001ffc:	f000 fe90 	bl	8002d20 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <HAL_SPI_MspInit+0x118>)
 8002002:	4a1b      	ldr	r2, [pc, #108]	; (8002070 <HAL_SPI_MspInit+0x11c>)
 8002004:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_SPI_MspInit+0x118>)
 8002008:	2201      	movs	r2, #1
 800200a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800200c:	4b17      	ldr	r3, [pc, #92]	; (800206c <HAL_SPI_MspInit+0x118>)
 800200e:	2210      	movs	r2, #16
 8002010:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_SPI_MspInit+0x118>)
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <HAL_SPI_MspInit+0x118>)
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <HAL_SPI_MspInit+0x118>)
 8002020:	2200      	movs	r2, #0
 8002022:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_SPI_MspInit+0x118>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_SPI_MspInit+0x118>)
 800202c:	2200      	movs	r2, #0
 800202e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_SPI_MspInit+0x118>)
 8002032:	2200      	movs	r2, #0
 8002034:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002036:	480d      	ldr	r0, [pc, #52]	; (800206c <HAL_SPI_MspInit+0x118>)
 8002038:	f000 fc7a 	bl	8002930 <HAL_DMA_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8002042:	f7ff ff43 	bl	8001ecc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_SPI_MspInit+0x118>)
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
 800204c:	4a07      	ldr	r2, [pc, #28]	; (800206c <HAL_SPI_MspInit+0x118>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002052:	bf00      	nop
 8002054:	3728      	adds	r7, #40	; 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40003800 	.word	0x40003800
 8002060:	40021000 	.word	0x40021000
 8002064:	48000800 	.word	0x48000800
 8002068:	48000400 	.word	0x48000400
 800206c:	2000a2d4 	.word	0x2000a2d4
 8002070:	40020058 	.word	0x40020058

08002074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_MspInit+0x44>)
 800207c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207e:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <HAL_MspInit+0x44>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6613      	str	r3, [r2, #96]	; 0x60
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <HAL_MspInit+0x44>)
 8002088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <HAL_MspInit+0x44>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <HAL_MspInit+0x44>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209c:	6593      	str	r3, [r2, #88]	; 0x58
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_MspInit+0x44>)
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000

080020bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020c0:	e7fe      	b.n	80020c0 <NMI_Handler+0x4>

080020c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c6:	e7fe      	b.n	80020c6 <HardFault_Handler+0x4>

080020c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <MemManage_Handler+0x4>

080020ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <BusFault_Handler+0x4>

080020d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <UsageFault_Handler+0x4>

080020da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002108:	f000 fabc 	bl	8002684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}

08002110 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <DMA1_Channel5_IRQHandler+0x10>)
 8002116:	f000 fd23 	bl	8002b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000a2d4 	.word	0x2000a2d4

08002124 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_SENSOR_Pin);
 8002128:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800212c:	f000 ffd2 	bl	80030d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}

08002134 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <TIM6_DAC_IRQHandler+0x10>)
 800213a:	f003 fee7 	bl	8005f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	2000a320 	.word	0x2000a320

08002148 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <TIM7_IRQHandler+0x10>)
 800214e:	f003 fedd 	bl	8005f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000a36c 	.word	0x2000a36c

0800215c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return 1;
 8002160:	2301      	movs	r3, #1
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_kill>:

int _kill(int pid, int sig)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002176:	f006 fb3d 	bl	80087f4 <__errno>
 800217a:	4603      	mov	r3, r0
 800217c:	2216      	movs	r2, #22
 800217e:	601a      	str	r2, [r3, #0]
  return -1;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_exit>:

void _exit (int status)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002194:	f04f 31ff 	mov.w	r1, #4294967295
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ffe7 	bl	800216c <_kill>
  while (1) {}    /* Make sure we hang here */
 800219e:	e7fe      	b.n	800219e <_exit+0x12>

080021a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	e00a      	b.n	80021c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021b2:	f3af 8000 	nop.w
 80021b6:	4601      	mov	r1, r0
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	60ba      	str	r2, [r7, #8]
 80021be:	b2ca      	uxtb	r2, r1
 80021c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	3301      	adds	r3, #1
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	dbf0      	blt.n	80021b2 <_read+0x12>
  }

  return len;
 80021d0:	687b      	ldr	r3, [r7, #4]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	e009      	b.n	8002200 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	60ba      	str	r2, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff facf 	bl	8001798 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3301      	adds	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	429a      	cmp	r2, r3
 8002206:	dbf1      	blt.n	80021ec <_write+0x12>
  }
  return len;
 8002208:	687b      	ldr	r3, [r7, #4]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <_close>:

int _close(int file)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800223a:	605a      	str	r2, [r3, #4]
  return 0;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <_isatty>:

int _isatty(int file)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002284:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <_sbrk+0x5c>)
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <_sbrk+0x60>)
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <_sbrk+0x64>)
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <_sbrk+0x68>)
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d207      	bcs.n	80022bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ac:	f006 faa2 	bl	80087f4 <__errno>
 80022b0:	4603      	mov	r3, r0
 80022b2:	220c      	movs	r2, #12
 80022b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	e009      	b.n	80022d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <_sbrk+0x64>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <_sbrk+0x64>)
 80022cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20018000 	.word	0x20018000
 80022dc:	00002000 	.word	0x00002000
 80022e0:	2000a31c 	.word	0x2000a31c
 80022e4:	2000a590 	.word	0x2000a590

080022e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <SystemInit+0x20>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <SystemInit+0x20>)
 80022f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <MX_TIM6_Init+0x68>)
 800231e:	4a16      	ldr	r2, [pc, #88]	; (8002378 <MX_TIM6_Init+0x6c>)
 8002320:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <MX_TIM6_Init+0x68>)
 8002324:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002328:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <MX_TIM6_Init+0x68>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8002330:	4b10      	ldr	r3, [pc, #64]	; (8002374 <MX_TIM6_Init+0x68>)
 8002332:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002336:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <MX_TIM6_Init+0x68>)
 800233a:	2200      	movs	r2, #0
 800233c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800233e:	480d      	ldr	r0, [pc, #52]	; (8002374 <MX_TIM6_Init+0x68>)
 8002340:	f003 fd1c 	bl	8005d7c <HAL_TIM_Base_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800234a:	f7ff fdbf 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4619      	mov	r1, r3
 800235a:	4806      	ldr	r0, [pc, #24]	; (8002374 <MX_TIM6_Init+0x68>)
 800235c:	f003 ff9a 	bl	8006294 <HAL_TIMEx_MasterConfigSynchronization>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002366:	f7ff fdb1 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	2000a320 	.word	0x2000a320
 8002378:	40001000 	.word	0x40001000

0800237c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800238c:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <MX_TIM7_Init+0x68>)
 800238e:	4a16      	ldr	r2, [pc, #88]	; (80023e8 <MX_TIM7_Init+0x6c>)
 8002390:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <MX_TIM7_Init+0x68>)
 8002394:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002398:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <MX_TIM7_Init+0x68>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80023a0:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <MX_TIM7_Init+0x68>)
 80023a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80023a6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a8:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <MX_TIM7_Init+0x68>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80023ae:	480d      	ldr	r0, [pc, #52]	; (80023e4 <MX_TIM7_Init+0x68>)
 80023b0:	f003 fce4 	bl	8005d7c <HAL_TIM_Base_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80023ba:	f7ff fd87 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	4619      	mov	r1, r3
 80023ca:	4806      	ldr	r0, [pc, #24]	; (80023e4 <MX_TIM7_Init+0x68>)
 80023cc:	f003 ff62 	bl	8006294 <HAL_TIMEx_MasterConfigSynchronization>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80023d6:	f7ff fd79 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	2000a36c 	.word	0x2000a36c
 80023e8:	40001400 	.word	0x40001400

080023ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1a      	ldr	r2, [pc, #104]	; (8002464 <HAL_TIM_Base_MspInit+0x78>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d114      	bne.n	8002428 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <HAL_TIM_Base_MspInit+0x7c>)
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	4a19      	ldr	r2, [pc, #100]	; (8002468 <HAL_TIM_Base_MspInit+0x7c>)
 8002404:	f043 0310 	orr.w	r3, r3, #16
 8002408:	6593      	str	r3, [r2, #88]	; 0x58
 800240a:	4b17      	ldr	r3, [pc, #92]	; (8002468 <HAL_TIM_Base_MspInit+0x7c>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	210a      	movs	r1, #10
 800241a:	2036      	movs	r0, #54	; 0x36
 800241c:	f000 fa51 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002420:	2036      	movs	r0, #54	; 0x36
 8002422:	f000 fa6a 	bl	80028fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002426:	e018      	b.n	800245a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0f      	ldr	r2, [pc, #60]	; (800246c <HAL_TIM_Base_MspInit+0x80>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d113      	bne.n	800245a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002432:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <HAL_TIM_Base_MspInit+0x7c>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	4a0c      	ldr	r2, [pc, #48]	; (8002468 <HAL_TIM_Base_MspInit+0x7c>)
 8002438:	f043 0320 	orr.w	r3, r3, #32
 800243c:	6593      	str	r3, [r2, #88]	; 0x58
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <HAL_TIM_Base_MspInit+0x7c>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 10, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	210a      	movs	r1, #10
 800244e:	2037      	movs	r0, #55	; 0x37
 8002450:	f000 fa37 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002454:	2037      	movs	r0, #55	; 0x37
 8002456:	f000 fa50 	bl	80028fa <HAL_NVIC_EnableIRQ>
}
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40001000 	.word	0x40001000
 8002468:	40021000 	.word	0x40021000
 800246c:	40001400 	.word	0x40001400

08002470 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <MX_USART2_UART_Init+0x58>)
 8002476:	4a15      	ldr	r2, [pc, #84]	; (80024cc <MX_USART2_UART_Init+0x5c>)
 8002478:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800247a:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <MX_USART2_UART_Init+0x58>)
 800247c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002480:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <MX_USART2_UART_Init+0x58>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <MX_USART2_UART_Init+0x58>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <MX_USART2_UART_Init+0x58>)
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <MX_USART2_UART_Init+0x58>)
 8002496:	220c      	movs	r2, #12
 8002498:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <MX_USART2_UART_Init+0x58>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <MX_USART2_UART_Init+0x58>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <MX_USART2_UART_Init+0x58>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <MX_USART2_UART_Init+0x58>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_USART2_UART_Init+0x58>)
 80024b4:	f003 ff94 	bl	80063e0 <HAL_UART_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80024be:	f7ff fd05 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2000a3b8 	.word	0x2000a3b8
 80024cc:	40004400 	.word	0x40004400

080024d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b0ac      	sub	sp, #176	; 0xb0
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	2288      	movs	r2, #136	; 0x88
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f006 f92d 	bl	8008750 <memset>
  if(uartHandle->Instance==USART2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a21      	ldr	r2, [pc, #132]	; (8002580 <HAL_UART_MspInit+0xb0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d13b      	bne.n	8002578 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002500:	2302      	movs	r3, #2
 8002502:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002504:	2300      	movs	r3, #0
 8002506:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	4618      	mov	r0, r3
 800250e:	f002 fa77 	bl	8004a00 <HAL_RCCEx_PeriphCLKConfig>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002518:	f7ff fcd8 	bl	8001ecc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_UART_MspInit+0xb4>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	4a18      	ldr	r2, [pc, #96]	; (8002584 <HAL_UART_MspInit+0xb4>)
 8002522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002526:	6593      	str	r3, [r2, #88]	; 0x58
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <HAL_UART_MspInit+0xb4>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_UART_MspInit+0xb4>)
 8002536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002538:	4a12      	ldr	r2, [pc, #72]	; (8002584 <HAL_UART_MspInit+0xb4>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_UART_MspInit+0xb4>)
 8002542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800254c:	230c      	movs	r3, #12
 800254e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255e:	2303      	movs	r3, #3
 8002560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002564:	2307      	movs	r3, #7
 8002566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800256e:	4619      	mov	r1, r3
 8002570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002574:	f000 fbd4 	bl	8002d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002578:	bf00      	nop
 800257a:	37b0      	adds	r7, #176	; 0xb0
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40004400 	.word	0x40004400
 8002584:	40021000 	.word	0x40021000

08002588 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800258c:	f7ff feac 	bl	80022e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002590:	480c      	ldr	r0, [pc, #48]	; (80025c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002592:	490d      	ldr	r1, [pc, #52]	; (80025c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002594:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <LoopForever+0xe>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002598:	e002      	b.n	80025a0 <LoopCopyDataInit>

0800259a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800259c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259e:	3304      	adds	r3, #4

080025a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a4:	d3f9      	bcc.n	800259a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025a8:	4c0a      	ldr	r4, [pc, #40]	; (80025d4 <LoopForever+0x16>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ac:	e001      	b.n	80025b2 <LoopFillZerobss>

080025ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b0:	3204      	adds	r2, #4

080025b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b4:	d3fb      	bcc.n	80025ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025b6:	f006 f923 	bl	8008800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025ba:	f7ff f9b1 	bl	8001920 <main>

080025be <LoopForever>:

LoopForever:
    b LoopForever
 80025be:	e7fe      	b.n	80025be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80025c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80025c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80025cc:	0800e3f8 	.word	0x0800e3f8
  ldr r2, =_sbss
 80025d0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80025d4:	2000a590 	.word	0x2000a590

080025d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025d8:	e7fe      	b.n	80025d8 <ADC1_2_IRQHandler>

080025da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e4:	2003      	movs	r0, #3
 80025e6:	f000 f961 	bl	80028ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025ea:	200f      	movs	r0, #15
 80025ec:	f000 f80e 	bl	800260c <HAL_InitTick>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	71fb      	strb	r3, [r7, #7]
 80025fa:	e001      	b.n	8002600 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025fc:	f7ff fd3a 	bl	8002074 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002600:	79fb      	ldrb	r3, [r7, #7]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002618:	4b17      	ldr	r3, [pc, #92]	; (8002678 <HAL_InitTick+0x6c>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d023      	beq.n	8002668 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002620:	4b16      	ldr	r3, [pc, #88]	; (800267c <HAL_InitTick+0x70>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b14      	ldr	r3, [pc, #80]	; (8002678 <HAL_InitTick+0x6c>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800262e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f96d 	bl	8002916 <HAL_SYSTICK_Config>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10f      	bne.n	8002662 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b0f      	cmp	r3, #15
 8002646:	d809      	bhi.n	800265c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002648:	2200      	movs	r2, #0
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	f000 f937 	bl	80028c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002654:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_InitTick+0x74>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e007      	b.n	800266c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e004      	b.n	800266c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
 8002666:	e001      	b.n	800266c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800266c:	7bfb      	ldrb	r3, [r7, #15]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000008 	.word	0x20000008
 800267c:	20000000 	.word	0x20000000
 8002680:	20000004 	.word	0x20000004

08002684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_IncTick+0x20>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_IncTick+0x24>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4413      	add	r3, r2
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_IncTick+0x24>)
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000008 	.word	0x20000008
 80026a8:	2000a440 	.word	0x2000a440

080026ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return uwTick;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_GetTick+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	2000a440 	.word	0x2000a440

080026c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026cc:	f7ff ffee 	bl	80026ac <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026dc:	d005      	beq.n	80026ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_Delay+0x44>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ea:	bf00      	nop
 80026ec:	f7ff ffde 	bl	80026ac <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d8f7      	bhi.n	80026ec <HAL_Delay+0x28>
  {
  }
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000008 	.word	0x20000008

0800270c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002728:	4013      	ands	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273e:	4a04      	ldr	r2, [pc, #16]	; (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	60d3      	str	r3, [r2, #12]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <__NVIC_GetPriorityGrouping+0x18>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	f003 0307 	and.w	r3, r3, #7
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	2b00      	cmp	r3, #0
 8002780:	db0b      	blt.n	800279a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	4907      	ldr	r1, [pc, #28]	; (80027a8 <__NVIC_EnableIRQ+0x38>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2001      	movs	r0, #1
 8002792:	fa00 f202 	lsl.w	r2, r0, r2
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000e100 	.word	0xe000e100

080027ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	db0a      	blt.n	80027d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	490c      	ldr	r1, [pc, #48]	; (80027f8 <__NVIC_SetPriority+0x4c>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	440b      	add	r3, r1
 80027d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d4:	e00a      	b.n	80027ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4908      	ldr	r1, [pc, #32]	; (80027fc <__NVIC_SetPriority+0x50>)
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	3b04      	subs	r3, #4
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	440b      	add	r3, r1
 80027ea:	761a      	strb	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f1c3 0307 	rsb	r3, r3, #7
 800281a:	2b04      	cmp	r3, #4
 800281c:	bf28      	it	cs
 800281e:	2304      	movcs	r3, #4
 8002820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3304      	adds	r3, #4
 8002826:	2b06      	cmp	r3, #6
 8002828:	d902      	bls.n	8002830 <NVIC_EncodePriority+0x30>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3b03      	subs	r3, #3
 800282e:	e000      	b.n	8002832 <NVIC_EncodePriority+0x32>
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	f04f 32ff 	mov.w	r2, #4294967295
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002848:	f04f 31ff 	mov.w	r1, #4294967295
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43d9      	mvns	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	4313      	orrs	r3, r2
         );
}
 800285a:	4618      	mov	r0, r3
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002878:	d301      	bcc.n	800287e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287a:	2301      	movs	r3, #1
 800287c:	e00f      	b.n	800289e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287e:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <SysTick_Config+0x40>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002886:	210f      	movs	r1, #15
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	f7ff ff8e 	bl	80027ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <SysTick_Config+0x40>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002896:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <SysTick_Config+0x40>)
 8002898:	2207      	movs	r2, #7
 800289a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	e000e010 	.word	0xe000e010

080028ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff29 	bl	800270c <__NVIC_SetPriorityGrouping>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028d4:	f7ff ff3e 	bl	8002754 <__NVIC_GetPriorityGrouping>
 80028d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	6978      	ldr	r0, [r7, #20]
 80028e0:	f7ff ff8e 	bl	8002800 <NVIC_EncodePriority>
 80028e4:	4602      	mov	r2, r0
 80028e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff5d 	bl	80027ac <__NVIC_SetPriority>
}
 80028f2:	bf00      	nop
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff31 	bl	8002770 <__NVIC_EnableIRQ>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ffa2 	bl	8002868 <SysTick_Config>
 8002924:	4603      	mov	r3, r0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e098      	b.n	8002a74 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	4b4d      	ldr	r3, [pc, #308]	; (8002a80 <HAL_DMA_Init+0x150>)
 800294a:	429a      	cmp	r2, r3
 800294c:	d80f      	bhi.n	800296e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	4b4b      	ldr	r3, [pc, #300]	; (8002a84 <HAL_DMA_Init+0x154>)
 8002956:	4413      	add	r3, r2
 8002958:	4a4b      	ldr	r2, [pc, #300]	; (8002a88 <HAL_DMA_Init+0x158>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	009a      	lsls	r2, r3, #2
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a48      	ldr	r2, [pc, #288]	; (8002a8c <HAL_DMA_Init+0x15c>)
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
 800296c:	e00e      	b.n	800298c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	4b46      	ldr	r3, [pc, #280]	; (8002a90 <HAL_DMA_Init+0x160>)
 8002976:	4413      	add	r3, r2
 8002978:	4a43      	ldr	r2, [pc, #268]	; (8002a88 <HAL_DMA_Init+0x158>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	009a      	lsls	r2, r3, #2
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a42      	ldr	r2, [pc, #264]	; (8002a94 <HAL_DMA_Init+0x164>)
 800298a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80029a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80029b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029e6:	d039      	beq.n	8002a5c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	4a27      	ldr	r2, [pc, #156]	; (8002a8c <HAL_DMA_Init+0x15c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d11a      	bne.n	8002a28 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80029f2:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <HAL_DMA_Init+0x168>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f003 031c 	and.w	r3, r3, #28
 80029fe:	210f      	movs	r1, #15
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	4924      	ldr	r1, [pc, #144]	; (8002a98 <HAL_DMA_Init+0x168>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a0c:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_DMA_Init+0x168>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	f003 031c 	and.w	r3, r3, #28
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	491d      	ldr	r1, [pc, #116]	; (8002a98 <HAL_DMA_Init+0x168>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]
 8002a26:	e019      	b.n	8002a5c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a28:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <HAL_DMA_Init+0x16c>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	f003 031c 	and.w	r3, r3, #28
 8002a34:	210f      	movs	r1, #15
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	4917      	ldr	r1, [pc, #92]	; (8002a9c <HAL_DMA_Init+0x16c>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a42:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <HAL_DMA_Init+0x16c>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6859      	ldr	r1, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f003 031c 	and.w	r3, r3, #28
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	4911      	ldr	r1, [pc, #68]	; (8002a9c <HAL_DMA_Init+0x16c>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	40020407 	.word	0x40020407
 8002a84:	bffdfff8 	.word	0xbffdfff8
 8002a88:	cccccccd 	.word	0xcccccccd
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	bffdfbf8 	.word	0xbffdfbf8
 8002a94:	40020400 	.word	0x40020400
 8002a98:	400200a8 	.word	0x400200a8
 8002a9c:	400204a8 	.word	0x400204a8

08002aa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_DMA_Start_IT+0x20>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e04b      	b.n	8002b58 <HAL_DMA_Start_IT+0xb8>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d13a      	bne.n	8002b4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0201 	bic.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68b9      	ldr	r1, [r7, #8]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f8e0 	bl	8002cbe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 020e 	orr.w	r2, r2, #14
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e00f      	b.n	8002b38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0204 	bic.w	r2, r2, #4
 8002b26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 020a 	orr.w	r2, r2, #10
 8002b36:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	e005      	b.n	8002b56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
 8002b54:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	f003 031c 	and.w	r3, r3, #28
 8002b80:	2204      	movs	r2, #4
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d026      	beq.n	8002bda <HAL_DMA_IRQHandler+0x7a>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d021      	beq.n	8002bda <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0204 	bic.w	r2, r2, #4
 8002bb2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	f003 021c 	and.w	r2, r3, #28
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	2104      	movs	r1, #4
 8002bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d071      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002bd8:	e06c      	b.n	8002cb4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f003 031c 	and.w	r3, r3, #28
 8002be2:	2202      	movs	r2, #2
 8002be4:	409a      	lsls	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d02e      	beq.n	8002c4c <HAL_DMA_IRQHandler+0xec>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d029      	beq.n	8002c4c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10b      	bne.n	8002c1e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 020a 	bic.w	r2, r2, #10
 8002c14:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f003 021c 	and.w	r2, r3, #28
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c30:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d038      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002c4a:	e033      	b.n	8002cb4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c50:	f003 031c 	and.w	r3, r3, #28
 8002c54:	2208      	movs	r2, #8
 8002c56:	409a      	lsls	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d02a      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x156>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d025      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 020e 	bic.w	r2, r2, #14
 8002c78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	f003 021c 	and.w	r2, r3, #28
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d004      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
}
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd0:	f003 021c 	and.w	r2, r3, #28
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	2101      	movs	r1, #1
 8002cda:	fa01 f202 	lsl.w	r2, r1, r2
 8002cde:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d108      	bne.n	8002d02 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d00:	e007      	b.n	8002d12 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	60da      	str	r2, [r3, #12]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2e:	e17f      	b.n	8003030 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2101      	movs	r1, #1
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8171 	beq.w	800302a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d005      	beq.n	8002d60 <HAL_GPIO_Init+0x40>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d130      	bne.n	8002dc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d96:	2201      	movs	r2, #1
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	f003 0201 	and.w	r2, r3, #1
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d118      	bne.n	8002e00 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	08db      	lsrs	r3, r3, #3
 8002dea:	f003 0201 	and.w	r2, r3, #1
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d017      	beq.n	8002e3c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d123      	bne.n	8002e90 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	08da      	lsrs	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3208      	adds	r2, #8
 8002e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	220f      	movs	r2, #15
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	08da      	lsrs	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3208      	adds	r2, #8
 8002e8a:	6939      	ldr	r1, [r7, #16]
 8002e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0203 	and.w	r2, r3, #3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80ac 	beq.w	800302a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed2:	4b5f      	ldr	r3, [pc, #380]	; (8003050 <HAL_GPIO_Init+0x330>)
 8002ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed6:	4a5e      	ldr	r2, [pc, #376]	; (8003050 <HAL_GPIO_Init+0x330>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6613      	str	r3, [r2, #96]	; 0x60
 8002ede:	4b5c      	ldr	r3, [pc, #368]	; (8003050 <HAL_GPIO_Init+0x330>)
 8002ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002eea:	4a5a      	ldr	r2, [pc, #360]	; (8003054 <HAL_GPIO_Init+0x334>)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	089b      	lsrs	r3, r3, #2
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	220f      	movs	r2, #15
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f14:	d025      	beq.n	8002f62 <HAL_GPIO_Init+0x242>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <HAL_GPIO_Init+0x338>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d01f      	beq.n	8002f5e <HAL_GPIO_Init+0x23e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4e      	ldr	r2, [pc, #312]	; (800305c <HAL_GPIO_Init+0x33c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d019      	beq.n	8002f5a <HAL_GPIO_Init+0x23a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4d      	ldr	r2, [pc, #308]	; (8003060 <HAL_GPIO_Init+0x340>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <HAL_GPIO_Init+0x236>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4c      	ldr	r2, [pc, #304]	; (8003064 <HAL_GPIO_Init+0x344>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00d      	beq.n	8002f52 <HAL_GPIO_Init+0x232>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4b      	ldr	r2, [pc, #300]	; (8003068 <HAL_GPIO_Init+0x348>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d007      	beq.n	8002f4e <HAL_GPIO_Init+0x22e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4a      	ldr	r2, [pc, #296]	; (800306c <HAL_GPIO_Init+0x34c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d101      	bne.n	8002f4a <HAL_GPIO_Init+0x22a>
 8002f46:	2306      	movs	r3, #6
 8002f48:	e00c      	b.n	8002f64 <HAL_GPIO_Init+0x244>
 8002f4a:	2307      	movs	r3, #7
 8002f4c:	e00a      	b.n	8002f64 <HAL_GPIO_Init+0x244>
 8002f4e:	2305      	movs	r3, #5
 8002f50:	e008      	b.n	8002f64 <HAL_GPIO_Init+0x244>
 8002f52:	2304      	movs	r3, #4
 8002f54:	e006      	b.n	8002f64 <HAL_GPIO_Init+0x244>
 8002f56:	2303      	movs	r3, #3
 8002f58:	e004      	b.n	8002f64 <HAL_GPIO_Init+0x244>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e002      	b.n	8002f64 <HAL_GPIO_Init+0x244>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_GPIO_Init+0x244>
 8002f62:	2300      	movs	r3, #0
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	f002 0203 	and.w	r2, r2, #3
 8002f6a:	0092      	lsls	r2, r2, #2
 8002f6c:	4093      	lsls	r3, r2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f74:	4937      	ldr	r1, [pc, #220]	; (8003054 <HAL_GPIO_Init+0x334>)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f82:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HAL_GPIO_Init+0x350>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fa6:	4a32      	ldr	r2, [pc, #200]	; (8003070 <HAL_GPIO_Init+0x350>)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fac:	4b30      	ldr	r3, [pc, #192]	; (8003070 <HAL_GPIO_Init+0x350>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fd0:	4a27      	ldr	r2, [pc, #156]	; (8003070 <HAL_GPIO_Init+0x350>)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fd6:	4b26      	ldr	r3, [pc, #152]	; (8003070 <HAL_GPIO_Init+0x350>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ffa:	4a1d      	ldr	r2, [pc, #116]	; (8003070 <HAL_GPIO_Init+0x350>)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <HAL_GPIO_Init+0x350>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	43db      	mvns	r3, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003024:	4a12      	ldr	r2, [pc, #72]	; (8003070 <HAL_GPIO_Init+0x350>)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3301      	adds	r3, #1
 800302e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa22 f303 	lsr.w	r3, r2, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	f47f ae78 	bne.w	8002d30 <HAL_GPIO_Init+0x10>
  }
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	40010000 	.word	0x40010000
 8003058:	48000400 	.word	0x48000400
 800305c:	48000800 	.word	0x48000800
 8003060:	48000c00 	.word	0x48000c00
 8003064:	48001000 	.word	0x48001000
 8003068:	48001400 	.word	0x48001400
 800306c:	48001800 	.word	0x48001800
 8003070:	40010400 	.word	0x40010400

08003074 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	887b      	ldrh	r3, [r7, #2]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	e001      	b.n	8003096 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003096:	7bfb      	ldrb	r3, [r7, #15]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	807b      	strh	r3, [r7, #2]
 80030b0:	4613      	mov	r3, r2
 80030b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b4:	787b      	ldrb	r3, [r7, #1]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030ba:	887a      	ldrh	r2, [r7, #2]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030c0:	e002      	b.n	80030c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030de:	4b08      	ldr	r3, [pc, #32]	; (8003100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d006      	beq.n	80030f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030ea:	4a05      	ldr	r2, [pc, #20]	; (8003100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe fba4 	bl	8001840 <HAL_GPIO_EXTI_Callback>
  }
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40010400 	.word	0x40010400

08003104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e08d      	b.n	8003232 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fe f8c6 	bl	80012bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2224      	movs	r2, #36	; 0x24
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003154:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003164:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	e006      	b.n	800318c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800318a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d108      	bne.n	80031a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	e007      	b.n	80031b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69d9      	ldr	r1, [r3, #28]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1a      	ldr	r2, [r3, #32]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	4608      	mov	r0, r1
 8003246:	4611      	mov	r1, r2
 8003248:	461a      	mov	r2, r3
 800324a:	4603      	mov	r3, r0
 800324c:	817b      	strh	r3, [r7, #10]
 800324e:	460b      	mov	r3, r1
 8003250:	813b      	strh	r3, [r7, #8]
 8003252:	4613      	mov	r3, r2
 8003254:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b20      	cmp	r3, #32
 8003260:	f040 80f9 	bne.w	8003456 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_I2C_Mem_Write+0x34>
 800326a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003276:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0ed      	b.n	8003458 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_I2C_Mem_Write+0x4e>
 8003286:	2302      	movs	r3, #2
 8003288:	e0e6      	b.n	8003458 <HAL_I2C_Mem_Write+0x21c>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003292:	f7ff fa0b 	bl	80026ac <HAL_GetTick>
 8003296:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	2319      	movs	r3, #25
 800329e:	2201      	movs	r2, #1
 80032a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fac3 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0d1      	b.n	8003458 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2221      	movs	r2, #33	; 0x21
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2240      	movs	r2, #64	; 0x40
 80032c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a3a      	ldr	r2, [r7, #32]
 80032ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032dc:	88f8      	ldrh	r0, [r7, #6]
 80032de:	893a      	ldrh	r2, [r7, #8]
 80032e0:	8979      	ldrh	r1, [r7, #10]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	4603      	mov	r3, r0
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f9d3 	bl	8003698 <I2C_RequestMemoryWrite>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0a9      	b.n	8003458 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	2bff      	cmp	r3, #255	; 0xff
 800330c:	d90e      	bls.n	800332c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	22ff      	movs	r2, #255	; 0xff
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003318:	b2da      	uxtb	r2, r3
 800331a:	8979      	ldrh	r1, [r7, #10]
 800331c:	2300      	movs	r3, #0
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fc3d 	bl	8003ba4 <I2C_TransferConfig>
 800332a:	e00f      	b.n	800334c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	b2da      	uxtb	r2, r3
 800333c:	8979      	ldrh	r1, [r7, #10]
 800333e:	2300      	movs	r3, #0
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 fc2c 	bl	8003ba4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fabc 	bl	80038ce <I2C_WaitOnTXISFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e07b      	b.n	8003458 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	781a      	ldrb	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d034      	beq.n	8003404 <HAL_I2C_Mem_Write+0x1c8>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d130      	bne.n	8003404 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	2200      	movs	r2, #0
 80033aa:	2180      	movs	r1, #128	; 0x80
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fa3f 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e04d      	b.n	8003458 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2bff      	cmp	r3, #255	; 0xff
 80033c4:	d90e      	bls.n	80033e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	22ff      	movs	r2, #255	; 0xff
 80033ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	8979      	ldrh	r1, [r7, #10]
 80033d4:	2300      	movs	r3, #0
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fbe1 	bl	8003ba4 <I2C_TransferConfig>
 80033e2:	e00f      	b.n	8003404 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	8979      	ldrh	r1, [r7, #10]
 80033f6:	2300      	movs	r3, #0
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fbd0 	bl	8003ba4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d19e      	bne.n	800334c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 faa2 	bl	800395c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e01a      	b.n	8003458 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2220      	movs	r2, #32
 8003428:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6859      	ldr	r1, [r3, #4]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_I2C_Mem_Write+0x224>)
 8003436:	400b      	ands	r3, r1
 8003438:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e000      	b.n	8003458 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003456:	2302      	movs	r3, #2
  }
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	fe00e800 	.word	0xfe00e800

08003464 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af02      	add	r7, sp, #8
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	4608      	mov	r0, r1
 800346e:	4611      	mov	r1, r2
 8003470:	461a      	mov	r2, r3
 8003472:	4603      	mov	r3, r0
 8003474:	817b      	strh	r3, [r7, #10]
 8003476:	460b      	mov	r3, r1
 8003478:	813b      	strh	r3, [r7, #8]
 800347a:	4613      	mov	r3, r2
 800347c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b20      	cmp	r3, #32
 8003488:	f040 80fd 	bne.w	8003686 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_I2C_Mem_Read+0x34>
 8003492:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003494:	2b00      	cmp	r3, #0
 8003496:	d105      	bne.n	80034a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800349e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0f1      	b.n	8003688 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_I2C_Mem_Read+0x4e>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e0ea      	b.n	8003688 <HAL_I2C_Mem_Read+0x224>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034ba:	f7ff f8f7 	bl	80026ac <HAL_GetTick>
 80034be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	2319      	movs	r3, #25
 80034c6:	2201      	movs	r2, #1
 80034c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f9af 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0d5      	b.n	8003688 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2222      	movs	r2, #34	; 0x22
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2240      	movs	r2, #64	; 0x40
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a3a      	ldr	r2, [r7, #32]
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003504:	88f8      	ldrh	r0, [r7, #6]
 8003506:	893a      	ldrh	r2, [r7, #8]
 8003508:	8979      	ldrh	r1, [r7, #10]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	4603      	mov	r3, r0
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f913 	bl	8003740 <I2C_RequestMemoryRead>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0ad      	b.n	8003688 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	2bff      	cmp	r3, #255	; 0xff
 8003534:	d90e      	bls.n	8003554 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	22ff      	movs	r2, #255	; 0xff
 800353a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003540:	b2da      	uxtb	r2, r3
 8003542:	8979      	ldrh	r1, [r7, #10]
 8003544:	4b52      	ldr	r3, [pc, #328]	; (8003690 <HAL_I2C_Mem_Read+0x22c>)
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 fb29 	bl	8003ba4 <I2C_TransferConfig>
 8003552:	e00f      	b.n	8003574 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003562:	b2da      	uxtb	r2, r3
 8003564:	8979      	ldrh	r1, [r7, #10]
 8003566:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <HAL_I2C_Mem_Read+0x22c>)
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fb18 	bl	8003ba4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	2200      	movs	r2, #0
 800357c:	2104      	movs	r1, #4
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f956 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e07c      	b.n	8003688 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d034      	beq.n	8003634 <HAL_I2C_Mem_Read+0x1d0>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d130      	bne.n	8003634 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d8:	2200      	movs	r2, #0
 80035da:	2180      	movs	r1, #128	; 0x80
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f927 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e04d      	b.n	8003688 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2bff      	cmp	r3, #255	; 0xff
 80035f4:	d90e      	bls.n	8003614 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	22ff      	movs	r2, #255	; 0xff
 80035fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	b2da      	uxtb	r2, r3
 8003602:	8979      	ldrh	r1, [r7, #10]
 8003604:	2300      	movs	r3, #0
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fac9 	bl	8003ba4 <I2C_TransferConfig>
 8003612:	e00f      	b.n	8003634 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	b2da      	uxtb	r2, r3
 8003624:	8979      	ldrh	r1, [r7, #10]
 8003626:	2300      	movs	r3, #0
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fab8 	bl	8003ba4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d19a      	bne.n	8003574 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f98a 	bl	800395c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e01a      	b.n	8003688 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2220      	movs	r2, #32
 8003658:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_I2C_Mem_Read+0x230>)
 8003666:	400b      	ands	r3, r1
 8003668:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003686:	2302      	movs	r3, #2
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	80002400 	.word	0x80002400
 8003694:	fe00e800 	.word	0xfe00e800

08003698 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	4608      	mov	r0, r1
 80036a2:	4611      	mov	r1, r2
 80036a4:	461a      	mov	r2, r3
 80036a6:	4603      	mov	r3, r0
 80036a8:	817b      	strh	r3, [r7, #10]
 80036aa:	460b      	mov	r3, r1
 80036ac:	813b      	strh	r3, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	8979      	ldrh	r1, [r7, #10]
 80036b8:	4b20      	ldr	r3, [pc, #128]	; (800373c <I2C_RequestMemoryWrite+0xa4>)
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fa6f 	bl	8003ba4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	69b9      	ldr	r1, [r7, #24]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f8ff 	bl	80038ce <I2C_WaitOnTXISFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e02c      	b.n	8003734 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036da:	88fb      	ldrh	r3, [r7, #6]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d105      	bne.n	80036ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036e0:	893b      	ldrh	r3, [r7, #8]
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	629a      	str	r2, [r3, #40]	; 0x28
 80036ea:	e015      	b.n	8003718 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036ec:	893b      	ldrh	r3, [r7, #8]
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	69b9      	ldr	r1, [r7, #24]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f8e5 	bl	80038ce <I2C_WaitOnTXISFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e012      	b.n	8003734 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800370e:	893b      	ldrh	r3, [r7, #8]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2200      	movs	r2, #0
 8003720:	2180      	movs	r1, #128	; 0x80
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f884 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	80002000 	.word	0x80002000

08003740 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	4608      	mov	r0, r1
 800374a:	4611      	mov	r1, r2
 800374c:	461a      	mov	r2, r3
 800374e:	4603      	mov	r3, r0
 8003750:	817b      	strh	r3, [r7, #10]
 8003752:	460b      	mov	r3, r1
 8003754:	813b      	strh	r3, [r7, #8]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	8979      	ldrh	r1, [r7, #10]
 8003760:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <I2C_RequestMemoryRead+0xa4>)
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	2300      	movs	r3, #0
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fa1c 	bl	8003ba4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	69b9      	ldr	r1, [r7, #24]
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f8ac 	bl	80038ce <I2C_WaitOnTXISFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e02c      	b.n	80037da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d105      	bne.n	8003792 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003786:	893b      	ldrh	r3, [r7, #8]
 8003788:	b2da      	uxtb	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	629a      	str	r2, [r3, #40]	; 0x28
 8003790:	e015      	b.n	80037be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003792:	893b      	ldrh	r3, [r7, #8]
 8003794:	0a1b      	lsrs	r3, r3, #8
 8003796:	b29b      	uxth	r3, r3
 8003798:	b2da      	uxtb	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	69b9      	ldr	r1, [r7, #24]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f892 	bl	80038ce <I2C_WaitOnTXISFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e012      	b.n	80037da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037b4:	893b      	ldrh	r3, [r7, #8]
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2200      	movs	r2, #0
 80037c6:	2140      	movs	r1, #64	; 0x40
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f831 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	80002000 	.word	0x80002000

080037e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d103      	bne.n	8003806 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2200      	movs	r2, #0
 8003804:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	d007      	beq.n	8003824 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	619a      	str	r2, [r3, #24]
  }
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	4613      	mov	r3, r2
 800383e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003840:	e031      	b.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d02d      	beq.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384a:	f7fe ff2f 	bl	80026ac <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d302      	bcc.n	8003860 <I2C_WaitOnFlagUntilTimeout+0x30>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d122      	bne.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4013      	ands	r3, r2
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	429a      	cmp	r2, r3
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	429a      	cmp	r2, r3
 800387c:	d113      	bne.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	f043 0220 	orr.w	r2, r3, #32
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e00f      	b.n	80038c6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4013      	ands	r3, r2
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	bf0c      	ite	eq
 80038b6:	2301      	moveq	r3, #1
 80038b8:	2300      	movne	r3, #0
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d0be      	beq.n	8003842 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038da:	e033      	b.n	8003944 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	68b9      	ldr	r1, [r7, #8]
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f87f 	bl	80039e4 <I2C_IsErrorOccurred>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e031      	b.n	8003954 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f6:	d025      	beq.n	8003944 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f8:	f7fe fed8 	bl	80026ac <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	429a      	cmp	r2, r3
 8003906:	d302      	bcc.n	800390e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d11a      	bne.n	8003944 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b02      	cmp	r3, #2
 800391a:	d013      	beq.n	8003944 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	f043 0220 	orr.w	r2, r3, #32
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e007      	b.n	8003954 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b02      	cmp	r3, #2
 8003950:	d1c4      	bne.n	80038dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003968:	e02f      	b.n	80039ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f838 	bl	80039e4 <I2C_IsErrorOccurred>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e02d      	b.n	80039da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397e:	f7fe fe95 	bl	80026ac <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	429a      	cmp	r2, r3
 800398c:	d302      	bcc.n	8003994 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d11a      	bne.n	80039ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d013      	beq.n	80039ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e007      	b.n	80039da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d1c8      	bne.n	800396a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08a      	sub	sp, #40	; 0x28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d068      	beq.n	8003ae2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2210      	movs	r2, #16
 8003a16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a18:	e049      	b.n	8003aae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d045      	beq.n	8003aae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7fe fe43 	bl	80026ac <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <I2C_IsErrorOccurred+0x54>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d13a      	bne.n	8003aae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5a:	d121      	bne.n	8003aa0 <I2C_IsErrorOccurred+0xbc>
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a62:	d01d      	beq.n	8003aa0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d01a      	beq.n	8003aa0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a7a:	f7fe fe17 	bl	80026ac <HAL_GetTick>
 8003a7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a80:	e00e      	b.n	8003aa0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a82:	f7fe fe13 	bl	80026ac <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b19      	cmp	r3, #25
 8003a8e:	d907      	bls.n	8003aa0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	f043 0320 	orr.w	r3, r3, #32
 8003a96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003a9e:	e006      	b.n	8003aae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d1e9      	bne.n	8003a82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d003      	beq.n	8003ac4 <I2C_IsErrorOccurred+0xe0>
 8003abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0aa      	beq.n	8003a1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	f043 0304 	orr.w	r3, r3, #4
 8003ada:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00b      	beq.n	8003b0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f043 0308 	orr.w	r3, r3, #8
 8003b1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00b      	beq.n	8003b50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	f043 0302 	orr.w	r3, r3, #2
 8003b3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01c      	beq.n	8003b92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f7ff fe45 	bl	80037e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <I2C_IsErrorOccurred+0x1bc>)
 8003b6a:	400b      	ands	r3, r1
 8003b6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3728      	adds	r7, #40	; 0x28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	fe00e800 	.word	0xfe00e800

08003ba4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	817b      	strh	r3, [r7, #10]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bb6:	897b      	ldrh	r3, [r7, #10]
 8003bb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bbc:	7a7b      	ldrb	r3, [r7, #9]
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	0d5b      	lsrs	r3, r3, #21
 8003bde:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <I2C_TransferConfig+0x60>)
 8003be4:	430b      	orrs	r3, r1
 8003be6:	43db      	mvns	r3, r3
 8003be8:	ea02 0103 	and.w	r1, r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	03ff63ff 	.word	0x03ff63ff

08003c08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d138      	bne.n	8003c90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e032      	b.n	8003c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e000      	b.n	8003c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
  }
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b085      	sub	sp, #20
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d139      	bne.n	8003d28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e033      	b.n	8003d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2224      	movs	r2, #36	; 0x24
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0201 	bic.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e000      	b.n	8003d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d28:	2302      	movs	r3, #2
  }
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40007000 	.word	0x40007000

08003d54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d62:	d130      	bne.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d64:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d70:	d038      	beq.n	8003de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d72:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d7a:	4a1e      	ldr	r2, [pc, #120]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d82:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2232      	movs	r2, #50	; 0x32
 8003d88:	fb02 f303 	mul.w	r3, r2, r3
 8003d8c:	4a1b      	ldr	r2, [pc, #108]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	0c9b      	lsrs	r3, r3, #18
 8003d94:	3301      	adds	r3, #1
 8003d96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d98:	e002      	b.n	8003da0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003da0:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dac:	d102      	bne.n	8003db4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f2      	bne.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003db4:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc0:	d110      	bne.n	8003de4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e00f      	b.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd2:	d007      	beq.n	8003de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dd4:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ddc:	4a05      	ldr	r2, [pc, #20]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003de2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40007000 	.word	0x40007000
 8003df8:	20000000 	.word	0x20000000
 8003dfc:	431bde83 	.word	0x431bde83

08003e00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e3ca      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e12:	4b97      	ldr	r3, [pc, #604]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e1c:	4b94      	ldr	r3, [pc, #592]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80e4 	beq.w	8003ffc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <HAL_RCC_OscConfig+0x4a>
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b0c      	cmp	r3, #12
 8003e3e:	f040 808b 	bne.w	8003f58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	f040 8087 	bne.w	8003f58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e4a:	4b89      	ldr	r3, [pc, #548]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <HAL_RCC_OscConfig+0x62>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e3a2      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1a      	ldr	r2, [r3, #32]
 8003e66:	4b82      	ldr	r3, [pc, #520]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d004      	beq.n	8003e7c <HAL_RCC_OscConfig+0x7c>
 8003e72:	4b7f      	ldr	r3, [pc, #508]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e7a:	e005      	b.n	8003e88 <HAL_RCC_OscConfig+0x88>
 8003e7c:	4b7c      	ldr	r3, [pc, #496]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d223      	bcs.n	8003ed4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fd55 	bl	8004940 <RCC_SetFlashLatencyFromMSIRange>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e383      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ea0:	4b73      	ldr	r3, [pc, #460]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a72      	ldr	r2, [pc, #456]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	f043 0308 	orr.w	r3, r3, #8
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b70      	ldr	r3, [pc, #448]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	496d      	ldr	r1, [pc, #436]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ebe:	4b6c      	ldr	r3, [pc, #432]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	4968      	ldr	r1, [pc, #416]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
 8003ed2:	e025      	b.n	8003f20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed4:	4b66      	ldr	r3, [pc, #408]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a65      	ldr	r2, [pc, #404]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003eda:	f043 0308 	orr.w	r3, r3, #8
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	4b63      	ldr	r3, [pc, #396]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	4960      	ldr	r1, [pc, #384]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef2:	4b5f      	ldr	r3, [pc, #380]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	495b      	ldr	r1, [pc, #364]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fd15 	bl	8004940 <RCC_SetFlashLatencyFromMSIRange>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e343      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f20:	f000 fc4a 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b52      	ldr	r3, [pc, #328]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	4950      	ldr	r1, [pc, #320]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	4a4e      	ldr	r2, [pc, #312]	; (8004078 <HAL_RCC_OscConfig+0x278>)
 8003f3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f40:	4b4e      	ldr	r3, [pc, #312]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe fb61 	bl	800260c <HAL_InitTick>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d052      	beq.n	8003ffa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	e327      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d032      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f60:	4b43      	ldr	r3, [pc, #268]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a42      	ldr	r2, [pc, #264]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f6c:	f7fe fb9e 	bl	80026ac <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f74:	f7fe fb9a 	bl	80026ac <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e310      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f86:	4b3a      	ldr	r3, [pc, #232]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f92:	4b37      	ldr	r3, [pc, #220]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a36      	ldr	r2, [pc, #216]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003f98:	f043 0308 	orr.w	r3, r3, #8
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	4b34      	ldr	r3, [pc, #208]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	4931      	ldr	r1, [pc, #196]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fb0:	4b2f      	ldr	r3, [pc, #188]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	492c      	ldr	r1, [pc, #176]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	604b      	str	r3, [r1, #4]
 8003fc4:	e01a      	b.n	8003ffc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fc6:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a29      	ldr	r2, [pc, #164]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003fcc:	f023 0301 	bic.w	r3, r3, #1
 8003fd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fd2:	f7fe fb6b 	bl	80026ac <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fda:	f7fe fb67 	bl	80026ac <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e2dd      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fec:	4b20      	ldr	r3, [pc, #128]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCC_OscConfig+0x1da>
 8003ff8:	e000      	b.n	8003ffc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ffa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d074      	beq.n	80040f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b08      	cmp	r3, #8
 800400c:	d005      	beq.n	800401a <HAL_RCC_OscConfig+0x21a>
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	2b0c      	cmp	r3, #12
 8004012:	d10e      	bne.n	8004032 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2b03      	cmp	r3, #3
 8004018:	d10b      	bne.n	8004032 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401a:	4b15      	ldr	r3, [pc, #84]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d064      	beq.n	80040f0 <HAL_RCC_OscConfig+0x2f0>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d160      	bne.n	80040f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e2ba      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403a:	d106      	bne.n	800404a <HAL_RCC_OscConfig+0x24a>
 800403c:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a0b      	ldr	r2, [pc, #44]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8004042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	e026      	b.n	8004098 <HAL_RCC_OscConfig+0x298>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004052:	d115      	bne.n	8004080 <HAL_RCC_OscConfig+0x280>
 8004054:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a05      	ldr	r2, [pc, #20]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 800405a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a02      	ldr	r2, [pc, #8]	; (8004070 <HAL_RCC_OscConfig+0x270>)
 8004066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	e014      	b.n	8004098 <HAL_RCC_OscConfig+0x298>
 800406e:	bf00      	nop
 8004070:	40021000 	.word	0x40021000
 8004074:	0800de84 	.word	0x0800de84
 8004078:	20000000 	.word	0x20000000
 800407c:	20000004 	.word	0x20000004
 8004080:	4ba0      	ldr	r3, [pc, #640]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a9f      	ldr	r2, [pc, #636]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	4b9d      	ldr	r3, [pc, #628]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a9c      	ldr	r2, [pc, #624]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d013      	beq.n	80040c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fe fb04 	bl	80026ac <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a8:	f7fe fb00 	bl	80026ac <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b64      	cmp	r3, #100	; 0x64
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e276      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ba:	4b92      	ldr	r3, [pc, #584]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0f0      	beq.n	80040a8 <HAL_RCC_OscConfig+0x2a8>
 80040c6:	e014      	b.n	80040f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fe faf0 	bl	80026ac <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d0:	f7fe faec 	bl	80026ac <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b64      	cmp	r3, #100	; 0x64
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e262      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040e2:	4b88      	ldr	r3, [pc, #544]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f0      	bne.n	80040d0 <HAL_RCC_OscConfig+0x2d0>
 80040ee:	e000      	b.n	80040f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d060      	beq.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d005      	beq.n	8004110 <HAL_RCC_OscConfig+0x310>
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b0c      	cmp	r3, #12
 8004108:	d119      	bne.n	800413e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b02      	cmp	r3, #2
 800410e:	d116      	bne.n	800413e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004110:	4b7c      	ldr	r3, [pc, #496]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_OscConfig+0x328>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e23f      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004128:	4b76      	ldr	r3, [pc, #472]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	061b      	lsls	r3, r3, #24
 8004136:	4973      	ldr	r1, [pc, #460]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004138:	4313      	orrs	r3, r2
 800413a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800413c:	e040      	b.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d023      	beq.n	800418e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004146:	4b6f      	ldr	r3, [pc, #444]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a6e      	ldr	r2, [pc, #440]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fe faab 	bl	80026ac <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800415a:	f7fe faa7 	bl	80026ac <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e21d      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800416c:	4b65      	ldr	r3, [pc, #404]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004178:	4b62      	ldr	r3, [pc, #392]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	061b      	lsls	r3, r3, #24
 8004186:	495f      	ldr	r1, [pc, #380]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
 800418c:	e018      	b.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800418e:	4b5d      	ldr	r3, [pc, #372]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a5c      	ldr	r2, [pc, #368]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fe fa87 	bl	80026ac <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a2:	f7fe fa83 	bl	80026ac <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e1f9      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041b4:	4b53      	ldr	r3, [pc, #332]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f0      	bne.n	80041a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d03c      	beq.n	8004246 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01c      	beq.n	800420e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041d4:	4b4b      	ldr	r3, [pc, #300]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80041d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041da:	4a4a      	ldr	r2, [pc, #296]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fe fa62 	bl	80026ac <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ec:	f7fe fa5e 	bl	80026ac <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e1d4      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041fe:	4b41      	ldr	r3, [pc, #260]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0ef      	beq.n	80041ec <HAL_RCC_OscConfig+0x3ec>
 800420c:	e01b      	b.n	8004246 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800420e:	4b3d      	ldr	r3, [pc, #244]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004214:	4a3b      	ldr	r2, [pc, #236]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7fe fa45 	bl	80026ac <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004226:	f7fe fa41 	bl	80026ac <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e1b7      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004238:	4b32      	ldr	r3, [pc, #200]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800423a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1ef      	bne.n	8004226 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 80a6 	beq.w	80043a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004254:	2300      	movs	r3, #0
 8004256:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004258:	4b2a      	ldr	r3, [pc, #168]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10d      	bne.n	8004280 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004264:	4b27      	ldr	r3, [pc, #156]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004268:	4a26      	ldr	r2, [pc, #152]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 800426a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426e:	6593      	str	r3, [r2, #88]	; 0x58
 8004270:	4b24      	ldr	r3, [pc, #144]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800427c:	2301      	movs	r3, #1
 800427e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004280:	4b21      	ldr	r3, [pc, #132]	; (8004308 <HAL_RCC_OscConfig+0x508>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d118      	bne.n	80042be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800428c:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <HAL_RCC_OscConfig+0x508>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <HAL_RCC_OscConfig+0x508>)
 8004292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004296:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004298:	f7fe fa08 	bl	80026ac <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a0:	f7fe fa04 	bl	80026ac <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e17a      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b2:	4b15      	ldr	r3, [pc, #84]	; (8004308 <HAL_RCC_OscConfig+0x508>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d108      	bne.n	80042d8 <HAL_RCC_OscConfig+0x4d8>
 80042c6:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	4a0d      	ldr	r2, [pc, #52]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042d6:	e029      	b.n	800432c <HAL_RCC_OscConfig+0x52c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b05      	cmp	r3, #5
 80042de:	d115      	bne.n	800430c <HAL_RCC_OscConfig+0x50c>
 80042e0:	4b08      	ldr	r3, [pc, #32]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	4a07      	ldr	r2, [pc, #28]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80042e8:	f043 0304 	orr.w	r3, r3, #4
 80042ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	4a03      	ldr	r2, [pc, #12]	; (8004304 <HAL_RCC_OscConfig+0x504>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004300:	e014      	b.n	800432c <HAL_RCC_OscConfig+0x52c>
 8004302:	bf00      	nop
 8004304:	40021000 	.word	0x40021000
 8004308:	40007000 	.word	0x40007000
 800430c:	4b9c      	ldr	r3, [pc, #624]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004312:	4a9b      	ldr	r2, [pc, #620]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800431c:	4b98      	ldr	r3, [pc, #608]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	4a97      	ldr	r2, [pc, #604]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 8004324:	f023 0304 	bic.w	r3, r3, #4
 8004328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d016      	beq.n	8004362 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fe f9ba 	bl	80026ac <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800433a:	e00a      	b.n	8004352 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433c:	f7fe f9b6 	bl	80026ac <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e12a      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004352:	4b8b      	ldr	r3, [pc, #556]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0ed      	beq.n	800433c <HAL_RCC_OscConfig+0x53c>
 8004360:	e015      	b.n	800438e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004362:	f7fe f9a3 	bl	80026ac <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004368:	e00a      	b.n	8004380 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436a:	f7fe f99f 	bl	80026ac <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	f241 3288 	movw	r2, #5000	; 0x1388
 8004378:	4293      	cmp	r3, r2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e113      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004380:	4b7f      	ldr	r3, [pc, #508]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1ed      	bne.n	800436a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800438e:	7ffb      	ldrb	r3, [r7, #31]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d105      	bne.n	80043a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004394:	4b7a      	ldr	r3, [pc, #488]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	4a79      	ldr	r2, [pc, #484]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 800439a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800439e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 80fe 	beq.w	80045a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	f040 80d0 	bne.w	8004554 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043b4:	4b72      	ldr	r3, [pc, #456]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f003 0203 	and.w	r2, r3, #3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d130      	bne.n	800442a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	3b01      	subs	r3, #1
 80043d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d127      	bne.n	800442a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d11f      	bne.n	800442a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043f4:	2a07      	cmp	r2, #7
 80043f6:	bf14      	ite	ne
 80043f8:	2201      	movne	r2, #1
 80043fa:	2200      	moveq	r2, #0
 80043fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043fe:	4293      	cmp	r3, r2
 8004400:	d113      	bne.n	800442a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	3b01      	subs	r3, #1
 8004410:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d109      	bne.n	800442a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	085b      	lsrs	r3, r3, #1
 8004422:	3b01      	subs	r3, #1
 8004424:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004426:	429a      	cmp	r2, r3
 8004428:	d06e      	beq.n	8004508 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b0c      	cmp	r3, #12
 800442e:	d069      	beq.n	8004504 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004430:	4b53      	ldr	r3, [pc, #332]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d105      	bne.n	8004448 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800443c:	4b50      	ldr	r3, [pc, #320]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0ad      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800444c:	4b4c      	ldr	r3, [pc, #304]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a4b      	ldr	r2, [pc, #300]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 8004452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004456:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004458:	f7fe f928 	bl	80026ac <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004460:	f7fe f924 	bl	80026ac <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e09a      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004472:	4b43      	ldr	r3, [pc, #268]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800447e:	4b40      	ldr	r3, [pc, #256]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	4b40      	ldr	r3, [pc, #256]	; (8004584 <HAL_RCC_OscConfig+0x784>)
 8004484:	4013      	ands	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800448e:	3a01      	subs	r2, #1
 8004490:	0112      	lsls	r2, r2, #4
 8004492:	4311      	orrs	r1, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004498:	0212      	lsls	r2, r2, #8
 800449a:	4311      	orrs	r1, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044a0:	0852      	lsrs	r2, r2, #1
 80044a2:	3a01      	subs	r2, #1
 80044a4:	0552      	lsls	r2, r2, #21
 80044a6:	4311      	orrs	r1, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044ac:	0852      	lsrs	r2, r2, #1
 80044ae:	3a01      	subs	r2, #1
 80044b0:	0652      	lsls	r2, r2, #25
 80044b2:	4311      	orrs	r1, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044b8:	0912      	lsrs	r2, r2, #4
 80044ba:	0452      	lsls	r2, r2, #17
 80044bc:	430a      	orrs	r2, r1
 80044be:	4930      	ldr	r1, [pc, #192]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044c4:	4b2e      	ldr	r3, [pc, #184]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a2d      	ldr	r2, [pc, #180]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 80044ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044d0:	4b2b      	ldr	r3, [pc, #172]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4a2a      	ldr	r2, [pc, #168]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 80044d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044dc:	f7fe f8e6 	bl	80026ac <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e4:	f7fe f8e2 	bl	80026ac <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e058      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f6:	4b22      	ldr	r3, [pc, #136]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004502:	e050      	b.n	80045a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e04f      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d148      	bne.n	80045a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004514:	4b1a      	ldr	r3, [pc, #104]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a19      	ldr	r2, [pc, #100]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 800451a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800451e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004520:	4b17      	ldr	r3, [pc, #92]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4a16      	ldr	r2, [pc, #88]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 8004526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800452a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800452c:	f7fe f8be 	bl	80026ac <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004534:	f7fe f8ba 	bl	80026ac <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e030      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004546:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x734>
 8004552:	e028      	b.n	80045a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b0c      	cmp	r3, #12
 8004558:	d023      	beq.n	80045a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a08      	ldr	r2, [pc, #32]	; (8004580 <HAL_RCC_OscConfig+0x780>)
 8004560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004566:	f7fe f8a1 	bl	80026ac <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800456c:	e00c      	b.n	8004588 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800456e:	f7fe f89d 	bl	80026ac <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d905      	bls.n	8004588 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e013      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
 8004580:	40021000 	.word	0x40021000
 8004584:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004588:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <HAL_RCC_OscConfig+0x7b0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1ec      	bne.n	800456e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <HAL_RCC_OscConfig+0x7b0>)
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	4905      	ldr	r1, [pc, #20]	; (80045b0 <HAL_RCC_OscConfig+0x7b0>)
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <HAL_RCC_OscConfig+0x7b4>)
 800459c:	4013      	ands	r3, r2
 800459e:	60cb      	str	r3, [r1, #12]
 80045a0:	e001      	b.n	80045a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3720      	adds	r7, #32
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40021000 	.word	0x40021000
 80045b4:	feeefffc 	.word	0xfeeefffc

080045b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0e7      	b.n	800479c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045cc:	4b75      	ldr	r3, [pc, #468]	; (80047a4 <HAL_RCC_ClockConfig+0x1ec>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d910      	bls.n	80045fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045da:	4b72      	ldr	r3, [pc, #456]	; (80047a4 <HAL_RCC_ClockConfig+0x1ec>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 0207 	bic.w	r2, r3, #7
 80045e2:	4970      	ldr	r1, [pc, #448]	; (80047a4 <HAL_RCC_ClockConfig+0x1ec>)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b6e      	ldr	r3, [pc, #440]	; (80047a4 <HAL_RCC_ClockConfig+0x1ec>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0cf      	b.n	800479c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d010      	beq.n	800462a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	4b66      	ldr	r3, [pc, #408]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004614:	429a      	cmp	r2, r3
 8004616:	d908      	bls.n	800462a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004618:	4b63      	ldr	r3, [pc, #396]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	4960      	ldr	r1, [pc, #384]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004626:	4313      	orrs	r3, r2
 8004628:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d04c      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b03      	cmp	r3, #3
 800463c:	d107      	bne.n	800464e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800463e:	4b5a      	ldr	r3, [pc, #360]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d121      	bne.n	800468e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e0a6      	b.n	800479c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d107      	bne.n	8004666 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004656:	4b54      	ldr	r3, [pc, #336]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d115      	bne.n	800468e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e09a      	b.n	800479c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d107      	bne.n	800467e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800466e:	4b4e      	ldr	r3, [pc, #312]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e08e      	b.n	800479c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800467e:	4b4a      	ldr	r3, [pc, #296]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e086      	b.n	800479c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800468e:	4b46      	ldr	r3, [pc, #280]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f023 0203 	bic.w	r2, r3, #3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4943      	ldr	r1, [pc, #268]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 800469c:	4313      	orrs	r3, r2
 800469e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a0:	f7fe f804 	bl	80026ac <HAL_GetTick>
 80046a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a6:	e00a      	b.n	80046be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a8:	f7fe f800 	bl	80026ac <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e06e      	b.n	800479c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046be:	4b3a      	ldr	r3, [pc, #232]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 020c 	and.w	r2, r3, #12
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d1eb      	bne.n	80046a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d010      	beq.n	80046fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	4b31      	ldr	r3, [pc, #196]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d208      	bcs.n	80046fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ec:	4b2e      	ldr	r3, [pc, #184]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	492b      	ldr	r1, [pc, #172]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046fe:	4b29      	ldr	r3, [pc, #164]	; (80047a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d210      	bcs.n	800472e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470c:	4b25      	ldr	r3, [pc, #148]	; (80047a4 <HAL_RCC_ClockConfig+0x1ec>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f023 0207 	bic.w	r2, r3, #7
 8004714:	4923      	ldr	r1, [pc, #140]	; (80047a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	4313      	orrs	r3, r2
 800471a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800471c:	4b21      	ldr	r3, [pc, #132]	; (80047a4 <HAL_RCC_ClockConfig+0x1ec>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d001      	beq.n	800472e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e036      	b.n	800479c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800473a:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	4918      	ldr	r1, [pc, #96]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004748:	4313      	orrs	r3, r2
 800474a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d009      	beq.n	800476c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004758:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4910      	ldr	r1, [pc, #64]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004768:	4313      	orrs	r3, r2
 800476a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800476c:	f000 f824 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	091b      	lsrs	r3, r3, #4
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	490b      	ldr	r1, [pc, #44]	; (80047ac <HAL_RCC_ClockConfig+0x1f4>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	fa22 f303 	lsr.w	r3, r2, r3
 8004788:	4a09      	ldr	r2, [pc, #36]	; (80047b0 <HAL_RCC_ClockConfig+0x1f8>)
 800478a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800478c:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <HAL_RCC_ClockConfig+0x1fc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f7fd ff3b 	bl	800260c <HAL_InitTick>
 8004796:	4603      	mov	r3, r0
 8004798:	72fb      	strb	r3, [r7, #11]

  return status;
 800479a:	7afb      	ldrb	r3, [r7, #11]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40022000 	.word	0x40022000
 80047a8:	40021000 	.word	0x40021000
 80047ac:	0800de84 	.word	0x0800de84
 80047b0:	20000000 	.word	0x20000000
 80047b4:	20000004 	.word	0x20000004

080047b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b089      	sub	sp, #36	; 0x24
 80047bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047c6:	4b3e      	ldr	r3, [pc, #248]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047d0:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0x34>
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b0c      	cmp	r3, #12
 80047e4:	d121      	bne.n	800482a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d11e      	bne.n	800482a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047ec:	4b34      	ldr	r3, [pc, #208]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d107      	bne.n	8004808 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047f8:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fe:	0a1b      	lsrs	r3, r3, #8
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	e005      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004808:	4b2d      	ldr	r3, [pc, #180]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	091b      	lsrs	r3, r3, #4
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004814:	4a2b      	ldr	r2, [pc, #172]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800481c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10d      	bne.n	8004840 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004828:	e00a      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2b04      	cmp	r3, #4
 800482e:	d102      	bne.n	8004836 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004830:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004832:	61bb      	str	r3, [r7, #24]
 8004834:	e004      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d101      	bne.n	8004840 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800483c:	4b23      	ldr	r3, [pc, #140]	; (80048cc <HAL_RCC_GetSysClockFreq+0x114>)
 800483e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	2b0c      	cmp	r3, #12
 8004844:	d134      	bne.n	80048b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004846:	4b1e      	ldr	r3, [pc, #120]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d003      	beq.n	800485e <HAL_RCC_GetSysClockFreq+0xa6>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b03      	cmp	r3, #3
 800485a:	d003      	beq.n	8004864 <HAL_RCC_GetSysClockFreq+0xac>
 800485c:	e005      	b.n	800486a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800485e:	4b1a      	ldr	r3, [pc, #104]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004860:	617b      	str	r3, [r7, #20]
      break;
 8004862:	e005      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004864:	4b19      	ldr	r3, [pc, #100]	; (80048cc <HAL_RCC_GetSysClockFreq+0x114>)
 8004866:	617b      	str	r3, [r7, #20]
      break;
 8004868:	e002      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	617b      	str	r3, [r7, #20]
      break;
 800486e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004870:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	3301      	adds	r3, #1
 800487c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800487e:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	fb03 f202 	mul.w	r2, r3, r2
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	0e5b      	lsrs	r3, r3, #25
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	3301      	adds	r3, #1
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048b0:	69bb      	ldr	r3, [r7, #24]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3724      	adds	r7, #36	; 0x24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40021000 	.word	0x40021000
 80048c4:	0800de9c 	.word	0x0800de9c
 80048c8:	00f42400 	.word	0x00f42400
 80048cc:	007a1200 	.word	0x007a1200

080048d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d4:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048d6:	681b      	ldr	r3, [r3, #0]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000000 	.word	0x20000000

080048e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048ec:	f7ff fff0 	bl	80048d0 <HAL_RCC_GetHCLKFreq>
 80048f0:	4602      	mov	r2, r0
 80048f2:	4b06      	ldr	r3, [pc, #24]	; (800490c <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	0a1b      	lsrs	r3, r3, #8
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	4904      	ldr	r1, [pc, #16]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048fe:	5ccb      	ldrb	r3, [r1, r3]
 8004900:	f003 031f 	and.w	r3, r3, #31
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004908:	4618      	mov	r0, r3
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40021000 	.word	0x40021000
 8004910:	0800de94 	.word	0x0800de94

08004914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004918:	f7ff ffda 	bl	80048d0 <HAL_RCC_GetHCLKFreq>
 800491c:	4602      	mov	r2, r0
 800491e:	4b06      	ldr	r3, [pc, #24]	; (8004938 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	0adb      	lsrs	r3, r3, #11
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	4904      	ldr	r1, [pc, #16]	; (800493c <HAL_RCC_GetPCLK2Freq+0x28>)
 800492a:	5ccb      	ldrb	r3, [r1, r3]
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004934:	4618      	mov	r0, r3
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40021000 	.word	0x40021000
 800493c:	0800de94 	.word	0x0800de94

08004940 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800494c:	4b2a      	ldr	r3, [pc, #168]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800494e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004958:	f7ff f9ee 	bl	8003d38 <HAL_PWREx_GetVoltageRange>
 800495c:	6178      	str	r0, [r7, #20]
 800495e:	e014      	b.n	800498a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004960:	4b25      	ldr	r3, [pc, #148]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004964:	4a24      	ldr	r2, [pc, #144]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496a:	6593      	str	r3, [r2, #88]	; 0x58
 800496c:	4b22      	ldr	r3, [pc, #136]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800496e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004978:	f7ff f9de 	bl	8003d38 <HAL_PWREx_GetVoltageRange>
 800497c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800497e:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	4a1d      	ldr	r2, [pc, #116]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004988:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004990:	d10b      	bne.n	80049aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b80      	cmp	r3, #128	; 0x80
 8004996:	d919      	bls.n	80049cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2ba0      	cmp	r3, #160	; 0xa0
 800499c:	d902      	bls.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800499e:	2302      	movs	r3, #2
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	e013      	b.n	80049cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049a4:	2301      	movs	r3, #1
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	e010      	b.n	80049cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b80      	cmp	r3, #128	; 0x80
 80049ae:	d902      	bls.n	80049b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049b0:	2303      	movs	r3, #3
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	e00a      	b.n	80049cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b80      	cmp	r3, #128	; 0x80
 80049ba:	d102      	bne.n	80049c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049bc:	2302      	movs	r3, #2
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	e004      	b.n	80049cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b70      	cmp	r3, #112	; 0x70
 80049c6:	d101      	bne.n	80049cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049c8:	2301      	movs	r3, #1
 80049ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f023 0207 	bic.w	r2, r3, #7
 80049d4:	4909      	ldr	r1, [pc, #36]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049dc:	4b07      	ldr	r3, [pc, #28]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d001      	beq.n	80049ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40022000 	.word	0x40022000

08004a00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a08:	2300      	movs	r3, #0
 8004a0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d041      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a24:	d02a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a2a:	d824      	bhi.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a30:	d008      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a36:	d81e      	bhi.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a40:	d010      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a42:	e018      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a44:	4b86      	ldr	r3, [pc, #536]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a85      	ldr	r2, [pc, #532]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a50:	e015      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	2100      	movs	r1, #0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fabb 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a62:	e00c      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3320      	adds	r3, #32
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fba6 	bl	80051bc <RCCEx_PLLSAI2_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a74:	e003      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	74fb      	strb	r3, [r7, #19]
      break;
 8004a7a:	e000      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a7e:	7cfb      	ldrb	r3, [r7, #19]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10b      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a84:	4b76      	ldr	r3, [pc, #472]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a92:	4973      	ldr	r1, [pc, #460]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a9a:	e001      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9c:	7cfb      	ldrb	r3, [r7, #19]
 8004a9e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d041      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ab0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ab4:	d02a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ab6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004aba:	d824      	bhi.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ac0:	d008      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ac2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ac6:	d81e      	bhi.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad0:	d010      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ad2:	e018      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ad4:	4b62      	ldr	r3, [pc, #392]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4a61      	ldr	r2, [pc, #388]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ade:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ae0:	e015      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fa73 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004aee:	4603      	mov	r3, r0
 8004af0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004af2:	e00c      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3320      	adds	r3, #32
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fb5e 	bl	80051bc <RCCEx_PLLSAI2_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b04:	e003      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	74fb      	strb	r3, [r7, #19]
      break;
 8004b0a:	e000      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b0e:	7cfb      	ldrb	r3, [r7, #19]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b14:	4b52      	ldr	r3, [pc, #328]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b22:	494f      	ldr	r1, [pc, #316]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b2a:	e001      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2c:	7cfb      	ldrb	r3, [r7, #19]
 8004b2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80a0 	beq.w	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b42:	4b47      	ldr	r3, [pc, #284]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b52:	2300      	movs	r3, #0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00d      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b58:	4b41      	ldr	r3, [pc, #260]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5c:	4a40      	ldr	r2, [pc, #256]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b62:	6593      	str	r3, [r2, #88]	; 0x58
 8004b64:	4b3e      	ldr	r3, [pc, #248]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b70:	2301      	movs	r3, #1
 8004b72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b74:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a3a      	ldr	r2, [pc, #232]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b80:	f7fd fd94 	bl	80026ac <HAL_GetTick>
 8004b84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b86:	e009      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b88:	f7fd fd90 	bl	80026ac <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d902      	bls.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	74fb      	strb	r3, [r7, #19]
        break;
 8004b9a:	e005      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b9c:	4b31      	ldr	r3, [pc, #196]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0ef      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d15c      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bae:	4b2c      	ldr	r3, [pc, #176]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01f      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d019      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bcc:	4b24      	ldr	r3, [pc, #144]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bd8:	4b21      	ldr	r3, [pc, #132]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	4a20      	ldr	r2, [pc, #128]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004be8:	4b1d      	ldr	r3, [pc, #116]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bee:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bf8:	4a19      	ldr	r2, [pc, #100]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d016      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0a:	f7fd fd4f 	bl	80026ac <HAL_GetTick>
 8004c0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c10:	e00b      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c12:	f7fd fd4b 	bl	80026ac <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d902      	bls.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	74fb      	strb	r3, [r7, #19]
            break;
 8004c28:	e006      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0ec      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c38:	7cfb      	ldrb	r3, [r7, #19]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10c      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c3e:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4e:	4904      	ldr	r1, [pc, #16]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c56:	e009      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c58:	7cfb      	ldrb	r3, [r7, #19]
 8004c5a:	74bb      	strb	r3, [r7, #18]
 8004c5c:	e006      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c5e:	bf00      	nop
 8004c60:	40021000 	.word	0x40021000
 8004c64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c68:	7cfb      	ldrb	r3, [r7, #19]
 8004c6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c6c:	7c7b      	ldrb	r3, [r7, #17]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d105      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c72:	4b9e      	ldr	r3, [pc, #632]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c76:	4a9d      	ldr	r2, [pc, #628]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c8a:	4b98      	ldr	r3, [pc, #608]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c90:	f023 0203 	bic.w	r2, r3, #3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	4994      	ldr	r1, [pc, #592]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cac:	4b8f      	ldr	r3, [pc, #572]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb2:	f023 020c 	bic.w	r2, r3, #12
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	498c      	ldr	r1, [pc, #560]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cce:	4b87      	ldr	r3, [pc, #540]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	4983      	ldr	r1, [pc, #524]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cf0:	4b7e      	ldr	r3, [pc, #504]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfe:	497b      	ldr	r1, [pc, #492]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d12:	4b76      	ldr	r3, [pc, #472]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d20:	4972      	ldr	r1, [pc, #456]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d34:	4b6d      	ldr	r3, [pc, #436]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d42:	496a      	ldr	r1, [pc, #424]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d56:	4b65      	ldr	r3, [pc, #404]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d64:	4961      	ldr	r1, [pc, #388]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d78:	4b5c      	ldr	r3, [pc, #368]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d86:	4959      	ldr	r1, [pc, #356]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d9a:	4b54      	ldr	r3, [pc, #336]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da8:	4950      	ldr	r1, [pc, #320]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dbc:	4b4b      	ldr	r3, [pc, #300]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dca:	4948      	ldr	r1, [pc, #288]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dde:	4b43      	ldr	r3, [pc, #268]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dec:	493f      	ldr	r1, [pc, #252]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d028      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e00:	4b3a      	ldr	r3, [pc, #232]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0e:	4937      	ldr	r1, [pc, #220]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e1e:	d106      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e20:	4b32      	ldr	r3, [pc, #200]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4a31      	ldr	r2, [pc, #196]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e2a:	60d3      	str	r3, [r2, #12]
 8004e2c:	e011      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e36:	d10c      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f8c8 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e4e:	7cfb      	ldrb	r3, [r7, #19]
 8004e50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d028      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e5e:	4b23      	ldr	r3, [pc, #140]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	491f      	ldr	r1, [pc, #124]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e7c:	d106      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e7e:	4b1b      	ldr	r3, [pc, #108]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	4a1a      	ldr	r2, [pc, #104]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e88:	60d3      	str	r3, [r2, #12]
 8004e8a:	e011      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e94:	d10c      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f899 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ea6:	7cfb      	ldrb	r3, [r7, #19]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d02b      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eca:	4908      	ldr	r1, [pc, #32]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eda:	d109      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a02      	ldr	r2, [pc, #8]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ee6:	60d3      	str	r3, [r2, #12]
 8004ee8:	e014      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004eea:	bf00      	nop
 8004eec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3304      	adds	r3, #4
 8004efe:	2101      	movs	r1, #1
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f867 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004f06:	4603      	mov	r3, r0
 8004f08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f0a:	7cfb      	ldrb	r3, [r7, #19]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f10:	7cfb      	ldrb	r3, [r7, #19]
 8004f12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d02f      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f20:	4b2b      	ldr	r3, [pc, #172]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f2e:	4928      	ldr	r1, [pc, #160]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f3e:	d10d      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3304      	adds	r3, #4
 8004f44:	2102      	movs	r1, #2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 f844 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f50:	7cfb      	ldrb	r3, [r7, #19]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d014      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f56:	7cfb      	ldrb	r3, [r7, #19]
 8004f58:	74bb      	strb	r3, [r7, #18]
 8004f5a:	e011      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f64:	d10c      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3320      	adds	r3, #32
 8004f6a:	2102      	movs	r1, #2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 f925 	bl	80051bc <RCCEx_PLLSAI2_Config>
 8004f72:	4603      	mov	r3, r0
 8004f74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f76:	7cfb      	ldrb	r3, [r7, #19]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f8c:	4b10      	ldr	r3, [pc, #64]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f9a:	490d      	ldr	r1, [pc, #52]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fae:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fbe:	4904      	ldr	r1, [pc, #16]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fc6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40021000 	.word	0x40021000

08004fd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fe2:	4b75      	ldr	r3, [pc, #468]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d018      	beq.n	8005020 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fee:	4b72      	ldr	r3, [pc, #456]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f003 0203 	and.w	r2, r3, #3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d10d      	bne.n	800501a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
       ||
 8005002:	2b00      	cmp	r3, #0
 8005004:	d009      	beq.n	800501a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005006:	4b6c      	ldr	r3, [pc, #432]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	091b      	lsrs	r3, r3, #4
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
       ||
 8005016:	429a      	cmp	r2, r3
 8005018:	d047      	beq.n	80050aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	73fb      	strb	r3, [r7, #15]
 800501e:	e044      	b.n	80050aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b03      	cmp	r3, #3
 8005026:	d018      	beq.n	800505a <RCCEx_PLLSAI1_Config+0x86>
 8005028:	2b03      	cmp	r3, #3
 800502a:	d825      	bhi.n	8005078 <RCCEx_PLLSAI1_Config+0xa4>
 800502c:	2b01      	cmp	r3, #1
 800502e:	d002      	beq.n	8005036 <RCCEx_PLLSAI1_Config+0x62>
 8005030:	2b02      	cmp	r3, #2
 8005032:	d009      	beq.n	8005048 <RCCEx_PLLSAI1_Config+0x74>
 8005034:	e020      	b.n	8005078 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005036:	4b60      	ldr	r3, [pc, #384]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d11d      	bne.n	800507e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005046:	e01a      	b.n	800507e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005048:	4b5b      	ldr	r3, [pc, #364]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005050:	2b00      	cmp	r3, #0
 8005052:	d116      	bne.n	8005082 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005058:	e013      	b.n	8005082 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800505a:	4b57      	ldr	r3, [pc, #348]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10f      	bne.n	8005086 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005066:	4b54      	ldr	r3, [pc, #336]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005076:	e006      	b.n	8005086 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
      break;
 800507c:	e004      	b.n	8005088 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800507e:	bf00      	nop
 8005080:	e002      	b.n	8005088 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005086:	bf00      	nop
    }

    if(status == HAL_OK)
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10d      	bne.n	80050aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800508e:	4b4a      	ldr	r3, [pc, #296]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6819      	ldr	r1, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	3b01      	subs	r3, #1
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	430b      	orrs	r3, r1
 80050a4:	4944      	ldr	r1, [pc, #272]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d17d      	bne.n	80051ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050b0:	4b41      	ldr	r3, [pc, #260]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a40      	ldr	r2, [pc, #256]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050bc:	f7fd faf6 	bl	80026ac <HAL_GetTick>
 80050c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050c2:	e009      	b.n	80050d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050c4:	f7fd faf2 	bl	80026ac <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d902      	bls.n	80050d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	73fb      	strb	r3, [r7, #15]
        break;
 80050d6:	e005      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050d8:	4b37      	ldr	r3, [pc, #220]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ef      	bne.n	80050c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d160      	bne.n	80051ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d111      	bne.n	8005114 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050f0:	4b31      	ldr	r3, [pc, #196]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6892      	ldr	r2, [r2, #8]
 8005100:	0211      	lsls	r1, r2, #8
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	68d2      	ldr	r2, [r2, #12]
 8005106:	0912      	lsrs	r2, r2, #4
 8005108:	0452      	lsls	r2, r2, #17
 800510a:	430a      	orrs	r2, r1
 800510c:	492a      	ldr	r1, [pc, #168]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800510e:	4313      	orrs	r3, r2
 8005110:	610b      	str	r3, [r1, #16]
 8005112:	e027      	b.n	8005164 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d112      	bne.n	8005140 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800511a:	4b27      	ldr	r3, [pc, #156]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005122:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6892      	ldr	r2, [r2, #8]
 800512a:	0211      	lsls	r1, r2, #8
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6912      	ldr	r2, [r2, #16]
 8005130:	0852      	lsrs	r2, r2, #1
 8005132:	3a01      	subs	r2, #1
 8005134:	0552      	lsls	r2, r2, #21
 8005136:	430a      	orrs	r2, r1
 8005138:	491f      	ldr	r1, [pc, #124]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800513a:	4313      	orrs	r3, r2
 800513c:	610b      	str	r3, [r1, #16]
 800513e:	e011      	b.n	8005164 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005140:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005148:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6892      	ldr	r2, [r2, #8]
 8005150:	0211      	lsls	r1, r2, #8
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6952      	ldr	r2, [r2, #20]
 8005156:	0852      	lsrs	r2, r2, #1
 8005158:	3a01      	subs	r2, #1
 800515a:	0652      	lsls	r2, r2, #25
 800515c:	430a      	orrs	r2, r1
 800515e:	4916      	ldr	r1, [pc, #88]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005160:	4313      	orrs	r3, r2
 8005162:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005164:	4b14      	ldr	r3, [pc, #80]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a13      	ldr	r2, [pc, #76]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800516a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800516e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005170:	f7fd fa9c 	bl	80026ac <HAL_GetTick>
 8005174:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005176:	e009      	b.n	800518c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005178:	f7fd fa98 	bl	80026ac <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d902      	bls.n	800518c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	73fb      	strb	r3, [r7, #15]
          break;
 800518a:	e005      	b.n	8005198 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0ef      	beq.n	8005178 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	4904      	ldr	r1, [pc, #16]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40021000 	.word	0x40021000

080051bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051ca:	4b6a      	ldr	r3, [pc, #424]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d018      	beq.n	8005208 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80051d6:	4b67      	ldr	r3, [pc, #412]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f003 0203 	and.w	r2, r3, #3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d10d      	bne.n	8005202 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
       ||
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d009      	beq.n	8005202 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80051ee:	4b61      	ldr	r3, [pc, #388]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	091b      	lsrs	r3, r3, #4
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
       ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d047      	beq.n	8005292 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	73fb      	strb	r3, [r7, #15]
 8005206:	e044      	b.n	8005292 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b03      	cmp	r3, #3
 800520e:	d018      	beq.n	8005242 <RCCEx_PLLSAI2_Config+0x86>
 8005210:	2b03      	cmp	r3, #3
 8005212:	d825      	bhi.n	8005260 <RCCEx_PLLSAI2_Config+0xa4>
 8005214:	2b01      	cmp	r3, #1
 8005216:	d002      	beq.n	800521e <RCCEx_PLLSAI2_Config+0x62>
 8005218:	2b02      	cmp	r3, #2
 800521a:	d009      	beq.n	8005230 <RCCEx_PLLSAI2_Config+0x74>
 800521c:	e020      	b.n	8005260 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800521e:	4b55      	ldr	r3, [pc, #340]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d11d      	bne.n	8005266 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800522e:	e01a      	b.n	8005266 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005230:	4b50      	ldr	r3, [pc, #320]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005238:	2b00      	cmp	r3, #0
 800523a:	d116      	bne.n	800526a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005240:	e013      	b.n	800526a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005242:	4b4c      	ldr	r3, [pc, #304]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10f      	bne.n	800526e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800524e:	4b49      	ldr	r3, [pc, #292]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800525e:	e006      	b.n	800526e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
      break;
 8005264:	e004      	b.n	8005270 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005266:	bf00      	nop
 8005268:	e002      	b.n	8005270 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800526a:	bf00      	nop
 800526c:	e000      	b.n	8005270 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800526e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10d      	bne.n	8005292 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005276:	4b3f      	ldr	r3, [pc, #252]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6819      	ldr	r1, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	3b01      	subs	r3, #1
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	430b      	orrs	r3, r1
 800528c:	4939      	ldr	r1, [pc, #228]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528e:	4313      	orrs	r3, r2
 8005290:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d167      	bne.n	8005368 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005298:	4b36      	ldr	r3, [pc, #216]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a35      	ldr	r2, [pc, #212]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a4:	f7fd fa02 	bl	80026ac <HAL_GetTick>
 80052a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052aa:	e009      	b.n	80052c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052ac:	f7fd f9fe 	bl	80026ac <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d902      	bls.n	80052c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	73fb      	strb	r3, [r7, #15]
        break;
 80052be:	e005      	b.n	80052cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052c0:	4b2c      	ldr	r3, [pc, #176]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1ef      	bne.n	80052ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d14a      	bne.n	8005368 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d111      	bne.n	80052fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052d8:	4b26      	ldr	r3, [pc, #152]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80052e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6892      	ldr	r2, [r2, #8]
 80052e8:	0211      	lsls	r1, r2, #8
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	68d2      	ldr	r2, [r2, #12]
 80052ee:	0912      	lsrs	r2, r2, #4
 80052f0:	0452      	lsls	r2, r2, #17
 80052f2:	430a      	orrs	r2, r1
 80052f4:	491f      	ldr	r1, [pc, #124]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	614b      	str	r3, [r1, #20]
 80052fa:	e011      	b.n	8005320 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052fc:	4b1d      	ldr	r3, [pc, #116]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005304:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6892      	ldr	r2, [r2, #8]
 800530c:	0211      	lsls	r1, r2, #8
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6912      	ldr	r2, [r2, #16]
 8005312:	0852      	lsrs	r2, r2, #1
 8005314:	3a01      	subs	r2, #1
 8005316:	0652      	lsls	r2, r2, #25
 8005318:	430a      	orrs	r2, r1
 800531a:	4916      	ldr	r1, [pc, #88]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 800531c:	4313      	orrs	r3, r2
 800531e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005320:	4b14      	ldr	r3, [pc, #80]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a13      	ldr	r2, [pc, #76]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532c:	f7fd f9be 	bl	80026ac <HAL_GetTick>
 8005330:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005332:	e009      	b.n	8005348 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005334:	f7fd f9ba 	bl	80026ac <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d902      	bls.n	8005348 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	73fb      	strb	r3, [r7, #15]
          break;
 8005346:	e005      	b.n	8005354 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005348:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0ef      	beq.n	8005334 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800535a:	4b06      	ldr	r3, [pc, #24]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	4904      	ldr	r1, [pc, #16]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005364:	4313      	orrs	r3, r2
 8005366:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40021000 	.word	0x40021000

08005378 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e095      	b.n	80054b6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	2b00      	cmp	r3, #0
 8005390:	d108      	bne.n	80053a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800539a:	d009      	beq.n	80053b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	61da      	str	r2, [r3, #28]
 80053a2:	e005      	b.n	80053b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fc fdc2 	bl	8001f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053f0:	d902      	bls.n	80053f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e002      	b.n	80053fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005406:	d007      	beq.n	8005418 <HAL_SPI_Init+0xa0>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005410:	d002      	beq.n	8005418 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545a:	ea42 0103 	orr.w	r1, r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	0c1b      	lsrs	r3, r3, #16
 8005474:	f003 0204 	and.w	r2, r3, #4
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005494:	ea42 0103 	orr.w	r1, r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b088      	sub	sp, #32
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	603b      	str	r3, [r7, #0]
 80054ca:	4613      	mov	r3, r2
 80054cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d101      	bne.n	80054e0 <HAL_SPI_Transmit+0x22>
 80054dc:	2302      	movs	r3, #2
 80054de:	e15f      	b.n	80057a0 <HAL_SPI_Transmit+0x2e2>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e8:	f7fd f8e0 	bl	80026ac <HAL_GetTick>
 80054ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d002      	beq.n	8005504 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
 8005500:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005502:	e148      	b.n	8005796 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_SPI_Transmit+0x52>
 800550a:	88fb      	ldrh	r3, [r7, #6]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005514:	e13f      	b.n	8005796 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2203      	movs	r2, #3
 800551a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	88fa      	ldrh	r2, [r7, #6]
 800552e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	88fa      	ldrh	r2, [r7, #6]
 8005534:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005560:	d10f      	bne.n	8005582 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005570:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005580:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d007      	beq.n	80055a0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800559e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055a8:	d94f      	bls.n	800564a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_SPI_Transmit+0xfa>
 80055b2:	8afb      	ldrh	r3, [r7, #22]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d142      	bne.n	800563e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	881a      	ldrh	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	1c9a      	adds	r2, r3, #2
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055dc:	e02f      	b.n	800563e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d112      	bne.n	8005612 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	881a      	ldrh	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	1c9a      	adds	r2, r3, #2
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005606:	b29b      	uxth	r3, r3
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005610:	e015      	b.n	800563e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005612:	f7fd f84b 	bl	80026ac <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d803      	bhi.n	800562a <HAL_SPI_Transmit+0x16c>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d102      	bne.n	8005630 <HAL_SPI_Transmit+0x172>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d106      	bne.n	800563e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800563c:	e0ab      	b.n	8005796 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005642:	b29b      	uxth	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1ca      	bne.n	80055de <HAL_SPI_Transmit+0x120>
 8005648:	e080      	b.n	800574c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <HAL_SPI_Transmit+0x19a>
 8005652:	8afb      	ldrh	r3, [r7, #22]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d174      	bne.n	8005742 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b01      	cmp	r3, #1
 8005660:	d912      	bls.n	8005688 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005666:	881a      	ldrh	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	1c9a      	adds	r2, r3, #2
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b02      	subs	r3, #2
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005686:	e05c      	b.n	8005742 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	330c      	adds	r3, #12
 8005692:	7812      	ldrb	r2, [r2, #0]
 8005694:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80056ae:	e048      	b.n	8005742 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d12b      	bne.n	8005716 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d912      	bls.n	80056ee <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056cc:	881a      	ldrh	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	1c9a      	adds	r2, r3, #2
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b02      	subs	r3, #2
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056ec:	e029      	b.n	8005742 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	330c      	adds	r3, #12
 80056f8:	7812      	ldrb	r2, [r2, #0]
 80056fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800570a:	b29b      	uxth	r3, r3
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005714:	e015      	b.n	8005742 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005716:	f7fc ffc9 	bl	80026ac <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d803      	bhi.n	800572e <HAL_SPI_Transmit+0x270>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572c:	d102      	bne.n	8005734 <HAL_SPI_Transmit+0x276>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d106      	bne.n	8005742 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005740:	e029      	b.n	8005796 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1b1      	bne.n	80056b0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	6839      	ldr	r1, [r7, #0]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 facd 	bl	8005cf0 <SPI_EndRxTxTransaction>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10a      	bne.n	8005780 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800576a:	2300      	movs	r3, #0
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	77fb      	strb	r3, [r7, #31]
 800578c:	e003      	b.n	8005796 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800579e:	7ffb      	ldrb	r3, [r7, #31]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3720      	adds	r7, #32
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	4613      	mov	r3, r2
 80057b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_SPI_Transmit_DMA+0x20>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e0d4      	b.n	8005972 <HAL_SPI_Transmit_DMA+0x1ca>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d002      	beq.n	80057e2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80057dc:	2302      	movs	r3, #2
 80057de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057e0:	e0c2      	b.n	8005968 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <HAL_SPI_Transmit_DMA+0x46>
 80057e8:	88fb      	ldrh	r3, [r7, #6]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057f2:	e0b9      	b.n	8005968 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2203      	movs	r2, #3
 80057f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	88fa      	ldrh	r2, [r7, #6]
 800580c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	88fa      	ldrh	r2, [r7, #6]
 8005812:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800583e:	d10f      	bne.n	8005860 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800584e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800585e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005864:	4a45      	ldr	r2, [pc, #276]	; (800597c <HAL_SPI_Transmit_DMA+0x1d4>)
 8005866:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	4a44      	ldr	r2, [pc, #272]	; (8005980 <HAL_SPI_Transmit_DMA+0x1d8>)
 800586e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005874:	4a43      	ldr	r2, [pc, #268]	; (8005984 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005876:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587c:	2200      	movs	r2, #0
 800587e:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800588e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005898:	d82d      	bhi.n	80058f6 <HAL_SPI_Transmit_DMA+0x14e>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a4:	d127      	bne.n	80058f6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10f      	bne.n	80058d4 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058c2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	085b      	lsrs	r3, r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058d2:	e010      	b.n	80058f6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058e2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	085b      	lsrs	r3, r3, #1
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3301      	adds	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	4619      	mov	r1, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	330c      	adds	r3, #12
 8005906:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800590e:	f7fd f8c7 	bl	8002aa0 <HAL_DMA_Start_IT>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591c:	f043 0210 	orr.w	r2, r3, #16
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005928:	e01e      	b.n	8005968 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005934:	2b40      	cmp	r3, #64	; 0x40
 8005936:	d007      	beq.n	8005948 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005946:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0220 	orr.w	r2, r2, #32
 8005956:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0202 	orr.w	r2, r2, #2
 8005966:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005970:	7dfb      	ldrb	r3, [r7, #23]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	08005a57 	.word	0x08005a57
 8005980:	080059b1 	.word	0x080059b1
 8005984:	08005a73 	.word	0x08005a73

08005988 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059bc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059be:	f7fc fe75 	bl	80026ac <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d03b      	beq.n	8005a4a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0220 	bic.w	r2, r2, #32
 80059e0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0202 	bic.w	r2, r2, #2
 80059f0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	2164      	movs	r1, #100	; 0x64
 80059f6:	6978      	ldr	r0, [r7, #20]
 80059f8:	f000 f97a 	bl	8005cf0 <SPI_EndRxTxTransaction>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a06:	f043 0220 	orr.w	r2, r3, #32
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10a      	bne.n	8005a2c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005a42:	6978      	ldr	r0, [r7, #20]
 8005a44:	f7ff ffaa 	bl	800599c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005a48:	e002      	b.n	8005a50 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005a4a:	6978      	ldr	r0, [r7, #20]
 8005a4c:	f7fb febc 	bl	80017c8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f7ff ff8f 	bl	8005988 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a6a:	bf00      	nop
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0203 	bic.w	r2, r2, #3
 8005a8e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a94:	f043 0210 	orr.w	r2, r3, #16
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f7ff ff79 	bl	800599c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ac4:	f7fc fdf2 	bl	80026ac <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	1a9b      	subs	r3, r3, r2
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ad4:	f7fc fdea 	bl	80026ac <HAL_GetTick>
 8005ad8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ada:	4b39      	ldr	r3, [pc, #228]	; (8005bc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	015b      	lsls	r3, r3, #5
 8005ae0:	0d1b      	lsrs	r3, r3, #20
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	fb02 f303 	mul.w	r3, r2, r3
 8005ae8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aea:	e054      	b.n	8005b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	d050      	beq.n	8005b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005af4:	f7fc fdda 	bl	80026ac <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d902      	bls.n	8005b0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d13d      	bne.n	8005b86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b22:	d111      	bne.n	8005b48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b2c:	d004      	beq.n	8005b38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b36:	d107      	bne.n	8005b48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b50:	d10f      	bne.n	8005b72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e017      	b.n	8005bb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	bf0c      	ite	eq
 8005ba6:	2301      	moveq	r3, #1
 8005ba8:	2300      	movne	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	461a      	mov	r2, r3
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d19b      	bne.n	8005aec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3720      	adds	r7, #32
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000000 	.word	0x20000000

08005bc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b08a      	sub	sp, #40	; 0x28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005bd6:	f7fc fd69 	bl	80026ac <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	1a9b      	subs	r3, r3, r2
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	4413      	add	r3, r2
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005be6:	f7fc fd61 	bl	80026ac <HAL_GetTick>
 8005bea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005bf4:	4b3d      	ldr	r3, [pc, #244]	; (8005cec <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	00da      	lsls	r2, r3, #3
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	0d1b      	lsrs	r3, r3, #20
 8005c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c06:	fb02 f303 	mul.w	r3, r2, r3
 8005c0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c0c:	e060      	b.n	8005cd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c14:	d107      	bne.n	8005c26 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d104      	bne.n	8005c26 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2c:	d050      	beq.n	8005cd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c2e:	f7fc fd3d 	bl	80026ac <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d902      	bls.n	8005c44 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d13d      	bne.n	8005cc0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c5c:	d111      	bne.n	8005c82 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c66:	d004      	beq.n	8005c72 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c70:	d107      	bne.n	8005c82 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c8a:	d10f      	bne.n	8005cac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005caa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e010      	b.n	8005ce2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d196      	bne.n	8005c0e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3728      	adds	r7, #40	; 0x28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20000000 	.word	0x20000000

08005cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f7ff ff5b 	bl	8005bc4 <SPI_WaitFifoStateUntilTimeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d18:	f043 0220 	orr.w	r2, r3, #32
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e027      	b.n	8005d74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2180      	movs	r1, #128	; 0x80
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f7ff fec0 	bl	8005ab4 <SPI_WaitFlagStateUntilTimeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d3e:	f043 0220 	orr.w	r2, r3, #32
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e014      	b.n	8005d74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff ff34 	bl	8005bc4 <SPI_WaitFifoStateUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d66:	f043 0220 	orr.w	r2, r3, #32
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e000      	b.n	8005d74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e049      	b.n	8005e22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fc fb22 	bl	80023ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4619      	mov	r1, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f000 f9d0 	bl	8006160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d001      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e04f      	b.n	8005ee4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a23      	ldr	r2, [pc, #140]	; (8005ef0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d01d      	beq.n	8005ea2 <HAL_TIM_Base_Start_IT+0x76>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6e:	d018      	beq.n	8005ea2 <HAL_TIM_Base_Start_IT+0x76>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1f      	ldr	r2, [pc, #124]	; (8005ef4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d013      	beq.n	8005ea2 <HAL_TIM_Base_Start_IT+0x76>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1e      	ldr	r2, [pc, #120]	; (8005ef8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00e      	beq.n	8005ea2 <HAL_TIM_Base_Start_IT+0x76>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1c      	ldr	r2, [pc, #112]	; (8005efc <HAL_TIM_Base_Start_IT+0xd0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d009      	beq.n	8005ea2 <HAL_TIM_Base_Start_IT+0x76>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d004      	beq.n	8005ea2 <HAL_TIM_Base_Start_IT+0x76>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d115      	bne.n	8005ece <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	4b17      	ldr	r3, [pc, #92]	; (8005f08 <HAL_TIM_Base_Start_IT+0xdc>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b06      	cmp	r3, #6
 8005eb2:	d015      	beq.n	8005ee0 <HAL_TIM_Base_Start_IT+0xb4>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eba:	d011      	beq.n	8005ee0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ecc:	e008      	b.n	8005ee0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 0201 	orr.w	r2, r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	e000      	b.n	8005ee2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	40012c00 	.word	0x40012c00
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	40000c00 	.word	0x40000c00
 8005f00:	40013400 	.word	0x40013400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	00010007 	.word	0x00010007

08005f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d020      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01b      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0202 	mvn.w	r2, #2
 8005f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f8e4 	bl	8006124 <HAL_TIM_IC_CaptureCallback>
 8005f5c:	e005      	b.n	8005f6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f8d6 	bl	8006110 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f8e7 	bl	8006138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d020      	beq.n	8005fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01b      	beq.n	8005fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0204 	mvn.w	r2, #4
 8005f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f8be 	bl	8006124 <HAL_TIM_IC_CaptureCallback>
 8005fa8:	e005      	b.n	8005fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f8b0 	bl	8006110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f8c1 	bl	8006138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d020      	beq.n	8006008 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01b      	beq.n	8006008 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0208 	mvn.w	r2, #8
 8005fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2204      	movs	r2, #4
 8005fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f898 	bl	8006124 <HAL_TIM_IC_CaptureCallback>
 8005ff4:	e005      	b.n	8006002 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f88a 	bl	8006110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f89b 	bl	8006138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f003 0310 	and.w	r3, r3, #16
 800600e:	2b00      	cmp	r3, #0
 8006010:	d020      	beq.n	8006054 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0210 	mvn.w	r2, #16
 8006024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2208      	movs	r2, #8
 800602a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f872 	bl	8006124 <HAL_TIM_IC_CaptureCallback>
 8006040:	e005      	b.n	800604e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f864 	bl	8006110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f875 	bl	8006138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00c      	beq.n	8006078 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0201 	mvn.w	r2, #1
 8006070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fb fbb8 	bl	80017e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00c      	beq.n	800609c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006088:	2b00      	cmp	r3, #0
 800608a:	d007      	beq.n	800609c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f98e 	bl	80063b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00c      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f986 	bl	80063cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00c      	beq.n	80060e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d007      	beq.n	80060e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f834 	bl	800614c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00c      	beq.n	8006108 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f003 0320 	and.w	r3, r3, #32
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d007      	beq.n	8006108 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f06f 0220 	mvn.w	r2, #32
 8006100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f94e 	bl	80063a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006108:	bf00      	nop
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a40      	ldr	r2, [pc, #256]	; (8006274 <TIM_Base_SetConfig+0x114>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d013      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617e:	d00f      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a3d      	ldr	r2, [pc, #244]	; (8006278 <TIM_Base_SetConfig+0x118>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00b      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a3c      	ldr	r2, [pc, #240]	; (800627c <TIM_Base_SetConfig+0x11c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d007      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a3b      	ldr	r2, [pc, #236]	; (8006280 <TIM_Base_SetConfig+0x120>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d003      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a3a      	ldr	r2, [pc, #232]	; (8006284 <TIM_Base_SetConfig+0x124>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d108      	bne.n	80061b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a2f      	ldr	r2, [pc, #188]	; (8006274 <TIM_Base_SetConfig+0x114>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01f      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c0:	d01b      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2c      	ldr	r2, [pc, #176]	; (8006278 <TIM_Base_SetConfig+0x118>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d017      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a2b      	ldr	r2, [pc, #172]	; (800627c <TIM_Base_SetConfig+0x11c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d013      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a2a      	ldr	r2, [pc, #168]	; (8006280 <TIM_Base_SetConfig+0x120>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00f      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a29      	ldr	r2, [pc, #164]	; (8006284 <TIM_Base_SetConfig+0x124>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00b      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a28      	ldr	r2, [pc, #160]	; (8006288 <TIM_Base_SetConfig+0x128>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d007      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a27      	ldr	r2, [pc, #156]	; (800628c <TIM_Base_SetConfig+0x12c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d003      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a26      	ldr	r2, [pc, #152]	; (8006290 <TIM_Base_SetConfig+0x130>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d108      	bne.n	800620c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a10      	ldr	r2, [pc, #64]	; (8006274 <TIM_Base_SetConfig+0x114>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00f      	beq.n	8006258 <TIM_Base_SetConfig+0xf8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a12      	ldr	r2, [pc, #72]	; (8006284 <TIM_Base_SetConfig+0x124>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00b      	beq.n	8006258 <TIM_Base_SetConfig+0xf8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a11      	ldr	r2, [pc, #68]	; (8006288 <TIM_Base_SetConfig+0x128>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d007      	beq.n	8006258 <TIM_Base_SetConfig+0xf8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a10      	ldr	r2, [pc, #64]	; (800628c <TIM_Base_SetConfig+0x12c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_Base_SetConfig+0xf8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a0f      	ldr	r2, [pc, #60]	; (8006290 <TIM_Base_SetConfig+0x130>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d103      	bne.n	8006260 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	615a      	str	r2, [r3, #20]
}
 8006266:	bf00      	nop
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40012c00 	.word	0x40012c00
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40013400 	.word	0x40013400
 8006288:	40014000 	.word	0x40014000
 800628c:	40014400 	.word	0x40014400
 8006290:	40014800 	.word	0x40014800

08006294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e068      	b.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a2e      	ldr	r2, [pc, #184]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d004      	beq.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a2d      	ldr	r2, [pc, #180]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d108      	bne.n	80062f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a1e      	ldr	r2, [pc, #120]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d01d      	beq.n	8006352 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631e:	d018      	beq.n	8006352 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a1b      	ldr	r2, [pc, #108]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d013      	beq.n	8006352 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a1a      	ldr	r2, [pc, #104]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00e      	beq.n	8006352 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a18      	ldr	r2, [pc, #96]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d009      	beq.n	8006352 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a13      	ldr	r2, [pc, #76]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d004      	beq.n	8006352 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a14      	ldr	r2, [pc, #80]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d10c      	bne.n	800636c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006358:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	4313      	orrs	r3, r2
 8006362:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	40012c00 	.word	0x40012c00
 8006390:	40013400 	.word	0x40013400
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40014000 	.word	0x40014000

080063a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e040      	b.n	8006474 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fc f864 	bl	80024d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2224      	movs	r2, #36	; 0x24
 800640c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0201 	bic.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fb6a 	bl	8006b00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f8af 	bl	8006590 <UART_SetConfig>
 8006432:	4603      	mov	r3, r0
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e01b      	b.n	8006474 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800644a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800645a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fbe9 	bl	8006c44 <UART_CheckIdleState>
 8006472:	4603      	mov	r3, r0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	; 0x28
 8006480:	af02      	add	r7, sp, #8
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	603b      	str	r3, [r7, #0]
 8006488:	4613      	mov	r3, r2
 800648a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006490:	2b20      	cmp	r3, #32
 8006492:	d178      	bne.n	8006586 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <HAL_UART_Transmit+0x24>
 800649a:	88fb      	ldrh	r3, [r7, #6]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e071      	b.n	8006588 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2221      	movs	r2, #33	; 0x21
 80064b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064b2:	f7fc f8fb 	bl	80026ac <HAL_GetTick>
 80064b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	88fa      	ldrh	r2, [r7, #6]
 80064bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	88fa      	ldrh	r2, [r7, #6]
 80064c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d0:	d108      	bne.n	80064e4 <HAL_UART_Transmit+0x68>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d104      	bne.n	80064e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	e003      	b.n	80064ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064ec:	e030      	b.n	8006550 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2200      	movs	r2, #0
 80064f6:	2180      	movs	r1, #128	; 0x80
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 fc4b 	bl	8006d94 <UART_WaitOnFlagUntilTimeout>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d004      	beq.n	800650e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2220      	movs	r2, #32
 8006508:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e03c      	b.n	8006588 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10b      	bne.n	800652c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	881a      	ldrh	r2, [r3, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006520:	b292      	uxth	r2, r2
 8006522:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	3302      	adds	r3, #2
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	e008      	b.n	800653e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	781a      	ldrb	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	b292      	uxth	r2, r2
 8006536:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	3301      	adds	r3, #1
 800653c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1c8      	bne.n	80064ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2200      	movs	r2, #0
 8006564:	2140      	movs	r1, #64	; 0x40
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fc14 	bl	8006d94 <UART_WaitOnFlagUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d004      	beq.n	800657c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e005      	b.n	8006588 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2220      	movs	r2, #32
 8006580:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	e000      	b.n	8006588 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006586:	2302      	movs	r3, #2
  }
}
 8006588:	4618      	mov	r0, r3
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006594:	b08a      	sub	sp, #40	; 0x28
 8006596:	af00      	add	r7, sp, #0
 8006598:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	431a      	orrs	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	4ba4      	ldr	r3, [pc, #656]	; (8006850 <UART_SetConfig+0x2c0>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	6812      	ldr	r2, [r2, #0]
 80065c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065c8:	430b      	orrs	r3, r1
 80065ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a99      	ldr	r2, [pc, #612]	; (8006854 <UART_SetConfig+0x2c4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d004      	beq.n	80065fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f8:	4313      	orrs	r3, r2
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660c:	430a      	orrs	r2, r1
 800660e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a90      	ldr	r2, [pc, #576]	; (8006858 <UART_SetConfig+0x2c8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d126      	bne.n	8006668 <UART_SetConfig+0xd8>
 800661a:	4b90      	ldr	r3, [pc, #576]	; (800685c <UART_SetConfig+0x2cc>)
 800661c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006620:	f003 0303 	and.w	r3, r3, #3
 8006624:	2b03      	cmp	r3, #3
 8006626:	d81b      	bhi.n	8006660 <UART_SetConfig+0xd0>
 8006628:	a201      	add	r2, pc, #4	; (adr r2, 8006630 <UART_SetConfig+0xa0>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	08006641 	.word	0x08006641
 8006634:	08006651 	.word	0x08006651
 8006638:	08006649 	.word	0x08006649
 800663c:	08006659 	.word	0x08006659
 8006640:	2301      	movs	r3, #1
 8006642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006646:	e116      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006648:	2302      	movs	r3, #2
 800664a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800664e:	e112      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006650:	2304      	movs	r3, #4
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006656:	e10e      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006658:	2308      	movs	r3, #8
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800665e:	e10a      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006660:	2310      	movs	r3, #16
 8006662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006666:	e106      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a7c      	ldr	r2, [pc, #496]	; (8006860 <UART_SetConfig+0x2d0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d138      	bne.n	80066e4 <UART_SetConfig+0x154>
 8006672:	4b7a      	ldr	r3, [pc, #488]	; (800685c <UART_SetConfig+0x2cc>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006678:	f003 030c 	and.w	r3, r3, #12
 800667c:	2b0c      	cmp	r3, #12
 800667e:	d82d      	bhi.n	80066dc <UART_SetConfig+0x14c>
 8006680:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <UART_SetConfig+0xf8>)
 8006682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006686:	bf00      	nop
 8006688:	080066bd 	.word	0x080066bd
 800668c:	080066dd 	.word	0x080066dd
 8006690:	080066dd 	.word	0x080066dd
 8006694:	080066dd 	.word	0x080066dd
 8006698:	080066cd 	.word	0x080066cd
 800669c:	080066dd 	.word	0x080066dd
 80066a0:	080066dd 	.word	0x080066dd
 80066a4:	080066dd 	.word	0x080066dd
 80066a8:	080066c5 	.word	0x080066c5
 80066ac:	080066dd 	.word	0x080066dd
 80066b0:	080066dd 	.word	0x080066dd
 80066b4:	080066dd 	.word	0x080066dd
 80066b8:	080066d5 	.word	0x080066d5
 80066bc:	2300      	movs	r3, #0
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c2:	e0d8      	b.n	8006876 <UART_SetConfig+0x2e6>
 80066c4:	2302      	movs	r3, #2
 80066c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ca:	e0d4      	b.n	8006876 <UART_SetConfig+0x2e6>
 80066cc:	2304      	movs	r3, #4
 80066ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d2:	e0d0      	b.n	8006876 <UART_SetConfig+0x2e6>
 80066d4:	2308      	movs	r3, #8
 80066d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066da:	e0cc      	b.n	8006876 <UART_SetConfig+0x2e6>
 80066dc:	2310      	movs	r3, #16
 80066de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066e2:	e0c8      	b.n	8006876 <UART_SetConfig+0x2e6>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a5e      	ldr	r2, [pc, #376]	; (8006864 <UART_SetConfig+0x2d4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d125      	bne.n	800673a <UART_SetConfig+0x1aa>
 80066ee:	4b5b      	ldr	r3, [pc, #364]	; (800685c <UART_SetConfig+0x2cc>)
 80066f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066f8:	2b30      	cmp	r3, #48	; 0x30
 80066fa:	d016      	beq.n	800672a <UART_SetConfig+0x19a>
 80066fc:	2b30      	cmp	r3, #48	; 0x30
 80066fe:	d818      	bhi.n	8006732 <UART_SetConfig+0x1a2>
 8006700:	2b20      	cmp	r3, #32
 8006702:	d00a      	beq.n	800671a <UART_SetConfig+0x18a>
 8006704:	2b20      	cmp	r3, #32
 8006706:	d814      	bhi.n	8006732 <UART_SetConfig+0x1a2>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <UART_SetConfig+0x182>
 800670c:	2b10      	cmp	r3, #16
 800670e:	d008      	beq.n	8006722 <UART_SetConfig+0x192>
 8006710:	e00f      	b.n	8006732 <UART_SetConfig+0x1a2>
 8006712:	2300      	movs	r3, #0
 8006714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006718:	e0ad      	b.n	8006876 <UART_SetConfig+0x2e6>
 800671a:	2302      	movs	r3, #2
 800671c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006720:	e0a9      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006722:	2304      	movs	r3, #4
 8006724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006728:	e0a5      	b.n	8006876 <UART_SetConfig+0x2e6>
 800672a:	2308      	movs	r3, #8
 800672c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006730:	e0a1      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006732:	2310      	movs	r3, #16
 8006734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006738:	e09d      	b.n	8006876 <UART_SetConfig+0x2e6>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a4a      	ldr	r2, [pc, #296]	; (8006868 <UART_SetConfig+0x2d8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d125      	bne.n	8006790 <UART_SetConfig+0x200>
 8006744:	4b45      	ldr	r3, [pc, #276]	; (800685c <UART_SetConfig+0x2cc>)
 8006746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800674e:	2bc0      	cmp	r3, #192	; 0xc0
 8006750:	d016      	beq.n	8006780 <UART_SetConfig+0x1f0>
 8006752:	2bc0      	cmp	r3, #192	; 0xc0
 8006754:	d818      	bhi.n	8006788 <UART_SetConfig+0x1f8>
 8006756:	2b80      	cmp	r3, #128	; 0x80
 8006758:	d00a      	beq.n	8006770 <UART_SetConfig+0x1e0>
 800675a:	2b80      	cmp	r3, #128	; 0x80
 800675c:	d814      	bhi.n	8006788 <UART_SetConfig+0x1f8>
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <UART_SetConfig+0x1d8>
 8006762:	2b40      	cmp	r3, #64	; 0x40
 8006764:	d008      	beq.n	8006778 <UART_SetConfig+0x1e8>
 8006766:	e00f      	b.n	8006788 <UART_SetConfig+0x1f8>
 8006768:	2300      	movs	r3, #0
 800676a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800676e:	e082      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006770:	2302      	movs	r3, #2
 8006772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006776:	e07e      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006778:	2304      	movs	r3, #4
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677e:	e07a      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006780:	2308      	movs	r3, #8
 8006782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006786:	e076      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006788:	2310      	movs	r3, #16
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678e:	e072      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a35      	ldr	r2, [pc, #212]	; (800686c <UART_SetConfig+0x2dc>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d12a      	bne.n	80067f0 <UART_SetConfig+0x260>
 800679a:	4b30      	ldr	r3, [pc, #192]	; (800685c <UART_SetConfig+0x2cc>)
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067a8:	d01a      	beq.n	80067e0 <UART_SetConfig+0x250>
 80067aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067ae:	d81b      	bhi.n	80067e8 <UART_SetConfig+0x258>
 80067b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b4:	d00c      	beq.n	80067d0 <UART_SetConfig+0x240>
 80067b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ba:	d815      	bhi.n	80067e8 <UART_SetConfig+0x258>
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <UART_SetConfig+0x238>
 80067c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c4:	d008      	beq.n	80067d8 <UART_SetConfig+0x248>
 80067c6:	e00f      	b.n	80067e8 <UART_SetConfig+0x258>
 80067c8:	2300      	movs	r3, #0
 80067ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ce:	e052      	b.n	8006876 <UART_SetConfig+0x2e6>
 80067d0:	2302      	movs	r3, #2
 80067d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d6:	e04e      	b.n	8006876 <UART_SetConfig+0x2e6>
 80067d8:	2304      	movs	r3, #4
 80067da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067de:	e04a      	b.n	8006876 <UART_SetConfig+0x2e6>
 80067e0:	2308      	movs	r3, #8
 80067e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e6:	e046      	b.n	8006876 <UART_SetConfig+0x2e6>
 80067e8:	2310      	movs	r3, #16
 80067ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ee:	e042      	b.n	8006876 <UART_SetConfig+0x2e6>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a17      	ldr	r2, [pc, #92]	; (8006854 <UART_SetConfig+0x2c4>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d13a      	bne.n	8006870 <UART_SetConfig+0x2e0>
 80067fa:	4b18      	ldr	r3, [pc, #96]	; (800685c <UART_SetConfig+0x2cc>)
 80067fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006800:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006804:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006808:	d01a      	beq.n	8006840 <UART_SetConfig+0x2b0>
 800680a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800680e:	d81b      	bhi.n	8006848 <UART_SetConfig+0x2b8>
 8006810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006814:	d00c      	beq.n	8006830 <UART_SetConfig+0x2a0>
 8006816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800681a:	d815      	bhi.n	8006848 <UART_SetConfig+0x2b8>
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <UART_SetConfig+0x298>
 8006820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006824:	d008      	beq.n	8006838 <UART_SetConfig+0x2a8>
 8006826:	e00f      	b.n	8006848 <UART_SetConfig+0x2b8>
 8006828:	2300      	movs	r3, #0
 800682a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800682e:	e022      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006830:	2302      	movs	r3, #2
 8006832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006836:	e01e      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006838:	2304      	movs	r3, #4
 800683a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683e:	e01a      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006840:	2308      	movs	r3, #8
 8006842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006846:	e016      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006848:	2310      	movs	r3, #16
 800684a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684e:	e012      	b.n	8006876 <UART_SetConfig+0x2e6>
 8006850:	efff69f3 	.word	0xefff69f3
 8006854:	40008000 	.word	0x40008000
 8006858:	40013800 	.word	0x40013800
 800685c:	40021000 	.word	0x40021000
 8006860:	40004400 	.word	0x40004400
 8006864:	40004800 	.word	0x40004800
 8006868:	40004c00 	.word	0x40004c00
 800686c:	40005000 	.word	0x40005000
 8006870:	2310      	movs	r3, #16
 8006872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a9f      	ldr	r2, [pc, #636]	; (8006af8 <UART_SetConfig+0x568>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d17a      	bne.n	8006976 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006880:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006884:	2b08      	cmp	r3, #8
 8006886:	d824      	bhi.n	80068d2 <UART_SetConfig+0x342>
 8006888:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <UART_SetConfig+0x300>)
 800688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688e:	bf00      	nop
 8006890:	080068b5 	.word	0x080068b5
 8006894:	080068d3 	.word	0x080068d3
 8006898:	080068bd 	.word	0x080068bd
 800689c:	080068d3 	.word	0x080068d3
 80068a0:	080068c3 	.word	0x080068c3
 80068a4:	080068d3 	.word	0x080068d3
 80068a8:	080068d3 	.word	0x080068d3
 80068ac:	080068d3 	.word	0x080068d3
 80068b0:	080068cb 	.word	0x080068cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068b4:	f7fe f818 	bl	80048e8 <HAL_RCC_GetPCLK1Freq>
 80068b8:	61f8      	str	r0, [r7, #28]
        break;
 80068ba:	e010      	b.n	80068de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068bc:	4b8f      	ldr	r3, [pc, #572]	; (8006afc <UART_SetConfig+0x56c>)
 80068be:	61fb      	str	r3, [r7, #28]
        break;
 80068c0:	e00d      	b.n	80068de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068c2:	f7fd ff79 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 80068c6:	61f8      	str	r0, [r7, #28]
        break;
 80068c8:	e009      	b.n	80068de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ce:	61fb      	str	r3, [r7, #28]
        break;
 80068d0:	e005      	b.n	80068de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 80fb 	beq.w	8006adc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	4413      	add	r3, r2
 80068f0:	69fa      	ldr	r2, [r7, #28]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d305      	bcc.n	8006902 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068fc:	69fa      	ldr	r2, [r7, #28]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d903      	bls.n	800690a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006908:	e0e8      	b.n	8006adc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	2200      	movs	r2, #0
 800690e:	461c      	mov	r4, r3
 8006910:	4615      	mov	r5, r2
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	f04f 0300 	mov.w	r3, #0
 800691a:	022b      	lsls	r3, r5, #8
 800691c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006920:	0222      	lsls	r2, r4, #8
 8006922:	68f9      	ldr	r1, [r7, #12]
 8006924:	6849      	ldr	r1, [r1, #4]
 8006926:	0849      	lsrs	r1, r1, #1
 8006928:	2000      	movs	r0, #0
 800692a:	4688      	mov	r8, r1
 800692c:	4681      	mov	r9, r0
 800692e:	eb12 0a08 	adds.w	sl, r2, r8
 8006932:	eb43 0b09 	adc.w	fp, r3, r9
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	603b      	str	r3, [r7, #0]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006944:	4650      	mov	r0, sl
 8006946:	4659      	mov	r1, fp
 8006948:	f7fa f97e 	bl	8000c48 <__aeabi_uldivmod>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4613      	mov	r3, r2
 8006952:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800695a:	d308      	bcc.n	800696e <UART_SetConfig+0x3de>
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006962:	d204      	bcs.n	800696e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	60da      	str	r2, [r3, #12]
 800696c:	e0b6      	b.n	8006adc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006974:	e0b2      	b.n	8006adc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800697e:	d15e      	bne.n	8006a3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006980:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006984:	2b08      	cmp	r3, #8
 8006986:	d828      	bhi.n	80069da <UART_SetConfig+0x44a>
 8006988:	a201      	add	r2, pc, #4	; (adr r2, 8006990 <UART_SetConfig+0x400>)
 800698a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698e:	bf00      	nop
 8006990:	080069b5 	.word	0x080069b5
 8006994:	080069bd 	.word	0x080069bd
 8006998:	080069c5 	.word	0x080069c5
 800699c:	080069db 	.word	0x080069db
 80069a0:	080069cb 	.word	0x080069cb
 80069a4:	080069db 	.word	0x080069db
 80069a8:	080069db 	.word	0x080069db
 80069ac:	080069db 	.word	0x080069db
 80069b0:	080069d3 	.word	0x080069d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b4:	f7fd ff98 	bl	80048e8 <HAL_RCC_GetPCLK1Freq>
 80069b8:	61f8      	str	r0, [r7, #28]
        break;
 80069ba:	e014      	b.n	80069e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069bc:	f7fd ffaa 	bl	8004914 <HAL_RCC_GetPCLK2Freq>
 80069c0:	61f8      	str	r0, [r7, #28]
        break;
 80069c2:	e010      	b.n	80069e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c4:	4b4d      	ldr	r3, [pc, #308]	; (8006afc <UART_SetConfig+0x56c>)
 80069c6:	61fb      	str	r3, [r7, #28]
        break;
 80069c8:	e00d      	b.n	80069e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ca:	f7fd fef5 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 80069ce:	61f8      	str	r0, [r7, #28]
        break;
 80069d0:	e009      	b.n	80069e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069d6:	61fb      	str	r3, [r7, #28]
        break;
 80069d8:	e005      	b.n	80069e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d077      	beq.n	8006adc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	005a      	lsls	r2, r3, #1
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	085b      	lsrs	r3, r3, #1
 80069f6:	441a      	add	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2b0f      	cmp	r3, #15
 8006a06:	d916      	bls.n	8006a36 <UART_SetConfig+0x4a6>
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a0e:	d212      	bcs.n	8006a36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f023 030f 	bic.w	r3, r3, #15
 8006a18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	085b      	lsrs	r3, r3, #1
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	8afb      	ldrh	r3, [r7, #22]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	8afa      	ldrh	r2, [r7, #22]
 8006a32:	60da      	str	r2, [r3, #12]
 8006a34:	e052      	b.n	8006adc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a3c:	e04e      	b.n	8006adc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a42:	2b08      	cmp	r3, #8
 8006a44:	d827      	bhi.n	8006a96 <UART_SetConfig+0x506>
 8006a46:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <UART_SetConfig+0x4bc>)
 8006a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4c:	08006a71 	.word	0x08006a71
 8006a50:	08006a79 	.word	0x08006a79
 8006a54:	08006a81 	.word	0x08006a81
 8006a58:	08006a97 	.word	0x08006a97
 8006a5c:	08006a87 	.word	0x08006a87
 8006a60:	08006a97 	.word	0x08006a97
 8006a64:	08006a97 	.word	0x08006a97
 8006a68:	08006a97 	.word	0x08006a97
 8006a6c:	08006a8f 	.word	0x08006a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a70:	f7fd ff3a 	bl	80048e8 <HAL_RCC_GetPCLK1Freq>
 8006a74:	61f8      	str	r0, [r7, #28]
        break;
 8006a76:	e014      	b.n	8006aa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a78:	f7fd ff4c 	bl	8004914 <HAL_RCC_GetPCLK2Freq>
 8006a7c:	61f8      	str	r0, [r7, #28]
        break;
 8006a7e:	e010      	b.n	8006aa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a80:	4b1e      	ldr	r3, [pc, #120]	; (8006afc <UART_SetConfig+0x56c>)
 8006a82:	61fb      	str	r3, [r7, #28]
        break;
 8006a84:	e00d      	b.n	8006aa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a86:	f7fd fe97 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 8006a8a:	61f8      	str	r0, [r7, #28]
        break;
 8006a8c:	e009      	b.n	8006aa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a92:	61fb      	str	r3, [r7, #28]
        break;
 8006a94:	e005      	b.n	8006aa2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006aa0:	bf00      	nop
    }

    if (pclk != 0U)
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d019      	beq.n	8006adc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	085a      	lsrs	r2, r3, #1
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	441a      	add	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2b0f      	cmp	r3, #15
 8006ac0:	d909      	bls.n	8006ad6 <UART_SetConfig+0x546>
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ac8:	d205      	bcs.n	8006ad6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60da      	str	r2, [r3, #12]
 8006ad4:	e002      	b.n	8006adc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ae8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3728      	adds	r7, #40	; 0x28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006af6:	bf00      	nop
 8006af8:	40008000 	.word	0x40008000
 8006afc:	00f42400 	.word	0x00f42400

08006b00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	f003 0308 	and.w	r3, r3, #8
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00a      	beq.n	8006b2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00a      	beq.n	8006b4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00a      	beq.n	8006b6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	f003 0310 	and.w	r3, r3, #16
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00a      	beq.n	8006bb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	f003 0320 	and.w	r3, r3, #32
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00a      	beq.n	8006bd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01a      	beq.n	8006c16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bfe:	d10a      	bne.n	8006c16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	605a      	str	r2, [r3, #4]
  }
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b098      	sub	sp, #96	; 0x60
 8006c48:	af02      	add	r7, sp, #8
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c54:	f7fb fd2a 	bl	80026ac <HAL_GetTick>
 8006c58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d12e      	bne.n	8006cc6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c70:	2200      	movs	r2, #0
 8006c72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f88c 	bl	8006d94 <UART_WaitOnFlagUntilTimeout>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d021      	beq.n	8006cc6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	e853 3f00 	ldrex	r3, [r3]
 8006c8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c96:	653b      	str	r3, [r7, #80]	; 0x50
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ca2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ca8:	e841 2300 	strex	r3, r2, [r1]
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e6      	bne.n	8006c82 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e062      	b.n	8006d8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d149      	bne.n	8006d68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f856 	bl	8006d94 <UART_WaitOnFlagUntilTimeout>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d03c      	beq.n	8006d68 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	623b      	str	r3, [r7, #32]
   return(result);
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d0c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e6      	bne.n	8006cee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3308      	adds	r3, #8
 8006d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	e853 3f00 	ldrex	r3, [r3]
 8006d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 0301 	bic.w	r3, r3, #1
 8006d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d40:	61fa      	str	r2, [r7, #28]
 8006d42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	69b9      	ldr	r1, [r7, #24]
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	e841 2300 	strex	r3, r2, [r1]
 8006d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e5      	bne.n	8006d20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e011      	b.n	8006d8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2220      	movs	r2, #32
 8006d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3758      	adds	r7, #88	; 0x58
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	4613      	mov	r3, r2
 8006da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da4:	e049      	b.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dac:	d045      	beq.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dae:	f7fb fc7d 	bl	80026ac <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d302      	bcc.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e048      	b.n	8006e5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d031      	beq.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	d110      	bne.n	8006e06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2208      	movs	r2, #8
 8006dea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 f838 	bl	8006e62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2208      	movs	r2, #8
 8006df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e029      	b.n	8006e5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e14:	d111      	bne.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f81e 	bl	8006e62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e00f      	b.n	8006e5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69da      	ldr	r2, [r3, #28]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	4013      	ands	r3, r2
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	bf0c      	ite	eq
 8006e4a:	2301      	moveq	r3, #1
 8006e4c:	2300      	movne	r3, #0
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	461a      	mov	r2, r3
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d0a6      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b095      	sub	sp, #84	; 0x54
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e88:	643b      	str	r3, [r7, #64]	; 0x40
 8006e8a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e6      	bne.n	8006e6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	f023 0301 	bic.w	r3, r3, #1
 8006eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ebc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e5      	bne.n	8006e9c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d118      	bne.n	8006f0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f023 0310 	bic.w	r3, r3, #16
 8006eec:	647b      	str	r3, [r7, #68]	; 0x44
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ef6:	61bb      	str	r3, [r7, #24]
 8006ef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6979      	ldr	r1, [r7, #20]
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	613b      	str	r3, [r7, #16]
   return(result);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e6      	bne.n	8006ed8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f1e:	bf00      	nop
 8006f20:	3754      	adds	r7, #84	; 0x54
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	881a      	ldrh	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	799b      	ldrb	r3, [r3, #6]
 8006f3c:	08db      	lsrs	r3, r3, #3
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	fb12 f303 	smulbb	r3, r2, r3
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	889b      	ldrh	r3, [r3, #4]
 8006f50:	461a      	mov	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	885b      	ldrh	r3, [r3, #2]
 8006f56:	fb02 f303 	mul.w	r3, r2, r3
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	60da      	str	r2, [r3, #12]
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8006f72:	b490      	push	{r4, r7}
 8006f74:	b086      	sub	sp, #24
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	4604      	mov	r4, r0
 8006f7a:	4608      	mov	r0, r1
 8006f7c:	1d39      	adds	r1, r7, #4
 8006f7e:	e881 000c 	stmia.w	r1, {r2, r3}
 8006f82:	4623      	mov	r3, r4
 8006f84:	81fb      	strh	r3, [r7, #14]
 8006f86:	4603      	mov	r3, r0
 8006f88:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8006f8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f92:	88ba      	ldrh	r2, [r7, #4]
 8006f94:	4293      	cmp	r3, r2
 8006f96:	da04      	bge.n	8006fa2 <code+0x30>
        code |= LEFT;
 8006f98:	2201      	movs	r2, #1
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	75fb      	strb	r3, [r7, #23]
 8006fa0:	e008      	b.n	8006fb4 <code+0x42>
    } else if (x0 > window.x1) {
 8006fa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fa6:	893a      	ldrh	r2, [r7, #8]
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	dd03      	ble.n	8006fb4 <code+0x42>
        code |= RIGHT;
 8006fac:	2202      	movs	r2, #2
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8006fb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006fb8:	88fa      	ldrh	r2, [r7, #6]
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	da04      	bge.n	8006fc8 <code+0x56>
        code |= BOTTOM;
 8006fbe:	2204      	movs	r2, #4
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	75fb      	strb	r3, [r7, #23]
 8006fc6:	e008      	b.n	8006fda <code+0x68>
    } else if (y0 > window.y1) {
 8006fc8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006fcc:	897a      	ldrh	r2, [r7, #10]
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	dd03      	ble.n	8006fda <code+0x68>
        code |= TOP;
 8006fd2:	2208      	movs	r2, #8
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc90      	pop	{r4, r7}
 8006fe4:	4770      	bx	lr

08006fe6 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b088      	sub	sp, #32
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
 8006ff2:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007000:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007004:	cb0c      	ldmia	r3, {r2, r3}
 8007006:	f7ff ffb4 	bl	8006f72 <code>
 800700a:	4603      	mov	r3, r0
 800700c:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	f9b3 1000 	ldrsh.w	r1, [r3]
 800701a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800701e:	cb0c      	ldmia	r3, {r2, r3}
 8007020:	f7ff ffa7 	bl	8006f72 <code>
 8007024:	4603      	mov	r3, r0
 8007026:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8007028:	2300      	movs	r3, #0
 800702a:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 800702c:	7ffa      	ldrb	r2, [r7, #31]
 800702e:	7fbb      	ldrb	r3, [r7, #30]
 8007030:	4313      	orrs	r3, r2
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d102      	bne.n	800703e <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8007038:	2301      	movs	r3, #1
 800703a:	777b      	strb	r3, [r7, #29]
            break;
 800703c:	e0e9      	b.n	8007212 <clip_line+0x22c>
        } else if (code0 & code1) {
 800703e:	7ffa      	ldrb	r2, [r7, #31]
 8007040:	7fbb      	ldrb	r3, [r7, #30]
 8007042:	4013      	ands	r3, r2
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	f040 80e2 	bne.w	8007210 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8007054:	7ffb      	ldrb	r3, [r7, #31]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <clip_line+0x78>
 800705a:	7ffb      	ldrb	r3, [r7, #31]
 800705c:	e000      	b.n	8007060 <clip_line+0x7a>
 800705e:	7fbb      	ldrb	r3, [r7, #30]
 8007060:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8007062:	2208      	movs	r2, #8
 8007064:	7dfb      	ldrb	r3, [r7, #23]
 8007066:	4013      	ands	r3, r2
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d024      	beq.n	80070b8 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007074:	b29a      	uxth	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800707c:	4619      	mov	r1, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007084:	1acb      	subs	r3, r1, r3
 8007086:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8007088:	4608      	mov	r0, r1
 800708a:	68b9      	ldr	r1, [r7, #8]
 800708c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007090:	1a41      	subs	r1, r0, r1
 8007092:	fb03 f101 	mul.w	r1, r3, r1
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800709c:	4618      	mov	r0, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070a4:	1ac3      	subs	r3, r0, r3
 80070a6:	fb91 f3f3 	sdiv	r3, r1, r3
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	4413      	add	r3, r2
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 80070b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80070b4:	833b      	strh	r3, [r7, #24]
 80070b6:	e07f      	b.n	80071b8 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 80070b8:	2204      	movs	r2, #4
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	4013      	ands	r3, r2
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d024      	beq.n	800710e <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070d2:	4619      	mov	r1, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070da:	1acb      	subs	r3, r1, r3
 80070dc:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80070de:	4608      	mov	r0, r1
 80070e0:	68b9      	ldr	r1, [r7, #8]
 80070e2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80070e6:	1a41      	subs	r1, r0, r1
 80070e8:	fb03 f101 	mul.w	r1, r3, r1
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070f2:	4618      	mov	r0, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070fa:	1ac3      	subs	r3, r0, r3
 80070fc:	fb91 f3f3 	sdiv	r3, r1, r3
 8007100:	b29b      	uxth	r3, r3
 8007102:	4413      	add	r3, r2
 8007104:	b29b      	uxth	r3, r3
 8007106:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8007108:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800710a:	833b      	strh	r3, [r7, #24]
 800710c:	e054      	b.n	80071b8 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 800710e:	2202      	movs	r2, #2
 8007110:	7dfb      	ldrb	r3, [r7, #23]
 8007112:	4013      	ands	r3, r2
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d024      	beq.n	8007164 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007120:	b29a      	uxth	r2, r3
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007128:	4619      	mov	r1, r3
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007130:	1acb      	subs	r3, r1, r3
 8007132:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8007134:	4608      	mov	r0, r1
 8007136:	68f9      	ldr	r1, [r7, #12]
 8007138:	f9b1 1000 	ldrsh.w	r1, [r1]
 800713c:	1a41      	subs	r1, r0, r1
 800713e:	fb03 f101 	mul.w	r1, r3, r1
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007148:	4618      	mov	r0, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007150:	1ac3      	subs	r3, r0, r3
 8007152:	fb91 f3f3 	sdiv	r3, r1, r3
 8007156:	b29b      	uxth	r3, r3
 8007158:	4413      	add	r3, r2
 800715a:	b29b      	uxth	r3, r3
 800715c:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 800715e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007160:	837b      	strh	r3, [r7, #26]
 8007162:	e029      	b.n	80071b8 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8007164:	2201      	movs	r2, #1
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	4013      	ands	r3, r2
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d023      	beq.n	80071b8 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007176:	b29a      	uxth	r2, r3
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800717e:	4619      	mov	r1, r3
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007186:	1acb      	subs	r3, r1, r3
 8007188:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800718a:	4608      	mov	r0, r1
 800718c:	68f9      	ldr	r1, [r7, #12]
 800718e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007192:	1a41      	subs	r1, r0, r1
 8007194:	fb03 f101 	mul.w	r1, r3, r1
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800719e:	4618      	mov	r0, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071a6:	1ac3      	subs	r3, r0, r3
 80071a8:	fb91 f3f3 	sdiv	r3, r1, r3
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	4413      	add	r3, r2
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 80071b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80071b6:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 80071b8:	7dfa      	ldrb	r2, [r7, #23]
 80071ba:	7ffb      	ldrb	r3, [r7, #31]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d113      	bne.n	80071e8 <clip_line+0x202>
                *x0 = x;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8b7a      	ldrh	r2, [r7, #26]
 80071c4:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	8b3a      	ldrh	r2, [r7, #24]
 80071ca:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f9b3 0000 	ldrsh.w	r0, [r3]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80071d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071dc:	cb0c      	ldmia	r3, {r2, r3}
 80071de:	f7ff fec8 	bl	8006f72 <code>
 80071e2:	4603      	mov	r3, r0
 80071e4:	77fb      	strb	r3, [r7, #31]
 80071e6:	e721      	b.n	800702c <clip_line+0x46>
            } else {
                *x1 = x;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8b7a      	ldrh	r2, [r7, #26]
 80071ec:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	8b3a      	ldrh	r2, [r7, #24]
 80071f2:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007204:	cb0c      	ldmia	r3, {r2, r3}
 8007206:	f7ff feb4 	bl	8006f72 <code>
 800720a:	4603      	mov	r3, r0
 800720c:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 800720e:	e70d      	b.n	800702c <clip_line+0x46>
            break;
 8007210:	bf00      	nop
            }
        }
    }

    return accept;
 8007212:	7f7b      	ldrb	r3, [r7, #29]
 8007214:	4618      	mov	r0, r3
 8007216:	3720      	adds	r7, #32
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	3306      	adds	r3, #6
 800722c:	2208      	movs	r2, #8
 800722e:	4619      	mov	r1, r3
 8007230:	f001 fb0d 	bl	800884e <memcpy>
    meta->width = font[FONTX_WIDTH];
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	330e      	adds	r3, #14
 8007238:	781a      	ldrb	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	330f      	adds	r3, #15
 8007242:	781a      	ldrb	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	3310      	adds	r3, #16
 800724c:	781a      	ldrb	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	72da      	strb	r2, [r3, #11]

    return 0;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 800725c:	b580      	push	{r7, lr}
 800725e:	b08e      	sub	sp, #56	; 0x38
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8007268:	f107 0314 	add.w	r3, r7, #20
 800726c:	6879      	ldr	r1, [r7, #4]
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff ffd4 	bl	800721c <fontx_meta>
 8007274:	4603      	mov	r3, r0
 8007276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 800727a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <fontx_glyph+0x2c>
        return status;
 8007282:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007286:	e077      	b.n	8007378 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8007288:	7f7a      	ldrb	r2, [r7, #29]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 800728e:	7fba      	ldrb	r2, [r7, #30]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8007294:	7f7b      	ldrb	r3, [r7, #29]
 8007296:	3307      	adds	r3, #7
 8007298:	2b00      	cmp	r3, #0
 800729a:	da00      	bge.n	800729e <fontx_glyph+0x42>
 800729c:	3307      	adds	r3, #7
 800729e:	10db      	asrs	r3, r3, #3
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	78da      	ldrb	r2, [r3, #3]
 80072aa:	7fbb      	ldrb	r3, [r7, #30]
 80072ac:	fb12 f303 	smulbb	r3, r2, r3
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 80072b6:	7ffb      	ldrb	r3, [r7, #31]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10f      	bne.n	80072dc <fontx_glyph+0x80>
        if (code < 0x100) {
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2bff      	cmp	r3, #255	; 0xff
 80072c0:	d859      	bhi.n	8007376 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	789b      	ldrb	r3, [r3, #2]
 80072c6:	461a      	mov	r2, r3
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	fb02 f303 	mul.w	r3, r2, r3
 80072ce:	3311      	adds	r3, #17
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	441a      	add	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	e04d      	b.n	8007378 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3312      	adds	r3, #18
 80072e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 80072e2:	2300      	movs	r3, #0
 80072e4:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3311      	adds	r3, #17
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 80072ee:	e03d      	b.n	800736c <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	461a      	mov	r2, r3
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	3301      	adds	r3, #1
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	4413      	add	r3, r2
 8007300:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	3302      	adds	r3, #2
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	461a      	mov	r2, r3
 800730a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730c:	3303      	adds	r3, #3
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	4413      	add	r3, r2
 8007314:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	429a      	cmp	r2, r3
 800731c:	d31c      	bcc.n	8007358 <fontx_glyph+0xfc>
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	429a      	cmp	r2, r3
 8007324:	d818      	bhi.n	8007358 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800732e:	4413      	add	r3, r2
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3311      	adds	r3, #17
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	461a      	mov	r2, r3
                    nc * glyph->size
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	789b      	ldrb	r3, [r3, #2]
 8007340:	4619      	mov	r1, r3
 8007342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007344:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8007348:	4413      	add	r3, r2
 800734a:	3312      	adds	r3, #18
                glyph->buffer = &font[
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	441a      	add	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	e00f      	b.n	8007378 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8007358:	6a3a      	ldr	r2, [r7, #32]
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	1ad2      	subs	r2, r2, r3
 800735e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007360:	4413      	add	r3, r2
 8007362:	3301      	adds	r3, #1
 8007364:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	3304      	adds	r3, #4
 800736a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	1e5a      	subs	r2, r3, #1
 8007370:	633a      	str	r2, [r7, #48]	; 0x30
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1bc      	bne.n	80072f0 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8007376:	2301      	movs	r3, #1
 8007378:	4618      	mov	r0, r3
 800737a:	3738      	adds	r7, #56	; 0x38
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	dd01      	ble.n	8007396 <min+0x16>
        return b;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	e000      	b.n	8007398 <min+0x18>
    };
    return a;
 8007396:	687b      	ldr	r3, [r7, #4]
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <max>:

static inline int max(int a, int b) {
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
    if (a > b) {
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	dd01      	ble.n	80073ba <max+0x16>
        return a;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	e000      	b.n	80073bc <max+0x18>
    }
    return b;
 80073ba:	683b      	ldr	r3, [r7, #0]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80073c8:	b490      	push	{r4, r7}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	4604      	mov	r4, r0
 80073d0:	4608      	mov	r0, r1
 80073d2:	4611      	mov	r1, r2
 80073d4:	461a      	mov	r2, r3
 80073d6:	4623      	mov	r3, r4
 80073d8:	80fb      	strh	r3, [r7, #6]
 80073da:	4603      	mov	r3, r0
 80073dc:	80bb      	strh	r3, [r7, #4]
 80073de:	460b      	mov	r3, r1
 80073e0:	807b      	strh	r3, [r7, #2]
 80073e2:	4613      	mov	r3, r2
 80073e4:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 80073e6:	4a08      	ldr	r2, [pc, #32]	; (8007408 <hagl_set_clip_window+0x40>)
 80073e8:	88fb      	ldrh	r3, [r7, #6]
 80073ea:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 80073ec:	4a06      	ldr	r2, [pc, #24]	; (8007408 <hagl_set_clip_window+0x40>)
 80073ee:	88bb      	ldrh	r3, [r7, #4]
 80073f0:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 80073f2:	4a05      	ldr	r2, [pc, #20]	; (8007408 <hagl_set_clip_window+0x40>)
 80073f4:	887b      	ldrh	r3, [r7, #2]
 80073f6:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 80073f8:	4a03      	ldr	r2, [pc, #12]	; (8007408 <hagl_set_clip_window+0x40>)
 80073fa:	883b      	ldrh	r3, [r7, #0]
 80073fc:	80d3      	strh	r3, [r2, #6]
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bc90      	pop	{r4, r7}
 8007406:	4770      	bx	lr
 8007408:	2000000c 	.word	0x2000000c

0800740c <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	4603      	mov	r3, r0
 8007414:	80fb      	strh	r3, [r7, #6]
 8007416:	460b      	mov	r3, r1
 8007418:	80bb      	strh	r3, [r7, #4]
 800741a:	4613      	mov	r3, r2
 800741c:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 800741e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007422:	4a12      	ldr	r2, [pc, #72]	; (800746c <hagl_put_pixel+0x60>)
 8007424:	8812      	ldrh	r2, [r2, #0]
 8007426:	4293      	cmp	r3, r2
 8007428:	db1a      	blt.n	8007460 <hagl_put_pixel+0x54>
 800742a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800742e:	4a0f      	ldr	r2, [pc, #60]	; (800746c <hagl_put_pixel+0x60>)
 8007430:	8852      	ldrh	r2, [r2, #2]
 8007432:	4293      	cmp	r3, r2
 8007434:	db14      	blt.n	8007460 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8007436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800743a:	4a0c      	ldr	r2, [pc, #48]	; (800746c <hagl_put_pixel+0x60>)
 800743c:	8892      	ldrh	r2, [r2, #4]
 800743e:	4293      	cmp	r3, r2
 8007440:	dc10      	bgt.n	8007464 <hagl_put_pixel+0x58>
 8007442:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007446:	4a09      	ldr	r2, [pc, #36]	; (800746c <hagl_put_pixel+0x60>)
 8007448:	88d2      	ldrh	r2, [r2, #6]
 800744a:	4293      	cmp	r3, r2
 800744c:	dc0a      	bgt.n	8007464 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 800744e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007452:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007456:	887a      	ldrh	r2, [r7, #2]
 8007458:	4618      	mov	r0, r3
 800745a:	f7fa f873 	bl	8001544 <lcd_put_pixel>
 800745e:	e002      	b.n	8007466 <hagl_put_pixel+0x5a>
        return;
 8007460:	bf00      	nop
 8007462:	e000      	b.n	8007466 <hagl_put_pixel+0x5a>
        return;
 8007464:	bf00      	nop
}
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	2000000c 	.word	0x2000000c

08007470 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8007470:	b590      	push	{r4, r7, lr}
 8007472:	b085      	sub	sp, #20
 8007474:	af02      	add	r7, sp, #8
 8007476:	4604      	mov	r4, r0
 8007478:	4608      	mov	r0, r1
 800747a:	4611      	mov	r1, r2
 800747c:	461a      	mov	r2, r3
 800747e:	4623      	mov	r3, r4
 8007480:	80fb      	strh	r3, [r7, #6]
 8007482:	4603      	mov	r3, r0
 8007484:	80bb      	strh	r3, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	807b      	strh	r3, [r7, #2]
 800748a:	4613      	mov	r3, r2
 800748c:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 800748e:	88fa      	ldrh	r2, [r7, #6]
 8007490:	887b      	ldrh	r3, [r7, #2]
 8007492:	4413      	add	r3, r2
 8007494:	b29b      	uxth	r3, r3
 8007496:	b21a      	sxth	r2, r3
 8007498:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800749c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80074a0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80074a4:	883b      	ldrh	r3, [r7, #0]
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	4623      	mov	r3, r4
 80074aa:	f000 f805 	bl	80074b8 <hagl_draw_line>
#endif
}
 80074ae:	bf00      	nop
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd90      	pop	{r4, r7, pc}
	...

080074b8 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80074b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ba:	b089      	sub	sp, #36	; 0x24
 80074bc:	af02      	add	r7, sp, #8
 80074be:	4604      	mov	r4, r0
 80074c0:	4608      	mov	r0, r1
 80074c2:	4611      	mov	r1, r2
 80074c4:	461a      	mov	r2, r3
 80074c6:	4623      	mov	r3, r4
 80074c8:	80fb      	strh	r3, [r7, #6]
 80074ca:	4603      	mov	r3, r0
 80074cc:	80bb      	strh	r3, [r7, #4]
 80074ce:	460b      	mov	r3, r1
 80074d0:	807b      	strh	r3, [r7, #2]
 80074d2:	4613      	mov	r3, r2
 80074d4:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80074d6:	463b      	mov	r3, r7
 80074d8:	1cba      	adds	r2, r7, #2
 80074da:	1d3d      	adds	r5, r7, #4
 80074dc:	1dbc      	adds	r4, r7, #6
 80074de:	494a      	ldr	r1, [pc, #296]	; (8007608 <hagl_draw_line+0x150>)
 80074e0:	466e      	mov	r6, sp
 80074e2:	c903      	ldmia	r1, {r0, r1}
 80074e4:	e886 0003 	stmia.w	r6, {r0, r1}
 80074e8:	4629      	mov	r1, r5
 80074ea:	4620      	mov	r0, r4
 80074ec:	f7ff fd7b 	bl	8006fe6 <clip_line>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f083 0301 	eor.w	r3, r3, #1
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d17e      	bne.n	80075fa <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 80074fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007500:	461a      	mov	r2, r3
 8007502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	bfb8      	it	lt
 800750c:	425b      	neglt	r3, r3
 800750e:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8007510:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007514:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007518:	429a      	cmp	r2, r3
 800751a:	da01      	bge.n	8007520 <hagl_draw_line+0x68>
 800751c:	2301      	movs	r3, #1
 800751e:	e001      	b.n	8007524 <hagl_draw_line+0x6c>
 8007520:	f04f 33ff 	mov.w	r3, #4294967295
 8007524:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8007526:	f9b7 3000 	ldrsh.w	r3, [r7]
 800752a:	461a      	mov	r2, r3
 800752c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	bfb8      	it	lt
 8007536:	425b      	neglt	r3, r3
 8007538:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800753a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800753e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007542:	429a      	cmp	r2, r3
 8007544:	da01      	bge.n	800754a <hagl_draw_line+0x92>
 8007546:	2301      	movs	r3, #1
 8007548:	e001      	b.n	800754e <hagl_draw_line+0x96>
 800754a:	f04f 33ff 	mov.w	r3, #4294967295
 800754e:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8007550:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007554:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007558:	429a      	cmp	r2, r3
 800755a:	dd06      	ble.n	800756a <hagl_draw_line+0xb2>
 800755c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007560:	0fda      	lsrs	r2, r3, #31
 8007562:	4413      	add	r3, r2
 8007564:	105b      	asrs	r3, r3, #1
 8007566:	b21b      	sxth	r3, r3
 8007568:	e006      	b.n	8007578 <hagl_draw_line+0xc0>
 800756a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800756e:	0fda      	lsrs	r2, r3, #31
 8007570:	4413      	add	r3, r2
 8007572:	105b      	asrs	r3, r3, #1
 8007574:	425b      	negs	r3, r3
 8007576:	b21b      	sxth	r3, r3
 8007578:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 800757a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800757e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007582:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff ff41 	bl	800740c <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 800758a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800758e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007592:	429a      	cmp	r2, r3
 8007594:	d105      	bne.n	80075a2 <hagl_draw_line+0xea>
 8007596:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800759a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d02d      	beq.n	80075fe <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 80075a2:	8afb      	ldrh	r3, [r7, #22]
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 80075aa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80075ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80075b2:	425b      	negs	r3, r3
 80075b4:	429a      	cmp	r2, r3
 80075b6:	dd0c      	ble.n	80075d2 <hagl_draw_line+0x11a>
            err -= dy;
 80075b8:	8afa      	ldrh	r2, [r7, #22]
 80075ba:	8a3b      	ldrh	r3, [r7, #16]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	b29b      	uxth	r3, r3
 80075c0:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 80075c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	8a7b      	ldrh	r3, [r7, #18]
 80075ca:	4413      	add	r3, r2
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	b21b      	sxth	r3, r3
 80075d0:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 80075d2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80075d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80075da:	429a      	cmp	r2, r3
 80075dc:	dacd      	bge.n	800757a <hagl_draw_line+0xc2>
            err += dx;
 80075de:	8afa      	ldrh	r2, [r7, #22]
 80075e0:	8abb      	ldrh	r3, [r7, #20]
 80075e2:	4413      	add	r3, r2
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 80075e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	89fb      	ldrh	r3, [r7, #14]
 80075f0:	4413      	add	r3, r2
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	b21b      	sxth	r3, r3
 80075f6:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 80075f8:	e7bf      	b.n	800757a <hagl_draw_line+0xc2>
        return;
 80075fa:	bf00      	nop
 80075fc:	e000      	b.n	8007600 <hagl_draw_line+0x148>
            break;
 80075fe:	bf00      	nop
        }
    }
}
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007606:	bf00      	nop
 8007608:	2000000c 	.word	0x2000000c

0800760c <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800760c:	b590      	push	{r4, r7, lr}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	4611      	mov	r1, r2
 8007618:	461a      	mov	r2, r3
 800761a:	4623      	mov	r3, r4
 800761c:	80fb      	strh	r3, [r7, #6]
 800761e:	4603      	mov	r3, r0
 8007620:	80bb      	strh	r3, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	807b      	strh	r3, [r7, #2]
 8007626:	4613      	mov	r3, r2
 8007628:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800762a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800762e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007632:	429a      	cmp	r2, r3
 8007634:	dd0e      	ble.n	8007654 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8007636:	88fa      	ldrh	r2, [r7, #6]
 8007638:	887b      	ldrh	r3, [r7, #2]
 800763a:	4413      	add	r3, r2
 800763c:	b29b      	uxth	r3, r3
 800763e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007640:	88fa      	ldrh	r2, [r7, #6]
 8007642:	887b      	ldrh	r3, [r7, #2]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	b29b      	uxth	r3, r3
 8007648:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800764a:	88fa      	ldrh	r2, [r7, #6]
 800764c:	887b      	ldrh	r3, [r7, #2]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	b29b      	uxth	r3, r3
 8007652:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007654:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007658:	f9b7 3000 	ldrsh.w	r3, [r7]
 800765c:	429a      	cmp	r2, r3
 800765e:	dd0e      	ble.n	800767e <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8007660:	88ba      	ldrh	r2, [r7, #4]
 8007662:	883b      	ldrh	r3, [r7, #0]
 8007664:	4413      	add	r3, r2
 8007666:	b29b      	uxth	r3, r3
 8007668:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800766a:	88ba      	ldrh	r2, [r7, #4]
 800766c:	883b      	ldrh	r3, [r7, #0]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	b29b      	uxth	r3, r3
 8007672:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8007674:	88ba      	ldrh	r2, [r7, #4]
 8007676:	883b      	ldrh	r3, [r7, #0]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	b29b      	uxth	r3, r3
 800767c:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800767e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007682:	4a33      	ldr	r2, [pc, #204]	; (8007750 <hagl_fill_rectangle+0x144>)
 8007684:	8812      	ldrh	r2, [r2, #0]
 8007686:	4293      	cmp	r3, r2
 8007688:	db5b      	blt.n	8007742 <hagl_fill_rectangle+0x136>
 800768a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800768e:	4a30      	ldr	r2, [pc, #192]	; (8007750 <hagl_fill_rectangle+0x144>)
 8007690:	8852      	ldrh	r2, [r2, #2]
 8007692:	4293      	cmp	r3, r2
 8007694:	db55      	blt.n	8007742 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8007696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800769a:	4a2d      	ldr	r2, [pc, #180]	; (8007750 <hagl_fill_rectangle+0x144>)
 800769c:	8892      	ldrh	r2, [r2, #4]
 800769e:	4293      	cmp	r3, r2
 80076a0:	dc51      	bgt.n	8007746 <hagl_fill_rectangle+0x13a>
 80076a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80076a6:	4a2a      	ldr	r2, [pc, #168]	; (8007750 <hagl_fill_rectangle+0x144>)
 80076a8:	88d2      	ldrh	r2, [r2, #6]
 80076aa:	4293      	cmp	r3, r2
 80076ac:	dc4b      	bgt.n	8007746 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 80076ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076b2:	4a27      	ldr	r2, [pc, #156]	; (8007750 <hagl_fill_rectangle+0x144>)
 80076b4:	8812      	ldrh	r2, [r2, #0]
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff fe73 	bl	80073a4 <max>
 80076be:	4603      	mov	r3, r0
 80076c0:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 80076c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80076c6:	4a22      	ldr	r2, [pc, #136]	; (8007750 <hagl_fill_rectangle+0x144>)
 80076c8:	8852      	ldrh	r2, [r2, #2]
 80076ca:	4611      	mov	r1, r2
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff fe69 	bl	80073a4 <max>
 80076d2:	4603      	mov	r3, r0
 80076d4:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 80076d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076da:	4a1d      	ldr	r2, [pc, #116]	; (8007750 <hagl_fill_rectangle+0x144>)
 80076dc:	8892      	ldrh	r2, [r2, #4]
 80076de:	4611      	mov	r1, r2
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7ff fe4d 	bl	8007380 <min>
 80076e6:	4603      	mov	r3, r0
 80076e8:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 80076ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80076ee:	4a18      	ldr	r2, [pc, #96]	; (8007750 <hagl_fill_rectangle+0x144>)
 80076f0:	88d2      	ldrh	r2, [r2, #6]
 80076f2:	4611      	mov	r1, r2
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7ff fe43 	bl	8007380 <min>
 80076fa:	4603      	mov	r3, r0
 80076fc:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 80076fe:	887a      	ldrh	r2, [r7, #2]
 8007700:	88fb      	ldrh	r3, [r7, #6]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	b29b      	uxth	r3, r3
 8007706:	3301      	adds	r3, #1
 8007708:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 800770a:	883a      	ldrh	r2, [r7, #0]
 800770c:	88bb      	ldrh	r3, [r7, #4]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	b29b      	uxth	r3, r3
 8007712:	3301      	adds	r3, #1
 8007714:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8007716:	2300      	movs	r3, #0
 8007718:	81fb      	strh	r3, [r7, #14]
 800771a:	e00d      	b.n	8007738 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 800771c:	88ba      	ldrh	r2, [r7, #4]
 800771e:	89fb      	ldrh	r3, [r7, #14]
 8007720:	4413      	add	r3, r2
 8007722:	b29b      	uxth	r3, r3
 8007724:	b219      	sxth	r1, r3
 8007726:	8c3b      	ldrh	r3, [r7, #32]
 8007728:	89ba      	ldrh	r2, [r7, #12]
 800772a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800772e:	f7ff fe9f 	bl	8007470 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8007732:	89fb      	ldrh	r3, [r7, #14]
 8007734:	3301      	adds	r3, #1
 8007736:	81fb      	strh	r3, [r7, #14]
 8007738:	89fa      	ldrh	r2, [r7, #14]
 800773a:	897b      	ldrh	r3, [r7, #10]
 800773c:	429a      	cmp	r2, r3
 800773e:	d3ed      	bcc.n	800771c <hagl_fill_rectangle+0x110>
 8007740:	e002      	b.n	8007748 <hagl_fill_rectangle+0x13c>
        return;
 8007742:	bf00      	nop
 8007744:	e000      	b.n	8007748 <hagl_fill_rectangle+0x13c>
        return;
 8007746:	bf00      	nop
#endif
    }
}
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	bd90      	pop	{r4, r7, pc}
 800774e:	bf00      	nop
 8007750:	2000000c 	.word	0x2000000c

08007754 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8007754:	b590      	push	{r4, r7, lr}
 8007756:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007762:	f844 0c24 	str.w	r0, [r4, #-36]
 8007766:	460c      	mov	r4, r1
 8007768:	4610      	mov	r0, r2
 800776a:	4619      	mov	r1, r3
 800776c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007770:	4622      	mov	r2, r4
 8007772:	f823 2c26 	strh.w	r2, [r3, #-38]
 8007776:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800777a:	4602      	mov	r2, r0
 800777c:	f823 2c28 	strh.w	r2, [r3, #-40]
 8007780:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007784:	460a      	mov	r2, r1
 8007786:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 800778a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800778e:	4619      	mov	r1, r3
 8007790:	f107 0310 	add.w	r3, r7, #16
 8007794:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007798:	6812      	ldr	r2, [r2, #0]
 800779a:	f851 1c24 	ldr.w	r1, [r1, #-36]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff fd5c 	bl	800725c <fontx_glyph>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80077aa:	f102 0209 	add.w	r2, r2, #9
 80077ae:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 80077b0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80077b4:	f103 0309 	add.w	r3, r3, #9
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <hagl_put_char+0x6e>
        return 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	e0c0      	b.n	8007944 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 80077c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077c6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077d0:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 80077d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077d8:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80077dc:	b29a      	uxth	r2, r3
 80077de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077e2:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 80077e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077ea:	2210      	movs	r2, #16
 80077ec:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 80077f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80077f4:	3a08      	subs	r2, #8
 80077f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077fa:	3b18      	subs	r3, #24
 80077fc:	4611      	mov	r1, r2
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff fb93 	bl	8006f2a <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8007804:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007808:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800780c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007810:	f102 020c 	add.w	r2, r2, #12
 8007814:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8007816:	2300      	movs	r3, #0
 8007818:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800781c:	f102 020b 	add.w	r2, r2, #11
 8007820:	7013      	strb	r3, [r2, #0]
 8007822:	e071      	b.n	8007908 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8007824:	2300      	movs	r3, #0
 8007826:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800782a:	f102 020a 	add.w	r2, r2, #10
 800782e:	7013      	strb	r3, [r2, #0]
 8007830:	e047      	b.n	80078c2 <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8007832:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007836:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	b25a      	sxtb	r2, r3
 800783e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007842:	f103 030a 	add.w	r3, r3, #10
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	2180      	movs	r1, #128	; 0x80
 800784e:	fa41 f303 	asr.w	r3, r1, r3
 8007852:	b25b      	sxtb	r3, r3
 8007854:	4013      	ands	r3, r2
 8007856:	b25b      	sxtb	r3, r3
 8007858:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800785c:	f102 0208 	add.w	r2, r2, #8
 8007860:	7013      	strb	r3, [r2, #0]
            if (set) {
 8007862:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007866:	f103 0308 	add.w	r3, r3, #8
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d010      	beq.n	8007892 <hagl_put_char+0x13e>
                *(ptr++) = color;
 8007870:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007874:	f103 030c 	add.w	r3, r3, #12
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	1c9a      	adds	r2, r3, #2
 800787c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8007880:	f101 010c 	add.w	r1, r1, #12
 8007884:	600a      	str	r2, [r1, #0]
 8007886:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800788a:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 800788e:	801a      	strh	r2, [r3, #0]
 8007890:	e00c      	b.n	80078ac <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8007892:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007896:	f103 030c 	add.w	r3, r3, #12
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	1c9a      	adds	r2, r3, #2
 800789e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80078a2:	f101 010c 	add.w	r1, r1, #12
 80078a6:	600a      	str	r2, [r1, #0]
 80078a8:	2200      	movs	r2, #0
 80078aa:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80078ac:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80078b0:	f103 030a 	add.w	r3, r3, #10
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	3301      	adds	r3, #1
 80078b8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80078bc:	f102 020a 	add.w	r2, r2, #10
 80078c0:	7013      	strb	r3, [r2, #0]
 80078c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078c6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80078ca:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80078ce:	f102 020a 	add.w	r2, r2, #10
 80078d2:	7812      	ldrb	r2, [r2, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d3ac      	bcc.n	8007832 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 80078d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078dc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80078e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80078e4:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 80078e8:	4413      	add	r3, r2
 80078ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80078ee:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80078f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80078f6:	f103 030b 	add.w	r3, r3, #11
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	3301      	adds	r3, #1
 80078fe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007902:	f102 020b 	add.w	r2, r2, #11
 8007906:	7013      	strb	r3, [r2, #0]
 8007908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800790c:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8007910:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007914:	f102 020b 	add.w	r2, r2, #11
 8007918:	7812      	ldrb	r2, [r2, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d382      	bcc.n	8007824 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 800791e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007922:	3b18      	subs	r3, #24
 8007924:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007928:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 800792c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007930:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8007934:	461a      	mov	r2, r3
 8007936:	f000 f85a 	bl	80079ee <hagl_blit>

    return bitmap.width;
 800793a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800793e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007942:	b2db      	uxtb	r3, r3
}
 8007944:	4618      	mov	r0, r3
 8007946:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	bd90      	pop	{r4, r7, pc}

08007950 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08c      	sub	sp, #48	; 0x30
 8007954:	af02      	add	r7, sp, #8
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	4608      	mov	r0, r1
 800795a:	4611      	mov	r1, r2
 800795c:	461a      	mov	r2, r3
 800795e:	4603      	mov	r3, r0
 8007960:	817b      	strh	r3, [r7, #10]
 8007962:	460b      	mov	r3, r1
 8007964:	813b      	strh	r3, [r7, #8]
 8007966:	4613      	mov	r3, r2
 8007968:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 800796a:	897b      	ldrh	r3, [r7, #10]
 800796c:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800796e:	f107 0314 	add.w	r3, r7, #20
 8007972:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff fc51 	bl	800721c <fontx_meta>
 800797a:	4603      	mov	r3, r0
 800797c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 8007980:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <hagl_put_text+0x3c>
        return 0;
 8007988:	2300      	movs	r3, #0
 800798a:	e02c      	b.n	80079e6 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	1d1a      	adds	r2, r3, #4
 8007990:	60fa      	str	r2, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	2b0d      	cmp	r3, #13
 800799a:	d002      	beq.n	80079a2 <hagl_put_text+0x52>
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	2b0a      	cmp	r3, #10
 80079a0:	d108      	bne.n	80079b4 <hagl_put_text+0x64>
            x0 = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 80079a6:	7fbb      	ldrb	r3, [r7, #30]
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	893b      	ldrh	r3, [r7, #8]
 80079ac:	4413      	add	r3, r2
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	813b      	strh	r3, [r7, #8]
 80079b2:	e010      	b.n	80079d6 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80079b4:	88f8      	ldrh	r0, [r7, #6]
 80079b6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80079ba:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	4603      	mov	r3, r0
 80079c4:	6a38      	ldr	r0, [r7, #32]
 80079c6:	f7ff fec5 	bl	8007754 <hagl_put_char>
 80079ca:	4603      	mov	r3, r0
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	897b      	ldrh	r3, [r7, #10]
 80079d0:	4413      	add	r3, r2
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1d6      	bne.n	800798c <hagl_put_text+0x3c>

    return x0 - original;
 80079de:	897a      	ldrh	r2, [r7, #10]
 80079e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	b29b      	uxth	r3, r3
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3728      	adds	r7, #40	; 0x28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b086      	sub	sp, #24
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	4603      	mov	r3, r0
 80079f6:	603a      	str	r2, [r7, #0]
 80079f8:	80fb      	strh	r3, [r7, #6]
 80079fa:	460b      	mov	r3, r1
 80079fc:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8007a04:	2300      	movs	r3, #0
 8007a06:	827b      	strh	r3, [r7, #18]
 8007a08:	e020      	b.n	8007a4c <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	823b      	strh	r3, [r7, #16]
 8007a0e:	e015      	b.n	8007a3c <hagl_blit+0x4e>
            color = *(ptr++);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	1c9a      	adds	r2, r3, #2
 8007a14:	617a      	str	r2, [r7, #20]
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8007a1a:	88fa      	ldrh	r2, [r7, #6]
 8007a1c:	8a3b      	ldrh	r3, [r7, #16]
 8007a1e:	4413      	add	r3, r2
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	b218      	sxth	r0, r3
 8007a24:	88ba      	ldrh	r2, [r7, #4]
 8007a26:	8a7b      	ldrh	r3, [r7, #18]
 8007a28:	4413      	add	r3, r2
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	b21b      	sxth	r3, r3
 8007a2e:	89fa      	ldrh	r2, [r7, #14]
 8007a30:	4619      	mov	r1, r3
 8007a32:	f7ff fceb 	bl	800740c <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8007a36:	8a3b      	ldrh	r3, [r7, #16]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	823b      	strh	r3, [r7, #16]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	8a3a      	ldrh	r2, [r7, #16]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d3e4      	bcc.n	8007a10 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8007a46:	8a7b      	ldrh	r3, [r7, #18]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	827b      	strh	r3, [r7, #18]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	885b      	ldrh	r3, [r3, #2]
 8007a50:	8a7a      	ldrh	r2, [r7, #18]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d3d9      	bcc.n	8007a0a <hagl_blit+0x1c>
        }
    }
#endif
};
 8007a56:	bf00      	nop
 8007a58:	bf00      	nop
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 8007a66:	4b12      	ldr	r3, [pc, #72]	; (8007ab0 <hagl_clear_screen+0x50>)
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 8007a6c:	4b10      	ldr	r3, [pc, #64]	; (8007ab0 <hagl_clear_screen+0x50>)
 8007a6e:	885b      	ldrh	r3, [r3, #2]
 8007a70:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 8007a72:	4b0f      	ldr	r3, [pc, #60]	; (8007ab0 <hagl_clear_screen+0x50>)
 8007a74:	889b      	ldrh	r3, [r3, #4]
 8007a76:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 8007a78:	4b0d      	ldr	r3, [pc, #52]	; (8007ab0 <hagl_clear_screen+0x50>)
 8007a7a:	88db      	ldrh	r3, [r3, #6]
 8007a7c:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 8007a7e:	237f      	movs	r3, #127	; 0x7f
 8007a80:	229f      	movs	r2, #159	; 0x9f
 8007a82:	2100      	movs	r1, #0
 8007a84:	2000      	movs	r0, #0
 8007a86:	f7ff fc9f 	bl	80073c8 <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	237f      	movs	r3, #127	; 0x7f
 8007a90:	229f      	movs	r2, #159	; 0x9f
 8007a92:	2100      	movs	r1, #0
 8007a94:	2000      	movs	r0, #0
 8007a96:	f7ff fdb9 	bl	800760c <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 8007a9a:	883b      	ldrh	r3, [r7, #0]
 8007a9c:	887a      	ldrh	r2, [r7, #2]
 8007a9e:	88b9      	ldrh	r1, [r7, #4]
 8007aa0:	88f8      	ldrh	r0, [r7, #6]
 8007aa2:	f7ff fc91 	bl	80073c8 <hagl_set_clip_window>
#endif
}
 8007aa6:	bf00      	nop
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	2000000c 	.word	0x2000000c

08007ab4 <__cvt>:
 8007ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab8:	ec55 4b10 	vmov	r4, r5, d0
 8007abc:	2d00      	cmp	r5, #0
 8007abe:	460e      	mov	r6, r1
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	462b      	mov	r3, r5
 8007ac4:	bfbb      	ittet	lt
 8007ac6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007aca:	461d      	movlt	r5, r3
 8007acc:	2300      	movge	r3, #0
 8007ace:	232d      	movlt	r3, #45	; 0x2d
 8007ad0:	700b      	strb	r3, [r1, #0]
 8007ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ad4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ad8:	4691      	mov	r9, r2
 8007ada:	f023 0820 	bic.w	r8, r3, #32
 8007ade:	bfbc      	itt	lt
 8007ae0:	4622      	movlt	r2, r4
 8007ae2:	4614      	movlt	r4, r2
 8007ae4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ae8:	d005      	beq.n	8007af6 <__cvt+0x42>
 8007aea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007aee:	d100      	bne.n	8007af2 <__cvt+0x3e>
 8007af0:	3601      	adds	r6, #1
 8007af2:	2102      	movs	r1, #2
 8007af4:	e000      	b.n	8007af8 <__cvt+0x44>
 8007af6:	2103      	movs	r1, #3
 8007af8:	ab03      	add	r3, sp, #12
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	ab02      	add	r3, sp, #8
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	ec45 4b10 	vmov	d0, r4, r5
 8007b04:	4653      	mov	r3, sl
 8007b06:	4632      	mov	r2, r6
 8007b08:	f000 ff3a 	bl	8008980 <_dtoa_r>
 8007b0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b10:	4607      	mov	r7, r0
 8007b12:	d102      	bne.n	8007b1a <__cvt+0x66>
 8007b14:	f019 0f01 	tst.w	r9, #1
 8007b18:	d022      	beq.n	8007b60 <__cvt+0xac>
 8007b1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b1e:	eb07 0906 	add.w	r9, r7, r6
 8007b22:	d110      	bne.n	8007b46 <__cvt+0x92>
 8007b24:	783b      	ldrb	r3, [r7, #0]
 8007b26:	2b30      	cmp	r3, #48	; 0x30
 8007b28:	d10a      	bne.n	8007b40 <__cvt+0x8c>
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	4620      	mov	r0, r4
 8007b30:	4629      	mov	r1, r5
 8007b32:	f7f8 ffc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b36:	b918      	cbnz	r0, 8007b40 <__cvt+0x8c>
 8007b38:	f1c6 0601 	rsb	r6, r6, #1
 8007b3c:	f8ca 6000 	str.w	r6, [sl]
 8007b40:	f8da 3000 	ldr.w	r3, [sl]
 8007b44:	4499      	add	r9, r3
 8007b46:	2200      	movs	r2, #0
 8007b48:	2300      	movs	r3, #0
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	f7f8 ffbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b52:	b108      	cbz	r0, 8007b58 <__cvt+0xa4>
 8007b54:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b58:	2230      	movs	r2, #48	; 0x30
 8007b5a:	9b03      	ldr	r3, [sp, #12]
 8007b5c:	454b      	cmp	r3, r9
 8007b5e:	d307      	bcc.n	8007b70 <__cvt+0xbc>
 8007b60:	9b03      	ldr	r3, [sp, #12]
 8007b62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b64:	1bdb      	subs	r3, r3, r7
 8007b66:	4638      	mov	r0, r7
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	b004      	add	sp, #16
 8007b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b70:	1c59      	adds	r1, r3, #1
 8007b72:	9103      	str	r1, [sp, #12]
 8007b74:	701a      	strb	r2, [r3, #0]
 8007b76:	e7f0      	b.n	8007b5a <__cvt+0xa6>

08007b78 <__exponent>:
 8007b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2900      	cmp	r1, #0
 8007b7e:	bfb8      	it	lt
 8007b80:	4249      	neglt	r1, r1
 8007b82:	f803 2b02 	strb.w	r2, [r3], #2
 8007b86:	bfb4      	ite	lt
 8007b88:	222d      	movlt	r2, #45	; 0x2d
 8007b8a:	222b      	movge	r2, #43	; 0x2b
 8007b8c:	2909      	cmp	r1, #9
 8007b8e:	7042      	strb	r2, [r0, #1]
 8007b90:	dd2a      	ble.n	8007be8 <__exponent+0x70>
 8007b92:	f10d 0207 	add.w	r2, sp, #7
 8007b96:	4617      	mov	r7, r2
 8007b98:	260a      	movs	r6, #10
 8007b9a:	4694      	mov	ip, r2
 8007b9c:	fb91 f5f6 	sdiv	r5, r1, r6
 8007ba0:	fb06 1415 	mls	r4, r6, r5, r1
 8007ba4:	3430      	adds	r4, #48	; 0x30
 8007ba6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007baa:	460c      	mov	r4, r1
 8007bac:	2c63      	cmp	r4, #99	; 0x63
 8007bae:	f102 32ff 	add.w	r2, r2, #4294967295
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	dcf1      	bgt.n	8007b9a <__exponent+0x22>
 8007bb6:	3130      	adds	r1, #48	; 0x30
 8007bb8:	f1ac 0402 	sub.w	r4, ip, #2
 8007bbc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007bc0:	1c41      	adds	r1, r0, #1
 8007bc2:	4622      	mov	r2, r4
 8007bc4:	42ba      	cmp	r2, r7
 8007bc6:	d30a      	bcc.n	8007bde <__exponent+0x66>
 8007bc8:	f10d 0209 	add.w	r2, sp, #9
 8007bcc:	eba2 020c 	sub.w	r2, r2, ip
 8007bd0:	42bc      	cmp	r4, r7
 8007bd2:	bf88      	it	hi
 8007bd4:	2200      	movhi	r2, #0
 8007bd6:	4413      	add	r3, r2
 8007bd8:	1a18      	subs	r0, r3, r0
 8007bda:	b003      	add	sp, #12
 8007bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bde:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007be2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007be6:	e7ed      	b.n	8007bc4 <__exponent+0x4c>
 8007be8:	2330      	movs	r3, #48	; 0x30
 8007bea:	3130      	adds	r1, #48	; 0x30
 8007bec:	7083      	strb	r3, [r0, #2]
 8007bee:	70c1      	strb	r1, [r0, #3]
 8007bf0:	1d03      	adds	r3, r0, #4
 8007bf2:	e7f1      	b.n	8007bd8 <__exponent+0x60>

08007bf4 <_printf_float>:
 8007bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf8:	ed2d 8b02 	vpush	{d8}
 8007bfc:	b08d      	sub	sp, #52	; 0x34
 8007bfe:	460c      	mov	r4, r1
 8007c00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c04:	4616      	mov	r6, r2
 8007c06:	461f      	mov	r7, r3
 8007c08:	4605      	mov	r5, r0
 8007c0a:	f000 fda9 	bl	8008760 <_localeconv_r>
 8007c0e:	f8d0 a000 	ldr.w	sl, [r0]
 8007c12:	4650      	mov	r0, sl
 8007c14:	f7f8 fb2c 	bl	8000270 <strlen>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	9305      	str	r3, [sp, #20]
 8007c20:	f8d8 3000 	ldr.w	r3, [r8]
 8007c24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c28:	3307      	adds	r3, #7
 8007c2a:	f023 0307 	bic.w	r3, r3, #7
 8007c2e:	f103 0208 	add.w	r2, r3, #8
 8007c32:	f8c8 2000 	str.w	r2, [r8]
 8007c36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c3e:	9307      	str	r3, [sp, #28]
 8007c40:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c44:	ee08 0a10 	vmov	s16, r0
 8007c48:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007c4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c50:	4b9e      	ldr	r3, [pc, #632]	; (8007ecc <_printf_float+0x2d8>)
 8007c52:	f04f 32ff 	mov.w	r2, #4294967295
 8007c56:	f7f8 ff69 	bl	8000b2c <__aeabi_dcmpun>
 8007c5a:	bb88      	cbnz	r0, 8007cc0 <_printf_float+0xcc>
 8007c5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c60:	4b9a      	ldr	r3, [pc, #616]	; (8007ecc <_printf_float+0x2d8>)
 8007c62:	f04f 32ff 	mov.w	r2, #4294967295
 8007c66:	f7f8 ff43 	bl	8000af0 <__aeabi_dcmple>
 8007c6a:	bb48      	cbnz	r0, 8007cc0 <_printf_float+0xcc>
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4640      	mov	r0, r8
 8007c72:	4649      	mov	r1, r9
 8007c74:	f7f8 ff32 	bl	8000adc <__aeabi_dcmplt>
 8007c78:	b110      	cbz	r0, 8007c80 <_printf_float+0x8c>
 8007c7a:	232d      	movs	r3, #45	; 0x2d
 8007c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c80:	4a93      	ldr	r2, [pc, #588]	; (8007ed0 <_printf_float+0x2dc>)
 8007c82:	4b94      	ldr	r3, [pc, #592]	; (8007ed4 <_printf_float+0x2e0>)
 8007c84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c88:	bf94      	ite	ls
 8007c8a:	4690      	movls	r8, r2
 8007c8c:	4698      	movhi	r8, r3
 8007c8e:	2303      	movs	r3, #3
 8007c90:	6123      	str	r3, [r4, #16]
 8007c92:	9b05      	ldr	r3, [sp, #20]
 8007c94:	f023 0304 	bic.w	r3, r3, #4
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	f04f 0900 	mov.w	r9, #0
 8007c9e:	9700      	str	r7, [sp, #0]
 8007ca0:	4633      	mov	r3, r6
 8007ca2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 f9da 	bl	8008060 <_printf_common>
 8007cac:	3001      	adds	r0, #1
 8007cae:	f040 8090 	bne.w	8007dd2 <_printf_float+0x1de>
 8007cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb6:	b00d      	add	sp, #52	; 0x34
 8007cb8:	ecbd 8b02 	vpop	{d8}
 8007cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc0:	4642      	mov	r2, r8
 8007cc2:	464b      	mov	r3, r9
 8007cc4:	4640      	mov	r0, r8
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	f7f8 ff30 	bl	8000b2c <__aeabi_dcmpun>
 8007ccc:	b140      	cbz	r0, 8007ce0 <_printf_float+0xec>
 8007cce:	464b      	mov	r3, r9
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	bfbc      	itt	lt
 8007cd4:	232d      	movlt	r3, #45	; 0x2d
 8007cd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007cda:	4a7f      	ldr	r2, [pc, #508]	; (8007ed8 <_printf_float+0x2e4>)
 8007cdc:	4b7f      	ldr	r3, [pc, #508]	; (8007edc <_printf_float+0x2e8>)
 8007cde:	e7d1      	b.n	8007c84 <_printf_float+0x90>
 8007ce0:	6863      	ldr	r3, [r4, #4]
 8007ce2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007ce6:	9206      	str	r2, [sp, #24]
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	d13f      	bne.n	8007d6c <_printf_float+0x178>
 8007cec:	2306      	movs	r3, #6
 8007cee:	6063      	str	r3, [r4, #4]
 8007cf0:	9b05      	ldr	r3, [sp, #20]
 8007cf2:	6861      	ldr	r1, [r4, #4]
 8007cf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9303      	str	r3, [sp, #12]
 8007cfc:	ab0a      	add	r3, sp, #40	; 0x28
 8007cfe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d02:	ab09      	add	r3, sp, #36	; 0x24
 8007d04:	ec49 8b10 	vmov	d0, r8, r9
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	6022      	str	r2, [r4, #0]
 8007d0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d10:	4628      	mov	r0, r5
 8007d12:	f7ff fecf 	bl	8007ab4 <__cvt>
 8007d16:	9b06      	ldr	r3, [sp, #24]
 8007d18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d1a:	2b47      	cmp	r3, #71	; 0x47
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	d108      	bne.n	8007d32 <_printf_float+0x13e>
 8007d20:	1cc8      	adds	r0, r1, #3
 8007d22:	db02      	blt.n	8007d2a <_printf_float+0x136>
 8007d24:	6863      	ldr	r3, [r4, #4]
 8007d26:	4299      	cmp	r1, r3
 8007d28:	dd41      	ble.n	8007dae <_printf_float+0x1ba>
 8007d2a:	f1ab 0302 	sub.w	r3, fp, #2
 8007d2e:	fa5f fb83 	uxtb.w	fp, r3
 8007d32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d36:	d820      	bhi.n	8007d7a <_printf_float+0x186>
 8007d38:	3901      	subs	r1, #1
 8007d3a:	465a      	mov	r2, fp
 8007d3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d40:	9109      	str	r1, [sp, #36]	; 0x24
 8007d42:	f7ff ff19 	bl	8007b78 <__exponent>
 8007d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d48:	1813      	adds	r3, r2, r0
 8007d4a:	2a01      	cmp	r2, #1
 8007d4c:	4681      	mov	r9, r0
 8007d4e:	6123      	str	r3, [r4, #16]
 8007d50:	dc02      	bgt.n	8007d58 <_printf_float+0x164>
 8007d52:	6822      	ldr	r2, [r4, #0]
 8007d54:	07d2      	lsls	r2, r2, #31
 8007d56:	d501      	bpl.n	8007d5c <_printf_float+0x168>
 8007d58:	3301      	adds	r3, #1
 8007d5a:	6123      	str	r3, [r4, #16]
 8007d5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d09c      	beq.n	8007c9e <_printf_float+0xaa>
 8007d64:	232d      	movs	r3, #45	; 0x2d
 8007d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d6a:	e798      	b.n	8007c9e <_printf_float+0xaa>
 8007d6c:	9a06      	ldr	r2, [sp, #24]
 8007d6e:	2a47      	cmp	r2, #71	; 0x47
 8007d70:	d1be      	bne.n	8007cf0 <_printf_float+0xfc>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1bc      	bne.n	8007cf0 <_printf_float+0xfc>
 8007d76:	2301      	movs	r3, #1
 8007d78:	e7b9      	b.n	8007cee <_printf_float+0xfa>
 8007d7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d7e:	d118      	bne.n	8007db2 <_printf_float+0x1be>
 8007d80:	2900      	cmp	r1, #0
 8007d82:	6863      	ldr	r3, [r4, #4]
 8007d84:	dd0b      	ble.n	8007d9e <_printf_float+0x1aa>
 8007d86:	6121      	str	r1, [r4, #16]
 8007d88:	b913      	cbnz	r3, 8007d90 <_printf_float+0x19c>
 8007d8a:	6822      	ldr	r2, [r4, #0]
 8007d8c:	07d0      	lsls	r0, r2, #31
 8007d8e:	d502      	bpl.n	8007d96 <_printf_float+0x1a2>
 8007d90:	3301      	adds	r3, #1
 8007d92:	440b      	add	r3, r1
 8007d94:	6123      	str	r3, [r4, #16]
 8007d96:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d98:	f04f 0900 	mov.w	r9, #0
 8007d9c:	e7de      	b.n	8007d5c <_printf_float+0x168>
 8007d9e:	b913      	cbnz	r3, 8007da6 <_printf_float+0x1b2>
 8007da0:	6822      	ldr	r2, [r4, #0]
 8007da2:	07d2      	lsls	r2, r2, #31
 8007da4:	d501      	bpl.n	8007daa <_printf_float+0x1b6>
 8007da6:	3302      	adds	r3, #2
 8007da8:	e7f4      	b.n	8007d94 <_printf_float+0x1a0>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e7f2      	b.n	8007d94 <_printf_float+0x1a0>
 8007dae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db4:	4299      	cmp	r1, r3
 8007db6:	db05      	blt.n	8007dc4 <_printf_float+0x1d0>
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	6121      	str	r1, [r4, #16]
 8007dbc:	07d8      	lsls	r0, r3, #31
 8007dbe:	d5ea      	bpl.n	8007d96 <_printf_float+0x1a2>
 8007dc0:	1c4b      	adds	r3, r1, #1
 8007dc2:	e7e7      	b.n	8007d94 <_printf_float+0x1a0>
 8007dc4:	2900      	cmp	r1, #0
 8007dc6:	bfd4      	ite	le
 8007dc8:	f1c1 0202 	rsble	r2, r1, #2
 8007dcc:	2201      	movgt	r2, #1
 8007dce:	4413      	add	r3, r2
 8007dd0:	e7e0      	b.n	8007d94 <_printf_float+0x1a0>
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	055a      	lsls	r2, r3, #21
 8007dd6:	d407      	bmi.n	8007de8 <_printf_float+0x1f4>
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	4642      	mov	r2, r8
 8007ddc:	4631      	mov	r1, r6
 8007dde:	4628      	mov	r0, r5
 8007de0:	47b8      	blx	r7
 8007de2:	3001      	adds	r0, #1
 8007de4:	d12c      	bne.n	8007e40 <_printf_float+0x24c>
 8007de6:	e764      	b.n	8007cb2 <_printf_float+0xbe>
 8007de8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dec:	f240 80e0 	bls.w	8007fb0 <_printf_float+0x3bc>
 8007df0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007df4:	2200      	movs	r2, #0
 8007df6:	2300      	movs	r3, #0
 8007df8:	f7f8 fe66 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d034      	beq.n	8007e6a <_printf_float+0x276>
 8007e00:	4a37      	ldr	r2, [pc, #220]	; (8007ee0 <_printf_float+0x2ec>)
 8007e02:	2301      	movs	r3, #1
 8007e04:	4631      	mov	r1, r6
 8007e06:	4628      	mov	r0, r5
 8007e08:	47b8      	blx	r7
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	f43f af51 	beq.w	8007cb2 <_printf_float+0xbe>
 8007e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e14:	429a      	cmp	r2, r3
 8007e16:	db02      	blt.n	8007e1e <_printf_float+0x22a>
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	07d8      	lsls	r0, r3, #31
 8007e1c:	d510      	bpl.n	8007e40 <_printf_float+0x24c>
 8007e1e:	ee18 3a10 	vmov	r3, s16
 8007e22:	4652      	mov	r2, sl
 8007e24:	4631      	mov	r1, r6
 8007e26:	4628      	mov	r0, r5
 8007e28:	47b8      	blx	r7
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	f43f af41 	beq.w	8007cb2 <_printf_float+0xbe>
 8007e30:	f04f 0800 	mov.w	r8, #0
 8007e34:	f104 091a 	add.w	r9, r4, #26
 8007e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	4543      	cmp	r3, r8
 8007e3e:	dc09      	bgt.n	8007e54 <_printf_float+0x260>
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	079b      	lsls	r3, r3, #30
 8007e44:	f100 8107 	bmi.w	8008056 <_printf_float+0x462>
 8007e48:	68e0      	ldr	r0, [r4, #12]
 8007e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e4c:	4298      	cmp	r0, r3
 8007e4e:	bfb8      	it	lt
 8007e50:	4618      	movlt	r0, r3
 8007e52:	e730      	b.n	8007cb6 <_printf_float+0xc2>
 8007e54:	2301      	movs	r3, #1
 8007e56:	464a      	mov	r2, r9
 8007e58:	4631      	mov	r1, r6
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	47b8      	blx	r7
 8007e5e:	3001      	adds	r0, #1
 8007e60:	f43f af27 	beq.w	8007cb2 <_printf_float+0xbe>
 8007e64:	f108 0801 	add.w	r8, r8, #1
 8007e68:	e7e6      	b.n	8007e38 <_printf_float+0x244>
 8007e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dc39      	bgt.n	8007ee4 <_printf_float+0x2f0>
 8007e70:	4a1b      	ldr	r2, [pc, #108]	; (8007ee0 <_printf_float+0x2ec>)
 8007e72:	2301      	movs	r3, #1
 8007e74:	4631      	mov	r1, r6
 8007e76:	4628      	mov	r0, r5
 8007e78:	47b8      	blx	r7
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	f43f af19 	beq.w	8007cb2 <_printf_float+0xbe>
 8007e80:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007e84:	4313      	orrs	r3, r2
 8007e86:	d102      	bne.n	8007e8e <_printf_float+0x29a>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	07d9      	lsls	r1, r3, #31
 8007e8c:	d5d8      	bpl.n	8007e40 <_printf_float+0x24c>
 8007e8e:	ee18 3a10 	vmov	r3, s16
 8007e92:	4652      	mov	r2, sl
 8007e94:	4631      	mov	r1, r6
 8007e96:	4628      	mov	r0, r5
 8007e98:	47b8      	blx	r7
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	f43f af09 	beq.w	8007cb2 <_printf_float+0xbe>
 8007ea0:	f04f 0900 	mov.w	r9, #0
 8007ea4:	f104 0a1a 	add.w	sl, r4, #26
 8007ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eaa:	425b      	negs	r3, r3
 8007eac:	454b      	cmp	r3, r9
 8007eae:	dc01      	bgt.n	8007eb4 <_printf_float+0x2c0>
 8007eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb2:	e792      	b.n	8007dda <_printf_float+0x1e6>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	4652      	mov	r2, sl
 8007eb8:	4631      	mov	r1, r6
 8007eba:	4628      	mov	r0, r5
 8007ebc:	47b8      	blx	r7
 8007ebe:	3001      	adds	r0, #1
 8007ec0:	f43f aef7 	beq.w	8007cb2 <_printf_float+0xbe>
 8007ec4:	f109 0901 	add.w	r9, r9, #1
 8007ec8:	e7ee      	b.n	8007ea8 <_printf_float+0x2b4>
 8007eca:	bf00      	nop
 8007ecc:	7fefffff 	.word	0x7fefffff
 8007ed0:	0800decc 	.word	0x0800decc
 8007ed4:	0800ded0 	.word	0x0800ded0
 8007ed8:	0800ded4 	.word	0x0800ded4
 8007edc:	0800ded8 	.word	0x0800ded8
 8007ee0:	0800dedc 	.word	0x0800dedc
 8007ee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ee6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	bfa8      	it	ge
 8007eec:	461a      	movge	r2, r3
 8007eee:	2a00      	cmp	r2, #0
 8007ef0:	4691      	mov	r9, r2
 8007ef2:	dc37      	bgt.n	8007f64 <_printf_float+0x370>
 8007ef4:	f04f 0b00 	mov.w	fp, #0
 8007ef8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007efc:	f104 021a 	add.w	r2, r4, #26
 8007f00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f02:	9305      	str	r3, [sp, #20]
 8007f04:	eba3 0309 	sub.w	r3, r3, r9
 8007f08:	455b      	cmp	r3, fp
 8007f0a:	dc33      	bgt.n	8007f74 <_printf_float+0x380>
 8007f0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f10:	429a      	cmp	r2, r3
 8007f12:	db3b      	blt.n	8007f8c <_printf_float+0x398>
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	07da      	lsls	r2, r3, #31
 8007f18:	d438      	bmi.n	8007f8c <_printf_float+0x398>
 8007f1a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f1e:	eba2 0903 	sub.w	r9, r2, r3
 8007f22:	9b05      	ldr	r3, [sp, #20]
 8007f24:	1ad2      	subs	r2, r2, r3
 8007f26:	4591      	cmp	r9, r2
 8007f28:	bfa8      	it	ge
 8007f2a:	4691      	movge	r9, r2
 8007f2c:	f1b9 0f00 	cmp.w	r9, #0
 8007f30:	dc35      	bgt.n	8007f9e <_printf_float+0x3aa>
 8007f32:	f04f 0800 	mov.w	r8, #0
 8007f36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f3a:	f104 0a1a 	add.w	sl, r4, #26
 8007f3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f42:	1a9b      	subs	r3, r3, r2
 8007f44:	eba3 0309 	sub.w	r3, r3, r9
 8007f48:	4543      	cmp	r3, r8
 8007f4a:	f77f af79 	ble.w	8007e40 <_printf_float+0x24c>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	4652      	mov	r2, sl
 8007f52:	4631      	mov	r1, r6
 8007f54:	4628      	mov	r0, r5
 8007f56:	47b8      	blx	r7
 8007f58:	3001      	adds	r0, #1
 8007f5a:	f43f aeaa 	beq.w	8007cb2 <_printf_float+0xbe>
 8007f5e:	f108 0801 	add.w	r8, r8, #1
 8007f62:	e7ec      	b.n	8007f3e <_printf_float+0x34a>
 8007f64:	4613      	mov	r3, r2
 8007f66:	4631      	mov	r1, r6
 8007f68:	4642      	mov	r2, r8
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	d1c0      	bne.n	8007ef4 <_printf_float+0x300>
 8007f72:	e69e      	b.n	8007cb2 <_printf_float+0xbe>
 8007f74:	2301      	movs	r3, #1
 8007f76:	4631      	mov	r1, r6
 8007f78:	4628      	mov	r0, r5
 8007f7a:	9205      	str	r2, [sp, #20]
 8007f7c:	47b8      	blx	r7
 8007f7e:	3001      	adds	r0, #1
 8007f80:	f43f ae97 	beq.w	8007cb2 <_printf_float+0xbe>
 8007f84:	9a05      	ldr	r2, [sp, #20]
 8007f86:	f10b 0b01 	add.w	fp, fp, #1
 8007f8a:	e7b9      	b.n	8007f00 <_printf_float+0x30c>
 8007f8c:	ee18 3a10 	vmov	r3, s16
 8007f90:	4652      	mov	r2, sl
 8007f92:	4631      	mov	r1, r6
 8007f94:	4628      	mov	r0, r5
 8007f96:	47b8      	blx	r7
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d1be      	bne.n	8007f1a <_printf_float+0x326>
 8007f9c:	e689      	b.n	8007cb2 <_printf_float+0xbe>
 8007f9e:	9a05      	ldr	r2, [sp, #20]
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	4442      	add	r2, r8
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b8      	blx	r7
 8007faa:	3001      	adds	r0, #1
 8007fac:	d1c1      	bne.n	8007f32 <_printf_float+0x33e>
 8007fae:	e680      	b.n	8007cb2 <_printf_float+0xbe>
 8007fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fb2:	2a01      	cmp	r2, #1
 8007fb4:	dc01      	bgt.n	8007fba <_printf_float+0x3c6>
 8007fb6:	07db      	lsls	r3, r3, #31
 8007fb8:	d53a      	bpl.n	8008030 <_printf_float+0x43c>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	4642      	mov	r2, r8
 8007fbe:	4631      	mov	r1, r6
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	47b8      	blx	r7
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	f43f ae74 	beq.w	8007cb2 <_printf_float+0xbe>
 8007fca:	ee18 3a10 	vmov	r3, s16
 8007fce:	4652      	mov	r2, sl
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	47b8      	blx	r7
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	f43f ae6b 	beq.w	8007cb2 <_printf_float+0xbe>
 8007fdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007fe8:	f7f8 fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fec:	b9d8      	cbnz	r0, 8008026 <_printf_float+0x432>
 8007fee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007ff2:	f108 0201 	add.w	r2, r8, #1
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	47b8      	blx	r7
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d10e      	bne.n	800801e <_printf_float+0x42a>
 8008000:	e657      	b.n	8007cb2 <_printf_float+0xbe>
 8008002:	2301      	movs	r3, #1
 8008004:	4652      	mov	r2, sl
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	47b8      	blx	r7
 800800c:	3001      	adds	r0, #1
 800800e:	f43f ae50 	beq.w	8007cb2 <_printf_float+0xbe>
 8008012:	f108 0801 	add.w	r8, r8, #1
 8008016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008018:	3b01      	subs	r3, #1
 800801a:	4543      	cmp	r3, r8
 800801c:	dcf1      	bgt.n	8008002 <_printf_float+0x40e>
 800801e:	464b      	mov	r3, r9
 8008020:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008024:	e6da      	b.n	8007ddc <_printf_float+0x1e8>
 8008026:	f04f 0800 	mov.w	r8, #0
 800802a:	f104 0a1a 	add.w	sl, r4, #26
 800802e:	e7f2      	b.n	8008016 <_printf_float+0x422>
 8008030:	2301      	movs	r3, #1
 8008032:	4642      	mov	r2, r8
 8008034:	e7df      	b.n	8007ff6 <_printf_float+0x402>
 8008036:	2301      	movs	r3, #1
 8008038:	464a      	mov	r2, r9
 800803a:	4631      	mov	r1, r6
 800803c:	4628      	mov	r0, r5
 800803e:	47b8      	blx	r7
 8008040:	3001      	adds	r0, #1
 8008042:	f43f ae36 	beq.w	8007cb2 <_printf_float+0xbe>
 8008046:	f108 0801 	add.w	r8, r8, #1
 800804a:	68e3      	ldr	r3, [r4, #12]
 800804c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800804e:	1a5b      	subs	r3, r3, r1
 8008050:	4543      	cmp	r3, r8
 8008052:	dcf0      	bgt.n	8008036 <_printf_float+0x442>
 8008054:	e6f8      	b.n	8007e48 <_printf_float+0x254>
 8008056:	f04f 0800 	mov.w	r8, #0
 800805a:	f104 0919 	add.w	r9, r4, #25
 800805e:	e7f4      	b.n	800804a <_printf_float+0x456>

08008060 <_printf_common>:
 8008060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008064:	4616      	mov	r6, r2
 8008066:	4699      	mov	r9, r3
 8008068:	688a      	ldr	r2, [r1, #8]
 800806a:	690b      	ldr	r3, [r1, #16]
 800806c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008070:	4293      	cmp	r3, r2
 8008072:	bfb8      	it	lt
 8008074:	4613      	movlt	r3, r2
 8008076:	6033      	str	r3, [r6, #0]
 8008078:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800807c:	4607      	mov	r7, r0
 800807e:	460c      	mov	r4, r1
 8008080:	b10a      	cbz	r2, 8008086 <_printf_common+0x26>
 8008082:	3301      	adds	r3, #1
 8008084:	6033      	str	r3, [r6, #0]
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	0699      	lsls	r1, r3, #26
 800808a:	bf42      	ittt	mi
 800808c:	6833      	ldrmi	r3, [r6, #0]
 800808e:	3302      	addmi	r3, #2
 8008090:	6033      	strmi	r3, [r6, #0]
 8008092:	6825      	ldr	r5, [r4, #0]
 8008094:	f015 0506 	ands.w	r5, r5, #6
 8008098:	d106      	bne.n	80080a8 <_printf_common+0x48>
 800809a:	f104 0a19 	add.w	sl, r4, #25
 800809e:	68e3      	ldr	r3, [r4, #12]
 80080a0:	6832      	ldr	r2, [r6, #0]
 80080a2:	1a9b      	subs	r3, r3, r2
 80080a4:	42ab      	cmp	r3, r5
 80080a6:	dc26      	bgt.n	80080f6 <_printf_common+0x96>
 80080a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080ac:	1e13      	subs	r3, r2, #0
 80080ae:	6822      	ldr	r2, [r4, #0]
 80080b0:	bf18      	it	ne
 80080b2:	2301      	movne	r3, #1
 80080b4:	0692      	lsls	r2, r2, #26
 80080b6:	d42b      	bmi.n	8008110 <_printf_common+0xb0>
 80080b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080bc:	4649      	mov	r1, r9
 80080be:	4638      	mov	r0, r7
 80080c0:	47c0      	blx	r8
 80080c2:	3001      	adds	r0, #1
 80080c4:	d01e      	beq.n	8008104 <_printf_common+0xa4>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	6922      	ldr	r2, [r4, #16]
 80080ca:	f003 0306 	and.w	r3, r3, #6
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	bf02      	ittt	eq
 80080d2:	68e5      	ldreq	r5, [r4, #12]
 80080d4:	6833      	ldreq	r3, [r6, #0]
 80080d6:	1aed      	subeq	r5, r5, r3
 80080d8:	68a3      	ldr	r3, [r4, #8]
 80080da:	bf0c      	ite	eq
 80080dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080e0:	2500      	movne	r5, #0
 80080e2:	4293      	cmp	r3, r2
 80080e4:	bfc4      	itt	gt
 80080e6:	1a9b      	subgt	r3, r3, r2
 80080e8:	18ed      	addgt	r5, r5, r3
 80080ea:	2600      	movs	r6, #0
 80080ec:	341a      	adds	r4, #26
 80080ee:	42b5      	cmp	r5, r6
 80080f0:	d11a      	bne.n	8008128 <_printf_common+0xc8>
 80080f2:	2000      	movs	r0, #0
 80080f4:	e008      	b.n	8008108 <_printf_common+0xa8>
 80080f6:	2301      	movs	r3, #1
 80080f8:	4652      	mov	r2, sl
 80080fa:	4649      	mov	r1, r9
 80080fc:	4638      	mov	r0, r7
 80080fe:	47c0      	blx	r8
 8008100:	3001      	adds	r0, #1
 8008102:	d103      	bne.n	800810c <_printf_common+0xac>
 8008104:	f04f 30ff 	mov.w	r0, #4294967295
 8008108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810c:	3501      	adds	r5, #1
 800810e:	e7c6      	b.n	800809e <_printf_common+0x3e>
 8008110:	18e1      	adds	r1, r4, r3
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	2030      	movs	r0, #48	; 0x30
 8008116:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800811a:	4422      	add	r2, r4
 800811c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008120:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008124:	3302      	adds	r3, #2
 8008126:	e7c7      	b.n	80080b8 <_printf_common+0x58>
 8008128:	2301      	movs	r3, #1
 800812a:	4622      	mov	r2, r4
 800812c:	4649      	mov	r1, r9
 800812e:	4638      	mov	r0, r7
 8008130:	47c0      	blx	r8
 8008132:	3001      	adds	r0, #1
 8008134:	d0e6      	beq.n	8008104 <_printf_common+0xa4>
 8008136:	3601      	adds	r6, #1
 8008138:	e7d9      	b.n	80080ee <_printf_common+0x8e>
	...

0800813c <_printf_i>:
 800813c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008140:	7e0f      	ldrb	r7, [r1, #24]
 8008142:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008144:	2f78      	cmp	r7, #120	; 0x78
 8008146:	4691      	mov	r9, r2
 8008148:	4680      	mov	r8, r0
 800814a:	460c      	mov	r4, r1
 800814c:	469a      	mov	sl, r3
 800814e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008152:	d807      	bhi.n	8008164 <_printf_i+0x28>
 8008154:	2f62      	cmp	r7, #98	; 0x62
 8008156:	d80a      	bhi.n	800816e <_printf_i+0x32>
 8008158:	2f00      	cmp	r7, #0
 800815a:	f000 80d4 	beq.w	8008306 <_printf_i+0x1ca>
 800815e:	2f58      	cmp	r7, #88	; 0x58
 8008160:	f000 80c0 	beq.w	80082e4 <_printf_i+0x1a8>
 8008164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008168:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800816c:	e03a      	b.n	80081e4 <_printf_i+0xa8>
 800816e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008172:	2b15      	cmp	r3, #21
 8008174:	d8f6      	bhi.n	8008164 <_printf_i+0x28>
 8008176:	a101      	add	r1, pc, #4	; (adr r1, 800817c <_printf_i+0x40>)
 8008178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800817c:	080081d5 	.word	0x080081d5
 8008180:	080081e9 	.word	0x080081e9
 8008184:	08008165 	.word	0x08008165
 8008188:	08008165 	.word	0x08008165
 800818c:	08008165 	.word	0x08008165
 8008190:	08008165 	.word	0x08008165
 8008194:	080081e9 	.word	0x080081e9
 8008198:	08008165 	.word	0x08008165
 800819c:	08008165 	.word	0x08008165
 80081a0:	08008165 	.word	0x08008165
 80081a4:	08008165 	.word	0x08008165
 80081a8:	080082ed 	.word	0x080082ed
 80081ac:	08008215 	.word	0x08008215
 80081b0:	080082a7 	.word	0x080082a7
 80081b4:	08008165 	.word	0x08008165
 80081b8:	08008165 	.word	0x08008165
 80081bc:	0800830f 	.word	0x0800830f
 80081c0:	08008165 	.word	0x08008165
 80081c4:	08008215 	.word	0x08008215
 80081c8:	08008165 	.word	0x08008165
 80081cc:	08008165 	.word	0x08008165
 80081d0:	080082af 	.word	0x080082af
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	1d1a      	adds	r2, r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	602a      	str	r2, [r5, #0]
 80081dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081e4:	2301      	movs	r3, #1
 80081e6:	e09f      	b.n	8008328 <_printf_i+0x1ec>
 80081e8:	6820      	ldr	r0, [r4, #0]
 80081ea:	682b      	ldr	r3, [r5, #0]
 80081ec:	0607      	lsls	r7, r0, #24
 80081ee:	f103 0104 	add.w	r1, r3, #4
 80081f2:	6029      	str	r1, [r5, #0]
 80081f4:	d501      	bpl.n	80081fa <_printf_i+0xbe>
 80081f6:	681e      	ldr	r6, [r3, #0]
 80081f8:	e003      	b.n	8008202 <_printf_i+0xc6>
 80081fa:	0646      	lsls	r6, r0, #25
 80081fc:	d5fb      	bpl.n	80081f6 <_printf_i+0xba>
 80081fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008202:	2e00      	cmp	r6, #0
 8008204:	da03      	bge.n	800820e <_printf_i+0xd2>
 8008206:	232d      	movs	r3, #45	; 0x2d
 8008208:	4276      	negs	r6, r6
 800820a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800820e:	485a      	ldr	r0, [pc, #360]	; (8008378 <_printf_i+0x23c>)
 8008210:	230a      	movs	r3, #10
 8008212:	e012      	b.n	800823a <_printf_i+0xfe>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	6820      	ldr	r0, [r4, #0]
 8008218:	1d19      	adds	r1, r3, #4
 800821a:	6029      	str	r1, [r5, #0]
 800821c:	0605      	lsls	r5, r0, #24
 800821e:	d501      	bpl.n	8008224 <_printf_i+0xe8>
 8008220:	681e      	ldr	r6, [r3, #0]
 8008222:	e002      	b.n	800822a <_printf_i+0xee>
 8008224:	0641      	lsls	r1, r0, #25
 8008226:	d5fb      	bpl.n	8008220 <_printf_i+0xe4>
 8008228:	881e      	ldrh	r6, [r3, #0]
 800822a:	4853      	ldr	r0, [pc, #332]	; (8008378 <_printf_i+0x23c>)
 800822c:	2f6f      	cmp	r7, #111	; 0x6f
 800822e:	bf0c      	ite	eq
 8008230:	2308      	moveq	r3, #8
 8008232:	230a      	movne	r3, #10
 8008234:	2100      	movs	r1, #0
 8008236:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800823a:	6865      	ldr	r5, [r4, #4]
 800823c:	60a5      	str	r5, [r4, #8]
 800823e:	2d00      	cmp	r5, #0
 8008240:	bfa2      	ittt	ge
 8008242:	6821      	ldrge	r1, [r4, #0]
 8008244:	f021 0104 	bicge.w	r1, r1, #4
 8008248:	6021      	strge	r1, [r4, #0]
 800824a:	b90e      	cbnz	r6, 8008250 <_printf_i+0x114>
 800824c:	2d00      	cmp	r5, #0
 800824e:	d04b      	beq.n	80082e8 <_printf_i+0x1ac>
 8008250:	4615      	mov	r5, r2
 8008252:	fbb6 f1f3 	udiv	r1, r6, r3
 8008256:	fb03 6711 	mls	r7, r3, r1, r6
 800825a:	5dc7      	ldrb	r7, [r0, r7]
 800825c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008260:	4637      	mov	r7, r6
 8008262:	42bb      	cmp	r3, r7
 8008264:	460e      	mov	r6, r1
 8008266:	d9f4      	bls.n	8008252 <_printf_i+0x116>
 8008268:	2b08      	cmp	r3, #8
 800826a:	d10b      	bne.n	8008284 <_printf_i+0x148>
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	07de      	lsls	r6, r3, #31
 8008270:	d508      	bpl.n	8008284 <_printf_i+0x148>
 8008272:	6923      	ldr	r3, [r4, #16]
 8008274:	6861      	ldr	r1, [r4, #4]
 8008276:	4299      	cmp	r1, r3
 8008278:	bfde      	ittt	le
 800827a:	2330      	movle	r3, #48	; 0x30
 800827c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008280:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008284:	1b52      	subs	r2, r2, r5
 8008286:	6122      	str	r2, [r4, #16]
 8008288:	f8cd a000 	str.w	sl, [sp]
 800828c:	464b      	mov	r3, r9
 800828e:	aa03      	add	r2, sp, #12
 8008290:	4621      	mov	r1, r4
 8008292:	4640      	mov	r0, r8
 8008294:	f7ff fee4 	bl	8008060 <_printf_common>
 8008298:	3001      	adds	r0, #1
 800829a:	d14a      	bne.n	8008332 <_printf_i+0x1f6>
 800829c:	f04f 30ff 	mov.w	r0, #4294967295
 80082a0:	b004      	add	sp, #16
 80082a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	f043 0320 	orr.w	r3, r3, #32
 80082ac:	6023      	str	r3, [r4, #0]
 80082ae:	4833      	ldr	r0, [pc, #204]	; (800837c <_printf_i+0x240>)
 80082b0:	2778      	movs	r7, #120	; 0x78
 80082b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	6829      	ldr	r1, [r5, #0]
 80082ba:	061f      	lsls	r7, r3, #24
 80082bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80082c0:	d402      	bmi.n	80082c8 <_printf_i+0x18c>
 80082c2:	065f      	lsls	r7, r3, #25
 80082c4:	bf48      	it	mi
 80082c6:	b2b6      	uxthmi	r6, r6
 80082c8:	07df      	lsls	r7, r3, #31
 80082ca:	bf48      	it	mi
 80082cc:	f043 0320 	orrmi.w	r3, r3, #32
 80082d0:	6029      	str	r1, [r5, #0]
 80082d2:	bf48      	it	mi
 80082d4:	6023      	strmi	r3, [r4, #0]
 80082d6:	b91e      	cbnz	r6, 80082e0 <_printf_i+0x1a4>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	f023 0320 	bic.w	r3, r3, #32
 80082de:	6023      	str	r3, [r4, #0]
 80082e0:	2310      	movs	r3, #16
 80082e2:	e7a7      	b.n	8008234 <_printf_i+0xf8>
 80082e4:	4824      	ldr	r0, [pc, #144]	; (8008378 <_printf_i+0x23c>)
 80082e6:	e7e4      	b.n	80082b2 <_printf_i+0x176>
 80082e8:	4615      	mov	r5, r2
 80082ea:	e7bd      	b.n	8008268 <_printf_i+0x12c>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	6826      	ldr	r6, [r4, #0]
 80082f0:	6961      	ldr	r1, [r4, #20]
 80082f2:	1d18      	adds	r0, r3, #4
 80082f4:	6028      	str	r0, [r5, #0]
 80082f6:	0635      	lsls	r5, r6, #24
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	d501      	bpl.n	8008300 <_printf_i+0x1c4>
 80082fc:	6019      	str	r1, [r3, #0]
 80082fe:	e002      	b.n	8008306 <_printf_i+0x1ca>
 8008300:	0670      	lsls	r0, r6, #25
 8008302:	d5fb      	bpl.n	80082fc <_printf_i+0x1c0>
 8008304:	8019      	strh	r1, [r3, #0]
 8008306:	2300      	movs	r3, #0
 8008308:	6123      	str	r3, [r4, #16]
 800830a:	4615      	mov	r5, r2
 800830c:	e7bc      	b.n	8008288 <_printf_i+0x14c>
 800830e:	682b      	ldr	r3, [r5, #0]
 8008310:	1d1a      	adds	r2, r3, #4
 8008312:	602a      	str	r2, [r5, #0]
 8008314:	681d      	ldr	r5, [r3, #0]
 8008316:	6862      	ldr	r2, [r4, #4]
 8008318:	2100      	movs	r1, #0
 800831a:	4628      	mov	r0, r5
 800831c:	f7f7 ff58 	bl	80001d0 <memchr>
 8008320:	b108      	cbz	r0, 8008326 <_printf_i+0x1ea>
 8008322:	1b40      	subs	r0, r0, r5
 8008324:	6060      	str	r0, [r4, #4]
 8008326:	6863      	ldr	r3, [r4, #4]
 8008328:	6123      	str	r3, [r4, #16]
 800832a:	2300      	movs	r3, #0
 800832c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008330:	e7aa      	b.n	8008288 <_printf_i+0x14c>
 8008332:	6923      	ldr	r3, [r4, #16]
 8008334:	462a      	mov	r2, r5
 8008336:	4649      	mov	r1, r9
 8008338:	4640      	mov	r0, r8
 800833a:	47d0      	blx	sl
 800833c:	3001      	adds	r0, #1
 800833e:	d0ad      	beq.n	800829c <_printf_i+0x160>
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	079b      	lsls	r3, r3, #30
 8008344:	d413      	bmi.n	800836e <_printf_i+0x232>
 8008346:	68e0      	ldr	r0, [r4, #12]
 8008348:	9b03      	ldr	r3, [sp, #12]
 800834a:	4298      	cmp	r0, r3
 800834c:	bfb8      	it	lt
 800834e:	4618      	movlt	r0, r3
 8008350:	e7a6      	b.n	80082a0 <_printf_i+0x164>
 8008352:	2301      	movs	r3, #1
 8008354:	4632      	mov	r2, r6
 8008356:	4649      	mov	r1, r9
 8008358:	4640      	mov	r0, r8
 800835a:	47d0      	blx	sl
 800835c:	3001      	adds	r0, #1
 800835e:	d09d      	beq.n	800829c <_printf_i+0x160>
 8008360:	3501      	adds	r5, #1
 8008362:	68e3      	ldr	r3, [r4, #12]
 8008364:	9903      	ldr	r1, [sp, #12]
 8008366:	1a5b      	subs	r3, r3, r1
 8008368:	42ab      	cmp	r3, r5
 800836a:	dcf2      	bgt.n	8008352 <_printf_i+0x216>
 800836c:	e7eb      	b.n	8008346 <_printf_i+0x20a>
 800836e:	2500      	movs	r5, #0
 8008370:	f104 0619 	add.w	r6, r4, #25
 8008374:	e7f5      	b.n	8008362 <_printf_i+0x226>
 8008376:	bf00      	nop
 8008378:	0800dede 	.word	0x0800dede
 800837c:	0800deef 	.word	0x0800deef

08008380 <__sflush_r>:
 8008380:	898a      	ldrh	r2, [r1, #12]
 8008382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008386:	4605      	mov	r5, r0
 8008388:	0710      	lsls	r0, r2, #28
 800838a:	460c      	mov	r4, r1
 800838c:	d458      	bmi.n	8008440 <__sflush_r+0xc0>
 800838e:	684b      	ldr	r3, [r1, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	dc05      	bgt.n	80083a0 <__sflush_r+0x20>
 8008394:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008396:	2b00      	cmp	r3, #0
 8008398:	dc02      	bgt.n	80083a0 <__sflush_r+0x20>
 800839a:	2000      	movs	r0, #0
 800839c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083a2:	2e00      	cmp	r6, #0
 80083a4:	d0f9      	beq.n	800839a <__sflush_r+0x1a>
 80083a6:	2300      	movs	r3, #0
 80083a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083ac:	682f      	ldr	r7, [r5, #0]
 80083ae:	6a21      	ldr	r1, [r4, #32]
 80083b0:	602b      	str	r3, [r5, #0]
 80083b2:	d032      	beq.n	800841a <__sflush_r+0x9a>
 80083b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	075a      	lsls	r2, r3, #29
 80083ba:	d505      	bpl.n	80083c8 <__sflush_r+0x48>
 80083bc:	6863      	ldr	r3, [r4, #4]
 80083be:	1ac0      	subs	r0, r0, r3
 80083c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083c2:	b10b      	cbz	r3, 80083c8 <__sflush_r+0x48>
 80083c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083c6:	1ac0      	subs	r0, r0, r3
 80083c8:	2300      	movs	r3, #0
 80083ca:	4602      	mov	r2, r0
 80083cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083ce:	6a21      	ldr	r1, [r4, #32]
 80083d0:	4628      	mov	r0, r5
 80083d2:	47b0      	blx	r6
 80083d4:	1c43      	adds	r3, r0, #1
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	d106      	bne.n	80083e8 <__sflush_r+0x68>
 80083da:	6829      	ldr	r1, [r5, #0]
 80083dc:	291d      	cmp	r1, #29
 80083de:	d82b      	bhi.n	8008438 <__sflush_r+0xb8>
 80083e0:	4a29      	ldr	r2, [pc, #164]	; (8008488 <__sflush_r+0x108>)
 80083e2:	410a      	asrs	r2, r1
 80083e4:	07d6      	lsls	r6, r2, #31
 80083e6:	d427      	bmi.n	8008438 <__sflush_r+0xb8>
 80083e8:	2200      	movs	r2, #0
 80083ea:	6062      	str	r2, [r4, #4]
 80083ec:	04d9      	lsls	r1, r3, #19
 80083ee:	6922      	ldr	r2, [r4, #16]
 80083f0:	6022      	str	r2, [r4, #0]
 80083f2:	d504      	bpl.n	80083fe <__sflush_r+0x7e>
 80083f4:	1c42      	adds	r2, r0, #1
 80083f6:	d101      	bne.n	80083fc <__sflush_r+0x7c>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	b903      	cbnz	r3, 80083fe <__sflush_r+0x7e>
 80083fc:	6560      	str	r0, [r4, #84]	; 0x54
 80083fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008400:	602f      	str	r7, [r5, #0]
 8008402:	2900      	cmp	r1, #0
 8008404:	d0c9      	beq.n	800839a <__sflush_r+0x1a>
 8008406:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800840a:	4299      	cmp	r1, r3
 800840c:	d002      	beq.n	8008414 <__sflush_r+0x94>
 800840e:	4628      	mov	r0, r5
 8008410:	f001 f8a8 	bl	8009564 <_free_r>
 8008414:	2000      	movs	r0, #0
 8008416:	6360      	str	r0, [r4, #52]	; 0x34
 8008418:	e7c0      	b.n	800839c <__sflush_r+0x1c>
 800841a:	2301      	movs	r3, #1
 800841c:	4628      	mov	r0, r5
 800841e:	47b0      	blx	r6
 8008420:	1c41      	adds	r1, r0, #1
 8008422:	d1c8      	bne.n	80083b6 <__sflush_r+0x36>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0c5      	beq.n	80083b6 <__sflush_r+0x36>
 800842a:	2b1d      	cmp	r3, #29
 800842c:	d001      	beq.n	8008432 <__sflush_r+0xb2>
 800842e:	2b16      	cmp	r3, #22
 8008430:	d101      	bne.n	8008436 <__sflush_r+0xb6>
 8008432:	602f      	str	r7, [r5, #0]
 8008434:	e7b1      	b.n	800839a <__sflush_r+0x1a>
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800843c:	81a3      	strh	r3, [r4, #12]
 800843e:	e7ad      	b.n	800839c <__sflush_r+0x1c>
 8008440:	690f      	ldr	r7, [r1, #16]
 8008442:	2f00      	cmp	r7, #0
 8008444:	d0a9      	beq.n	800839a <__sflush_r+0x1a>
 8008446:	0793      	lsls	r3, r2, #30
 8008448:	680e      	ldr	r6, [r1, #0]
 800844a:	bf08      	it	eq
 800844c:	694b      	ldreq	r3, [r1, #20]
 800844e:	600f      	str	r7, [r1, #0]
 8008450:	bf18      	it	ne
 8008452:	2300      	movne	r3, #0
 8008454:	eba6 0807 	sub.w	r8, r6, r7
 8008458:	608b      	str	r3, [r1, #8]
 800845a:	f1b8 0f00 	cmp.w	r8, #0
 800845e:	dd9c      	ble.n	800839a <__sflush_r+0x1a>
 8008460:	6a21      	ldr	r1, [r4, #32]
 8008462:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008464:	4643      	mov	r3, r8
 8008466:	463a      	mov	r2, r7
 8008468:	4628      	mov	r0, r5
 800846a:	47b0      	blx	r6
 800846c:	2800      	cmp	r0, #0
 800846e:	dc06      	bgt.n	800847e <__sflush_r+0xfe>
 8008470:	89a3      	ldrh	r3, [r4, #12]
 8008472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008476:	81a3      	strh	r3, [r4, #12]
 8008478:	f04f 30ff 	mov.w	r0, #4294967295
 800847c:	e78e      	b.n	800839c <__sflush_r+0x1c>
 800847e:	4407      	add	r7, r0
 8008480:	eba8 0800 	sub.w	r8, r8, r0
 8008484:	e7e9      	b.n	800845a <__sflush_r+0xda>
 8008486:	bf00      	nop
 8008488:	dfbffffe 	.word	0xdfbffffe

0800848c <_fflush_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	690b      	ldr	r3, [r1, #16]
 8008490:	4605      	mov	r5, r0
 8008492:	460c      	mov	r4, r1
 8008494:	b913      	cbnz	r3, 800849c <_fflush_r+0x10>
 8008496:	2500      	movs	r5, #0
 8008498:	4628      	mov	r0, r5
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	b118      	cbz	r0, 80084a6 <_fflush_r+0x1a>
 800849e:	6a03      	ldr	r3, [r0, #32]
 80084a0:	b90b      	cbnz	r3, 80084a6 <_fflush_r+0x1a>
 80084a2:	f000 f8a7 	bl	80085f4 <__sinit>
 80084a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d0f3      	beq.n	8008496 <_fflush_r+0xa>
 80084ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084b0:	07d0      	lsls	r0, r2, #31
 80084b2:	d404      	bmi.n	80084be <_fflush_r+0x32>
 80084b4:	0599      	lsls	r1, r3, #22
 80084b6:	d402      	bmi.n	80084be <_fflush_r+0x32>
 80084b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ba:	f000 f9c6 	bl	800884a <__retarget_lock_acquire_recursive>
 80084be:	4628      	mov	r0, r5
 80084c0:	4621      	mov	r1, r4
 80084c2:	f7ff ff5d 	bl	8008380 <__sflush_r>
 80084c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084c8:	07da      	lsls	r2, r3, #31
 80084ca:	4605      	mov	r5, r0
 80084cc:	d4e4      	bmi.n	8008498 <_fflush_r+0xc>
 80084ce:	89a3      	ldrh	r3, [r4, #12]
 80084d0:	059b      	lsls	r3, r3, #22
 80084d2:	d4e1      	bmi.n	8008498 <_fflush_r+0xc>
 80084d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084d6:	f000 f9b9 	bl	800884c <__retarget_lock_release_recursive>
 80084da:	e7dd      	b.n	8008498 <_fflush_r+0xc>

080084dc <std>:
 80084dc:	2300      	movs	r3, #0
 80084de:	b510      	push	{r4, lr}
 80084e0:	4604      	mov	r4, r0
 80084e2:	e9c0 3300 	strd	r3, r3, [r0]
 80084e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084ea:	6083      	str	r3, [r0, #8]
 80084ec:	8181      	strh	r1, [r0, #12]
 80084ee:	6643      	str	r3, [r0, #100]	; 0x64
 80084f0:	81c2      	strh	r2, [r0, #14]
 80084f2:	6183      	str	r3, [r0, #24]
 80084f4:	4619      	mov	r1, r3
 80084f6:	2208      	movs	r2, #8
 80084f8:	305c      	adds	r0, #92	; 0x5c
 80084fa:	f000 f929 	bl	8008750 <memset>
 80084fe:	4b0d      	ldr	r3, [pc, #52]	; (8008534 <std+0x58>)
 8008500:	6263      	str	r3, [r4, #36]	; 0x24
 8008502:	4b0d      	ldr	r3, [pc, #52]	; (8008538 <std+0x5c>)
 8008504:	62a3      	str	r3, [r4, #40]	; 0x28
 8008506:	4b0d      	ldr	r3, [pc, #52]	; (800853c <std+0x60>)
 8008508:	62e3      	str	r3, [r4, #44]	; 0x2c
 800850a:	4b0d      	ldr	r3, [pc, #52]	; (8008540 <std+0x64>)
 800850c:	6323      	str	r3, [r4, #48]	; 0x30
 800850e:	4b0d      	ldr	r3, [pc, #52]	; (8008544 <std+0x68>)
 8008510:	6224      	str	r4, [r4, #32]
 8008512:	429c      	cmp	r4, r3
 8008514:	d006      	beq.n	8008524 <std+0x48>
 8008516:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800851a:	4294      	cmp	r4, r2
 800851c:	d002      	beq.n	8008524 <std+0x48>
 800851e:	33d0      	adds	r3, #208	; 0xd0
 8008520:	429c      	cmp	r4, r3
 8008522:	d105      	bne.n	8008530 <std+0x54>
 8008524:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800852c:	f000 b98c 	b.w	8008848 <__retarget_lock_init_recursive>
 8008530:	bd10      	pop	{r4, pc}
 8008532:	bf00      	nop
 8008534:	08008661 	.word	0x08008661
 8008538:	08008683 	.word	0x08008683
 800853c:	080086bb 	.word	0x080086bb
 8008540:	080086df 	.word	0x080086df
 8008544:	2000a444 	.word	0x2000a444

08008548 <stdio_exit_handler>:
 8008548:	4a02      	ldr	r2, [pc, #8]	; (8008554 <stdio_exit_handler+0xc>)
 800854a:	4903      	ldr	r1, [pc, #12]	; (8008558 <stdio_exit_handler+0x10>)
 800854c:	4803      	ldr	r0, [pc, #12]	; (800855c <stdio_exit_handler+0x14>)
 800854e:	f000 b869 	b.w	8008624 <_fwalk_sglue>
 8008552:	bf00      	nop
 8008554:	20000014 	.word	0x20000014
 8008558:	0800848d 	.word	0x0800848d
 800855c:	20000020 	.word	0x20000020

08008560 <cleanup_stdio>:
 8008560:	6841      	ldr	r1, [r0, #4]
 8008562:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <cleanup_stdio+0x34>)
 8008564:	4299      	cmp	r1, r3
 8008566:	b510      	push	{r4, lr}
 8008568:	4604      	mov	r4, r0
 800856a:	d001      	beq.n	8008570 <cleanup_stdio+0x10>
 800856c:	f7ff ff8e 	bl	800848c <_fflush_r>
 8008570:	68a1      	ldr	r1, [r4, #8]
 8008572:	4b09      	ldr	r3, [pc, #36]	; (8008598 <cleanup_stdio+0x38>)
 8008574:	4299      	cmp	r1, r3
 8008576:	d002      	beq.n	800857e <cleanup_stdio+0x1e>
 8008578:	4620      	mov	r0, r4
 800857a:	f7ff ff87 	bl	800848c <_fflush_r>
 800857e:	68e1      	ldr	r1, [r4, #12]
 8008580:	4b06      	ldr	r3, [pc, #24]	; (800859c <cleanup_stdio+0x3c>)
 8008582:	4299      	cmp	r1, r3
 8008584:	d004      	beq.n	8008590 <cleanup_stdio+0x30>
 8008586:	4620      	mov	r0, r4
 8008588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800858c:	f7ff bf7e 	b.w	800848c <_fflush_r>
 8008590:	bd10      	pop	{r4, pc}
 8008592:	bf00      	nop
 8008594:	2000a444 	.word	0x2000a444
 8008598:	2000a4ac 	.word	0x2000a4ac
 800859c:	2000a514 	.word	0x2000a514

080085a0 <global_stdio_init.part.0>:
 80085a0:	b510      	push	{r4, lr}
 80085a2:	4b0b      	ldr	r3, [pc, #44]	; (80085d0 <global_stdio_init.part.0+0x30>)
 80085a4:	4c0b      	ldr	r4, [pc, #44]	; (80085d4 <global_stdio_init.part.0+0x34>)
 80085a6:	4a0c      	ldr	r2, [pc, #48]	; (80085d8 <global_stdio_init.part.0+0x38>)
 80085a8:	601a      	str	r2, [r3, #0]
 80085aa:	4620      	mov	r0, r4
 80085ac:	2200      	movs	r2, #0
 80085ae:	2104      	movs	r1, #4
 80085b0:	f7ff ff94 	bl	80084dc <std>
 80085b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80085b8:	2201      	movs	r2, #1
 80085ba:	2109      	movs	r1, #9
 80085bc:	f7ff ff8e 	bl	80084dc <std>
 80085c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80085c4:	2202      	movs	r2, #2
 80085c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ca:	2112      	movs	r1, #18
 80085cc:	f7ff bf86 	b.w	80084dc <std>
 80085d0:	2000a57c 	.word	0x2000a57c
 80085d4:	2000a444 	.word	0x2000a444
 80085d8:	08008549 	.word	0x08008549

080085dc <__sfp_lock_acquire>:
 80085dc:	4801      	ldr	r0, [pc, #4]	; (80085e4 <__sfp_lock_acquire+0x8>)
 80085de:	f000 b934 	b.w	800884a <__retarget_lock_acquire_recursive>
 80085e2:	bf00      	nop
 80085e4:	2000a585 	.word	0x2000a585

080085e8 <__sfp_lock_release>:
 80085e8:	4801      	ldr	r0, [pc, #4]	; (80085f0 <__sfp_lock_release+0x8>)
 80085ea:	f000 b92f 	b.w	800884c <__retarget_lock_release_recursive>
 80085ee:	bf00      	nop
 80085f0:	2000a585 	.word	0x2000a585

080085f4 <__sinit>:
 80085f4:	b510      	push	{r4, lr}
 80085f6:	4604      	mov	r4, r0
 80085f8:	f7ff fff0 	bl	80085dc <__sfp_lock_acquire>
 80085fc:	6a23      	ldr	r3, [r4, #32]
 80085fe:	b11b      	cbz	r3, 8008608 <__sinit+0x14>
 8008600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008604:	f7ff bff0 	b.w	80085e8 <__sfp_lock_release>
 8008608:	4b04      	ldr	r3, [pc, #16]	; (800861c <__sinit+0x28>)
 800860a:	6223      	str	r3, [r4, #32]
 800860c:	4b04      	ldr	r3, [pc, #16]	; (8008620 <__sinit+0x2c>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1f5      	bne.n	8008600 <__sinit+0xc>
 8008614:	f7ff ffc4 	bl	80085a0 <global_stdio_init.part.0>
 8008618:	e7f2      	b.n	8008600 <__sinit+0xc>
 800861a:	bf00      	nop
 800861c:	08008561 	.word	0x08008561
 8008620:	2000a57c 	.word	0x2000a57c

08008624 <_fwalk_sglue>:
 8008624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008628:	4607      	mov	r7, r0
 800862a:	4688      	mov	r8, r1
 800862c:	4614      	mov	r4, r2
 800862e:	2600      	movs	r6, #0
 8008630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008634:	f1b9 0901 	subs.w	r9, r9, #1
 8008638:	d505      	bpl.n	8008646 <_fwalk_sglue+0x22>
 800863a:	6824      	ldr	r4, [r4, #0]
 800863c:	2c00      	cmp	r4, #0
 800863e:	d1f7      	bne.n	8008630 <_fwalk_sglue+0xc>
 8008640:	4630      	mov	r0, r6
 8008642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008646:	89ab      	ldrh	r3, [r5, #12]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d907      	bls.n	800865c <_fwalk_sglue+0x38>
 800864c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008650:	3301      	adds	r3, #1
 8008652:	d003      	beq.n	800865c <_fwalk_sglue+0x38>
 8008654:	4629      	mov	r1, r5
 8008656:	4638      	mov	r0, r7
 8008658:	47c0      	blx	r8
 800865a:	4306      	orrs	r6, r0
 800865c:	3568      	adds	r5, #104	; 0x68
 800865e:	e7e9      	b.n	8008634 <_fwalk_sglue+0x10>

08008660 <__sread>:
 8008660:	b510      	push	{r4, lr}
 8008662:	460c      	mov	r4, r1
 8008664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008668:	f000 f8a0 	bl	80087ac <_read_r>
 800866c:	2800      	cmp	r0, #0
 800866e:	bfab      	itete	ge
 8008670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008672:	89a3      	ldrhlt	r3, [r4, #12]
 8008674:	181b      	addge	r3, r3, r0
 8008676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800867a:	bfac      	ite	ge
 800867c:	6563      	strge	r3, [r4, #84]	; 0x54
 800867e:	81a3      	strhlt	r3, [r4, #12]
 8008680:	bd10      	pop	{r4, pc}

08008682 <__swrite>:
 8008682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008686:	461f      	mov	r7, r3
 8008688:	898b      	ldrh	r3, [r1, #12]
 800868a:	05db      	lsls	r3, r3, #23
 800868c:	4605      	mov	r5, r0
 800868e:	460c      	mov	r4, r1
 8008690:	4616      	mov	r6, r2
 8008692:	d505      	bpl.n	80086a0 <__swrite+0x1e>
 8008694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008698:	2302      	movs	r3, #2
 800869a:	2200      	movs	r2, #0
 800869c:	f000 f874 	bl	8008788 <_lseek_r>
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086aa:	81a3      	strh	r3, [r4, #12]
 80086ac:	4632      	mov	r2, r6
 80086ae:	463b      	mov	r3, r7
 80086b0:	4628      	mov	r0, r5
 80086b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086b6:	f000 b88b 	b.w	80087d0 <_write_r>

080086ba <__sseek>:
 80086ba:	b510      	push	{r4, lr}
 80086bc:	460c      	mov	r4, r1
 80086be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c2:	f000 f861 	bl	8008788 <_lseek_r>
 80086c6:	1c43      	adds	r3, r0, #1
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	bf15      	itete	ne
 80086cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80086ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086d6:	81a3      	strheq	r3, [r4, #12]
 80086d8:	bf18      	it	ne
 80086da:	81a3      	strhne	r3, [r4, #12]
 80086dc:	bd10      	pop	{r4, pc}

080086de <__sclose>:
 80086de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e2:	f000 b841 	b.w	8008768 <_close_r>
	...

080086e8 <swprintf>:
 80086e8:	b40c      	push	{r2, r3}
 80086ea:	b530      	push	{r4, r5, lr}
 80086ec:	4b17      	ldr	r3, [pc, #92]	; (800874c <swprintf+0x64>)
 80086ee:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80086f2:	681d      	ldr	r5, [r3, #0]
 80086f4:	b09d      	sub	sp, #116	; 0x74
 80086f6:	460c      	mov	r4, r1
 80086f8:	d308      	bcc.n	800870c <swprintf+0x24>
 80086fa:	238b      	movs	r3, #139	; 0x8b
 80086fc:	602b      	str	r3, [r5, #0]
 80086fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008702:	b01d      	add	sp, #116	; 0x74
 8008704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008708:	b002      	add	sp, #8
 800870a:	4770      	bx	lr
 800870c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008710:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008714:	9002      	str	r0, [sp, #8]
 8008716:	9006      	str	r0, [sp, #24]
 8008718:	b1b1      	cbz	r1, 8008748 <swprintf+0x60>
 800871a:	1e4b      	subs	r3, r1, #1
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	9304      	str	r3, [sp, #16]
 8008720:	9307      	str	r3, [sp, #28]
 8008722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008726:	f8ad 3016 	strh.w	r3, [sp, #22]
 800872a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800872c:	ab21      	add	r3, sp, #132	; 0x84
 800872e:	a902      	add	r1, sp, #8
 8008730:	4628      	mov	r0, r5
 8008732:	9301      	str	r3, [sp, #4]
 8008734:	f001 fc64 	bl	800a000 <_svfwprintf_r>
 8008738:	2c00      	cmp	r4, #0
 800873a:	d0de      	beq.n	80086fa <swprintf+0x12>
 800873c:	9b02      	ldr	r3, [sp, #8]
 800873e:	2200      	movs	r2, #0
 8008740:	42a0      	cmp	r0, r4
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	d3dd      	bcc.n	8008702 <swprintf+0x1a>
 8008746:	e7d8      	b.n	80086fa <swprintf+0x12>
 8008748:	460b      	mov	r3, r1
 800874a:	e7e8      	b.n	800871e <swprintf+0x36>
 800874c:	2000006c 	.word	0x2000006c

08008750 <memset>:
 8008750:	4402      	add	r2, r0
 8008752:	4603      	mov	r3, r0
 8008754:	4293      	cmp	r3, r2
 8008756:	d100      	bne.n	800875a <memset+0xa>
 8008758:	4770      	bx	lr
 800875a:	f803 1b01 	strb.w	r1, [r3], #1
 800875e:	e7f9      	b.n	8008754 <memset+0x4>

08008760 <_localeconv_r>:
 8008760:	4800      	ldr	r0, [pc, #0]	; (8008764 <_localeconv_r+0x4>)
 8008762:	4770      	bx	lr
 8008764:	20000160 	.word	0x20000160

08008768 <_close_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d06      	ldr	r5, [pc, #24]	; (8008784 <_close_r+0x1c>)
 800876c:	2300      	movs	r3, #0
 800876e:	4604      	mov	r4, r0
 8008770:	4608      	mov	r0, r1
 8008772:	602b      	str	r3, [r5, #0]
 8008774:	f7f9 fd4d 	bl	8002212 <_close>
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	d102      	bne.n	8008782 <_close_r+0x1a>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	b103      	cbz	r3, 8008782 <_close_r+0x1a>
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	bd38      	pop	{r3, r4, r5, pc}
 8008784:	2000a580 	.word	0x2000a580

08008788 <_lseek_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4d07      	ldr	r5, [pc, #28]	; (80087a8 <_lseek_r+0x20>)
 800878c:	4604      	mov	r4, r0
 800878e:	4608      	mov	r0, r1
 8008790:	4611      	mov	r1, r2
 8008792:	2200      	movs	r2, #0
 8008794:	602a      	str	r2, [r5, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	f7f9 fd62 	bl	8002260 <_lseek>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_lseek_r+0x1e>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_lseek_r+0x1e>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	2000a580 	.word	0x2000a580

080087ac <_read_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d07      	ldr	r5, [pc, #28]	; (80087cc <_read_r+0x20>)
 80087b0:	4604      	mov	r4, r0
 80087b2:	4608      	mov	r0, r1
 80087b4:	4611      	mov	r1, r2
 80087b6:	2200      	movs	r2, #0
 80087b8:	602a      	str	r2, [r5, #0]
 80087ba:	461a      	mov	r2, r3
 80087bc:	f7f9 fcf0 	bl	80021a0 <_read>
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d102      	bne.n	80087ca <_read_r+0x1e>
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	b103      	cbz	r3, 80087ca <_read_r+0x1e>
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	bd38      	pop	{r3, r4, r5, pc}
 80087cc:	2000a580 	.word	0x2000a580

080087d0 <_write_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	4d07      	ldr	r5, [pc, #28]	; (80087f0 <_write_r+0x20>)
 80087d4:	4604      	mov	r4, r0
 80087d6:	4608      	mov	r0, r1
 80087d8:	4611      	mov	r1, r2
 80087da:	2200      	movs	r2, #0
 80087dc:	602a      	str	r2, [r5, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	f7f9 fcfb 	bl	80021da <_write>
 80087e4:	1c43      	adds	r3, r0, #1
 80087e6:	d102      	bne.n	80087ee <_write_r+0x1e>
 80087e8:	682b      	ldr	r3, [r5, #0]
 80087ea:	b103      	cbz	r3, 80087ee <_write_r+0x1e>
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	bd38      	pop	{r3, r4, r5, pc}
 80087f0:	2000a580 	.word	0x2000a580

080087f4 <__errno>:
 80087f4:	4b01      	ldr	r3, [pc, #4]	; (80087fc <__errno+0x8>)
 80087f6:	6818      	ldr	r0, [r3, #0]
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	2000006c 	.word	0x2000006c

08008800 <__libc_init_array>:
 8008800:	b570      	push	{r4, r5, r6, lr}
 8008802:	4d0d      	ldr	r5, [pc, #52]	; (8008838 <__libc_init_array+0x38>)
 8008804:	4c0d      	ldr	r4, [pc, #52]	; (800883c <__libc_init_array+0x3c>)
 8008806:	1b64      	subs	r4, r4, r5
 8008808:	10a4      	asrs	r4, r4, #2
 800880a:	2600      	movs	r6, #0
 800880c:	42a6      	cmp	r6, r4
 800880e:	d109      	bne.n	8008824 <__libc_init_array+0x24>
 8008810:	4d0b      	ldr	r5, [pc, #44]	; (8008840 <__libc_init_array+0x40>)
 8008812:	4c0c      	ldr	r4, [pc, #48]	; (8008844 <__libc_init_array+0x44>)
 8008814:	f002 ff36 	bl	800b684 <_init>
 8008818:	1b64      	subs	r4, r4, r5
 800881a:	10a4      	asrs	r4, r4, #2
 800881c:	2600      	movs	r6, #0
 800881e:	42a6      	cmp	r6, r4
 8008820:	d105      	bne.n	800882e <__libc_init_array+0x2e>
 8008822:	bd70      	pop	{r4, r5, r6, pc}
 8008824:	f855 3b04 	ldr.w	r3, [r5], #4
 8008828:	4798      	blx	r3
 800882a:	3601      	adds	r6, #1
 800882c:	e7ee      	b.n	800880c <__libc_init_array+0xc>
 800882e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008832:	4798      	blx	r3
 8008834:	3601      	adds	r6, #1
 8008836:	e7f2      	b.n	800881e <__libc_init_array+0x1e>
 8008838:	0800e3f0 	.word	0x0800e3f0
 800883c:	0800e3f0 	.word	0x0800e3f0
 8008840:	0800e3f0 	.word	0x0800e3f0
 8008844:	0800e3f4 	.word	0x0800e3f4

08008848 <__retarget_lock_init_recursive>:
 8008848:	4770      	bx	lr

0800884a <__retarget_lock_acquire_recursive>:
 800884a:	4770      	bx	lr

0800884c <__retarget_lock_release_recursive>:
 800884c:	4770      	bx	lr

0800884e <memcpy>:
 800884e:	440a      	add	r2, r1
 8008850:	4291      	cmp	r1, r2
 8008852:	f100 33ff 	add.w	r3, r0, #4294967295
 8008856:	d100      	bne.n	800885a <memcpy+0xc>
 8008858:	4770      	bx	lr
 800885a:	b510      	push	{r4, lr}
 800885c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008864:	4291      	cmp	r1, r2
 8008866:	d1f9      	bne.n	800885c <memcpy+0xe>
 8008868:	bd10      	pop	{r4, pc}

0800886a <quorem>:
 800886a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886e:	6903      	ldr	r3, [r0, #16]
 8008870:	690c      	ldr	r4, [r1, #16]
 8008872:	42a3      	cmp	r3, r4
 8008874:	4607      	mov	r7, r0
 8008876:	db7e      	blt.n	8008976 <quorem+0x10c>
 8008878:	3c01      	subs	r4, #1
 800887a:	f101 0814 	add.w	r8, r1, #20
 800887e:	f100 0514 	add.w	r5, r0, #20
 8008882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008886:	9301      	str	r3, [sp, #4]
 8008888:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800888c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008890:	3301      	adds	r3, #1
 8008892:	429a      	cmp	r2, r3
 8008894:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008898:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800889c:	fbb2 f6f3 	udiv	r6, r2, r3
 80088a0:	d331      	bcc.n	8008906 <quorem+0x9c>
 80088a2:	f04f 0e00 	mov.w	lr, #0
 80088a6:	4640      	mov	r0, r8
 80088a8:	46ac      	mov	ip, r5
 80088aa:	46f2      	mov	sl, lr
 80088ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80088b0:	b293      	uxth	r3, r2
 80088b2:	fb06 e303 	mla	r3, r6, r3, lr
 80088b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088ba:	0c1a      	lsrs	r2, r3, #16
 80088bc:	b29b      	uxth	r3, r3
 80088be:	ebaa 0303 	sub.w	r3, sl, r3
 80088c2:	f8dc a000 	ldr.w	sl, [ip]
 80088c6:	fa13 f38a 	uxtah	r3, r3, sl
 80088ca:	fb06 220e 	mla	r2, r6, lr, r2
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	9b00      	ldr	r3, [sp, #0]
 80088d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088d6:	b292      	uxth	r2, r2
 80088d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80088dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80088e4:	4581      	cmp	r9, r0
 80088e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088ea:	f84c 3b04 	str.w	r3, [ip], #4
 80088ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088f2:	d2db      	bcs.n	80088ac <quorem+0x42>
 80088f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80088f8:	b92b      	cbnz	r3, 8008906 <quorem+0x9c>
 80088fa:	9b01      	ldr	r3, [sp, #4]
 80088fc:	3b04      	subs	r3, #4
 80088fe:	429d      	cmp	r5, r3
 8008900:	461a      	mov	r2, r3
 8008902:	d32c      	bcc.n	800895e <quorem+0xf4>
 8008904:	613c      	str	r4, [r7, #16]
 8008906:	4638      	mov	r0, r7
 8008908:	f001 f9a8 	bl	8009c5c <__mcmp>
 800890c:	2800      	cmp	r0, #0
 800890e:	db22      	blt.n	8008956 <quorem+0xec>
 8008910:	3601      	adds	r6, #1
 8008912:	4629      	mov	r1, r5
 8008914:	2000      	movs	r0, #0
 8008916:	f858 2b04 	ldr.w	r2, [r8], #4
 800891a:	f8d1 c000 	ldr.w	ip, [r1]
 800891e:	b293      	uxth	r3, r2
 8008920:	1ac3      	subs	r3, r0, r3
 8008922:	0c12      	lsrs	r2, r2, #16
 8008924:	fa13 f38c 	uxtah	r3, r3, ip
 8008928:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800892c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008930:	b29b      	uxth	r3, r3
 8008932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008936:	45c1      	cmp	r9, r8
 8008938:	f841 3b04 	str.w	r3, [r1], #4
 800893c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008940:	d2e9      	bcs.n	8008916 <quorem+0xac>
 8008942:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008946:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800894a:	b922      	cbnz	r2, 8008956 <quorem+0xec>
 800894c:	3b04      	subs	r3, #4
 800894e:	429d      	cmp	r5, r3
 8008950:	461a      	mov	r2, r3
 8008952:	d30a      	bcc.n	800896a <quorem+0x100>
 8008954:	613c      	str	r4, [r7, #16]
 8008956:	4630      	mov	r0, r6
 8008958:	b003      	add	sp, #12
 800895a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895e:	6812      	ldr	r2, [r2, #0]
 8008960:	3b04      	subs	r3, #4
 8008962:	2a00      	cmp	r2, #0
 8008964:	d1ce      	bne.n	8008904 <quorem+0x9a>
 8008966:	3c01      	subs	r4, #1
 8008968:	e7c9      	b.n	80088fe <quorem+0x94>
 800896a:	6812      	ldr	r2, [r2, #0]
 800896c:	3b04      	subs	r3, #4
 800896e:	2a00      	cmp	r2, #0
 8008970:	d1f0      	bne.n	8008954 <quorem+0xea>
 8008972:	3c01      	subs	r4, #1
 8008974:	e7eb      	b.n	800894e <quorem+0xe4>
 8008976:	2000      	movs	r0, #0
 8008978:	e7ee      	b.n	8008958 <quorem+0xee>
 800897a:	0000      	movs	r0, r0
 800897c:	0000      	movs	r0, r0
	...

08008980 <_dtoa_r>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	ed2d 8b04 	vpush	{d8-d9}
 8008988:	69c5      	ldr	r5, [r0, #28]
 800898a:	b093      	sub	sp, #76	; 0x4c
 800898c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008990:	ec57 6b10 	vmov	r6, r7, d0
 8008994:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008998:	9107      	str	r1, [sp, #28]
 800899a:	4604      	mov	r4, r0
 800899c:	920a      	str	r2, [sp, #40]	; 0x28
 800899e:	930d      	str	r3, [sp, #52]	; 0x34
 80089a0:	b975      	cbnz	r5, 80089c0 <_dtoa_r+0x40>
 80089a2:	2010      	movs	r0, #16
 80089a4:	f000 fe2a 	bl	80095fc <malloc>
 80089a8:	4602      	mov	r2, r0
 80089aa:	61e0      	str	r0, [r4, #28]
 80089ac:	b920      	cbnz	r0, 80089b8 <_dtoa_r+0x38>
 80089ae:	4bae      	ldr	r3, [pc, #696]	; (8008c68 <_dtoa_r+0x2e8>)
 80089b0:	21ef      	movs	r1, #239	; 0xef
 80089b2:	48ae      	ldr	r0, [pc, #696]	; (8008c6c <_dtoa_r+0x2ec>)
 80089b4:	f002 f8e4 	bl	800ab80 <__assert_func>
 80089b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089bc:	6005      	str	r5, [r0, #0]
 80089be:	60c5      	str	r5, [r0, #12]
 80089c0:	69e3      	ldr	r3, [r4, #28]
 80089c2:	6819      	ldr	r1, [r3, #0]
 80089c4:	b151      	cbz	r1, 80089dc <_dtoa_r+0x5c>
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	604a      	str	r2, [r1, #4]
 80089ca:	2301      	movs	r3, #1
 80089cc:	4093      	lsls	r3, r2
 80089ce:	608b      	str	r3, [r1, #8]
 80089d0:	4620      	mov	r0, r4
 80089d2:	f000 ff07 	bl	80097e4 <_Bfree>
 80089d6:	69e3      	ldr	r3, [r4, #28]
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]
 80089dc:	1e3b      	subs	r3, r7, #0
 80089de:	bfbb      	ittet	lt
 80089e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089e4:	9303      	strlt	r3, [sp, #12]
 80089e6:	2300      	movge	r3, #0
 80089e8:	2201      	movlt	r2, #1
 80089ea:	bfac      	ite	ge
 80089ec:	f8c8 3000 	strge.w	r3, [r8]
 80089f0:	f8c8 2000 	strlt.w	r2, [r8]
 80089f4:	4b9e      	ldr	r3, [pc, #632]	; (8008c70 <_dtoa_r+0x2f0>)
 80089f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80089fa:	ea33 0308 	bics.w	r3, r3, r8
 80089fe:	d11b      	bne.n	8008a38 <_dtoa_r+0xb8>
 8008a00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a02:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008a0c:	4333      	orrs	r3, r6
 8008a0e:	f000 8593 	beq.w	8009538 <_dtoa_r+0xbb8>
 8008a12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a14:	b963      	cbnz	r3, 8008a30 <_dtoa_r+0xb0>
 8008a16:	4b97      	ldr	r3, [pc, #604]	; (8008c74 <_dtoa_r+0x2f4>)
 8008a18:	e027      	b.n	8008a6a <_dtoa_r+0xea>
 8008a1a:	4b97      	ldr	r3, [pc, #604]	; (8008c78 <_dtoa_r+0x2f8>)
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	3308      	adds	r3, #8
 8008a20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	9800      	ldr	r0, [sp, #0]
 8008a26:	b013      	add	sp, #76	; 0x4c
 8008a28:	ecbd 8b04 	vpop	{d8-d9}
 8008a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a30:	4b90      	ldr	r3, [pc, #576]	; (8008c74 <_dtoa_r+0x2f4>)
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	3303      	adds	r3, #3
 8008a36:	e7f3      	b.n	8008a20 <_dtoa_r+0xa0>
 8008a38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	ec51 0b17 	vmov	r0, r1, d7
 8008a42:	eeb0 8a47 	vmov.f32	s16, s14
 8008a46:	eef0 8a67 	vmov.f32	s17, s15
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f7f8 f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a50:	4681      	mov	r9, r0
 8008a52:	b160      	cbz	r0, 8008a6e <_dtoa_r+0xee>
 8008a54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a56:	2301      	movs	r3, #1
 8008a58:	6013      	str	r3, [r2, #0]
 8008a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 8568 	beq.w	8009532 <_dtoa_r+0xbb2>
 8008a62:	4b86      	ldr	r3, [pc, #536]	; (8008c7c <_dtoa_r+0x2fc>)
 8008a64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	e7da      	b.n	8008a24 <_dtoa_r+0xa4>
 8008a6e:	aa10      	add	r2, sp, #64	; 0x40
 8008a70:	a911      	add	r1, sp, #68	; 0x44
 8008a72:	4620      	mov	r0, r4
 8008a74:	eeb0 0a48 	vmov.f32	s0, s16
 8008a78:	eef0 0a68 	vmov.f32	s1, s17
 8008a7c:	f001 f994 	bl	8009da8 <__d2b>
 8008a80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008a84:	4682      	mov	sl, r0
 8008a86:	2d00      	cmp	r5, #0
 8008a88:	d07f      	beq.n	8008b8a <_dtoa_r+0x20a>
 8008a8a:	ee18 3a90 	vmov	r3, s17
 8008a8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008a96:	ec51 0b18 	vmov	r0, r1, d8
 8008a9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008aa2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	4b75      	ldr	r3, [pc, #468]	; (8008c80 <_dtoa_r+0x300>)
 8008aac:	f7f7 fbec 	bl	8000288 <__aeabi_dsub>
 8008ab0:	a367      	add	r3, pc, #412	; (adr r3, 8008c50 <_dtoa_r+0x2d0>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	f7f7 fd9f 	bl	80005f8 <__aeabi_dmul>
 8008aba:	a367      	add	r3, pc, #412	; (adr r3, 8008c58 <_dtoa_r+0x2d8>)
 8008abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac0:	f7f7 fbe4 	bl	800028c <__adddf3>
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	460f      	mov	r7, r1
 8008aca:	f7f7 fd2b 	bl	8000524 <__aeabi_i2d>
 8008ace:	a364      	add	r3, pc, #400	; (adr r3, 8008c60 <_dtoa_r+0x2e0>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	f7f7 fd90 	bl	80005f8 <__aeabi_dmul>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	4630      	mov	r0, r6
 8008ade:	4639      	mov	r1, r7
 8008ae0:	f7f7 fbd4 	bl	800028c <__adddf3>
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	460f      	mov	r7, r1
 8008ae8:	f7f8 f836 	bl	8000b58 <__aeabi_d2iz>
 8008aec:	2200      	movs	r2, #0
 8008aee:	4683      	mov	fp, r0
 8008af0:	2300      	movs	r3, #0
 8008af2:	4630      	mov	r0, r6
 8008af4:	4639      	mov	r1, r7
 8008af6:	f7f7 fff1 	bl	8000adc <__aeabi_dcmplt>
 8008afa:	b148      	cbz	r0, 8008b10 <_dtoa_r+0x190>
 8008afc:	4658      	mov	r0, fp
 8008afe:	f7f7 fd11 	bl	8000524 <__aeabi_i2d>
 8008b02:	4632      	mov	r2, r6
 8008b04:	463b      	mov	r3, r7
 8008b06:	f7f7 ffdf 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b0a:	b908      	cbnz	r0, 8008b10 <_dtoa_r+0x190>
 8008b0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b10:	f1bb 0f16 	cmp.w	fp, #22
 8008b14:	d857      	bhi.n	8008bc6 <_dtoa_r+0x246>
 8008b16:	4b5b      	ldr	r3, [pc, #364]	; (8008c84 <_dtoa_r+0x304>)
 8008b18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b20:	ec51 0b18 	vmov	r0, r1, d8
 8008b24:	f7f7 ffda 	bl	8000adc <__aeabi_dcmplt>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d04e      	beq.n	8008bca <_dtoa_r+0x24a>
 8008b2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b30:	2300      	movs	r3, #0
 8008b32:	930c      	str	r3, [sp, #48]	; 0x30
 8008b34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b36:	1b5b      	subs	r3, r3, r5
 8008b38:	1e5a      	subs	r2, r3, #1
 8008b3a:	bf45      	ittet	mi
 8008b3c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008b40:	9305      	strmi	r3, [sp, #20]
 8008b42:	2300      	movpl	r3, #0
 8008b44:	2300      	movmi	r3, #0
 8008b46:	9206      	str	r2, [sp, #24]
 8008b48:	bf54      	ite	pl
 8008b4a:	9305      	strpl	r3, [sp, #20]
 8008b4c:	9306      	strmi	r3, [sp, #24]
 8008b4e:	f1bb 0f00 	cmp.w	fp, #0
 8008b52:	db3c      	blt.n	8008bce <_dtoa_r+0x24e>
 8008b54:	9b06      	ldr	r3, [sp, #24]
 8008b56:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008b5a:	445b      	add	r3, fp
 8008b5c:	9306      	str	r3, [sp, #24]
 8008b5e:	2300      	movs	r3, #0
 8008b60:	9308      	str	r3, [sp, #32]
 8008b62:	9b07      	ldr	r3, [sp, #28]
 8008b64:	2b09      	cmp	r3, #9
 8008b66:	d868      	bhi.n	8008c3a <_dtoa_r+0x2ba>
 8008b68:	2b05      	cmp	r3, #5
 8008b6a:	bfc4      	itt	gt
 8008b6c:	3b04      	subgt	r3, #4
 8008b6e:	9307      	strgt	r3, [sp, #28]
 8008b70:	9b07      	ldr	r3, [sp, #28]
 8008b72:	f1a3 0302 	sub.w	r3, r3, #2
 8008b76:	bfcc      	ite	gt
 8008b78:	2500      	movgt	r5, #0
 8008b7a:	2501      	movle	r5, #1
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	f200 8085 	bhi.w	8008c8c <_dtoa_r+0x30c>
 8008b82:	e8df f003 	tbb	[pc, r3]
 8008b86:	3b2e      	.short	0x3b2e
 8008b88:	5839      	.short	0x5839
 8008b8a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008b8e:	441d      	add	r5, r3
 8008b90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b94:	2b20      	cmp	r3, #32
 8008b96:	bfc1      	itttt	gt
 8008b98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b9c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008ba0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008ba4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008ba8:	bfd6      	itet	le
 8008baa:	f1c3 0320 	rsble	r3, r3, #32
 8008bae:	ea48 0003 	orrgt.w	r0, r8, r3
 8008bb2:	fa06 f003 	lslle.w	r0, r6, r3
 8008bb6:	f7f7 fca5 	bl	8000504 <__aeabi_ui2d>
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008bc0:	3d01      	subs	r5, #1
 8008bc2:	920e      	str	r2, [sp, #56]	; 0x38
 8008bc4:	e76f      	b.n	8008aa6 <_dtoa_r+0x126>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e7b3      	b.n	8008b32 <_dtoa_r+0x1b2>
 8008bca:	900c      	str	r0, [sp, #48]	; 0x30
 8008bcc:	e7b2      	b.n	8008b34 <_dtoa_r+0x1b4>
 8008bce:	9b05      	ldr	r3, [sp, #20]
 8008bd0:	eba3 030b 	sub.w	r3, r3, fp
 8008bd4:	9305      	str	r3, [sp, #20]
 8008bd6:	f1cb 0300 	rsb	r3, fp, #0
 8008bda:	9308      	str	r3, [sp, #32]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	930b      	str	r3, [sp, #44]	; 0x2c
 8008be0:	e7bf      	b.n	8008b62 <_dtoa_r+0x1e2>
 8008be2:	2300      	movs	r3, #0
 8008be4:	9309      	str	r3, [sp, #36]	; 0x24
 8008be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dc52      	bgt.n	8008c92 <_dtoa_r+0x312>
 8008bec:	2301      	movs	r3, #1
 8008bee:	9301      	str	r3, [sp, #4]
 8008bf0:	9304      	str	r3, [sp, #16]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	920a      	str	r2, [sp, #40]	; 0x28
 8008bf6:	e00b      	b.n	8008c10 <_dtoa_r+0x290>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e7f3      	b.n	8008be4 <_dtoa_r+0x264>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8008c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c02:	445b      	add	r3, fp
 8008c04:	9301      	str	r3, [sp, #4]
 8008c06:	3301      	adds	r3, #1
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	9304      	str	r3, [sp, #16]
 8008c0c:	bfb8      	it	lt
 8008c0e:	2301      	movlt	r3, #1
 8008c10:	69e0      	ldr	r0, [r4, #28]
 8008c12:	2100      	movs	r1, #0
 8008c14:	2204      	movs	r2, #4
 8008c16:	f102 0614 	add.w	r6, r2, #20
 8008c1a:	429e      	cmp	r6, r3
 8008c1c:	d93d      	bls.n	8008c9a <_dtoa_r+0x31a>
 8008c1e:	6041      	str	r1, [r0, #4]
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 fd9f 	bl	8009764 <_Balloc>
 8008c26:	9000      	str	r0, [sp, #0]
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d139      	bne.n	8008ca0 <_dtoa_r+0x320>
 8008c2c:	4b16      	ldr	r3, [pc, #88]	; (8008c88 <_dtoa_r+0x308>)
 8008c2e:	4602      	mov	r2, r0
 8008c30:	f240 11af 	movw	r1, #431	; 0x1af
 8008c34:	e6bd      	b.n	80089b2 <_dtoa_r+0x32>
 8008c36:	2301      	movs	r3, #1
 8008c38:	e7e1      	b.n	8008bfe <_dtoa_r+0x27e>
 8008c3a:	2501      	movs	r5, #1
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	9307      	str	r3, [sp, #28]
 8008c40:	9509      	str	r5, [sp, #36]	; 0x24
 8008c42:	f04f 33ff 	mov.w	r3, #4294967295
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	9304      	str	r3, [sp, #16]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2312      	movs	r3, #18
 8008c4e:	e7d1      	b.n	8008bf4 <_dtoa_r+0x274>
 8008c50:	636f4361 	.word	0x636f4361
 8008c54:	3fd287a7 	.word	0x3fd287a7
 8008c58:	8b60c8b3 	.word	0x8b60c8b3
 8008c5c:	3fc68a28 	.word	0x3fc68a28
 8008c60:	509f79fb 	.word	0x509f79fb
 8008c64:	3fd34413 	.word	0x3fd34413
 8008c68:	0800df0d 	.word	0x0800df0d
 8008c6c:	0800df24 	.word	0x0800df24
 8008c70:	7ff00000 	.word	0x7ff00000
 8008c74:	0800df09 	.word	0x0800df09
 8008c78:	0800df00 	.word	0x0800df00
 8008c7c:	0800dedd 	.word	0x0800dedd
 8008c80:	3ff80000 	.word	0x3ff80000
 8008c84:	0800e010 	.word	0x0800e010
 8008c88:	0800df7c 	.word	0x0800df7c
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c90:	e7d7      	b.n	8008c42 <_dtoa_r+0x2c2>
 8008c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c94:	9301      	str	r3, [sp, #4]
 8008c96:	9304      	str	r3, [sp, #16]
 8008c98:	e7ba      	b.n	8008c10 <_dtoa_r+0x290>
 8008c9a:	3101      	adds	r1, #1
 8008c9c:	0052      	lsls	r2, r2, #1
 8008c9e:	e7ba      	b.n	8008c16 <_dtoa_r+0x296>
 8008ca0:	69e3      	ldr	r3, [r4, #28]
 8008ca2:	9a00      	ldr	r2, [sp, #0]
 8008ca4:	601a      	str	r2, [r3, #0]
 8008ca6:	9b04      	ldr	r3, [sp, #16]
 8008ca8:	2b0e      	cmp	r3, #14
 8008caa:	f200 80a8 	bhi.w	8008dfe <_dtoa_r+0x47e>
 8008cae:	2d00      	cmp	r5, #0
 8008cb0:	f000 80a5 	beq.w	8008dfe <_dtoa_r+0x47e>
 8008cb4:	f1bb 0f00 	cmp.w	fp, #0
 8008cb8:	dd38      	ble.n	8008d2c <_dtoa_r+0x3ac>
 8008cba:	4bc0      	ldr	r3, [pc, #768]	; (8008fbc <_dtoa_r+0x63c>)
 8008cbc:	f00b 020f 	and.w	r2, fp, #15
 8008cc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cc4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008cc8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008ccc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008cd0:	d019      	beq.n	8008d06 <_dtoa_r+0x386>
 8008cd2:	4bbb      	ldr	r3, [pc, #748]	; (8008fc0 <_dtoa_r+0x640>)
 8008cd4:	ec51 0b18 	vmov	r0, r1, d8
 8008cd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cdc:	f7f7 fdb6 	bl	800084c <__aeabi_ddiv>
 8008ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ce4:	f008 080f 	and.w	r8, r8, #15
 8008ce8:	2503      	movs	r5, #3
 8008cea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008fc0 <_dtoa_r+0x640>
 8008cee:	f1b8 0f00 	cmp.w	r8, #0
 8008cf2:	d10a      	bne.n	8008d0a <_dtoa_r+0x38a>
 8008cf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cf8:	4632      	mov	r2, r6
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	f7f7 fda6 	bl	800084c <__aeabi_ddiv>
 8008d00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d04:	e02b      	b.n	8008d5e <_dtoa_r+0x3de>
 8008d06:	2502      	movs	r5, #2
 8008d08:	e7ef      	b.n	8008cea <_dtoa_r+0x36a>
 8008d0a:	f018 0f01 	tst.w	r8, #1
 8008d0e:	d008      	beq.n	8008d22 <_dtoa_r+0x3a2>
 8008d10:	4630      	mov	r0, r6
 8008d12:	4639      	mov	r1, r7
 8008d14:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008d18:	f7f7 fc6e 	bl	80005f8 <__aeabi_dmul>
 8008d1c:	3501      	adds	r5, #1
 8008d1e:	4606      	mov	r6, r0
 8008d20:	460f      	mov	r7, r1
 8008d22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008d26:	f109 0908 	add.w	r9, r9, #8
 8008d2a:	e7e0      	b.n	8008cee <_dtoa_r+0x36e>
 8008d2c:	f000 809f 	beq.w	8008e6e <_dtoa_r+0x4ee>
 8008d30:	f1cb 0600 	rsb	r6, fp, #0
 8008d34:	4ba1      	ldr	r3, [pc, #644]	; (8008fbc <_dtoa_r+0x63c>)
 8008d36:	4fa2      	ldr	r7, [pc, #648]	; (8008fc0 <_dtoa_r+0x640>)
 8008d38:	f006 020f 	and.w	r2, r6, #15
 8008d3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	ec51 0b18 	vmov	r0, r1, d8
 8008d48:	f7f7 fc56 	bl	80005f8 <__aeabi_dmul>
 8008d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d50:	1136      	asrs	r6, r6, #4
 8008d52:	2300      	movs	r3, #0
 8008d54:	2502      	movs	r5, #2
 8008d56:	2e00      	cmp	r6, #0
 8008d58:	d17e      	bne.n	8008e58 <_dtoa_r+0x4d8>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1d0      	bne.n	8008d00 <_dtoa_r+0x380>
 8008d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 8084 	beq.w	8008e72 <_dtoa_r+0x4f2>
 8008d6a:	4b96      	ldr	r3, [pc, #600]	; (8008fc4 <_dtoa_r+0x644>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	4640      	mov	r0, r8
 8008d70:	4649      	mov	r1, r9
 8008d72:	f7f7 feb3 	bl	8000adc <__aeabi_dcmplt>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d07b      	beq.n	8008e72 <_dtoa_r+0x4f2>
 8008d7a:	9b04      	ldr	r3, [sp, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d078      	beq.n	8008e72 <_dtoa_r+0x4f2>
 8008d80:	9b01      	ldr	r3, [sp, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	dd39      	ble.n	8008dfa <_dtoa_r+0x47a>
 8008d86:	4b90      	ldr	r3, [pc, #576]	; (8008fc8 <_dtoa_r+0x648>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	f7f7 fc33 	bl	80005f8 <__aeabi_dmul>
 8008d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d96:	9e01      	ldr	r6, [sp, #4]
 8008d98:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008da2:	4628      	mov	r0, r5
 8008da4:	f7f7 fbbe 	bl	8000524 <__aeabi_i2d>
 8008da8:	4642      	mov	r2, r8
 8008daa:	464b      	mov	r3, r9
 8008dac:	f7f7 fc24 	bl	80005f8 <__aeabi_dmul>
 8008db0:	4b86      	ldr	r3, [pc, #536]	; (8008fcc <_dtoa_r+0x64c>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	f7f7 fa6a 	bl	800028c <__adddf3>
 8008db8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dc0:	9303      	str	r3, [sp, #12]
 8008dc2:	2e00      	cmp	r6, #0
 8008dc4:	d158      	bne.n	8008e78 <_dtoa_r+0x4f8>
 8008dc6:	4b82      	ldr	r3, [pc, #520]	; (8008fd0 <_dtoa_r+0x650>)
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4640      	mov	r0, r8
 8008dcc:	4649      	mov	r1, r9
 8008dce:	f7f7 fa5b 	bl	8000288 <__aeabi_dsub>
 8008dd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dd6:	4680      	mov	r8, r0
 8008dd8:	4689      	mov	r9, r1
 8008dda:	f7f7 fe9d 	bl	8000b18 <__aeabi_dcmpgt>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	f040 8296 	bne.w	8009310 <_dtoa_r+0x990>
 8008de4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008de8:	4640      	mov	r0, r8
 8008dea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dee:	4649      	mov	r1, r9
 8008df0:	f7f7 fe74 	bl	8000adc <__aeabi_dcmplt>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	f040 8289 	bne.w	800930c <_dtoa_r+0x98c>
 8008dfa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008dfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f2c0 814e 	blt.w	80090a2 <_dtoa_r+0x722>
 8008e06:	f1bb 0f0e 	cmp.w	fp, #14
 8008e0a:	f300 814a 	bgt.w	80090a2 <_dtoa_r+0x722>
 8008e0e:	4b6b      	ldr	r3, [pc, #428]	; (8008fbc <_dtoa_r+0x63c>)
 8008e10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f280 80dc 	bge.w	8008fd8 <_dtoa_r+0x658>
 8008e20:	9b04      	ldr	r3, [sp, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f300 80d8 	bgt.w	8008fd8 <_dtoa_r+0x658>
 8008e28:	f040 826f 	bne.w	800930a <_dtoa_r+0x98a>
 8008e2c:	4b68      	ldr	r3, [pc, #416]	; (8008fd0 <_dtoa_r+0x650>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	4640      	mov	r0, r8
 8008e32:	4649      	mov	r1, r9
 8008e34:	f7f7 fbe0 	bl	80005f8 <__aeabi_dmul>
 8008e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e3c:	f7f7 fe62 	bl	8000b04 <__aeabi_dcmpge>
 8008e40:	9e04      	ldr	r6, [sp, #16]
 8008e42:	4637      	mov	r7, r6
 8008e44:	2800      	cmp	r0, #0
 8008e46:	f040 8245 	bne.w	80092d4 <_dtoa_r+0x954>
 8008e4a:	9d00      	ldr	r5, [sp, #0]
 8008e4c:	2331      	movs	r3, #49	; 0x31
 8008e4e:	f805 3b01 	strb.w	r3, [r5], #1
 8008e52:	f10b 0b01 	add.w	fp, fp, #1
 8008e56:	e241      	b.n	80092dc <_dtoa_r+0x95c>
 8008e58:	07f2      	lsls	r2, r6, #31
 8008e5a:	d505      	bpl.n	8008e68 <_dtoa_r+0x4e8>
 8008e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e60:	f7f7 fbca 	bl	80005f8 <__aeabi_dmul>
 8008e64:	3501      	adds	r5, #1
 8008e66:	2301      	movs	r3, #1
 8008e68:	1076      	asrs	r6, r6, #1
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	e773      	b.n	8008d56 <_dtoa_r+0x3d6>
 8008e6e:	2502      	movs	r5, #2
 8008e70:	e775      	b.n	8008d5e <_dtoa_r+0x3de>
 8008e72:	9e04      	ldr	r6, [sp, #16]
 8008e74:	465f      	mov	r7, fp
 8008e76:	e792      	b.n	8008d9e <_dtoa_r+0x41e>
 8008e78:	9900      	ldr	r1, [sp, #0]
 8008e7a:	4b50      	ldr	r3, [pc, #320]	; (8008fbc <_dtoa_r+0x63c>)
 8008e7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e80:	4431      	add	r1, r6
 8008e82:	9102      	str	r1, [sp, #8]
 8008e84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e86:	eeb0 9a47 	vmov.f32	s18, s14
 8008e8a:	eef0 9a67 	vmov.f32	s19, s15
 8008e8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e96:	2900      	cmp	r1, #0
 8008e98:	d044      	beq.n	8008f24 <_dtoa_r+0x5a4>
 8008e9a:	494e      	ldr	r1, [pc, #312]	; (8008fd4 <_dtoa_r+0x654>)
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	f7f7 fcd5 	bl	800084c <__aeabi_ddiv>
 8008ea2:	ec53 2b19 	vmov	r2, r3, d9
 8008ea6:	f7f7 f9ef 	bl	8000288 <__aeabi_dsub>
 8008eaa:	9d00      	ldr	r5, [sp, #0]
 8008eac:	ec41 0b19 	vmov	d9, r0, r1
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	4640      	mov	r0, r8
 8008eb4:	f7f7 fe50 	bl	8000b58 <__aeabi_d2iz>
 8008eb8:	4606      	mov	r6, r0
 8008eba:	f7f7 fb33 	bl	8000524 <__aeabi_i2d>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	4649      	mov	r1, r9
 8008ec6:	f7f7 f9df 	bl	8000288 <__aeabi_dsub>
 8008eca:	3630      	adds	r6, #48	; 0x30
 8008ecc:	f805 6b01 	strb.w	r6, [r5], #1
 8008ed0:	ec53 2b19 	vmov	r2, r3, d9
 8008ed4:	4680      	mov	r8, r0
 8008ed6:	4689      	mov	r9, r1
 8008ed8:	f7f7 fe00 	bl	8000adc <__aeabi_dcmplt>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d164      	bne.n	8008faa <_dtoa_r+0x62a>
 8008ee0:	4642      	mov	r2, r8
 8008ee2:	464b      	mov	r3, r9
 8008ee4:	4937      	ldr	r1, [pc, #220]	; (8008fc4 <_dtoa_r+0x644>)
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	f7f7 f9ce 	bl	8000288 <__aeabi_dsub>
 8008eec:	ec53 2b19 	vmov	r2, r3, d9
 8008ef0:	f7f7 fdf4 	bl	8000adc <__aeabi_dcmplt>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	f040 80b6 	bne.w	8009066 <_dtoa_r+0x6e6>
 8008efa:	9b02      	ldr	r3, [sp, #8]
 8008efc:	429d      	cmp	r5, r3
 8008efe:	f43f af7c 	beq.w	8008dfa <_dtoa_r+0x47a>
 8008f02:	4b31      	ldr	r3, [pc, #196]	; (8008fc8 <_dtoa_r+0x648>)
 8008f04:	ec51 0b19 	vmov	r0, r1, d9
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f7f7 fb75 	bl	80005f8 <__aeabi_dmul>
 8008f0e:	4b2e      	ldr	r3, [pc, #184]	; (8008fc8 <_dtoa_r+0x648>)
 8008f10:	ec41 0b19 	vmov	d9, r0, r1
 8008f14:	2200      	movs	r2, #0
 8008f16:	4640      	mov	r0, r8
 8008f18:	4649      	mov	r1, r9
 8008f1a:	f7f7 fb6d 	bl	80005f8 <__aeabi_dmul>
 8008f1e:	4680      	mov	r8, r0
 8008f20:	4689      	mov	r9, r1
 8008f22:	e7c5      	b.n	8008eb0 <_dtoa_r+0x530>
 8008f24:	ec51 0b17 	vmov	r0, r1, d7
 8008f28:	f7f7 fb66 	bl	80005f8 <__aeabi_dmul>
 8008f2c:	9b02      	ldr	r3, [sp, #8]
 8008f2e:	9d00      	ldr	r5, [sp, #0]
 8008f30:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f32:	ec41 0b19 	vmov	d9, r0, r1
 8008f36:	4649      	mov	r1, r9
 8008f38:	4640      	mov	r0, r8
 8008f3a:	f7f7 fe0d 	bl	8000b58 <__aeabi_d2iz>
 8008f3e:	4606      	mov	r6, r0
 8008f40:	f7f7 faf0 	bl	8000524 <__aeabi_i2d>
 8008f44:	3630      	adds	r6, #48	; 0x30
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	4649      	mov	r1, r9
 8008f4e:	f7f7 f99b 	bl	8000288 <__aeabi_dsub>
 8008f52:	f805 6b01 	strb.w	r6, [r5], #1
 8008f56:	9b02      	ldr	r3, [sp, #8]
 8008f58:	429d      	cmp	r5, r3
 8008f5a:	4680      	mov	r8, r0
 8008f5c:	4689      	mov	r9, r1
 8008f5e:	f04f 0200 	mov.w	r2, #0
 8008f62:	d124      	bne.n	8008fae <_dtoa_r+0x62e>
 8008f64:	4b1b      	ldr	r3, [pc, #108]	; (8008fd4 <_dtoa_r+0x654>)
 8008f66:	ec51 0b19 	vmov	r0, r1, d9
 8008f6a:	f7f7 f98f 	bl	800028c <__adddf3>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	4640      	mov	r0, r8
 8008f74:	4649      	mov	r1, r9
 8008f76:	f7f7 fdcf 	bl	8000b18 <__aeabi_dcmpgt>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d173      	bne.n	8009066 <_dtoa_r+0x6e6>
 8008f7e:	ec53 2b19 	vmov	r2, r3, d9
 8008f82:	4914      	ldr	r1, [pc, #80]	; (8008fd4 <_dtoa_r+0x654>)
 8008f84:	2000      	movs	r0, #0
 8008f86:	f7f7 f97f 	bl	8000288 <__aeabi_dsub>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4640      	mov	r0, r8
 8008f90:	4649      	mov	r1, r9
 8008f92:	f7f7 fda3 	bl	8000adc <__aeabi_dcmplt>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	f43f af2f 	beq.w	8008dfa <_dtoa_r+0x47a>
 8008f9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f9e:	1e6b      	subs	r3, r5, #1
 8008fa0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fa6:	2b30      	cmp	r3, #48	; 0x30
 8008fa8:	d0f8      	beq.n	8008f9c <_dtoa_r+0x61c>
 8008faa:	46bb      	mov	fp, r7
 8008fac:	e04a      	b.n	8009044 <_dtoa_r+0x6c4>
 8008fae:	4b06      	ldr	r3, [pc, #24]	; (8008fc8 <_dtoa_r+0x648>)
 8008fb0:	f7f7 fb22 	bl	80005f8 <__aeabi_dmul>
 8008fb4:	4680      	mov	r8, r0
 8008fb6:	4689      	mov	r9, r1
 8008fb8:	e7bd      	b.n	8008f36 <_dtoa_r+0x5b6>
 8008fba:	bf00      	nop
 8008fbc:	0800e010 	.word	0x0800e010
 8008fc0:	0800dfe8 	.word	0x0800dfe8
 8008fc4:	3ff00000 	.word	0x3ff00000
 8008fc8:	40240000 	.word	0x40240000
 8008fcc:	401c0000 	.word	0x401c0000
 8008fd0:	40140000 	.word	0x40140000
 8008fd4:	3fe00000 	.word	0x3fe00000
 8008fd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008fdc:	9d00      	ldr	r5, [sp, #0]
 8008fde:	4642      	mov	r2, r8
 8008fe0:	464b      	mov	r3, r9
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	4639      	mov	r1, r7
 8008fe6:	f7f7 fc31 	bl	800084c <__aeabi_ddiv>
 8008fea:	f7f7 fdb5 	bl	8000b58 <__aeabi_d2iz>
 8008fee:	9001      	str	r0, [sp, #4]
 8008ff0:	f7f7 fa98 	bl	8000524 <__aeabi_i2d>
 8008ff4:	4642      	mov	r2, r8
 8008ff6:	464b      	mov	r3, r9
 8008ff8:	f7f7 fafe 	bl	80005f8 <__aeabi_dmul>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	4630      	mov	r0, r6
 8009002:	4639      	mov	r1, r7
 8009004:	f7f7 f940 	bl	8000288 <__aeabi_dsub>
 8009008:	9e01      	ldr	r6, [sp, #4]
 800900a:	9f04      	ldr	r7, [sp, #16]
 800900c:	3630      	adds	r6, #48	; 0x30
 800900e:	f805 6b01 	strb.w	r6, [r5], #1
 8009012:	9e00      	ldr	r6, [sp, #0]
 8009014:	1bae      	subs	r6, r5, r6
 8009016:	42b7      	cmp	r7, r6
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	d134      	bne.n	8009088 <_dtoa_r+0x708>
 800901e:	f7f7 f935 	bl	800028c <__adddf3>
 8009022:	4642      	mov	r2, r8
 8009024:	464b      	mov	r3, r9
 8009026:	4606      	mov	r6, r0
 8009028:	460f      	mov	r7, r1
 800902a:	f7f7 fd75 	bl	8000b18 <__aeabi_dcmpgt>
 800902e:	b9c8      	cbnz	r0, 8009064 <_dtoa_r+0x6e4>
 8009030:	4642      	mov	r2, r8
 8009032:	464b      	mov	r3, r9
 8009034:	4630      	mov	r0, r6
 8009036:	4639      	mov	r1, r7
 8009038:	f7f7 fd46 	bl	8000ac8 <__aeabi_dcmpeq>
 800903c:	b110      	cbz	r0, 8009044 <_dtoa_r+0x6c4>
 800903e:	9b01      	ldr	r3, [sp, #4]
 8009040:	07db      	lsls	r3, r3, #31
 8009042:	d40f      	bmi.n	8009064 <_dtoa_r+0x6e4>
 8009044:	4651      	mov	r1, sl
 8009046:	4620      	mov	r0, r4
 8009048:	f000 fbcc 	bl	80097e4 <_Bfree>
 800904c:	2300      	movs	r3, #0
 800904e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009050:	702b      	strb	r3, [r5, #0]
 8009052:	f10b 0301 	add.w	r3, fp, #1
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800905a:	2b00      	cmp	r3, #0
 800905c:	f43f ace2 	beq.w	8008a24 <_dtoa_r+0xa4>
 8009060:	601d      	str	r5, [r3, #0]
 8009062:	e4df      	b.n	8008a24 <_dtoa_r+0xa4>
 8009064:	465f      	mov	r7, fp
 8009066:	462b      	mov	r3, r5
 8009068:	461d      	mov	r5, r3
 800906a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800906e:	2a39      	cmp	r2, #57	; 0x39
 8009070:	d106      	bne.n	8009080 <_dtoa_r+0x700>
 8009072:	9a00      	ldr	r2, [sp, #0]
 8009074:	429a      	cmp	r2, r3
 8009076:	d1f7      	bne.n	8009068 <_dtoa_r+0x6e8>
 8009078:	9900      	ldr	r1, [sp, #0]
 800907a:	2230      	movs	r2, #48	; 0x30
 800907c:	3701      	adds	r7, #1
 800907e:	700a      	strb	r2, [r1, #0]
 8009080:	781a      	ldrb	r2, [r3, #0]
 8009082:	3201      	adds	r2, #1
 8009084:	701a      	strb	r2, [r3, #0]
 8009086:	e790      	b.n	8008faa <_dtoa_r+0x62a>
 8009088:	4ba3      	ldr	r3, [pc, #652]	; (8009318 <_dtoa_r+0x998>)
 800908a:	2200      	movs	r2, #0
 800908c:	f7f7 fab4 	bl	80005f8 <__aeabi_dmul>
 8009090:	2200      	movs	r2, #0
 8009092:	2300      	movs	r3, #0
 8009094:	4606      	mov	r6, r0
 8009096:	460f      	mov	r7, r1
 8009098:	f7f7 fd16 	bl	8000ac8 <__aeabi_dcmpeq>
 800909c:	2800      	cmp	r0, #0
 800909e:	d09e      	beq.n	8008fde <_dtoa_r+0x65e>
 80090a0:	e7d0      	b.n	8009044 <_dtoa_r+0x6c4>
 80090a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090a4:	2a00      	cmp	r2, #0
 80090a6:	f000 80ca 	beq.w	800923e <_dtoa_r+0x8be>
 80090aa:	9a07      	ldr	r2, [sp, #28]
 80090ac:	2a01      	cmp	r2, #1
 80090ae:	f300 80ad 	bgt.w	800920c <_dtoa_r+0x88c>
 80090b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090b4:	2a00      	cmp	r2, #0
 80090b6:	f000 80a5 	beq.w	8009204 <_dtoa_r+0x884>
 80090ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090be:	9e08      	ldr	r6, [sp, #32]
 80090c0:	9d05      	ldr	r5, [sp, #20]
 80090c2:	9a05      	ldr	r2, [sp, #20]
 80090c4:	441a      	add	r2, r3
 80090c6:	9205      	str	r2, [sp, #20]
 80090c8:	9a06      	ldr	r2, [sp, #24]
 80090ca:	2101      	movs	r1, #1
 80090cc:	441a      	add	r2, r3
 80090ce:	4620      	mov	r0, r4
 80090d0:	9206      	str	r2, [sp, #24]
 80090d2:	f000 fc3d 	bl	8009950 <__i2b>
 80090d6:	4607      	mov	r7, r0
 80090d8:	b165      	cbz	r5, 80090f4 <_dtoa_r+0x774>
 80090da:	9b06      	ldr	r3, [sp, #24]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	dd09      	ble.n	80090f4 <_dtoa_r+0x774>
 80090e0:	42ab      	cmp	r3, r5
 80090e2:	9a05      	ldr	r2, [sp, #20]
 80090e4:	bfa8      	it	ge
 80090e6:	462b      	movge	r3, r5
 80090e8:	1ad2      	subs	r2, r2, r3
 80090ea:	9205      	str	r2, [sp, #20]
 80090ec:	9a06      	ldr	r2, [sp, #24]
 80090ee:	1aed      	subs	r5, r5, r3
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	9306      	str	r3, [sp, #24]
 80090f4:	9b08      	ldr	r3, [sp, #32]
 80090f6:	b1f3      	cbz	r3, 8009136 <_dtoa_r+0x7b6>
 80090f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 80a3 	beq.w	8009246 <_dtoa_r+0x8c6>
 8009100:	2e00      	cmp	r6, #0
 8009102:	dd10      	ble.n	8009126 <_dtoa_r+0x7a6>
 8009104:	4639      	mov	r1, r7
 8009106:	4632      	mov	r2, r6
 8009108:	4620      	mov	r0, r4
 800910a:	f000 fce1 	bl	8009ad0 <__pow5mult>
 800910e:	4652      	mov	r2, sl
 8009110:	4601      	mov	r1, r0
 8009112:	4607      	mov	r7, r0
 8009114:	4620      	mov	r0, r4
 8009116:	f000 fc31 	bl	800997c <__multiply>
 800911a:	4651      	mov	r1, sl
 800911c:	4680      	mov	r8, r0
 800911e:	4620      	mov	r0, r4
 8009120:	f000 fb60 	bl	80097e4 <_Bfree>
 8009124:	46c2      	mov	sl, r8
 8009126:	9b08      	ldr	r3, [sp, #32]
 8009128:	1b9a      	subs	r2, r3, r6
 800912a:	d004      	beq.n	8009136 <_dtoa_r+0x7b6>
 800912c:	4651      	mov	r1, sl
 800912e:	4620      	mov	r0, r4
 8009130:	f000 fcce 	bl	8009ad0 <__pow5mult>
 8009134:	4682      	mov	sl, r0
 8009136:	2101      	movs	r1, #1
 8009138:	4620      	mov	r0, r4
 800913a:	f000 fc09 	bl	8009950 <__i2b>
 800913e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009140:	2b00      	cmp	r3, #0
 8009142:	4606      	mov	r6, r0
 8009144:	f340 8081 	ble.w	800924a <_dtoa_r+0x8ca>
 8009148:	461a      	mov	r2, r3
 800914a:	4601      	mov	r1, r0
 800914c:	4620      	mov	r0, r4
 800914e:	f000 fcbf 	bl	8009ad0 <__pow5mult>
 8009152:	9b07      	ldr	r3, [sp, #28]
 8009154:	2b01      	cmp	r3, #1
 8009156:	4606      	mov	r6, r0
 8009158:	dd7a      	ble.n	8009250 <_dtoa_r+0x8d0>
 800915a:	f04f 0800 	mov.w	r8, #0
 800915e:	6933      	ldr	r3, [r6, #16]
 8009160:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009164:	6918      	ldr	r0, [r3, #16]
 8009166:	f000 fba5 	bl	80098b4 <__hi0bits>
 800916a:	f1c0 0020 	rsb	r0, r0, #32
 800916e:	9b06      	ldr	r3, [sp, #24]
 8009170:	4418      	add	r0, r3
 8009172:	f010 001f 	ands.w	r0, r0, #31
 8009176:	f000 8094 	beq.w	80092a2 <_dtoa_r+0x922>
 800917a:	f1c0 0320 	rsb	r3, r0, #32
 800917e:	2b04      	cmp	r3, #4
 8009180:	f340 8085 	ble.w	800928e <_dtoa_r+0x90e>
 8009184:	9b05      	ldr	r3, [sp, #20]
 8009186:	f1c0 001c 	rsb	r0, r0, #28
 800918a:	4403      	add	r3, r0
 800918c:	9305      	str	r3, [sp, #20]
 800918e:	9b06      	ldr	r3, [sp, #24]
 8009190:	4403      	add	r3, r0
 8009192:	4405      	add	r5, r0
 8009194:	9306      	str	r3, [sp, #24]
 8009196:	9b05      	ldr	r3, [sp, #20]
 8009198:	2b00      	cmp	r3, #0
 800919a:	dd05      	ble.n	80091a8 <_dtoa_r+0x828>
 800919c:	4651      	mov	r1, sl
 800919e:	461a      	mov	r2, r3
 80091a0:	4620      	mov	r0, r4
 80091a2:	f000 fcef 	bl	8009b84 <__lshift>
 80091a6:	4682      	mov	sl, r0
 80091a8:	9b06      	ldr	r3, [sp, #24]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	dd05      	ble.n	80091ba <_dtoa_r+0x83a>
 80091ae:	4631      	mov	r1, r6
 80091b0:	461a      	mov	r2, r3
 80091b2:	4620      	mov	r0, r4
 80091b4:	f000 fce6 	bl	8009b84 <__lshift>
 80091b8:	4606      	mov	r6, r0
 80091ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d072      	beq.n	80092a6 <_dtoa_r+0x926>
 80091c0:	4631      	mov	r1, r6
 80091c2:	4650      	mov	r0, sl
 80091c4:	f000 fd4a 	bl	8009c5c <__mcmp>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	da6c      	bge.n	80092a6 <_dtoa_r+0x926>
 80091cc:	2300      	movs	r3, #0
 80091ce:	4651      	mov	r1, sl
 80091d0:	220a      	movs	r2, #10
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 fb28 	bl	8009828 <__multadd>
 80091d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091de:	4682      	mov	sl, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 81b0 	beq.w	8009546 <_dtoa_r+0xbc6>
 80091e6:	2300      	movs	r3, #0
 80091e8:	4639      	mov	r1, r7
 80091ea:	220a      	movs	r2, #10
 80091ec:	4620      	mov	r0, r4
 80091ee:	f000 fb1b 	bl	8009828 <__multadd>
 80091f2:	9b01      	ldr	r3, [sp, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	4607      	mov	r7, r0
 80091f8:	f300 8096 	bgt.w	8009328 <_dtoa_r+0x9a8>
 80091fc:	9b07      	ldr	r3, [sp, #28]
 80091fe:	2b02      	cmp	r3, #2
 8009200:	dc59      	bgt.n	80092b6 <_dtoa_r+0x936>
 8009202:	e091      	b.n	8009328 <_dtoa_r+0x9a8>
 8009204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009206:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800920a:	e758      	b.n	80090be <_dtoa_r+0x73e>
 800920c:	9b04      	ldr	r3, [sp, #16]
 800920e:	1e5e      	subs	r6, r3, #1
 8009210:	9b08      	ldr	r3, [sp, #32]
 8009212:	42b3      	cmp	r3, r6
 8009214:	bfbf      	itttt	lt
 8009216:	9b08      	ldrlt	r3, [sp, #32]
 8009218:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800921a:	9608      	strlt	r6, [sp, #32]
 800921c:	1af3      	sublt	r3, r6, r3
 800921e:	bfb4      	ite	lt
 8009220:	18d2      	addlt	r2, r2, r3
 8009222:	1b9e      	subge	r6, r3, r6
 8009224:	9b04      	ldr	r3, [sp, #16]
 8009226:	bfbc      	itt	lt
 8009228:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800922a:	2600      	movlt	r6, #0
 800922c:	2b00      	cmp	r3, #0
 800922e:	bfb7      	itett	lt
 8009230:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009234:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009238:	1a9d      	sublt	r5, r3, r2
 800923a:	2300      	movlt	r3, #0
 800923c:	e741      	b.n	80090c2 <_dtoa_r+0x742>
 800923e:	9e08      	ldr	r6, [sp, #32]
 8009240:	9d05      	ldr	r5, [sp, #20]
 8009242:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009244:	e748      	b.n	80090d8 <_dtoa_r+0x758>
 8009246:	9a08      	ldr	r2, [sp, #32]
 8009248:	e770      	b.n	800912c <_dtoa_r+0x7ac>
 800924a:	9b07      	ldr	r3, [sp, #28]
 800924c:	2b01      	cmp	r3, #1
 800924e:	dc19      	bgt.n	8009284 <_dtoa_r+0x904>
 8009250:	9b02      	ldr	r3, [sp, #8]
 8009252:	b9bb      	cbnz	r3, 8009284 <_dtoa_r+0x904>
 8009254:	9b03      	ldr	r3, [sp, #12]
 8009256:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800925a:	b99b      	cbnz	r3, 8009284 <_dtoa_r+0x904>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009262:	0d1b      	lsrs	r3, r3, #20
 8009264:	051b      	lsls	r3, r3, #20
 8009266:	b183      	cbz	r3, 800928a <_dtoa_r+0x90a>
 8009268:	9b05      	ldr	r3, [sp, #20]
 800926a:	3301      	adds	r3, #1
 800926c:	9305      	str	r3, [sp, #20]
 800926e:	9b06      	ldr	r3, [sp, #24]
 8009270:	3301      	adds	r3, #1
 8009272:	9306      	str	r3, [sp, #24]
 8009274:	f04f 0801 	mov.w	r8, #1
 8009278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800927a:	2b00      	cmp	r3, #0
 800927c:	f47f af6f 	bne.w	800915e <_dtoa_r+0x7de>
 8009280:	2001      	movs	r0, #1
 8009282:	e774      	b.n	800916e <_dtoa_r+0x7ee>
 8009284:	f04f 0800 	mov.w	r8, #0
 8009288:	e7f6      	b.n	8009278 <_dtoa_r+0x8f8>
 800928a:	4698      	mov	r8, r3
 800928c:	e7f4      	b.n	8009278 <_dtoa_r+0x8f8>
 800928e:	d082      	beq.n	8009196 <_dtoa_r+0x816>
 8009290:	9a05      	ldr	r2, [sp, #20]
 8009292:	331c      	adds	r3, #28
 8009294:	441a      	add	r2, r3
 8009296:	9205      	str	r2, [sp, #20]
 8009298:	9a06      	ldr	r2, [sp, #24]
 800929a:	441a      	add	r2, r3
 800929c:	441d      	add	r5, r3
 800929e:	9206      	str	r2, [sp, #24]
 80092a0:	e779      	b.n	8009196 <_dtoa_r+0x816>
 80092a2:	4603      	mov	r3, r0
 80092a4:	e7f4      	b.n	8009290 <_dtoa_r+0x910>
 80092a6:	9b04      	ldr	r3, [sp, #16]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	dc37      	bgt.n	800931c <_dtoa_r+0x99c>
 80092ac:	9b07      	ldr	r3, [sp, #28]
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	dd34      	ble.n	800931c <_dtoa_r+0x99c>
 80092b2:	9b04      	ldr	r3, [sp, #16]
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	9b01      	ldr	r3, [sp, #4]
 80092b8:	b963      	cbnz	r3, 80092d4 <_dtoa_r+0x954>
 80092ba:	4631      	mov	r1, r6
 80092bc:	2205      	movs	r2, #5
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 fab2 	bl	8009828 <__multadd>
 80092c4:	4601      	mov	r1, r0
 80092c6:	4606      	mov	r6, r0
 80092c8:	4650      	mov	r0, sl
 80092ca:	f000 fcc7 	bl	8009c5c <__mcmp>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	f73f adbb 	bgt.w	8008e4a <_dtoa_r+0x4ca>
 80092d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092d6:	9d00      	ldr	r5, [sp, #0]
 80092d8:	ea6f 0b03 	mvn.w	fp, r3
 80092dc:	f04f 0800 	mov.w	r8, #0
 80092e0:	4631      	mov	r1, r6
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 fa7e 	bl	80097e4 <_Bfree>
 80092e8:	2f00      	cmp	r7, #0
 80092ea:	f43f aeab 	beq.w	8009044 <_dtoa_r+0x6c4>
 80092ee:	f1b8 0f00 	cmp.w	r8, #0
 80092f2:	d005      	beq.n	8009300 <_dtoa_r+0x980>
 80092f4:	45b8      	cmp	r8, r7
 80092f6:	d003      	beq.n	8009300 <_dtoa_r+0x980>
 80092f8:	4641      	mov	r1, r8
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 fa72 	bl	80097e4 <_Bfree>
 8009300:	4639      	mov	r1, r7
 8009302:	4620      	mov	r0, r4
 8009304:	f000 fa6e 	bl	80097e4 <_Bfree>
 8009308:	e69c      	b.n	8009044 <_dtoa_r+0x6c4>
 800930a:	2600      	movs	r6, #0
 800930c:	4637      	mov	r7, r6
 800930e:	e7e1      	b.n	80092d4 <_dtoa_r+0x954>
 8009310:	46bb      	mov	fp, r7
 8009312:	4637      	mov	r7, r6
 8009314:	e599      	b.n	8008e4a <_dtoa_r+0x4ca>
 8009316:	bf00      	nop
 8009318:	40240000 	.word	0x40240000
 800931c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800931e:	2b00      	cmp	r3, #0
 8009320:	f000 80c8 	beq.w	80094b4 <_dtoa_r+0xb34>
 8009324:	9b04      	ldr	r3, [sp, #16]
 8009326:	9301      	str	r3, [sp, #4]
 8009328:	2d00      	cmp	r5, #0
 800932a:	dd05      	ble.n	8009338 <_dtoa_r+0x9b8>
 800932c:	4639      	mov	r1, r7
 800932e:	462a      	mov	r2, r5
 8009330:	4620      	mov	r0, r4
 8009332:	f000 fc27 	bl	8009b84 <__lshift>
 8009336:	4607      	mov	r7, r0
 8009338:	f1b8 0f00 	cmp.w	r8, #0
 800933c:	d05b      	beq.n	80093f6 <_dtoa_r+0xa76>
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	4620      	mov	r0, r4
 8009342:	f000 fa0f 	bl	8009764 <_Balloc>
 8009346:	4605      	mov	r5, r0
 8009348:	b928      	cbnz	r0, 8009356 <_dtoa_r+0x9d6>
 800934a:	4b83      	ldr	r3, [pc, #524]	; (8009558 <_dtoa_r+0xbd8>)
 800934c:	4602      	mov	r2, r0
 800934e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009352:	f7ff bb2e 	b.w	80089b2 <_dtoa_r+0x32>
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	3202      	adds	r2, #2
 800935a:	0092      	lsls	r2, r2, #2
 800935c:	f107 010c 	add.w	r1, r7, #12
 8009360:	300c      	adds	r0, #12
 8009362:	f7ff fa74 	bl	800884e <memcpy>
 8009366:	2201      	movs	r2, #1
 8009368:	4629      	mov	r1, r5
 800936a:	4620      	mov	r0, r4
 800936c:	f000 fc0a 	bl	8009b84 <__lshift>
 8009370:	9b00      	ldr	r3, [sp, #0]
 8009372:	3301      	adds	r3, #1
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	e9dd 2300 	ldrd	r2, r3, [sp]
 800937a:	4413      	add	r3, r2
 800937c:	9308      	str	r3, [sp, #32]
 800937e:	9b02      	ldr	r3, [sp, #8]
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	46b8      	mov	r8, r7
 8009386:	9306      	str	r3, [sp, #24]
 8009388:	4607      	mov	r7, r0
 800938a:	9b04      	ldr	r3, [sp, #16]
 800938c:	4631      	mov	r1, r6
 800938e:	3b01      	subs	r3, #1
 8009390:	4650      	mov	r0, sl
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	f7ff fa69 	bl	800886a <quorem>
 8009398:	4641      	mov	r1, r8
 800939a:	9002      	str	r0, [sp, #8]
 800939c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80093a0:	4650      	mov	r0, sl
 80093a2:	f000 fc5b 	bl	8009c5c <__mcmp>
 80093a6:	463a      	mov	r2, r7
 80093a8:	9005      	str	r0, [sp, #20]
 80093aa:	4631      	mov	r1, r6
 80093ac:	4620      	mov	r0, r4
 80093ae:	f000 fc71 	bl	8009c94 <__mdiff>
 80093b2:	68c2      	ldr	r2, [r0, #12]
 80093b4:	4605      	mov	r5, r0
 80093b6:	bb02      	cbnz	r2, 80093fa <_dtoa_r+0xa7a>
 80093b8:	4601      	mov	r1, r0
 80093ba:	4650      	mov	r0, sl
 80093bc:	f000 fc4e 	bl	8009c5c <__mcmp>
 80093c0:	4602      	mov	r2, r0
 80093c2:	4629      	mov	r1, r5
 80093c4:	4620      	mov	r0, r4
 80093c6:	9209      	str	r2, [sp, #36]	; 0x24
 80093c8:	f000 fa0c 	bl	80097e4 <_Bfree>
 80093cc:	9b07      	ldr	r3, [sp, #28]
 80093ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093d0:	9d04      	ldr	r5, [sp, #16]
 80093d2:	ea43 0102 	orr.w	r1, r3, r2
 80093d6:	9b06      	ldr	r3, [sp, #24]
 80093d8:	4319      	orrs	r1, r3
 80093da:	d110      	bne.n	80093fe <_dtoa_r+0xa7e>
 80093dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093e0:	d029      	beq.n	8009436 <_dtoa_r+0xab6>
 80093e2:	9b05      	ldr	r3, [sp, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	dd02      	ble.n	80093ee <_dtoa_r+0xa6e>
 80093e8:	9b02      	ldr	r3, [sp, #8]
 80093ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80093ee:	9b01      	ldr	r3, [sp, #4]
 80093f0:	f883 9000 	strb.w	r9, [r3]
 80093f4:	e774      	b.n	80092e0 <_dtoa_r+0x960>
 80093f6:	4638      	mov	r0, r7
 80093f8:	e7ba      	b.n	8009370 <_dtoa_r+0x9f0>
 80093fa:	2201      	movs	r2, #1
 80093fc:	e7e1      	b.n	80093c2 <_dtoa_r+0xa42>
 80093fe:	9b05      	ldr	r3, [sp, #20]
 8009400:	2b00      	cmp	r3, #0
 8009402:	db04      	blt.n	800940e <_dtoa_r+0xa8e>
 8009404:	9907      	ldr	r1, [sp, #28]
 8009406:	430b      	orrs	r3, r1
 8009408:	9906      	ldr	r1, [sp, #24]
 800940a:	430b      	orrs	r3, r1
 800940c:	d120      	bne.n	8009450 <_dtoa_r+0xad0>
 800940e:	2a00      	cmp	r2, #0
 8009410:	dded      	ble.n	80093ee <_dtoa_r+0xa6e>
 8009412:	4651      	mov	r1, sl
 8009414:	2201      	movs	r2, #1
 8009416:	4620      	mov	r0, r4
 8009418:	f000 fbb4 	bl	8009b84 <__lshift>
 800941c:	4631      	mov	r1, r6
 800941e:	4682      	mov	sl, r0
 8009420:	f000 fc1c 	bl	8009c5c <__mcmp>
 8009424:	2800      	cmp	r0, #0
 8009426:	dc03      	bgt.n	8009430 <_dtoa_r+0xab0>
 8009428:	d1e1      	bne.n	80093ee <_dtoa_r+0xa6e>
 800942a:	f019 0f01 	tst.w	r9, #1
 800942e:	d0de      	beq.n	80093ee <_dtoa_r+0xa6e>
 8009430:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009434:	d1d8      	bne.n	80093e8 <_dtoa_r+0xa68>
 8009436:	9a01      	ldr	r2, [sp, #4]
 8009438:	2339      	movs	r3, #57	; 0x39
 800943a:	7013      	strb	r3, [r2, #0]
 800943c:	462b      	mov	r3, r5
 800943e:	461d      	mov	r5, r3
 8009440:	3b01      	subs	r3, #1
 8009442:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009446:	2a39      	cmp	r2, #57	; 0x39
 8009448:	d06c      	beq.n	8009524 <_dtoa_r+0xba4>
 800944a:	3201      	adds	r2, #1
 800944c:	701a      	strb	r2, [r3, #0]
 800944e:	e747      	b.n	80092e0 <_dtoa_r+0x960>
 8009450:	2a00      	cmp	r2, #0
 8009452:	dd07      	ble.n	8009464 <_dtoa_r+0xae4>
 8009454:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009458:	d0ed      	beq.n	8009436 <_dtoa_r+0xab6>
 800945a:	9a01      	ldr	r2, [sp, #4]
 800945c:	f109 0301 	add.w	r3, r9, #1
 8009460:	7013      	strb	r3, [r2, #0]
 8009462:	e73d      	b.n	80092e0 <_dtoa_r+0x960>
 8009464:	9b04      	ldr	r3, [sp, #16]
 8009466:	9a08      	ldr	r2, [sp, #32]
 8009468:	f803 9c01 	strb.w	r9, [r3, #-1]
 800946c:	4293      	cmp	r3, r2
 800946e:	d043      	beq.n	80094f8 <_dtoa_r+0xb78>
 8009470:	4651      	mov	r1, sl
 8009472:	2300      	movs	r3, #0
 8009474:	220a      	movs	r2, #10
 8009476:	4620      	mov	r0, r4
 8009478:	f000 f9d6 	bl	8009828 <__multadd>
 800947c:	45b8      	cmp	r8, r7
 800947e:	4682      	mov	sl, r0
 8009480:	f04f 0300 	mov.w	r3, #0
 8009484:	f04f 020a 	mov.w	r2, #10
 8009488:	4641      	mov	r1, r8
 800948a:	4620      	mov	r0, r4
 800948c:	d107      	bne.n	800949e <_dtoa_r+0xb1e>
 800948e:	f000 f9cb 	bl	8009828 <__multadd>
 8009492:	4680      	mov	r8, r0
 8009494:	4607      	mov	r7, r0
 8009496:	9b04      	ldr	r3, [sp, #16]
 8009498:	3301      	adds	r3, #1
 800949a:	9304      	str	r3, [sp, #16]
 800949c:	e775      	b.n	800938a <_dtoa_r+0xa0a>
 800949e:	f000 f9c3 	bl	8009828 <__multadd>
 80094a2:	4639      	mov	r1, r7
 80094a4:	4680      	mov	r8, r0
 80094a6:	2300      	movs	r3, #0
 80094a8:	220a      	movs	r2, #10
 80094aa:	4620      	mov	r0, r4
 80094ac:	f000 f9bc 	bl	8009828 <__multadd>
 80094b0:	4607      	mov	r7, r0
 80094b2:	e7f0      	b.n	8009496 <_dtoa_r+0xb16>
 80094b4:	9b04      	ldr	r3, [sp, #16]
 80094b6:	9301      	str	r3, [sp, #4]
 80094b8:	9d00      	ldr	r5, [sp, #0]
 80094ba:	4631      	mov	r1, r6
 80094bc:	4650      	mov	r0, sl
 80094be:	f7ff f9d4 	bl	800886a <quorem>
 80094c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80094c6:	9b00      	ldr	r3, [sp, #0]
 80094c8:	f805 9b01 	strb.w	r9, [r5], #1
 80094cc:	1aea      	subs	r2, r5, r3
 80094ce:	9b01      	ldr	r3, [sp, #4]
 80094d0:	4293      	cmp	r3, r2
 80094d2:	dd07      	ble.n	80094e4 <_dtoa_r+0xb64>
 80094d4:	4651      	mov	r1, sl
 80094d6:	2300      	movs	r3, #0
 80094d8:	220a      	movs	r2, #10
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 f9a4 	bl	8009828 <__multadd>
 80094e0:	4682      	mov	sl, r0
 80094e2:	e7ea      	b.n	80094ba <_dtoa_r+0xb3a>
 80094e4:	9b01      	ldr	r3, [sp, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	bfc8      	it	gt
 80094ea:	461d      	movgt	r5, r3
 80094ec:	9b00      	ldr	r3, [sp, #0]
 80094ee:	bfd8      	it	le
 80094f0:	2501      	movle	r5, #1
 80094f2:	441d      	add	r5, r3
 80094f4:	f04f 0800 	mov.w	r8, #0
 80094f8:	4651      	mov	r1, sl
 80094fa:	2201      	movs	r2, #1
 80094fc:	4620      	mov	r0, r4
 80094fe:	f000 fb41 	bl	8009b84 <__lshift>
 8009502:	4631      	mov	r1, r6
 8009504:	4682      	mov	sl, r0
 8009506:	f000 fba9 	bl	8009c5c <__mcmp>
 800950a:	2800      	cmp	r0, #0
 800950c:	dc96      	bgt.n	800943c <_dtoa_r+0xabc>
 800950e:	d102      	bne.n	8009516 <_dtoa_r+0xb96>
 8009510:	f019 0f01 	tst.w	r9, #1
 8009514:	d192      	bne.n	800943c <_dtoa_r+0xabc>
 8009516:	462b      	mov	r3, r5
 8009518:	461d      	mov	r5, r3
 800951a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800951e:	2a30      	cmp	r2, #48	; 0x30
 8009520:	d0fa      	beq.n	8009518 <_dtoa_r+0xb98>
 8009522:	e6dd      	b.n	80092e0 <_dtoa_r+0x960>
 8009524:	9a00      	ldr	r2, [sp, #0]
 8009526:	429a      	cmp	r2, r3
 8009528:	d189      	bne.n	800943e <_dtoa_r+0xabe>
 800952a:	f10b 0b01 	add.w	fp, fp, #1
 800952e:	2331      	movs	r3, #49	; 0x31
 8009530:	e796      	b.n	8009460 <_dtoa_r+0xae0>
 8009532:	4b0a      	ldr	r3, [pc, #40]	; (800955c <_dtoa_r+0xbdc>)
 8009534:	f7ff ba99 	b.w	8008a6a <_dtoa_r+0xea>
 8009538:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800953a:	2b00      	cmp	r3, #0
 800953c:	f47f aa6d 	bne.w	8008a1a <_dtoa_r+0x9a>
 8009540:	4b07      	ldr	r3, [pc, #28]	; (8009560 <_dtoa_r+0xbe0>)
 8009542:	f7ff ba92 	b.w	8008a6a <_dtoa_r+0xea>
 8009546:	9b01      	ldr	r3, [sp, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	dcb5      	bgt.n	80094b8 <_dtoa_r+0xb38>
 800954c:	9b07      	ldr	r3, [sp, #28]
 800954e:	2b02      	cmp	r3, #2
 8009550:	f73f aeb1 	bgt.w	80092b6 <_dtoa_r+0x936>
 8009554:	e7b0      	b.n	80094b8 <_dtoa_r+0xb38>
 8009556:	bf00      	nop
 8009558:	0800df7c 	.word	0x0800df7c
 800955c:	0800dedc 	.word	0x0800dedc
 8009560:	0800df00 	.word	0x0800df00

08009564 <_free_r>:
 8009564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009566:	2900      	cmp	r1, #0
 8009568:	d044      	beq.n	80095f4 <_free_r+0x90>
 800956a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800956e:	9001      	str	r0, [sp, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	f1a1 0404 	sub.w	r4, r1, #4
 8009576:	bfb8      	it	lt
 8009578:	18e4      	addlt	r4, r4, r3
 800957a:	f000 f8e7 	bl	800974c <__malloc_lock>
 800957e:	4a1e      	ldr	r2, [pc, #120]	; (80095f8 <_free_r+0x94>)
 8009580:	9801      	ldr	r0, [sp, #4]
 8009582:	6813      	ldr	r3, [r2, #0]
 8009584:	b933      	cbnz	r3, 8009594 <_free_r+0x30>
 8009586:	6063      	str	r3, [r4, #4]
 8009588:	6014      	str	r4, [r2, #0]
 800958a:	b003      	add	sp, #12
 800958c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009590:	f000 b8e2 	b.w	8009758 <__malloc_unlock>
 8009594:	42a3      	cmp	r3, r4
 8009596:	d908      	bls.n	80095aa <_free_r+0x46>
 8009598:	6825      	ldr	r5, [r4, #0]
 800959a:	1961      	adds	r1, r4, r5
 800959c:	428b      	cmp	r3, r1
 800959e:	bf01      	itttt	eq
 80095a0:	6819      	ldreq	r1, [r3, #0]
 80095a2:	685b      	ldreq	r3, [r3, #4]
 80095a4:	1949      	addeq	r1, r1, r5
 80095a6:	6021      	streq	r1, [r4, #0]
 80095a8:	e7ed      	b.n	8009586 <_free_r+0x22>
 80095aa:	461a      	mov	r2, r3
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	b10b      	cbz	r3, 80095b4 <_free_r+0x50>
 80095b0:	42a3      	cmp	r3, r4
 80095b2:	d9fa      	bls.n	80095aa <_free_r+0x46>
 80095b4:	6811      	ldr	r1, [r2, #0]
 80095b6:	1855      	adds	r5, r2, r1
 80095b8:	42a5      	cmp	r5, r4
 80095ba:	d10b      	bne.n	80095d4 <_free_r+0x70>
 80095bc:	6824      	ldr	r4, [r4, #0]
 80095be:	4421      	add	r1, r4
 80095c0:	1854      	adds	r4, r2, r1
 80095c2:	42a3      	cmp	r3, r4
 80095c4:	6011      	str	r1, [r2, #0]
 80095c6:	d1e0      	bne.n	800958a <_free_r+0x26>
 80095c8:	681c      	ldr	r4, [r3, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	6053      	str	r3, [r2, #4]
 80095ce:	440c      	add	r4, r1
 80095d0:	6014      	str	r4, [r2, #0]
 80095d2:	e7da      	b.n	800958a <_free_r+0x26>
 80095d4:	d902      	bls.n	80095dc <_free_r+0x78>
 80095d6:	230c      	movs	r3, #12
 80095d8:	6003      	str	r3, [r0, #0]
 80095da:	e7d6      	b.n	800958a <_free_r+0x26>
 80095dc:	6825      	ldr	r5, [r4, #0]
 80095de:	1961      	adds	r1, r4, r5
 80095e0:	428b      	cmp	r3, r1
 80095e2:	bf04      	itt	eq
 80095e4:	6819      	ldreq	r1, [r3, #0]
 80095e6:	685b      	ldreq	r3, [r3, #4]
 80095e8:	6063      	str	r3, [r4, #4]
 80095ea:	bf04      	itt	eq
 80095ec:	1949      	addeq	r1, r1, r5
 80095ee:	6021      	streq	r1, [r4, #0]
 80095f0:	6054      	str	r4, [r2, #4]
 80095f2:	e7ca      	b.n	800958a <_free_r+0x26>
 80095f4:	b003      	add	sp, #12
 80095f6:	bd30      	pop	{r4, r5, pc}
 80095f8:	2000a588 	.word	0x2000a588

080095fc <malloc>:
 80095fc:	4b02      	ldr	r3, [pc, #8]	; (8009608 <malloc+0xc>)
 80095fe:	4601      	mov	r1, r0
 8009600:	6818      	ldr	r0, [r3, #0]
 8009602:	f000 b823 	b.w	800964c <_malloc_r>
 8009606:	bf00      	nop
 8009608:	2000006c 	.word	0x2000006c

0800960c <sbrk_aligned>:
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	4e0e      	ldr	r6, [pc, #56]	; (8009648 <sbrk_aligned+0x3c>)
 8009610:	460c      	mov	r4, r1
 8009612:	6831      	ldr	r1, [r6, #0]
 8009614:	4605      	mov	r5, r0
 8009616:	b911      	cbnz	r1, 800961e <sbrk_aligned+0x12>
 8009618:	f001 faa2 	bl	800ab60 <_sbrk_r>
 800961c:	6030      	str	r0, [r6, #0]
 800961e:	4621      	mov	r1, r4
 8009620:	4628      	mov	r0, r5
 8009622:	f001 fa9d 	bl	800ab60 <_sbrk_r>
 8009626:	1c43      	adds	r3, r0, #1
 8009628:	d00a      	beq.n	8009640 <sbrk_aligned+0x34>
 800962a:	1cc4      	adds	r4, r0, #3
 800962c:	f024 0403 	bic.w	r4, r4, #3
 8009630:	42a0      	cmp	r0, r4
 8009632:	d007      	beq.n	8009644 <sbrk_aligned+0x38>
 8009634:	1a21      	subs	r1, r4, r0
 8009636:	4628      	mov	r0, r5
 8009638:	f001 fa92 	bl	800ab60 <_sbrk_r>
 800963c:	3001      	adds	r0, #1
 800963e:	d101      	bne.n	8009644 <sbrk_aligned+0x38>
 8009640:	f04f 34ff 	mov.w	r4, #4294967295
 8009644:	4620      	mov	r0, r4
 8009646:	bd70      	pop	{r4, r5, r6, pc}
 8009648:	2000a58c 	.word	0x2000a58c

0800964c <_malloc_r>:
 800964c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009650:	1ccd      	adds	r5, r1, #3
 8009652:	f025 0503 	bic.w	r5, r5, #3
 8009656:	3508      	adds	r5, #8
 8009658:	2d0c      	cmp	r5, #12
 800965a:	bf38      	it	cc
 800965c:	250c      	movcc	r5, #12
 800965e:	2d00      	cmp	r5, #0
 8009660:	4607      	mov	r7, r0
 8009662:	db01      	blt.n	8009668 <_malloc_r+0x1c>
 8009664:	42a9      	cmp	r1, r5
 8009666:	d905      	bls.n	8009674 <_malloc_r+0x28>
 8009668:	230c      	movs	r3, #12
 800966a:	603b      	str	r3, [r7, #0]
 800966c:	2600      	movs	r6, #0
 800966e:	4630      	mov	r0, r6
 8009670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009674:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009748 <_malloc_r+0xfc>
 8009678:	f000 f868 	bl	800974c <__malloc_lock>
 800967c:	f8d8 3000 	ldr.w	r3, [r8]
 8009680:	461c      	mov	r4, r3
 8009682:	bb5c      	cbnz	r4, 80096dc <_malloc_r+0x90>
 8009684:	4629      	mov	r1, r5
 8009686:	4638      	mov	r0, r7
 8009688:	f7ff ffc0 	bl	800960c <sbrk_aligned>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	4604      	mov	r4, r0
 8009690:	d155      	bne.n	800973e <_malloc_r+0xf2>
 8009692:	f8d8 4000 	ldr.w	r4, [r8]
 8009696:	4626      	mov	r6, r4
 8009698:	2e00      	cmp	r6, #0
 800969a:	d145      	bne.n	8009728 <_malloc_r+0xdc>
 800969c:	2c00      	cmp	r4, #0
 800969e:	d048      	beq.n	8009732 <_malloc_r+0xe6>
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	4631      	mov	r1, r6
 80096a4:	4638      	mov	r0, r7
 80096a6:	eb04 0903 	add.w	r9, r4, r3
 80096aa:	f001 fa59 	bl	800ab60 <_sbrk_r>
 80096ae:	4581      	cmp	r9, r0
 80096b0:	d13f      	bne.n	8009732 <_malloc_r+0xe6>
 80096b2:	6821      	ldr	r1, [r4, #0]
 80096b4:	1a6d      	subs	r5, r5, r1
 80096b6:	4629      	mov	r1, r5
 80096b8:	4638      	mov	r0, r7
 80096ba:	f7ff ffa7 	bl	800960c <sbrk_aligned>
 80096be:	3001      	adds	r0, #1
 80096c0:	d037      	beq.n	8009732 <_malloc_r+0xe6>
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	442b      	add	r3, r5
 80096c6:	6023      	str	r3, [r4, #0]
 80096c8:	f8d8 3000 	ldr.w	r3, [r8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d038      	beq.n	8009742 <_malloc_r+0xf6>
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	42a2      	cmp	r2, r4
 80096d4:	d12b      	bne.n	800972e <_malloc_r+0xe2>
 80096d6:	2200      	movs	r2, #0
 80096d8:	605a      	str	r2, [r3, #4]
 80096da:	e00f      	b.n	80096fc <_malloc_r+0xb0>
 80096dc:	6822      	ldr	r2, [r4, #0]
 80096de:	1b52      	subs	r2, r2, r5
 80096e0:	d41f      	bmi.n	8009722 <_malloc_r+0xd6>
 80096e2:	2a0b      	cmp	r2, #11
 80096e4:	d917      	bls.n	8009716 <_malloc_r+0xca>
 80096e6:	1961      	adds	r1, r4, r5
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	6025      	str	r5, [r4, #0]
 80096ec:	bf18      	it	ne
 80096ee:	6059      	strne	r1, [r3, #4]
 80096f0:	6863      	ldr	r3, [r4, #4]
 80096f2:	bf08      	it	eq
 80096f4:	f8c8 1000 	streq.w	r1, [r8]
 80096f8:	5162      	str	r2, [r4, r5]
 80096fa:	604b      	str	r3, [r1, #4]
 80096fc:	4638      	mov	r0, r7
 80096fe:	f104 060b 	add.w	r6, r4, #11
 8009702:	f000 f829 	bl	8009758 <__malloc_unlock>
 8009706:	f026 0607 	bic.w	r6, r6, #7
 800970a:	1d23      	adds	r3, r4, #4
 800970c:	1af2      	subs	r2, r6, r3
 800970e:	d0ae      	beq.n	800966e <_malloc_r+0x22>
 8009710:	1b9b      	subs	r3, r3, r6
 8009712:	50a3      	str	r3, [r4, r2]
 8009714:	e7ab      	b.n	800966e <_malloc_r+0x22>
 8009716:	42a3      	cmp	r3, r4
 8009718:	6862      	ldr	r2, [r4, #4]
 800971a:	d1dd      	bne.n	80096d8 <_malloc_r+0x8c>
 800971c:	f8c8 2000 	str.w	r2, [r8]
 8009720:	e7ec      	b.n	80096fc <_malloc_r+0xb0>
 8009722:	4623      	mov	r3, r4
 8009724:	6864      	ldr	r4, [r4, #4]
 8009726:	e7ac      	b.n	8009682 <_malloc_r+0x36>
 8009728:	4634      	mov	r4, r6
 800972a:	6876      	ldr	r6, [r6, #4]
 800972c:	e7b4      	b.n	8009698 <_malloc_r+0x4c>
 800972e:	4613      	mov	r3, r2
 8009730:	e7cc      	b.n	80096cc <_malloc_r+0x80>
 8009732:	230c      	movs	r3, #12
 8009734:	603b      	str	r3, [r7, #0]
 8009736:	4638      	mov	r0, r7
 8009738:	f000 f80e 	bl	8009758 <__malloc_unlock>
 800973c:	e797      	b.n	800966e <_malloc_r+0x22>
 800973e:	6025      	str	r5, [r4, #0]
 8009740:	e7dc      	b.n	80096fc <_malloc_r+0xb0>
 8009742:	605b      	str	r3, [r3, #4]
 8009744:	deff      	udf	#255	; 0xff
 8009746:	bf00      	nop
 8009748:	2000a588 	.word	0x2000a588

0800974c <__malloc_lock>:
 800974c:	4801      	ldr	r0, [pc, #4]	; (8009754 <__malloc_lock+0x8>)
 800974e:	f7ff b87c 	b.w	800884a <__retarget_lock_acquire_recursive>
 8009752:	bf00      	nop
 8009754:	2000a584 	.word	0x2000a584

08009758 <__malloc_unlock>:
 8009758:	4801      	ldr	r0, [pc, #4]	; (8009760 <__malloc_unlock+0x8>)
 800975a:	f7ff b877 	b.w	800884c <__retarget_lock_release_recursive>
 800975e:	bf00      	nop
 8009760:	2000a584 	.word	0x2000a584

08009764 <_Balloc>:
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	69c6      	ldr	r6, [r0, #28]
 8009768:	4604      	mov	r4, r0
 800976a:	460d      	mov	r5, r1
 800976c:	b976      	cbnz	r6, 800978c <_Balloc+0x28>
 800976e:	2010      	movs	r0, #16
 8009770:	f7ff ff44 	bl	80095fc <malloc>
 8009774:	4602      	mov	r2, r0
 8009776:	61e0      	str	r0, [r4, #28]
 8009778:	b920      	cbnz	r0, 8009784 <_Balloc+0x20>
 800977a:	4b18      	ldr	r3, [pc, #96]	; (80097dc <_Balloc+0x78>)
 800977c:	4818      	ldr	r0, [pc, #96]	; (80097e0 <_Balloc+0x7c>)
 800977e:	216b      	movs	r1, #107	; 0x6b
 8009780:	f001 f9fe 	bl	800ab80 <__assert_func>
 8009784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009788:	6006      	str	r6, [r0, #0]
 800978a:	60c6      	str	r6, [r0, #12]
 800978c:	69e6      	ldr	r6, [r4, #28]
 800978e:	68f3      	ldr	r3, [r6, #12]
 8009790:	b183      	cbz	r3, 80097b4 <_Balloc+0x50>
 8009792:	69e3      	ldr	r3, [r4, #28]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800979a:	b9b8      	cbnz	r0, 80097cc <_Balloc+0x68>
 800979c:	2101      	movs	r1, #1
 800979e:	fa01 f605 	lsl.w	r6, r1, r5
 80097a2:	1d72      	adds	r2, r6, #5
 80097a4:	0092      	lsls	r2, r2, #2
 80097a6:	4620      	mov	r0, r4
 80097a8:	f001 fa08 	bl	800abbc <_calloc_r>
 80097ac:	b160      	cbz	r0, 80097c8 <_Balloc+0x64>
 80097ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097b2:	e00e      	b.n	80097d2 <_Balloc+0x6e>
 80097b4:	2221      	movs	r2, #33	; 0x21
 80097b6:	2104      	movs	r1, #4
 80097b8:	4620      	mov	r0, r4
 80097ba:	f001 f9ff 	bl	800abbc <_calloc_r>
 80097be:	69e3      	ldr	r3, [r4, #28]
 80097c0:	60f0      	str	r0, [r6, #12]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1e4      	bne.n	8009792 <_Balloc+0x2e>
 80097c8:	2000      	movs	r0, #0
 80097ca:	bd70      	pop	{r4, r5, r6, pc}
 80097cc:	6802      	ldr	r2, [r0, #0]
 80097ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097d2:	2300      	movs	r3, #0
 80097d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097d8:	e7f7      	b.n	80097ca <_Balloc+0x66>
 80097da:	bf00      	nop
 80097dc:	0800df0d 	.word	0x0800df0d
 80097e0:	0800df8d 	.word	0x0800df8d

080097e4 <_Bfree>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	69c6      	ldr	r6, [r0, #28]
 80097e8:	4605      	mov	r5, r0
 80097ea:	460c      	mov	r4, r1
 80097ec:	b976      	cbnz	r6, 800980c <_Bfree+0x28>
 80097ee:	2010      	movs	r0, #16
 80097f0:	f7ff ff04 	bl	80095fc <malloc>
 80097f4:	4602      	mov	r2, r0
 80097f6:	61e8      	str	r0, [r5, #28]
 80097f8:	b920      	cbnz	r0, 8009804 <_Bfree+0x20>
 80097fa:	4b09      	ldr	r3, [pc, #36]	; (8009820 <_Bfree+0x3c>)
 80097fc:	4809      	ldr	r0, [pc, #36]	; (8009824 <_Bfree+0x40>)
 80097fe:	218f      	movs	r1, #143	; 0x8f
 8009800:	f001 f9be 	bl	800ab80 <__assert_func>
 8009804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009808:	6006      	str	r6, [r0, #0]
 800980a:	60c6      	str	r6, [r0, #12]
 800980c:	b13c      	cbz	r4, 800981e <_Bfree+0x3a>
 800980e:	69eb      	ldr	r3, [r5, #28]
 8009810:	6862      	ldr	r2, [r4, #4]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009818:	6021      	str	r1, [r4, #0]
 800981a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800981e:	bd70      	pop	{r4, r5, r6, pc}
 8009820:	0800df0d 	.word	0x0800df0d
 8009824:	0800df8d 	.word	0x0800df8d

08009828 <__multadd>:
 8009828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800982c:	690d      	ldr	r5, [r1, #16]
 800982e:	4607      	mov	r7, r0
 8009830:	460c      	mov	r4, r1
 8009832:	461e      	mov	r6, r3
 8009834:	f101 0c14 	add.w	ip, r1, #20
 8009838:	2000      	movs	r0, #0
 800983a:	f8dc 3000 	ldr.w	r3, [ip]
 800983e:	b299      	uxth	r1, r3
 8009840:	fb02 6101 	mla	r1, r2, r1, r6
 8009844:	0c1e      	lsrs	r6, r3, #16
 8009846:	0c0b      	lsrs	r3, r1, #16
 8009848:	fb02 3306 	mla	r3, r2, r6, r3
 800984c:	b289      	uxth	r1, r1
 800984e:	3001      	adds	r0, #1
 8009850:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009854:	4285      	cmp	r5, r0
 8009856:	f84c 1b04 	str.w	r1, [ip], #4
 800985a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800985e:	dcec      	bgt.n	800983a <__multadd+0x12>
 8009860:	b30e      	cbz	r6, 80098a6 <__multadd+0x7e>
 8009862:	68a3      	ldr	r3, [r4, #8]
 8009864:	42ab      	cmp	r3, r5
 8009866:	dc19      	bgt.n	800989c <__multadd+0x74>
 8009868:	6861      	ldr	r1, [r4, #4]
 800986a:	4638      	mov	r0, r7
 800986c:	3101      	adds	r1, #1
 800986e:	f7ff ff79 	bl	8009764 <_Balloc>
 8009872:	4680      	mov	r8, r0
 8009874:	b928      	cbnz	r0, 8009882 <__multadd+0x5a>
 8009876:	4602      	mov	r2, r0
 8009878:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <__multadd+0x84>)
 800987a:	480d      	ldr	r0, [pc, #52]	; (80098b0 <__multadd+0x88>)
 800987c:	21ba      	movs	r1, #186	; 0xba
 800987e:	f001 f97f 	bl	800ab80 <__assert_func>
 8009882:	6922      	ldr	r2, [r4, #16]
 8009884:	3202      	adds	r2, #2
 8009886:	f104 010c 	add.w	r1, r4, #12
 800988a:	0092      	lsls	r2, r2, #2
 800988c:	300c      	adds	r0, #12
 800988e:	f7fe ffde 	bl	800884e <memcpy>
 8009892:	4621      	mov	r1, r4
 8009894:	4638      	mov	r0, r7
 8009896:	f7ff ffa5 	bl	80097e4 <_Bfree>
 800989a:	4644      	mov	r4, r8
 800989c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098a0:	3501      	adds	r5, #1
 80098a2:	615e      	str	r6, [r3, #20]
 80098a4:	6125      	str	r5, [r4, #16]
 80098a6:	4620      	mov	r0, r4
 80098a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ac:	0800df7c 	.word	0x0800df7c
 80098b0:	0800df8d 	.word	0x0800df8d

080098b4 <__hi0bits>:
 80098b4:	0c03      	lsrs	r3, r0, #16
 80098b6:	041b      	lsls	r3, r3, #16
 80098b8:	b9d3      	cbnz	r3, 80098f0 <__hi0bits+0x3c>
 80098ba:	0400      	lsls	r0, r0, #16
 80098bc:	2310      	movs	r3, #16
 80098be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80098c2:	bf04      	itt	eq
 80098c4:	0200      	lsleq	r0, r0, #8
 80098c6:	3308      	addeq	r3, #8
 80098c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80098cc:	bf04      	itt	eq
 80098ce:	0100      	lsleq	r0, r0, #4
 80098d0:	3304      	addeq	r3, #4
 80098d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80098d6:	bf04      	itt	eq
 80098d8:	0080      	lsleq	r0, r0, #2
 80098da:	3302      	addeq	r3, #2
 80098dc:	2800      	cmp	r0, #0
 80098de:	db05      	blt.n	80098ec <__hi0bits+0x38>
 80098e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80098e4:	f103 0301 	add.w	r3, r3, #1
 80098e8:	bf08      	it	eq
 80098ea:	2320      	moveq	r3, #32
 80098ec:	4618      	mov	r0, r3
 80098ee:	4770      	bx	lr
 80098f0:	2300      	movs	r3, #0
 80098f2:	e7e4      	b.n	80098be <__hi0bits+0xa>

080098f4 <__lo0bits>:
 80098f4:	6803      	ldr	r3, [r0, #0]
 80098f6:	f013 0207 	ands.w	r2, r3, #7
 80098fa:	d00c      	beq.n	8009916 <__lo0bits+0x22>
 80098fc:	07d9      	lsls	r1, r3, #31
 80098fe:	d422      	bmi.n	8009946 <__lo0bits+0x52>
 8009900:	079a      	lsls	r2, r3, #30
 8009902:	bf49      	itett	mi
 8009904:	085b      	lsrmi	r3, r3, #1
 8009906:	089b      	lsrpl	r3, r3, #2
 8009908:	6003      	strmi	r3, [r0, #0]
 800990a:	2201      	movmi	r2, #1
 800990c:	bf5c      	itt	pl
 800990e:	6003      	strpl	r3, [r0, #0]
 8009910:	2202      	movpl	r2, #2
 8009912:	4610      	mov	r0, r2
 8009914:	4770      	bx	lr
 8009916:	b299      	uxth	r1, r3
 8009918:	b909      	cbnz	r1, 800991e <__lo0bits+0x2a>
 800991a:	0c1b      	lsrs	r3, r3, #16
 800991c:	2210      	movs	r2, #16
 800991e:	b2d9      	uxtb	r1, r3
 8009920:	b909      	cbnz	r1, 8009926 <__lo0bits+0x32>
 8009922:	3208      	adds	r2, #8
 8009924:	0a1b      	lsrs	r3, r3, #8
 8009926:	0719      	lsls	r1, r3, #28
 8009928:	bf04      	itt	eq
 800992a:	091b      	lsreq	r3, r3, #4
 800992c:	3204      	addeq	r2, #4
 800992e:	0799      	lsls	r1, r3, #30
 8009930:	bf04      	itt	eq
 8009932:	089b      	lsreq	r3, r3, #2
 8009934:	3202      	addeq	r2, #2
 8009936:	07d9      	lsls	r1, r3, #31
 8009938:	d403      	bmi.n	8009942 <__lo0bits+0x4e>
 800993a:	085b      	lsrs	r3, r3, #1
 800993c:	f102 0201 	add.w	r2, r2, #1
 8009940:	d003      	beq.n	800994a <__lo0bits+0x56>
 8009942:	6003      	str	r3, [r0, #0]
 8009944:	e7e5      	b.n	8009912 <__lo0bits+0x1e>
 8009946:	2200      	movs	r2, #0
 8009948:	e7e3      	b.n	8009912 <__lo0bits+0x1e>
 800994a:	2220      	movs	r2, #32
 800994c:	e7e1      	b.n	8009912 <__lo0bits+0x1e>
	...

08009950 <__i2b>:
 8009950:	b510      	push	{r4, lr}
 8009952:	460c      	mov	r4, r1
 8009954:	2101      	movs	r1, #1
 8009956:	f7ff ff05 	bl	8009764 <_Balloc>
 800995a:	4602      	mov	r2, r0
 800995c:	b928      	cbnz	r0, 800996a <__i2b+0x1a>
 800995e:	4b05      	ldr	r3, [pc, #20]	; (8009974 <__i2b+0x24>)
 8009960:	4805      	ldr	r0, [pc, #20]	; (8009978 <__i2b+0x28>)
 8009962:	f240 1145 	movw	r1, #325	; 0x145
 8009966:	f001 f90b 	bl	800ab80 <__assert_func>
 800996a:	2301      	movs	r3, #1
 800996c:	6144      	str	r4, [r0, #20]
 800996e:	6103      	str	r3, [r0, #16]
 8009970:	bd10      	pop	{r4, pc}
 8009972:	bf00      	nop
 8009974:	0800df7c 	.word	0x0800df7c
 8009978:	0800df8d 	.word	0x0800df8d

0800997c <__multiply>:
 800997c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009980:	4691      	mov	r9, r2
 8009982:	690a      	ldr	r2, [r1, #16]
 8009984:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009988:	429a      	cmp	r2, r3
 800998a:	bfb8      	it	lt
 800998c:	460b      	movlt	r3, r1
 800998e:	460c      	mov	r4, r1
 8009990:	bfbc      	itt	lt
 8009992:	464c      	movlt	r4, r9
 8009994:	4699      	movlt	r9, r3
 8009996:	6927      	ldr	r7, [r4, #16]
 8009998:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800999c:	68a3      	ldr	r3, [r4, #8]
 800999e:	6861      	ldr	r1, [r4, #4]
 80099a0:	eb07 060a 	add.w	r6, r7, sl
 80099a4:	42b3      	cmp	r3, r6
 80099a6:	b085      	sub	sp, #20
 80099a8:	bfb8      	it	lt
 80099aa:	3101      	addlt	r1, #1
 80099ac:	f7ff feda 	bl	8009764 <_Balloc>
 80099b0:	b930      	cbnz	r0, 80099c0 <__multiply+0x44>
 80099b2:	4602      	mov	r2, r0
 80099b4:	4b44      	ldr	r3, [pc, #272]	; (8009ac8 <__multiply+0x14c>)
 80099b6:	4845      	ldr	r0, [pc, #276]	; (8009acc <__multiply+0x150>)
 80099b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80099bc:	f001 f8e0 	bl	800ab80 <__assert_func>
 80099c0:	f100 0514 	add.w	r5, r0, #20
 80099c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80099c8:	462b      	mov	r3, r5
 80099ca:	2200      	movs	r2, #0
 80099cc:	4543      	cmp	r3, r8
 80099ce:	d321      	bcc.n	8009a14 <__multiply+0x98>
 80099d0:	f104 0314 	add.w	r3, r4, #20
 80099d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80099d8:	f109 0314 	add.w	r3, r9, #20
 80099dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80099e0:	9202      	str	r2, [sp, #8]
 80099e2:	1b3a      	subs	r2, r7, r4
 80099e4:	3a15      	subs	r2, #21
 80099e6:	f022 0203 	bic.w	r2, r2, #3
 80099ea:	3204      	adds	r2, #4
 80099ec:	f104 0115 	add.w	r1, r4, #21
 80099f0:	428f      	cmp	r7, r1
 80099f2:	bf38      	it	cc
 80099f4:	2204      	movcc	r2, #4
 80099f6:	9201      	str	r2, [sp, #4]
 80099f8:	9a02      	ldr	r2, [sp, #8]
 80099fa:	9303      	str	r3, [sp, #12]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d80c      	bhi.n	8009a1a <__multiply+0x9e>
 8009a00:	2e00      	cmp	r6, #0
 8009a02:	dd03      	ble.n	8009a0c <__multiply+0x90>
 8009a04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d05b      	beq.n	8009ac4 <__multiply+0x148>
 8009a0c:	6106      	str	r6, [r0, #16]
 8009a0e:	b005      	add	sp, #20
 8009a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a14:	f843 2b04 	str.w	r2, [r3], #4
 8009a18:	e7d8      	b.n	80099cc <__multiply+0x50>
 8009a1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a1e:	f1ba 0f00 	cmp.w	sl, #0
 8009a22:	d024      	beq.n	8009a6e <__multiply+0xf2>
 8009a24:	f104 0e14 	add.w	lr, r4, #20
 8009a28:	46a9      	mov	r9, r5
 8009a2a:	f04f 0c00 	mov.w	ip, #0
 8009a2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009a32:	f8d9 1000 	ldr.w	r1, [r9]
 8009a36:	fa1f fb82 	uxth.w	fp, r2
 8009a3a:	b289      	uxth	r1, r1
 8009a3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009a40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009a44:	f8d9 2000 	ldr.w	r2, [r9]
 8009a48:	4461      	add	r1, ip
 8009a4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009a52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009a56:	b289      	uxth	r1, r1
 8009a58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a5c:	4577      	cmp	r7, lr
 8009a5e:	f849 1b04 	str.w	r1, [r9], #4
 8009a62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a66:	d8e2      	bhi.n	8009a2e <__multiply+0xb2>
 8009a68:	9a01      	ldr	r2, [sp, #4]
 8009a6a:	f845 c002 	str.w	ip, [r5, r2]
 8009a6e:	9a03      	ldr	r2, [sp, #12]
 8009a70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a74:	3304      	adds	r3, #4
 8009a76:	f1b9 0f00 	cmp.w	r9, #0
 8009a7a:	d021      	beq.n	8009ac0 <__multiply+0x144>
 8009a7c:	6829      	ldr	r1, [r5, #0]
 8009a7e:	f104 0c14 	add.w	ip, r4, #20
 8009a82:	46ae      	mov	lr, r5
 8009a84:	f04f 0a00 	mov.w	sl, #0
 8009a88:	f8bc b000 	ldrh.w	fp, [ip]
 8009a8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009a90:	fb09 220b 	mla	r2, r9, fp, r2
 8009a94:	4452      	add	r2, sl
 8009a96:	b289      	uxth	r1, r1
 8009a98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a9c:	f84e 1b04 	str.w	r1, [lr], #4
 8009aa0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009aa4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009aa8:	f8be 1000 	ldrh.w	r1, [lr]
 8009aac:	fb09 110a 	mla	r1, r9, sl, r1
 8009ab0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009ab4:	4567      	cmp	r7, ip
 8009ab6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009aba:	d8e5      	bhi.n	8009a88 <__multiply+0x10c>
 8009abc:	9a01      	ldr	r2, [sp, #4]
 8009abe:	50a9      	str	r1, [r5, r2]
 8009ac0:	3504      	adds	r5, #4
 8009ac2:	e799      	b.n	80099f8 <__multiply+0x7c>
 8009ac4:	3e01      	subs	r6, #1
 8009ac6:	e79b      	b.n	8009a00 <__multiply+0x84>
 8009ac8:	0800df7c 	.word	0x0800df7c
 8009acc:	0800df8d 	.word	0x0800df8d

08009ad0 <__pow5mult>:
 8009ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ad4:	4615      	mov	r5, r2
 8009ad6:	f012 0203 	ands.w	r2, r2, #3
 8009ada:	4606      	mov	r6, r0
 8009adc:	460f      	mov	r7, r1
 8009ade:	d007      	beq.n	8009af0 <__pow5mult+0x20>
 8009ae0:	4c25      	ldr	r4, [pc, #148]	; (8009b78 <__pow5mult+0xa8>)
 8009ae2:	3a01      	subs	r2, #1
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009aea:	f7ff fe9d 	bl	8009828 <__multadd>
 8009aee:	4607      	mov	r7, r0
 8009af0:	10ad      	asrs	r5, r5, #2
 8009af2:	d03d      	beq.n	8009b70 <__pow5mult+0xa0>
 8009af4:	69f4      	ldr	r4, [r6, #28]
 8009af6:	b97c      	cbnz	r4, 8009b18 <__pow5mult+0x48>
 8009af8:	2010      	movs	r0, #16
 8009afa:	f7ff fd7f 	bl	80095fc <malloc>
 8009afe:	4602      	mov	r2, r0
 8009b00:	61f0      	str	r0, [r6, #28]
 8009b02:	b928      	cbnz	r0, 8009b10 <__pow5mult+0x40>
 8009b04:	4b1d      	ldr	r3, [pc, #116]	; (8009b7c <__pow5mult+0xac>)
 8009b06:	481e      	ldr	r0, [pc, #120]	; (8009b80 <__pow5mult+0xb0>)
 8009b08:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009b0c:	f001 f838 	bl	800ab80 <__assert_func>
 8009b10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b14:	6004      	str	r4, [r0, #0]
 8009b16:	60c4      	str	r4, [r0, #12]
 8009b18:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009b1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b20:	b94c      	cbnz	r4, 8009b36 <__pow5mult+0x66>
 8009b22:	f240 2171 	movw	r1, #625	; 0x271
 8009b26:	4630      	mov	r0, r6
 8009b28:	f7ff ff12 	bl	8009950 <__i2b>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b32:	4604      	mov	r4, r0
 8009b34:	6003      	str	r3, [r0, #0]
 8009b36:	f04f 0900 	mov.w	r9, #0
 8009b3a:	07eb      	lsls	r3, r5, #31
 8009b3c:	d50a      	bpl.n	8009b54 <__pow5mult+0x84>
 8009b3e:	4639      	mov	r1, r7
 8009b40:	4622      	mov	r2, r4
 8009b42:	4630      	mov	r0, r6
 8009b44:	f7ff ff1a 	bl	800997c <__multiply>
 8009b48:	4639      	mov	r1, r7
 8009b4a:	4680      	mov	r8, r0
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f7ff fe49 	bl	80097e4 <_Bfree>
 8009b52:	4647      	mov	r7, r8
 8009b54:	106d      	asrs	r5, r5, #1
 8009b56:	d00b      	beq.n	8009b70 <__pow5mult+0xa0>
 8009b58:	6820      	ldr	r0, [r4, #0]
 8009b5a:	b938      	cbnz	r0, 8009b6c <__pow5mult+0x9c>
 8009b5c:	4622      	mov	r2, r4
 8009b5e:	4621      	mov	r1, r4
 8009b60:	4630      	mov	r0, r6
 8009b62:	f7ff ff0b 	bl	800997c <__multiply>
 8009b66:	6020      	str	r0, [r4, #0]
 8009b68:	f8c0 9000 	str.w	r9, [r0]
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	e7e4      	b.n	8009b3a <__pow5mult+0x6a>
 8009b70:	4638      	mov	r0, r7
 8009b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b76:	bf00      	nop
 8009b78:	0800e0d8 	.word	0x0800e0d8
 8009b7c:	0800df0d 	.word	0x0800df0d
 8009b80:	0800df8d 	.word	0x0800df8d

08009b84 <__lshift>:
 8009b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b88:	460c      	mov	r4, r1
 8009b8a:	6849      	ldr	r1, [r1, #4]
 8009b8c:	6923      	ldr	r3, [r4, #16]
 8009b8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b92:	68a3      	ldr	r3, [r4, #8]
 8009b94:	4607      	mov	r7, r0
 8009b96:	4691      	mov	r9, r2
 8009b98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b9c:	f108 0601 	add.w	r6, r8, #1
 8009ba0:	42b3      	cmp	r3, r6
 8009ba2:	db0b      	blt.n	8009bbc <__lshift+0x38>
 8009ba4:	4638      	mov	r0, r7
 8009ba6:	f7ff fddd 	bl	8009764 <_Balloc>
 8009baa:	4605      	mov	r5, r0
 8009bac:	b948      	cbnz	r0, 8009bc2 <__lshift+0x3e>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	4b28      	ldr	r3, [pc, #160]	; (8009c54 <__lshift+0xd0>)
 8009bb2:	4829      	ldr	r0, [pc, #164]	; (8009c58 <__lshift+0xd4>)
 8009bb4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009bb8:	f000 ffe2 	bl	800ab80 <__assert_func>
 8009bbc:	3101      	adds	r1, #1
 8009bbe:	005b      	lsls	r3, r3, #1
 8009bc0:	e7ee      	b.n	8009ba0 <__lshift+0x1c>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f100 0114 	add.w	r1, r0, #20
 8009bc8:	f100 0210 	add.w	r2, r0, #16
 8009bcc:	4618      	mov	r0, r3
 8009bce:	4553      	cmp	r3, sl
 8009bd0:	db33      	blt.n	8009c3a <__lshift+0xb6>
 8009bd2:	6920      	ldr	r0, [r4, #16]
 8009bd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009bd8:	f104 0314 	add.w	r3, r4, #20
 8009bdc:	f019 091f 	ands.w	r9, r9, #31
 8009be0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009be4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009be8:	d02b      	beq.n	8009c42 <__lshift+0xbe>
 8009bea:	f1c9 0e20 	rsb	lr, r9, #32
 8009bee:	468a      	mov	sl, r1
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	6818      	ldr	r0, [r3, #0]
 8009bf4:	fa00 f009 	lsl.w	r0, r0, r9
 8009bf8:	4310      	orrs	r0, r2
 8009bfa:	f84a 0b04 	str.w	r0, [sl], #4
 8009bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c02:	459c      	cmp	ip, r3
 8009c04:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c08:	d8f3      	bhi.n	8009bf2 <__lshift+0x6e>
 8009c0a:	ebac 0304 	sub.w	r3, ip, r4
 8009c0e:	3b15      	subs	r3, #21
 8009c10:	f023 0303 	bic.w	r3, r3, #3
 8009c14:	3304      	adds	r3, #4
 8009c16:	f104 0015 	add.w	r0, r4, #21
 8009c1a:	4584      	cmp	ip, r0
 8009c1c:	bf38      	it	cc
 8009c1e:	2304      	movcc	r3, #4
 8009c20:	50ca      	str	r2, [r1, r3]
 8009c22:	b10a      	cbz	r2, 8009c28 <__lshift+0xa4>
 8009c24:	f108 0602 	add.w	r6, r8, #2
 8009c28:	3e01      	subs	r6, #1
 8009c2a:	4638      	mov	r0, r7
 8009c2c:	612e      	str	r6, [r5, #16]
 8009c2e:	4621      	mov	r1, r4
 8009c30:	f7ff fdd8 	bl	80097e4 <_Bfree>
 8009c34:	4628      	mov	r0, r5
 8009c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c3e:	3301      	adds	r3, #1
 8009c40:	e7c5      	b.n	8009bce <__lshift+0x4a>
 8009c42:	3904      	subs	r1, #4
 8009c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c48:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c4c:	459c      	cmp	ip, r3
 8009c4e:	d8f9      	bhi.n	8009c44 <__lshift+0xc0>
 8009c50:	e7ea      	b.n	8009c28 <__lshift+0xa4>
 8009c52:	bf00      	nop
 8009c54:	0800df7c 	.word	0x0800df7c
 8009c58:	0800df8d 	.word	0x0800df8d

08009c5c <__mcmp>:
 8009c5c:	b530      	push	{r4, r5, lr}
 8009c5e:	6902      	ldr	r2, [r0, #16]
 8009c60:	690c      	ldr	r4, [r1, #16]
 8009c62:	1b12      	subs	r2, r2, r4
 8009c64:	d10e      	bne.n	8009c84 <__mcmp+0x28>
 8009c66:	f100 0314 	add.w	r3, r0, #20
 8009c6a:	3114      	adds	r1, #20
 8009c6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c7c:	42a5      	cmp	r5, r4
 8009c7e:	d003      	beq.n	8009c88 <__mcmp+0x2c>
 8009c80:	d305      	bcc.n	8009c8e <__mcmp+0x32>
 8009c82:	2201      	movs	r2, #1
 8009c84:	4610      	mov	r0, r2
 8009c86:	bd30      	pop	{r4, r5, pc}
 8009c88:	4283      	cmp	r3, r0
 8009c8a:	d3f3      	bcc.n	8009c74 <__mcmp+0x18>
 8009c8c:	e7fa      	b.n	8009c84 <__mcmp+0x28>
 8009c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c92:	e7f7      	b.n	8009c84 <__mcmp+0x28>

08009c94 <__mdiff>:
 8009c94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c98:	460c      	mov	r4, r1
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	4611      	mov	r1, r2
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	4690      	mov	r8, r2
 8009ca2:	f7ff ffdb 	bl	8009c5c <__mcmp>
 8009ca6:	1e05      	subs	r5, r0, #0
 8009ca8:	d110      	bne.n	8009ccc <__mdiff+0x38>
 8009caa:	4629      	mov	r1, r5
 8009cac:	4630      	mov	r0, r6
 8009cae:	f7ff fd59 	bl	8009764 <_Balloc>
 8009cb2:	b930      	cbnz	r0, 8009cc2 <__mdiff+0x2e>
 8009cb4:	4b3a      	ldr	r3, [pc, #232]	; (8009da0 <__mdiff+0x10c>)
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	f240 2137 	movw	r1, #567	; 0x237
 8009cbc:	4839      	ldr	r0, [pc, #228]	; (8009da4 <__mdiff+0x110>)
 8009cbe:	f000 ff5f 	bl	800ab80 <__assert_func>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ccc:	bfa4      	itt	ge
 8009cce:	4643      	movge	r3, r8
 8009cd0:	46a0      	movge	r8, r4
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009cd8:	bfa6      	itte	ge
 8009cda:	461c      	movge	r4, r3
 8009cdc:	2500      	movge	r5, #0
 8009cde:	2501      	movlt	r5, #1
 8009ce0:	f7ff fd40 	bl	8009764 <_Balloc>
 8009ce4:	b920      	cbnz	r0, 8009cf0 <__mdiff+0x5c>
 8009ce6:	4b2e      	ldr	r3, [pc, #184]	; (8009da0 <__mdiff+0x10c>)
 8009ce8:	4602      	mov	r2, r0
 8009cea:	f240 2145 	movw	r1, #581	; 0x245
 8009cee:	e7e5      	b.n	8009cbc <__mdiff+0x28>
 8009cf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009cf4:	6926      	ldr	r6, [r4, #16]
 8009cf6:	60c5      	str	r5, [r0, #12]
 8009cf8:	f104 0914 	add.w	r9, r4, #20
 8009cfc:	f108 0514 	add.w	r5, r8, #20
 8009d00:	f100 0e14 	add.w	lr, r0, #20
 8009d04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009d08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009d0c:	f108 0210 	add.w	r2, r8, #16
 8009d10:	46f2      	mov	sl, lr
 8009d12:	2100      	movs	r1, #0
 8009d14:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d1c:	fa11 f88b 	uxtah	r8, r1, fp
 8009d20:	b299      	uxth	r1, r3
 8009d22:	0c1b      	lsrs	r3, r3, #16
 8009d24:	eba8 0801 	sub.w	r8, r8, r1
 8009d28:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d2c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d30:	fa1f f888 	uxth.w	r8, r8
 8009d34:	1419      	asrs	r1, r3, #16
 8009d36:	454e      	cmp	r6, r9
 8009d38:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009d3c:	f84a 3b04 	str.w	r3, [sl], #4
 8009d40:	d8e8      	bhi.n	8009d14 <__mdiff+0x80>
 8009d42:	1b33      	subs	r3, r6, r4
 8009d44:	3b15      	subs	r3, #21
 8009d46:	f023 0303 	bic.w	r3, r3, #3
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	3415      	adds	r4, #21
 8009d4e:	42a6      	cmp	r6, r4
 8009d50:	bf38      	it	cc
 8009d52:	2304      	movcc	r3, #4
 8009d54:	441d      	add	r5, r3
 8009d56:	4473      	add	r3, lr
 8009d58:	469e      	mov	lr, r3
 8009d5a:	462e      	mov	r6, r5
 8009d5c:	4566      	cmp	r6, ip
 8009d5e:	d30e      	bcc.n	8009d7e <__mdiff+0xea>
 8009d60:	f10c 0203 	add.w	r2, ip, #3
 8009d64:	1b52      	subs	r2, r2, r5
 8009d66:	f022 0203 	bic.w	r2, r2, #3
 8009d6a:	3d03      	subs	r5, #3
 8009d6c:	45ac      	cmp	ip, r5
 8009d6e:	bf38      	it	cc
 8009d70:	2200      	movcc	r2, #0
 8009d72:	4413      	add	r3, r2
 8009d74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009d78:	b17a      	cbz	r2, 8009d9a <__mdiff+0x106>
 8009d7a:	6107      	str	r7, [r0, #16]
 8009d7c:	e7a4      	b.n	8009cc8 <__mdiff+0x34>
 8009d7e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009d82:	fa11 f288 	uxtah	r2, r1, r8
 8009d86:	1414      	asrs	r4, r2, #16
 8009d88:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009d8c:	b292      	uxth	r2, r2
 8009d8e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009d92:	f84e 2b04 	str.w	r2, [lr], #4
 8009d96:	1421      	asrs	r1, r4, #16
 8009d98:	e7e0      	b.n	8009d5c <__mdiff+0xc8>
 8009d9a:	3f01      	subs	r7, #1
 8009d9c:	e7ea      	b.n	8009d74 <__mdiff+0xe0>
 8009d9e:	bf00      	nop
 8009da0:	0800df7c 	.word	0x0800df7c
 8009da4:	0800df8d 	.word	0x0800df8d

08009da8 <__d2b>:
 8009da8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009dac:	460f      	mov	r7, r1
 8009dae:	2101      	movs	r1, #1
 8009db0:	ec59 8b10 	vmov	r8, r9, d0
 8009db4:	4616      	mov	r6, r2
 8009db6:	f7ff fcd5 	bl	8009764 <_Balloc>
 8009dba:	4604      	mov	r4, r0
 8009dbc:	b930      	cbnz	r0, 8009dcc <__d2b+0x24>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	4b24      	ldr	r3, [pc, #144]	; (8009e54 <__d2b+0xac>)
 8009dc2:	4825      	ldr	r0, [pc, #148]	; (8009e58 <__d2b+0xb0>)
 8009dc4:	f240 310f 	movw	r1, #783	; 0x30f
 8009dc8:	f000 feda 	bl	800ab80 <__assert_func>
 8009dcc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009dd4:	bb2d      	cbnz	r5, 8009e22 <__d2b+0x7a>
 8009dd6:	9301      	str	r3, [sp, #4]
 8009dd8:	f1b8 0300 	subs.w	r3, r8, #0
 8009ddc:	d026      	beq.n	8009e2c <__d2b+0x84>
 8009dde:	4668      	mov	r0, sp
 8009de0:	9300      	str	r3, [sp, #0]
 8009de2:	f7ff fd87 	bl	80098f4 <__lo0bits>
 8009de6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009dea:	b1e8      	cbz	r0, 8009e28 <__d2b+0x80>
 8009dec:	f1c0 0320 	rsb	r3, r0, #32
 8009df0:	fa02 f303 	lsl.w	r3, r2, r3
 8009df4:	430b      	orrs	r3, r1
 8009df6:	40c2      	lsrs	r2, r0
 8009df8:	6163      	str	r3, [r4, #20]
 8009dfa:	9201      	str	r2, [sp, #4]
 8009dfc:	9b01      	ldr	r3, [sp, #4]
 8009dfe:	61a3      	str	r3, [r4, #24]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	bf14      	ite	ne
 8009e04:	2202      	movne	r2, #2
 8009e06:	2201      	moveq	r2, #1
 8009e08:	6122      	str	r2, [r4, #16]
 8009e0a:	b1bd      	cbz	r5, 8009e3c <__d2b+0x94>
 8009e0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e10:	4405      	add	r5, r0
 8009e12:	603d      	str	r5, [r7, #0]
 8009e14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e18:	6030      	str	r0, [r6, #0]
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	b003      	add	sp, #12
 8009e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e26:	e7d6      	b.n	8009dd6 <__d2b+0x2e>
 8009e28:	6161      	str	r1, [r4, #20]
 8009e2a:	e7e7      	b.n	8009dfc <__d2b+0x54>
 8009e2c:	a801      	add	r0, sp, #4
 8009e2e:	f7ff fd61 	bl	80098f4 <__lo0bits>
 8009e32:	9b01      	ldr	r3, [sp, #4]
 8009e34:	6163      	str	r3, [r4, #20]
 8009e36:	3020      	adds	r0, #32
 8009e38:	2201      	movs	r2, #1
 8009e3a:	e7e5      	b.n	8009e08 <__d2b+0x60>
 8009e3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e44:	6038      	str	r0, [r7, #0]
 8009e46:	6918      	ldr	r0, [r3, #16]
 8009e48:	f7ff fd34 	bl	80098b4 <__hi0bits>
 8009e4c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e50:	e7e2      	b.n	8009e18 <__d2b+0x70>
 8009e52:	bf00      	nop
 8009e54:	0800df7c 	.word	0x0800df7c
 8009e58:	0800df8d 	.word	0x0800df8d

08009e5c <__swhatbuf_r>:
 8009e5c:	b570      	push	{r4, r5, r6, lr}
 8009e5e:	460c      	mov	r4, r1
 8009e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e64:	2900      	cmp	r1, #0
 8009e66:	b096      	sub	sp, #88	; 0x58
 8009e68:	4615      	mov	r5, r2
 8009e6a:	461e      	mov	r6, r3
 8009e6c:	da0d      	bge.n	8009e8a <__swhatbuf_r+0x2e>
 8009e6e:	89a3      	ldrh	r3, [r4, #12]
 8009e70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e74:	f04f 0100 	mov.w	r1, #0
 8009e78:	bf0c      	ite	eq
 8009e7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e7e:	2340      	movne	r3, #64	; 0x40
 8009e80:	2000      	movs	r0, #0
 8009e82:	6031      	str	r1, [r6, #0]
 8009e84:	602b      	str	r3, [r5, #0]
 8009e86:	b016      	add	sp, #88	; 0x58
 8009e88:	bd70      	pop	{r4, r5, r6, pc}
 8009e8a:	466a      	mov	r2, sp
 8009e8c:	f000 fe46 	bl	800ab1c <_fstat_r>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	dbec      	blt.n	8009e6e <__swhatbuf_r+0x12>
 8009e94:	9901      	ldr	r1, [sp, #4]
 8009e96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009e9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009e9e:	4259      	negs	r1, r3
 8009ea0:	4159      	adcs	r1, r3
 8009ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ea6:	e7eb      	b.n	8009e80 <__swhatbuf_r+0x24>

08009ea8 <__smakebuf_r>:
 8009ea8:	898b      	ldrh	r3, [r1, #12]
 8009eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009eac:	079d      	lsls	r5, r3, #30
 8009eae:	4606      	mov	r6, r0
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	d507      	bpl.n	8009ec4 <__smakebuf_r+0x1c>
 8009eb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	6123      	str	r3, [r4, #16]
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	6163      	str	r3, [r4, #20]
 8009ec0:	b002      	add	sp, #8
 8009ec2:	bd70      	pop	{r4, r5, r6, pc}
 8009ec4:	ab01      	add	r3, sp, #4
 8009ec6:	466a      	mov	r2, sp
 8009ec8:	f7ff ffc8 	bl	8009e5c <__swhatbuf_r>
 8009ecc:	9900      	ldr	r1, [sp, #0]
 8009ece:	4605      	mov	r5, r0
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f7ff fbbb 	bl	800964c <_malloc_r>
 8009ed6:	b948      	cbnz	r0, 8009eec <__smakebuf_r+0x44>
 8009ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009edc:	059a      	lsls	r2, r3, #22
 8009ede:	d4ef      	bmi.n	8009ec0 <__smakebuf_r+0x18>
 8009ee0:	f023 0303 	bic.w	r3, r3, #3
 8009ee4:	f043 0302 	orr.w	r3, r3, #2
 8009ee8:	81a3      	strh	r3, [r4, #12]
 8009eea:	e7e3      	b.n	8009eb4 <__smakebuf_r+0xc>
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	6020      	str	r0, [r4, #0]
 8009ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ef4:	81a3      	strh	r3, [r4, #12]
 8009ef6:	9b00      	ldr	r3, [sp, #0]
 8009ef8:	6163      	str	r3, [r4, #20]
 8009efa:	9b01      	ldr	r3, [sp, #4]
 8009efc:	6120      	str	r0, [r4, #16]
 8009efe:	b15b      	cbz	r3, 8009f18 <__smakebuf_r+0x70>
 8009f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f04:	4630      	mov	r0, r6
 8009f06:	f000 fe1b 	bl	800ab40 <_isatty_r>
 8009f0a:	b128      	cbz	r0, 8009f18 <__smakebuf_r+0x70>
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	f023 0303 	bic.w	r3, r3, #3
 8009f12:	f043 0301 	orr.w	r3, r3, #1
 8009f16:	81a3      	strh	r3, [r4, #12]
 8009f18:	89a3      	ldrh	r3, [r4, #12]
 8009f1a:	431d      	orrs	r5, r3
 8009f1c:	81a5      	strh	r5, [r4, #12]
 8009f1e:	e7cf      	b.n	8009ec0 <__smakebuf_r+0x18>

08009f20 <wcvt>:
 8009f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f24:	b085      	sub	sp, #20
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	461d      	mov	r5, r3
 8009f2a:	4614      	mov	r4, r2
 8009f2c:	bfbc      	itt	lt
 8009f2e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009f32:	4614      	movlt	r4, r2
 8009f34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f36:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009f38:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8009f3c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8009f40:	bfb6      	itet	lt
 8009f42:	461d      	movlt	r5, r3
 8009f44:	2300      	movge	r3, #0
 8009f46:	232d      	movlt	r3, #45	; 0x2d
 8009f48:	6013      	str	r3, [r2, #0]
 8009f4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f4c:	f023 0820 	bic.w	r8, r3, #32
 8009f50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f54:	d005      	beq.n	8009f62 <wcvt+0x42>
 8009f56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f5a:	d100      	bne.n	8009f5e <wcvt+0x3e>
 8009f5c:	3601      	adds	r6, #1
 8009f5e:	2102      	movs	r1, #2
 8009f60:	e000      	b.n	8009f64 <wcvt+0x44>
 8009f62:	2103      	movs	r1, #3
 8009f64:	ab03      	add	r3, sp, #12
 8009f66:	9301      	str	r3, [sp, #4]
 8009f68:	ab02      	add	r3, sp, #8
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	ec45 4b10 	vmov	d0, r4, r5
 8009f70:	4653      	mov	r3, sl
 8009f72:	4632      	mov	r2, r6
 8009f74:	f7fe fd04 	bl	8008980 <_dtoa_r>
 8009f78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f7c:	4607      	mov	r7, r0
 8009f7e:	d112      	bne.n	8009fa6 <wcvt+0x86>
 8009f80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f82:	07db      	lsls	r3, r3, #31
 8009f84:	d40f      	bmi.n	8009fa6 <wcvt+0x86>
 8009f86:	9b03      	ldr	r3, [sp, #12]
 8009f88:	1bdb      	subs	r3, r3, r7
 8009f8a:	f8cb 3000 	str.w	r3, [fp]
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f8db 2000 	ldr.w	r2, [fp]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	dd02      	ble.n	8009f9e <wcvt+0x7e>
 8009f98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	db2a      	blt.n	8009ff4 <wcvt+0xd4>
 8009f9e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009fa0:	b005      	add	sp, #20
 8009fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009faa:	eb07 0906 	add.w	r9, r7, r6
 8009fae:	d110      	bne.n	8009fd2 <wcvt+0xb2>
 8009fb0:	783b      	ldrb	r3, [r7, #0]
 8009fb2:	2b30      	cmp	r3, #48	; 0x30
 8009fb4:	d10a      	bne.n	8009fcc <wcvt+0xac>
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2300      	movs	r3, #0
 8009fba:	4620      	mov	r0, r4
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	f7f6 fd83 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fc2:	b918      	cbnz	r0, 8009fcc <wcvt+0xac>
 8009fc4:	f1c6 0601 	rsb	r6, r6, #1
 8009fc8:	f8ca 6000 	str.w	r6, [sl]
 8009fcc:	f8da 3000 	ldr.w	r3, [sl]
 8009fd0:	4499      	add	r9, r3
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	4629      	mov	r1, r5
 8009fda:	f7f6 fd75 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fde:	b108      	cbz	r0, 8009fe4 <wcvt+0xc4>
 8009fe0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fe4:	2230      	movs	r2, #48	; 0x30
 8009fe6:	9b03      	ldr	r3, [sp, #12]
 8009fe8:	454b      	cmp	r3, r9
 8009fea:	d2cc      	bcs.n	8009f86 <wcvt+0x66>
 8009fec:	1c59      	adds	r1, r3, #1
 8009fee:	9103      	str	r1, [sp, #12]
 8009ff0:	701a      	strb	r2, [r3, #0]
 8009ff2:	e7f8      	b.n	8009fe6 <wcvt+0xc6>
 8009ff4:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009ff6:	5cfa      	ldrb	r2, [r7, r3]
 8009ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	e7c7      	b.n	8009f90 <wcvt+0x70>

0800a000 <_svfwprintf_r>:
 800a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a004:	ed2d 8b04 	vpush	{d8-d9}
 800a008:	b0d3      	sub	sp, #332	; 0x14c
 800a00a:	461d      	mov	r5, r3
 800a00c:	2300      	movs	r3, #0
 800a00e:	4689      	mov	r9, r1
 800a010:	9319      	str	r3, [sp, #100]	; 0x64
 800a012:	4683      	mov	fp, r0
 800a014:	920b      	str	r2, [sp, #44]	; 0x2c
 800a016:	f7fe fba3 	bl	8008760 <_localeconv_r>
 800a01a:	6803      	ldr	r3, [r0, #0]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	9316      	str	r3, [sp, #88]	; 0x58
 800a020:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a024:	061e      	lsls	r6, r3, #24
 800a026:	d51a      	bpl.n	800a05e <_svfwprintf_r+0x5e>
 800a028:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a02c:	b9bb      	cbnz	r3, 800a05e <_svfwprintf_r+0x5e>
 800a02e:	2140      	movs	r1, #64	; 0x40
 800a030:	4658      	mov	r0, fp
 800a032:	f7ff fb0b 	bl	800964c <_malloc_r>
 800a036:	f8c9 0000 	str.w	r0, [r9]
 800a03a:	f8c9 0010 	str.w	r0, [r9, #16]
 800a03e:	b958      	cbnz	r0, 800a058 <_svfwprintf_r+0x58>
 800a040:	230c      	movs	r3, #12
 800a042:	f8cb 3000 	str.w	r3, [fp]
 800a046:	f04f 33ff 	mov.w	r3, #4294967295
 800a04a:	930d      	str	r3, [sp, #52]	; 0x34
 800a04c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a04e:	b053      	add	sp, #332	; 0x14c
 800a050:	ecbd 8b04 	vpop	{d8-d9}
 800a054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a058:	2340      	movs	r3, #64	; 0x40
 800a05a:	f8c9 3014 	str.w	r3, [r9, #20]
 800a05e:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 800a290 <_svfwprintf_r+0x290>
 800a062:	2300      	movs	r3, #0
 800a064:	930f      	str	r3, [sp, #60]	; 0x3c
 800a066:	9311      	str	r3, [sp, #68]	; 0x44
 800a068:	930d      	str	r3, [sp, #52]	; 0x34
 800a06a:	eeb0 8a47 	vmov.f32	s16, s14
 800a06e:	eef0 8a67 	vmov.f32	s17, s15
 800a072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a074:	461c      	mov	r4, r3
 800a076:	f853 2b04 	ldr.w	r2, [r3], #4
 800a07a:	b10a      	cbz	r2, 800a080 <_svfwprintf_r+0x80>
 800a07c:	2a25      	cmp	r2, #37	; 0x25
 800a07e:	d1f9      	bne.n	800a074 <_svfwprintf_r+0x74>
 800a080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a082:	42a3      	cmp	r3, r4
 800a084:	d00d      	beq.n	800a0a2 <_svfwprintf_r+0xa2>
 800a086:	1ae6      	subs	r6, r4, r3
 800a088:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a08a:	4633      	mov	r3, r6
 800a08c:	4649      	mov	r1, r9
 800a08e:	4658      	mov	r0, fp
 800a090:	f000 fe14 	bl	800acbc <__ssputs_r>
 800a094:	3001      	adds	r0, #1
 800a096:	f000 80e7 	beq.w	800a268 <_svfwprintf_r+0x268>
 800a09a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a09c:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 800a0a0:	930d      	str	r3, [sp, #52]	; 0x34
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 80df 	beq.w	800a268 <_svfwprintf_r+0x268>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	1d21      	adds	r1, r4, #4
 800a0ae:	9315      	str	r3, [sp, #84]	; 0x54
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	f04f 34ff 	mov.w	r4, #4294967295
 800a0b6:	930c      	str	r3, [sp, #48]	; 0x30
 800a0b8:	461f      	mov	r7, r3
 800a0ba:	200a      	movs	r0, #10
 800a0bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0c0:	9609      	str	r6, [sp, #36]	; 0x24
 800a0c2:	910b      	str	r1, [sp, #44]	; 0x2c
 800a0c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0c6:	2939      	cmp	r1, #57	; 0x39
 800a0c8:	d84c      	bhi.n	800a164 <_svfwprintf_r+0x164>
 800a0ca:	291f      	cmp	r1, #31
 800a0cc:	d94f      	bls.n	800a16e <_svfwprintf_r+0x16e>
 800a0ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0d0:	3920      	subs	r1, #32
 800a0d2:	2919      	cmp	r1, #25
 800a0d4:	d84a      	bhi.n	800a16c <_svfwprintf_r+0x16c>
 800a0d6:	e8df f001 	tbb	[pc, r1]
 800a0da:	496b      	.short	0x496b
 800a0dc:	49497049 	.word	0x49497049
 800a0e0:	49494949 	.word	0x49494949
 800a0e4:	7a496c73 	.word	0x7a496c73
 800a0e8:	9a97497d 	.word	0x9a97497d
 800a0ec:	9a9a9a9a 	.word	0x9a9a9a9a
 800a0f0:	9a9a9a9a 	.word	0x9a9a9a9a
 800a0f4:	2933      	cmp	r1, #51	; 0x33
 800a0f6:	d839      	bhi.n	800a16c <_svfwprintf_r+0x16c>
 800a0f8:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a0fc:	003800e2 	.word	0x003800e2
 800a100:	003800e2 	.word	0x003800e2
 800a104:	00380038 	.word	0x00380038
 800a108:	009b0038 	.word	0x009b0038
 800a10c:	00380038 	.word	0x00380038
 800a110:	00380038 	.word	0x00380038
 800a114:	00380038 	.word	0x00380038
 800a118:	00380038 	.word	0x00380038
 800a11c:	00380038 	.word	0x00380038
 800a120:	031c0038 	.word	0x031c0038
 800a124:	00380038 	.word	0x00380038
 800a128:	00380038 	.word	0x00380038
 800a12c:	00380038 	.word	0x00380038
 800a130:	00380038 	.word	0x00380038
 800a134:	00380038 	.word	0x00380038
 800a138:	00d000a4 	.word	0x00d000a4
 800a13c:	00e200e2 	.word	0x00e200e2
 800a140:	009e00e2 	.word	0x009e00e2
 800a144:	003800d0 	.word	0x003800d0
 800a148:	00a10038 	.word	0x00a10038
 800a14c:	02820038 	.word	0x02820038
 800a150:	02b10293 	.word	0x02b10293
 800a154:	003800a1 	.word	0x003800a1
 800a158:	003802c0 	.word	0x003802c0
 800a15c:	00380310 	.word	0x00380310
 800a160:	00420038 	.word	0x00420038
 800a164:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a166:	3945      	subs	r1, #69	; 0x45
 800a168:	2933      	cmp	r1, #51	; 0x33
 800a16a:	d9c3      	bls.n	800a0f4 <_svfwprintf_r+0xf4>
 800a16c:	b113      	cbz	r3, 800a174 <_svfwprintf_r+0x174>
 800a16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a170:	2b00      	cmp	r3, #0
 800a172:	d079      	beq.n	800a268 <_svfwprintf_r+0x268>
 800a174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a176:	932a      	str	r3, [sp, #168]	; 0xa8
 800a178:	2300      	movs	r3, #0
 800a17a:	9315      	str	r3, [sp, #84]	; 0x54
 800a17c:	950a      	str	r5, [sp, #40]	; 0x28
 800a17e:	e080      	b.n	800a282 <_svfwprintf_r+0x282>
 800a180:	b103      	cbz	r3, 800a184 <_svfwprintf_r+0x184>
 800a182:	9215      	str	r2, [sp, #84]	; 0x54
 800a184:	4b44      	ldr	r3, [pc, #272]	; (800a298 <_svfwprintf_r+0x298>)
 800a186:	930f      	str	r3, [sp, #60]	; 0x3c
 800a188:	462a      	mov	r2, r5
 800a18a:	06f8      	lsls	r0, r7, #27
 800a18c:	f852 3b04 	ldr.w	r3, [r2], #4
 800a190:	920a      	str	r2, [sp, #40]	; 0x28
 800a192:	d402      	bmi.n	800a19a <_svfwprintf_r+0x19a>
 800a194:	0679      	lsls	r1, r7, #25
 800a196:	bf48      	it	mi
 800a198:	b29b      	uxthmi	r3, r3
 800a19a:	07fa      	lsls	r2, r7, #31
 800a19c:	d506      	bpl.n	800a1ac <_svfwprintf_r+0x1ac>
 800a19e:	b12b      	cbz	r3, 800a1ac <_svfwprintf_r+0x1ac>
 800a1a0:	2230      	movs	r2, #48	; 0x30
 800a1a2:	921a      	str	r2, [sp, #104]	; 0x68
 800a1a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1a6:	921b      	str	r2, [sp, #108]	; 0x6c
 800a1a8:	f047 0702 	orr.w	r7, r7, #2
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	e240      	b.n	800a632 <_svfwprintf_r+0x632>
 800a1b0:	b90a      	cbnz	r2, 800a1b6 <_svfwprintf_r+0x1b6>
 800a1b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1b8:	e780      	b.n	800a0bc <_svfwprintf_r+0xbc>
 800a1ba:	f047 0701 	orr.w	r7, r7, #1
 800a1be:	e7fa      	b.n	800a1b6 <_svfwprintf_r+0x1b6>
 800a1c0:	f855 1b04 	ldr.w	r1, [r5], #4
 800a1c4:	910c      	str	r1, [sp, #48]	; 0x30
 800a1c6:	2900      	cmp	r1, #0
 800a1c8:	daf5      	bge.n	800a1b6 <_svfwprintf_r+0x1b6>
 800a1ca:	4249      	negs	r1, r1
 800a1cc:	910c      	str	r1, [sp, #48]	; 0x30
 800a1ce:	f047 0704 	orr.w	r7, r7, #4
 800a1d2:	e7f0      	b.n	800a1b6 <_svfwprintf_r+0x1b6>
 800a1d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1d6:	f851 4b04 	ldr.w	r4, [r1], #4
 800a1da:	9409      	str	r4, [sp, #36]	; 0x24
 800a1dc:	2c2a      	cmp	r4, #42	; 0x2a
 800a1de:	d111      	bne.n	800a204 <_svfwprintf_r+0x204>
 800a1e0:	f855 4b04 	ldr.w	r4, [r5], #4
 800a1e4:	910b      	str	r1, [sp, #44]	; 0x2c
 800a1e6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800a1ea:	e7e4      	b.n	800a1b6 <_svfwprintf_r+0x1b6>
 800a1ec:	fb00 6404 	mla	r4, r0, r4, r6
 800a1f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1f4:	9609      	str	r6, [sp, #36]	; 0x24
 800a1f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1f8:	3e30      	subs	r6, #48	; 0x30
 800a1fa:	2e09      	cmp	r6, #9
 800a1fc:	d9f6      	bls.n	800a1ec <_svfwprintf_r+0x1ec>
 800a1fe:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800a202:	e75e      	b.n	800a0c2 <_svfwprintf_r+0xc2>
 800a204:	2400      	movs	r4, #0
 800a206:	e7f6      	b.n	800a1f6 <_svfwprintf_r+0x1f6>
 800a208:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 800a20c:	e7d3      	b.n	800a1b6 <_svfwprintf_r+0x1b6>
 800a20e:	2100      	movs	r1, #0
 800a210:	910c      	str	r1, [sp, #48]	; 0x30
 800a212:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a214:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a216:	fb00 1106 	mla	r1, r0, r6, r1
 800a21a:	3930      	subs	r1, #48	; 0x30
 800a21c:	910c      	str	r1, [sp, #48]	; 0x30
 800a21e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a220:	f851 6b04 	ldr.w	r6, [r1], #4
 800a224:	910b      	str	r1, [sp, #44]	; 0x2c
 800a226:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 800a22a:	2909      	cmp	r1, #9
 800a22c:	9609      	str	r6, [sp, #36]	; 0x24
 800a22e:	d9f0      	bls.n	800a212 <_svfwprintf_r+0x212>
 800a230:	e748      	b.n	800a0c4 <_svfwprintf_r+0xc4>
 800a232:	f047 0708 	orr.w	r7, r7, #8
 800a236:	e7be      	b.n	800a1b6 <_svfwprintf_r+0x1b6>
 800a238:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800a23c:	e7bb      	b.n	800a1b6 <_svfwprintf_r+0x1b6>
 800a23e:	f047 0710 	orr.w	r7, r7, #16
 800a242:	e7b8      	b.n	800a1b6 <_svfwprintf_r+0x1b6>
 800a244:	b103      	cbz	r3, 800a248 <_svfwprintf_r+0x248>
 800a246:	9215      	str	r2, [sp, #84]	; 0x54
 800a248:	462b      	mov	r3, r5
 800a24a:	06fd      	lsls	r5, r7, #27
 800a24c:	f853 0b04 	ldr.w	r0, [r3], #4
 800a250:	930a      	str	r3, [sp, #40]	; 0x28
 800a252:	d412      	bmi.n	800a27a <_svfwprintf_r+0x27a>
 800a254:	f000 fce8 	bl	800ac28 <btowc>
 800a258:	1c44      	adds	r4, r0, #1
 800a25a:	d10e      	bne.n	800a27a <_svfwprintf_r+0x27a>
 800a25c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a264:	f8a9 300c 	strh.w	r3, [r9, #12]
 800a268:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a26c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a272:	bf18      	it	ne
 800a274:	f04f 33ff 	movne.w	r3, #4294967295
 800a278:	e6e7      	b.n	800a04a <_svfwprintf_r+0x4a>
 800a27a:	2300      	movs	r3, #0
 800a27c:	902a      	str	r0, [sp, #168]	; 0xa8
 800a27e:	932b      	str	r3, [sp, #172]	; 0xac
 800a280:	9315      	str	r3, [sp, #84]	; 0x54
 800a282:	4698      	mov	r8, r3
 800a284:	2401      	movs	r4, #1
 800a286:	461e      	mov	r6, r3
 800a288:	461d      	mov	r5, r3
 800a28a:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800a28e:	e101      	b.n	800a494 <_svfwprintf_r+0x494>
	...
 800a298:	0800e168 	.word	0x0800e168
 800a29c:	b103      	cbz	r3, 800a2a0 <_svfwprintf_r+0x2a0>
 800a29e:	9215      	str	r2, [sp, #84]	; 0x54
 800a2a0:	462a      	mov	r2, r5
 800a2a2:	06f9      	lsls	r1, r7, #27
 800a2a4:	f852 3b04 	ldr.w	r3, [r2], #4
 800a2a8:	920a      	str	r2, [sp, #40]	; 0x28
 800a2aa:	d402      	bmi.n	800a2b2 <_svfwprintf_r+0x2b2>
 800a2ac:	067a      	lsls	r2, r7, #25
 800a2ae:	bf48      	it	mi
 800a2b0:	b21b      	sxthmi	r3, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	da02      	bge.n	800a2bc <_svfwprintf_r+0x2bc>
 800a2b6:	222d      	movs	r2, #45	; 0x2d
 800a2b8:	425b      	negs	r3, r3
 800a2ba:	9215      	str	r2, [sp, #84]	; 0x54
 800a2bc:	2201      	movs	r2, #1
 800a2be:	e1ba      	b.n	800a636 <_svfwprintf_r+0x636>
 800a2c0:	b103      	cbz	r3, 800a2c4 <_svfwprintf_r+0x2c4>
 800a2c2:	9215      	str	r2, [sp, #84]	; 0x54
 800a2c4:	3507      	adds	r5, #7
 800a2c6:	f025 0307 	bic.w	r3, r5, #7
 800a2ca:	ecb3 7b02 	vldmia	r3!, {d7}
 800a2ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a2d0:	eeb0 8a47 	vmov.f32	s16, s14
 800a2d4:	eef0 8a67 	vmov.f32	s17, s15
 800a2d8:	ee18 3a90 	vmov	r3, s17
 800a2dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2e0:	ee09 3a90 	vmov	s19, r3
 800a2e4:	eeb0 9a47 	vmov.f32	s18, s14
 800a2e8:	4ba6      	ldr	r3, [pc, #664]	; (800a584 <_svfwprintf_r+0x584>)
 800a2ea:	ec51 0b19 	vmov	r0, r1, d9
 800a2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f2:	f7f6 fc1b 	bl	8000b2c <__aeabi_dcmpun>
 800a2f6:	b9f0      	cbnz	r0, 800a336 <_svfwprintf_r+0x336>
 800a2f8:	4ba2      	ldr	r3, [pc, #648]	; (800a584 <_svfwprintf_r+0x584>)
 800a2fa:	ec51 0b19 	vmov	r0, r1, d9
 800a2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a302:	f7f6 fbf5 	bl	8000af0 <__aeabi_dcmple>
 800a306:	b9b0      	cbnz	r0, 800a336 <_svfwprintf_r+0x336>
 800a308:	ec51 0b18 	vmov	r0, r1, d8
 800a30c:	2200      	movs	r2, #0
 800a30e:	2300      	movs	r3, #0
 800a310:	f7f6 fbe4 	bl	8000adc <__aeabi_dcmplt>
 800a314:	b108      	cbz	r0, 800a31a <_svfwprintf_r+0x31a>
 800a316:	232d      	movs	r3, #45	; 0x2d
 800a318:	9315      	str	r3, [sp, #84]	; 0x54
 800a31a:	4a9b      	ldr	r2, [pc, #620]	; (800a588 <_svfwprintf_r+0x588>)
 800a31c:	4b9b      	ldr	r3, [pc, #620]	; (800a58c <_svfwprintf_r+0x58c>)
 800a31e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a320:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 800a324:	2947      	cmp	r1, #71	; 0x47
 800a326:	bf94      	ite	ls
 800a328:	4692      	movls	sl, r2
 800a32a:	469a      	movhi	sl, r3
 800a32c:	f04f 0800 	mov.w	r8, #0
 800a330:	2403      	movs	r4, #3
 800a332:	4646      	mov	r6, r8
 800a334:	e3d4      	b.n	800aae0 <_svfwprintf_r+0xae0>
 800a336:	ec53 2b18 	vmov	r2, r3, d8
 800a33a:	ec51 0b18 	vmov	r0, r1, d8
 800a33e:	f7f6 fbf5 	bl	8000b2c <__aeabi_dcmpun>
 800a342:	b140      	cbz	r0, 800a356 <_svfwprintf_r+0x356>
 800a344:	ee18 3a90 	vmov	r3, s17
 800a348:	2b00      	cmp	r3, #0
 800a34a:	bfbc      	itt	lt
 800a34c:	232d      	movlt	r3, #45	; 0x2d
 800a34e:	9315      	strlt	r3, [sp, #84]	; 0x54
 800a350:	4a8f      	ldr	r2, [pc, #572]	; (800a590 <_svfwprintf_r+0x590>)
 800a352:	4b90      	ldr	r3, [pc, #576]	; (800a594 <_svfwprintf_r+0x594>)
 800a354:	e7e3      	b.n	800a31e <_svfwprintf_r+0x31e>
 800a356:	1c63      	adds	r3, r4, #1
 800a358:	f000 810e 	beq.w	800a578 <_svfwprintf_r+0x578>
 800a35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a35e:	f023 0320 	bic.w	r3, r3, #32
 800a362:	2b47      	cmp	r3, #71	; 0x47
 800a364:	d102      	bne.n	800a36c <_svfwprintf_r+0x36c>
 800a366:	2c00      	cmp	r4, #0
 800a368:	bf08      	it	eq
 800a36a:	2401      	moveq	r4, #1
 800a36c:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 800a370:	930e      	str	r3, [sp, #56]	; 0x38
 800a372:	2328      	movs	r3, #40	; 0x28
 800a374:	9307      	str	r3, [sp, #28]
 800a376:	ab19      	add	r3, sp, #100	; 0x64
 800a378:	9305      	str	r3, [sp, #20]
 800a37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a37c:	9304      	str	r3, [sp, #16]
 800a37e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a380:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800a384:	ae18      	add	r6, sp, #96	; 0x60
 800a386:	ad17      	add	r5, sp, #92	; 0x5c
 800a388:	e9cd 4300 	strd	r4, r3, [sp]
 800a38c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a390:	ec53 2b18 	vmov	r2, r3, d8
 800a394:	9603      	str	r6, [sp, #12]
 800a396:	9502      	str	r5, [sp, #8]
 800a398:	4658      	mov	r0, fp
 800a39a:	f7ff fdc1 	bl	8009f20 <wcvt>
 800a39e:	4540      	cmp	r0, r8
 800a3a0:	4682      	mov	sl, r0
 800a3a2:	f040 80eb 	bne.w	800a57c <_svfwprintf_r+0x57c>
 800a3a6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a3a8:	2928      	cmp	r1, #40	; 0x28
 800a3aa:	f340 80e7 	ble.w	800a57c <_svfwprintf_r+0x57c>
 800a3ae:	0089      	lsls	r1, r1, #2
 800a3b0:	4658      	mov	r0, fp
 800a3b2:	f7ff f94b 	bl	800964c <_malloc_r>
 800a3b6:	4680      	mov	r8, r0
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	f43f af4f 	beq.w	800a25c <_svfwprintf_r+0x25c>
 800a3be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3c0:	9502      	str	r5, [sp, #8]
 800a3c2:	e9cd 0306 	strd	r0, r3, [sp, #24]
 800a3c6:	ab19      	add	r3, sp, #100	; 0x64
 800a3c8:	9305      	str	r3, [sp, #20]
 800a3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3cc:	e9cd 6303 	strd	r6, r3, [sp, #12]
 800a3d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3d2:	4658      	mov	r0, fp
 800a3d4:	e9cd 4300 	strd	r4, r3, [sp]
 800a3d8:	ec53 2b18 	vmov	r2, r3, d8
 800a3dc:	f7ff fda0 	bl	8009f20 <wcvt>
 800a3e0:	4682      	mov	sl, r0
 800a3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800a3e6:	f023 0320 	bic.w	r3, r3, #32
 800a3ea:	2b47      	cmp	r3, #71	; 0x47
 800a3ec:	f040 80d6 	bne.w	800a59c <_svfwprintf_r+0x59c>
 800a3f0:	1cee      	adds	r6, r5, #3
 800a3f2:	db02      	blt.n	800a3fa <_svfwprintf_r+0x3fa>
 800a3f4:	42ac      	cmp	r4, r5
 800a3f6:	f280 80e9 	bge.w	800a5cc <_svfwprintf_r+0x5cc>
 800a3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3fc:	3b02      	subs	r3, #2
 800a3fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a400:	1e6b      	subs	r3, r5, #1
 800a402:	2b00      	cmp	r3, #0
 800a404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a406:	9318      	str	r3, [sp, #96]	; 0x60
 800a408:	bfb8      	it	lt
 800a40a:	f1c5 0301 	rsblt	r3, r5, #1
 800a40e:	921c      	str	r2, [sp, #112]	; 0x70
 800a410:	bfb4      	ite	lt
 800a412:	222d      	movlt	r2, #45	; 0x2d
 800a414:	222b      	movge	r2, #43	; 0x2b
 800a416:	2b09      	cmp	r3, #9
 800a418:	921d      	str	r2, [sp, #116]	; 0x74
 800a41a:	f340 80d1 	ble.w	800a5c0 <_svfwprintf_r+0x5c0>
 800a41e:	a92a      	add	r1, sp, #168	; 0xa8
 800a420:	250a      	movs	r5, #10
 800a422:	460a      	mov	r2, r1
 800a424:	fb93 f4f5 	sdiv	r4, r3, r5
 800a428:	fb05 3014 	mls	r0, r5, r4, r3
 800a42c:	3030      	adds	r0, #48	; 0x30
 800a42e:	f842 0c04 	str.w	r0, [r2, #-4]
 800a432:	4618      	mov	r0, r3
 800a434:	2863      	cmp	r0, #99	; 0x63
 800a436:	f1a1 0104 	sub.w	r1, r1, #4
 800a43a:	4623      	mov	r3, r4
 800a43c:	dcf1      	bgt.n	800a422 <_svfwprintf_r+0x422>
 800a43e:	3330      	adds	r3, #48	; 0x30
 800a440:	f841 3c04 	str.w	r3, [r1, #-4]
 800a444:	f1a2 0008 	sub.w	r0, r2, #8
 800a448:	ab1d      	add	r3, sp, #116	; 0x74
 800a44a:	a92a      	add	r1, sp, #168	; 0xa8
 800a44c:	4288      	cmp	r0, r1
 800a44e:	f0c0 80b2 	bcc.w	800a5b6 <_svfwprintf_r+0x5b6>
 800a452:	f10d 03b3 	add.w	r3, sp, #179	; 0xb3
 800a456:	1a9b      	subs	r3, r3, r2
 800a458:	f023 0303 	bic.w	r3, r3, #3
 800a45c:	3a0b      	subs	r2, #11
 800a45e:	428a      	cmp	r2, r1
 800a460:	bf88      	it	hi
 800a462:	2300      	movhi	r3, #0
 800a464:	aa1e      	add	r2, sp, #120	; 0x78
 800a466:	18d4      	adds	r4, r2, r3
 800a468:	ab1c      	add	r3, sp, #112	; 0x70
 800a46a:	1ae4      	subs	r4, r4, r3
 800a46c:	10a3      	asrs	r3, r4, #2
 800a46e:	9311      	str	r3, [sp, #68]	; 0x44
 800a470:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a472:	2b01      	cmp	r3, #1
 800a474:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 800a478:	dc02      	bgt.n	800a480 <_svfwprintf_r+0x480>
 800a47a:	f017 0501 	ands.w	r5, r7, #1
 800a47e:	d001      	beq.n	800a484 <_svfwprintf_r+0x484>
 800a480:	3401      	adds	r4, #1
 800a482:	2500      	movs	r5, #0
 800a484:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a486:	2e00      	cmp	r6, #0
 800a488:	f000 8180 	beq.w	800a78c <_svfwprintf_r+0x78c>
 800a48c:	232d      	movs	r3, #45	; 0x2d
 800a48e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a490:	9315      	str	r3, [sp, #84]	; 0x54
 800a492:	2600      	movs	r6, #0
 800a494:	42a6      	cmp	r6, r4
 800a496:	4633      	mov	r3, r6
 800a498:	bfb8      	it	lt
 800a49a:	4623      	movlt	r3, r4
 800a49c:	930e      	str	r3, [sp, #56]	; 0x38
 800a49e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4a0:	b113      	cbz	r3, 800a4a8 <_svfwprintf_r+0x4a8>
 800a4a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	930e      	str	r3, [sp, #56]	; 0x38
 800a4a8:	f017 0302 	ands.w	r3, r7, #2
 800a4ac:	9312      	str	r3, [sp, #72]	; 0x48
 800a4ae:	bf1e      	ittt	ne
 800a4b0:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 800a4b2:	3302      	addne	r3, #2
 800a4b4:	930e      	strne	r3, [sp, #56]	; 0x38
 800a4b6:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 800a4ba:	9313      	str	r3, [sp, #76]	; 0x4c
 800a4bc:	f000 8168 	beq.w	800a790 <_svfwprintf_r+0x790>
 800a4c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4c2:	b143      	cbz	r3, 800a4d6 <_svfwprintf_r+0x4d6>
 800a4c4:	2304      	movs	r3, #4
 800a4c6:	aa15      	add	r2, sp, #84	; 0x54
 800a4c8:	4649      	mov	r1, r9
 800a4ca:	4658      	mov	r0, fp
 800a4cc:	f000 fbf6 	bl	800acbc <__ssputs_r>
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	f000 8170 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800a4d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4d8:	b143      	cbz	r3, 800a4ec <_svfwprintf_r+0x4ec>
 800a4da:	2308      	movs	r3, #8
 800a4dc:	aa1a      	add	r2, sp, #104	; 0x68
 800a4de:	4649      	mov	r1, r9
 800a4e0:	4658      	mov	r0, fp
 800a4e2:	f000 fbeb 	bl	800acbc <__ssputs_r>
 800a4e6:	3001      	adds	r0, #1
 800a4e8:	f000 8165 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800a4ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4ee:	2b80      	cmp	r3, #128	; 0x80
 800a4f0:	d113      	bne.n	800a51a <_svfwprintf_r+0x51a>
 800a4f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4f6:	1a9b      	subs	r3, r3, r2
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	9310      	str	r3, [sp, #64]	; 0x40
 800a4fc:	dd0d      	ble.n	800a51a <_svfwprintf_r+0x51a>
 800a4fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a500:	4a25      	ldr	r2, [pc, #148]	; (800a598 <_svfwprintf_r+0x598>)
 800a502:	2b10      	cmp	r3, #16
 800a504:	f300 816c 	bgt.w	800a7e0 <_svfwprintf_r+0x7e0>
 800a508:	4a23      	ldr	r2, [pc, #140]	; (800a598 <_svfwprintf_r+0x598>)
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	4649      	mov	r1, r9
 800a50e:	4658      	mov	r0, fp
 800a510:	f000 fbd4 	bl	800acbc <__ssputs_r>
 800a514:	3001      	adds	r0, #1
 800a516:	f000 814e 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800a51a:	1b36      	subs	r6, r6, r4
 800a51c:	2e00      	cmp	r6, #0
 800a51e:	dd0c      	ble.n	800a53a <_svfwprintf_r+0x53a>
 800a520:	2e10      	cmp	r6, #16
 800a522:	4a1d      	ldr	r2, [pc, #116]	; (800a598 <_svfwprintf_r+0x598>)
 800a524:	f300 8167 	bgt.w	800a7f6 <_svfwprintf_r+0x7f6>
 800a528:	4a1b      	ldr	r2, [pc, #108]	; (800a598 <_svfwprintf_r+0x598>)
 800a52a:	00b3      	lsls	r3, r6, #2
 800a52c:	4649      	mov	r1, r9
 800a52e:	4658      	mov	r0, fp
 800a530:	f000 fbc4 	bl	800acbc <__ssputs_r>
 800a534:	3001      	adds	r0, #1
 800a536:	f000 813e 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800a53a:	05f9      	lsls	r1, r7, #23
 800a53c:	f100 8164 	bmi.w	800a808 <_svfwprintf_r+0x808>
 800a540:	00a3      	lsls	r3, r4, #2
 800a542:	4652      	mov	r2, sl
 800a544:	4649      	mov	r1, r9
 800a546:	4658      	mov	r0, fp
 800a548:	f000 fbb8 	bl	800acbc <__ssputs_r>
 800a54c:	3001      	adds	r0, #1
 800a54e:	f000 8132 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800a552:	077a      	lsls	r2, r7, #29
 800a554:	f100 8282 	bmi.w	800aa5c <_svfwprintf_r+0xa5c>
 800a558:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a55c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a55e:	428a      	cmp	r2, r1
 800a560:	bfac      	ite	ge
 800a562:	189b      	addge	r3, r3, r2
 800a564:	185b      	addlt	r3, r3, r1
 800a566:	930d      	str	r3, [sp, #52]	; 0x34
 800a568:	f1b8 0f00 	cmp.w	r8, #0
 800a56c:	d057      	beq.n	800a61e <_svfwprintf_r+0x61e>
 800a56e:	4641      	mov	r1, r8
 800a570:	4658      	mov	r0, fp
 800a572:	f7fe fff7 	bl	8009564 <_free_r>
 800a576:	e052      	b.n	800a61e <_svfwprintf_r+0x61e>
 800a578:	2406      	movs	r4, #6
 800a57a:	e6f7      	b.n	800a36c <_svfwprintf_r+0x36c>
 800a57c:	f04f 0800 	mov.w	r8, #0
 800a580:	e72f      	b.n	800a3e2 <_svfwprintf_r+0x3e2>
 800a582:	bf00      	nop
 800a584:	7fefffff 	.word	0x7fefffff
 800a588:	0800e0e4 	.word	0x0800e0e4
 800a58c:	0800e0f4 	.word	0x0800e0f4
 800a590:	0800e104 	.word	0x0800e104
 800a594:	0800e114 	.word	0x0800e114
 800a598:	0800e1f4 	.word	0x0800e1f4
 800a59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a59e:	2b66      	cmp	r3, #102	; 0x66
 800a5a0:	f47f af2e 	bne.w	800a400 <_svfwprintf_r+0x400>
 800a5a4:	f007 0301 	and.w	r3, r7, #1
 800a5a8:	2d00      	cmp	r5, #0
 800a5aa:	ea43 0304 	orr.w	r3, r3, r4
 800a5ae:	dc17      	bgt.n	800a5e0 <_svfwprintf_r+0x5e0>
 800a5b0:	b313      	cbz	r3, 800a5f8 <_svfwprintf_r+0x5f8>
 800a5b2:	3402      	adds	r4, #2
 800a5b4:	e766      	b.n	800a484 <_svfwprintf_r+0x484>
 800a5b6:	f850 4b04 	ldr.w	r4, [r0], #4
 800a5ba:	f843 4f04 	str.w	r4, [r3, #4]!
 800a5be:	e745      	b.n	800a44c <_svfwprintf_r+0x44c>
 800a5c0:	2230      	movs	r2, #48	; 0x30
 800a5c2:	4413      	add	r3, r2
 800a5c4:	921e      	str	r2, [sp, #120]	; 0x78
 800a5c6:	931f      	str	r3, [sp, #124]	; 0x7c
 800a5c8:	ac20      	add	r4, sp, #128	; 0x80
 800a5ca:	e74d      	b.n	800a468 <_svfwprintf_r+0x468>
 800a5cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a5ce:	42ab      	cmp	r3, r5
 800a5d0:	dd0a      	ble.n	800a5e8 <_svfwprintf_r+0x5e8>
 800a5d2:	2d00      	cmp	r5, #0
 800a5d4:	bfd4      	ite	le
 800a5d6:	f1c5 0402 	rsble	r4, r5, #2
 800a5da:	2401      	movgt	r4, #1
 800a5dc:	441c      	add	r4, r3
 800a5de:	e006      	b.n	800a5ee <_svfwprintf_r+0x5ee>
 800a5e0:	b143      	cbz	r3, 800a5f4 <_svfwprintf_r+0x5f4>
 800a5e2:	3401      	adds	r4, #1
 800a5e4:	442c      	add	r4, r5
 800a5e6:	e74d      	b.n	800a484 <_svfwprintf_r+0x484>
 800a5e8:	07fc      	lsls	r4, r7, #31
 800a5ea:	d507      	bpl.n	800a5fc <_svfwprintf_r+0x5fc>
 800a5ec:	1c6c      	adds	r4, r5, #1
 800a5ee:	2367      	movs	r3, #103	; 0x67
 800a5f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f2:	e747      	b.n	800a484 <_svfwprintf_r+0x484>
 800a5f4:	462c      	mov	r4, r5
 800a5f6:	e745      	b.n	800a484 <_svfwprintf_r+0x484>
 800a5f8:	2401      	movs	r4, #1
 800a5fa:	e743      	b.n	800a484 <_svfwprintf_r+0x484>
 800a5fc:	462c      	mov	r4, r5
 800a5fe:	e7f6      	b.n	800a5ee <_svfwprintf_r+0x5ee>
 800a600:	b103      	cbz	r3, 800a604 <_svfwprintf_r+0x604>
 800a602:	9215      	str	r2, [sp, #84]	; 0x54
 800a604:	1d2b      	adds	r3, r5, #4
 800a606:	06f8      	lsls	r0, r7, #27
 800a608:	930a      	str	r3, [sp, #40]	; 0x28
 800a60a:	d503      	bpl.n	800a614 <_svfwprintf_r+0x614>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a610:	601a      	str	r2, [r3, #0]
 800a612:	e004      	b.n	800a61e <_svfwprintf_r+0x61e>
 800a614:	0679      	lsls	r1, r7, #25
 800a616:	d5f9      	bpl.n	800a60c <_svfwprintf_r+0x60c>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a61c:	801a      	strh	r2, [r3, #0]
 800a61e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a620:	e527      	b.n	800a072 <_svfwprintf_r+0x72>
 800a622:	462a      	mov	r2, r5
 800a624:	f017 0110 	ands.w	r1, r7, #16
 800a628:	f852 3b04 	ldr.w	r3, [r2], #4
 800a62c:	920a      	str	r2, [sp, #40]	; 0x28
 800a62e:	d011      	beq.n	800a654 <_svfwprintf_r+0x654>
 800a630:	2200      	movs	r2, #0
 800a632:	2100      	movs	r1, #0
 800a634:	9115      	str	r1, [sp, #84]	; 0x54
 800a636:	1c66      	adds	r6, r4, #1
 800a638:	f000 822d 	beq.w	800aa96 <_svfwprintf_r+0xa96>
 800a63c:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 800a640:	2b00      	cmp	r3, #0
 800a642:	f040 822c 	bne.w	800aa9e <_svfwprintf_r+0xa9e>
 800a646:	2c00      	cmp	r4, #0
 800a648:	f000 8098 	beq.w	800a77c <_svfwprintf_r+0x77c>
 800a64c:	2a01      	cmp	r2, #1
 800a64e:	f040 8229 	bne.w	800aaa4 <_svfwprintf_r+0xaa4>
 800a652:	e075      	b.n	800a740 <_svfwprintf_r+0x740>
 800a654:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 800a658:	d0eb      	beq.n	800a632 <_svfwprintf_r+0x632>
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	e7e8      	b.n	800a630 <_svfwprintf_r+0x630>
 800a65e:	462a      	mov	r2, r5
 800a660:	2178      	movs	r1, #120	; 0x78
 800a662:	f852 3b04 	ldr.w	r3, [r2], #4
 800a666:	920a      	str	r2, [sp, #40]	; 0x28
 800a668:	2230      	movs	r2, #48	; 0x30
 800a66a:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 800a66e:	4a9e      	ldr	r2, [pc, #632]	; (800a8e8 <_svfwprintf_r+0x8e8>)
 800a670:	920f      	str	r2, [sp, #60]	; 0x3c
 800a672:	f047 0702 	orr.w	r7, r7, #2
 800a676:	2202      	movs	r2, #2
 800a678:	9109      	str	r1, [sp, #36]	; 0x24
 800a67a:	e7da      	b.n	800a632 <_svfwprintf_r+0x632>
 800a67c:	462b      	mov	r3, r5
 800a67e:	2600      	movs	r6, #0
 800a680:	f853 ab04 	ldr.w	sl, [r3], #4
 800a684:	930a      	str	r3, [sp, #40]	; 0x28
 800a686:	f017 0510 	ands.w	r5, r7, #16
 800a68a:	9615      	str	r6, [sp, #84]	; 0x54
 800a68c:	d12d      	bne.n	800a6ea <_svfwprintf_r+0x6ea>
 800a68e:	1c62      	adds	r2, r4, #1
 800a690:	d014      	beq.n	800a6bc <_svfwprintf_r+0x6bc>
 800a692:	4622      	mov	r2, r4
 800a694:	4629      	mov	r1, r5
 800a696:	4650      	mov	r0, sl
 800a698:	4626      	mov	r6, r4
 800a69a:	f7f5 fd99 	bl	80001d0 <memchr>
 800a69e:	b108      	cbz	r0, 800a6a4 <_svfwprintf_r+0x6a4>
 800a6a0:	eba0 060a 	sub.w	r6, r0, sl
 800a6a4:	2e27      	cmp	r6, #39	; 0x27
 800a6a6:	d90e      	bls.n	800a6c6 <_svfwprintf_r+0x6c6>
 800a6a8:	1c71      	adds	r1, r6, #1
 800a6aa:	0089      	lsls	r1, r1, #2
 800a6ac:	4658      	mov	r0, fp
 800a6ae:	f7fe ffcd 	bl	800964c <_malloc_r>
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	f43f add2 	beq.w	800a25c <_svfwprintf_r+0x25c>
 800a6b8:	4680      	mov	r8, r0
 800a6ba:	e007      	b.n	800a6cc <_svfwprintf_r+0x6cc>
 800a6bc:	4650      	mov	r0, sl
 800a6be:	f7f5 fdd7 	bl	8000270 <strlen>
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	e7ee      	b.n	800a6a4 <_svfwprintf_r+0x6a4>
 800a6c6:	f04f 0800 	mov.w	r8, #0
 800a6ca:	a82a      	add	r0, sp, #168	; 0xa8
 800a6cc:	4634      	mov	r4, r6
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	42b3      	cmp	r3, r6
 800a6d2:	d104      	bne.n	800a6de <_svfwprintf_r+0x6de>
 800a6d4:	2600      	movs	r6, #0
 800a6d6:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800a6da:	4682      	mov	sl, r0
 800a6dc:	e6da      	b.n	800a494 <_svfwprintf_r+0x494>
 800a6de:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800a6e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	e7f2      	b.n	800a6d0 <_svfwprintf_r+0x6d0>
 800a6ea:	1c63      	adds	r3, r4, #1
 800a6ec:	d011      	beq.n	800a712 <_svfwprintf_r+0x712>
 800a6ee:	4622      	mov	r2, r4
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	4650      	mov	r0, sl
 800a6f4:	f000 fa03 	bl	800aafe <wmemchr>
 800a6f8:	4680      	mov	r8, r0
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	f43f ae19 	beq.w	800a332 <_svfwprintf_r+0x332>
 800a700:	eba0 080a 	sub.w	r8, r0, sl
 800a704:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800a708:	4544      	cmp	r4, r8
 800a70a:	bfa8      	it	ge
 800a70c:	4644      	movge	r4, r8
 800a70e:	46b0      	mov	r8, r6
 800a710:	e60f      	b.n	800a332 <_svfwprintf_r+0x332>
 800a712:	4650      	mov	r0, sl
 800a714:	f000 f9ea 	bl	800aaec <wcslen>
 800a718:	4604      	mov	r4, r0
 800a71a:	e7f8      	b.n	800a70e <_svfwprintf_r+0x70e>
 800a71c:	462a      	mov	r2, r5
 800a71e:	06fe      	lsls	r6, r7, #27
 800a720:	f852 3b04 	ldr.w	r3, [r2], #4
 800a724:	920a      	str	r2, [sp, #40]	; 0x28
 800a726:	d501      	bpl.n	800a72c <_svfwprintf_r+0x72c>
 800a728:	2201      	movs	r2, #1
 800a72a:	e782      	b.n	800a632 <_svfwprintf_r+0x632>
 800a72c:	067d      	lsls	r5, r7, #25
 800a72e:	bf48      	it	mi
 800a730:	b29b      	uxthmi	r3, r3
 800a732:	e7f9      	b.n	800a728 <_svfwprintf_r+0x728>
 800a734:	b103      	cbz	r3, 800a738 <_svfwprintf_r+0x738>
 800a736:	9215      	str	r2, [sp, #84]	; 0x54
 800a738:	4b6c      	ldr	r3, [pc, #432]	; (800a8ec <_svfwprintf_r+0x8ec>)
 800a73a:	e524      	b.n	800a186 <_svfwprintf_r+0x186>
 800a73c:	2b09      	cmp	r3, #9
 800a73e:	d804      	bhi.n	800a74a <_svfwprintf_r+0x74a>
 800a740:	3330      	adds	r3, #48	; 0x30
 800a742:	9351      	str	r3, [sp, #324]	; 0x144
 800a744:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 800a748:	e1c2      	b.n	800aad0 <_svfwprintf_r+0xad0>
 800a74a:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800a74e:	250a      	movs	r5, #10
 800a750:	fbb3 f0f5 	udiv	r0, r3, r5
 800a754:	fb05 3210 	mls	r2, r5, r0, r3
 800a758:	3230      	adds	r2, #48	; 0x30
 800a75a:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800a75e:	461a      	mov	r2, r3
 800a760:	2a09      	cmp	r2, #9
 800a762:	4603      	mov	r3, r0
 800a764:	d8f4      	bhi.n	800a750 <_svfwprintf_r+0x750>
 800a766:	e1b3      	b.n	800aad0 <_svfwprintf_r+0xad0>
 800a768:	f003 020f 	and.w	r2, r3, #15
 800a76c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a76e:	091b      	lsrs	r3, r3, #4
 800a770:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a774:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800a778:	d1f6      	bne.n	800a768 <_svfwprintf_r+0x768>
 800a77a:	e1a9      	b.n	800aad0 <_svfwprintf_r+0xad0>
 800a77c:	b91a      	cbnz	r2, 800a786 <_svfwprintf_r+0x786>
 800a77e:	07f8      	lsls	r0, r7, #31
 800a780:	d501      	bpl.n	800a786 <_svfwprintf_r+0x786>
 800a782:	2330      	movs	r3, #48	; 0x30
 800a784:	e7dd      	b.n	800a742 <_svfwprintf_r+0x742>
 800a786:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800a78a:	e1a1      	b.n	800aad0 <_svfwprintf_r+0xad0>
 800a78c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a78e:	e681      	b.n	800a494 <_svfwprintf_r+0x494>
 800a790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a792:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a794:	1a9b      	subs	r3, r3, r2
 800a796:	2b00      	cmp	r3, #0
 800a798:	9310      	str	r3, [sp, #64]	; 0x40
 800a79a:	f77f ae91 	ble.w	800a4c0 <_svfwprintf_r+0x4c0>
 800a79e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7a0:	2b10      	cmp	r3, #16
 800a7a2:	dc11      	bgt.n	800a7c8 <_svfwprintf_r+0x7c8>
 800a7a4:	4a52      	ldr	r2, [pc, #328]	; (800a8f0 <_svfwprintf_r+0x8f0>)
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	4658      	mov	r0, fp
 800a7ac:	f000 fa86 	bl	800acbc <__ssputs_r>
 800a7b0:	3001      	adds	r0, #1
 800a7b2:	f47f ae85 	bne.w	800a4c0 <_svfwprintf_r+0x4c0>
 800a7b6:	f1b8 0f00 	cmp.w	r8, #0
 800a7ba:	f43f ad55 	beq.w	800a268 <_svfwprintf_r+0x268>
 800a7be:	4641      	mov	r1, r8
 800a7c0:	4658      	mov	r0, fp
 800a7c2:	f7fe fecf 	bl	8009564 <_free_r>
 800a7c6:	e54f      	b.n	800a268 <_svfwprintf_r+0x268>
 800a7c8:	4a49      	ldr	r2, [pc, #292]	; (800a8f0 <_svfwprintf_r+0x8f0>)
 800a7ca:	2340      	movs	r3, #64	; 0x40
 800a7cc:	4649      	mov	r1, r9
 800a7ce:	4658      	mov	r0, fp
 800a7d0:	f000 fa74 	bl	800acbc <__ssputs_r>
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	d0ee      	beq.n	800a7b6 <_svfwprintf_r+0x7b6>
 800a7d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7da:	3b10      	subs	r3, #16
 800a7dc:	9310      	str	r3, [sp, #64]	; 0x40
 800a7de:	e7de      	b.n	800a79e <_svfwprintf_r+0x79e>
 800a7e0:	2340      	movs	r3, #64	; 0x40
 800a7e2:	4649      	mov	r1, r9
 800a7e4:	4658      	mov	r0, fp
 800a7e6:	f000 fa69 	bl	800acbc <__ssputs_r>
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	d0e3      	beq.n	800a7b6 <_svfwprintf_r+0x7b6>
 800a7ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7f0:	3b10      	subs	r3, #16
 800a7f2:	9310      	str	r3, [sp, #64]	; 0x40
 800a7f4:	e683      	b.n	800a4fe <_svfwprintf_r+0x4fe>
 800a7f6:	2340      	movs	r3, #64	; 0x40
 800a7f8:	4649      	mov	r1, r9
 800a7fa:	4658      	mov	r0, fp
 800a7fc:	f000 fa5e 	bl	800acbc <__ssputs_r>
 800a800:	3001      	adds	r0, #1
 800a802:	d0d8      	beq.n	800a7b6 <_svfwprintf_r+0x7b6>
 800a804:	3e10      	subs	r6, #16
 800a806:	e68b      	b.n	800a520 <_svfwprintf_r+0x520>
 800a808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80a:	2b65      	cmp	r3, #101	; 0x65
 800a80c:	f240 80e4 	bls.w	800a9d8 <_svfwprintf_r+0x9d8>
 800a810:	ec51 0b18 	vmov	r0, r1, d8
 800a814:	2200      	movs	r2, #0
 800a816:	2300      	movs	r3, #0
 800a818:	f7f6 f956 	bl	8000ac8 <__aeabi_dcmpeq>
 800a81c:	b358      	cbz	r0, 800a876 <_svfwprintf_r+0x876>
 800a81e:	4a35      	ldr	r2, [pc, #212]	; (800a8f4 <_svfwprintf_r+0x8f4>)
 800a820:	2304      	movs	r3, #4
 800a822:	4649      	mov	r1, r9
 800a824:	4658      	mov	r0, fp
 800a826:	f000 fa49 	bl	800acbc <__ssputs_r>
 800a82a:	3001      	adds	r0, #1
 800a82c:	d0c3      	beq.n	800a7b6 <_svfwprintf_r+0x7b6>
 800a82e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a832:	429a      	cmp	r2, r3
 800a834:	db02      	blt.n	800a83c <_svfwprintf_r+0x83c>
 800a836:	07fb      	lsls	r3, r7, #31
 800a838:	f57f ae8b 	bpl.w	800a552 <_svfwprintf_r+0x552>
 800a83c:	2304      	movs	r3, #4
 800a83e:	aa16      	add	r2, sp, #88	; 0x58
 800a840:	4649      	mov	r1, r9
 800a842:	4658      	mov	r0, fp
 800a844:	f000 fa3a 	bl	800acbc <__ssputs_r>
 800a848:	3001      	adds	r0, #1
 800a84a:	d0b4      	beq.n	800a7b6 <_svfwprintf_r+0x7b6>
 800a84c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800a84e:	3c01      	subs	r4, #1
 800a850:	2c00      	cmp	r4, #0
 800a852:	f77f ae7e 	ble.w	800a552 <_svfwprintf_r+0x552>
 800a856:	4d28      	ldr	r5, [pc, #160]	; (800a8f8 <_svfwprintf_r+0x8f8>)
 800a858:	2c10      	cmp	r4, #16
 800a85a:	dc02      	bgt.n	800a862 <_svfwprintf_r+0x862>
 800a85c:	00a3      	lsls	r3, r4, #2
 800a85e:	4a26      	ldr	r2, [pc, #152]	; (800a8f8 <_svfwprintf_r+0x8f8>)
 800a860:	e670      	b.n	800a544 <_svfwprintf_r+0x544>
 800a862:	2340      	movs	r3, #64	; 0x40
 800a864:	462a      	mov	r2, r5
 800a866:	4649      	mov	r1, r9
 800a868:	4658      	mov	r0, fp
 800a86a:	f000 fa27 	bl	800acbc <__ssputs_r>
 800a86e:	3001      	adds	r0, #1
 800a870:	d0a1      	beq.n	800a7b6 <_svfwprintf_r+0x7b6>
 800a872:	3c10      	subs	r4, #16
 800a874:	e7f0      	b.n	800a858 <_svfwprintf_r+0x858>
 800a876:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a878:	2b00      	cmp	r3, #0
 800a87a:	dc3f      	bgt.n	800a8fc <_svfwprintf_r+0x8fc>
 800a87c:	4a1d      	ldr	r2, [pc, #116]	; (800a8f4 <_svfwprintf_r+0x8f4>)
 800a87e:	2304      	movs	r3, #4
 800a880:	4649      	mov	r1, r9
 800a882:	4658      	mov	r0, fp
 800a884:	f000 fa1a 	bl	800acbc <__ssputs_r>
 800a888:	3001      	adds	r0, #1
 800a88a:	d094      	beq.n	800a7b6 <_svfwprintf_r+0x7b6>
 800a88c:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 800a890:	4313      	orrs	r3, r2
 800a892:	f007 0201 	and.w	r2, r7, #1
 800a896:	4313      	orrs	r3, r2
 800a898:	f43f ae5b 	beq.w	800a552 <_svfwprintf_r+0x552>
 800a89c:	2304      	movs	r3, #4
 800a89e:	aa16      	add	r2, sp, #88	; 0x58
 800a8a0:	4649      	mov	r1, r9
 800a8a2:	4658      	mov	r0, fp
 800a8a4:	f000 fa0a 	bl	800acbc <__ssputs_r>
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d084      	beq.n	800a7b6 <_svfwprintf_r+0x7b6>
 800a8ac:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a8ae:	2c00      	cmp	r4, #0
 800a8b0:	da0c      	bge.n	800a8cc <_svfwprintf_r+0x8cc>
 800a8b2:	4d11      	ldr	r5, [pc, #68]	; (800a8f8 <_svfwprintf_r+0x8f8>)
 800a8b4:	4264      	negs	r4, r4
 800a8b6:	2c10      	cmp	r4, #16
 800a8b8:	dc0b      	bgt.n	800a8d2 <_svfwprintf_r+0x8d2>
 800a8ba:	4a0f      	ldr	r2, [pc, #60]	; (800a8f8 <_svfwprintf_r+0x8f8>)
 800a8bc:	00a3      	lsls	r3, r4, #2
 800a8be:	4649      	mov	r1, r9
 800a8c0:	4658      	mov	r0, fp
 800a8c2:	f000 f9fb 	bl	800acbc <__ssputs_r>
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	f43f af75 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800a8cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	e637      	b.n	800a542 <_svfwprintf_r+0x542>
 800a8d2:	2340      	movs	r3, #64	; 0x40
 800a8d4:	462a      	mov	r2, r5
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	4658      	mov	r0, fp
 800a8da:	f000 f9ef 	bl	800acbc <__ssputs_r>
 800a8de:	3001      	adds	r0, #1
 800a8e0:	f43f af69 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800a8e4:	3c10      	subs	r4, #16
 800a8e6:	e7e6      	b.n	800a8b6 <_svfwprintf_r+0x8b6>
 800a8e8:	0800e168 	.word	0x0800e168
 800a8ec:	0800e124 	.word	0x0800e124
 800a8f0:	0800e1b4 	.word	0x0800e1b4
 800a8f4:	0800e1ac 	.word	0x0800e1ac
 800a8f8:	0800e1f4 	.word	0x0800e1f4
 800a8fc:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800a8fe:	f344 041d 	sbfx	r4, r4, #0, #30
 800a902:	42ac      	cmp	r4, r5
 800a904:	bfa8      	it	ge
 800a906:	462c      	movge	r4, r5
 800a908:	2c00      	cmp	r4, #0
 800a90a:	dc20      	bgt.n	800a94e <_svfwprintf_r+0x94e>
 800a90c:	2c00      	cmp	r4, #0
 800a90e:	bfac      	ite	ge
 800a910:	1b2e      	subge	r6, r5, r4
 800a912:	462e      	movlt	r6, r5
 800a914:	2e00      	cmp	r6, #0
 800a916:	dd0b      	ble.n	800a930 <_svfwprintf_r+0x930>
 800a918:	4c72      	ldr	r4, [pc, #456]	; (800aae4 <_svfwprintf_r+0xae4>)
 800a91a:	2e10      	cmp	r6, #16
 800a91c:	dc20      	bgt.n	800a960 <_svfwprintf_r+0x960>
 800a91e:	4a71      	ldr	r2, [pc, #452]	; (800aae4 <_svfwprintf_r+0xae4>)
 800a920:	00b3      	lsls	r3, r6, #2
 800a922:	4649      	mov	r1, r9
 800a924:	4658      	mov	r0, fp
 800a926:	f000 f9c9 	bl	800acbc <__ssputs_r>
 800a92a:	3001      	adds	r0, #1
 800a92c:	f43f af43 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800a930:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a934:	429a      	cmp	r2, r3
 800a936:	ea4f 0585 	mov.w	r5, r5, lsl #2
 800a93a:	da1c      	bge.n	800a976 <_svfwprintf_r+0x976>
 800a93c:	2304      	movs	r3, #4
 800a93e:	aa16      	add	r2, sp, #88	; 0x58
 800a940:	4649      	mov	r1, r9
 800a942:	4658      	mov	r0, fp
 800a944:	f000 f9ba 	bl	800acbc <__ssputs_r>
 800a948:	3001      	adds	r0, #1
 800a94a:	d116      	bne.n	800a97a <_svfwprintf_r+0x97a>
 800a94c:	e733      	b.n	800a7b6 <_svfwprintf_r+0x7b6>
 800a94e:	00a3      	lsls	r3, r4, #2
 800a950:	4652      	mov	r2, sl
 800a952:	4649      	mov	r1, r9
 800a954:	4658      	mov	r0, fp
 800a956:	f000 f9b1 	bl	800acbc <__ssputs_r>
 800a95a:	3001      	adds	r0, #1
 800a95c:	d1d6      	bne.n	800a90c <_svfwprintf_r+0x90c>
 800a95e:	e72a      	b.n	800a7b6 <_svfwprintf_r+0x7b6>
 800a960:	2340      	movs	r3, #64	; 0x40
 800a962:	4622      	mov	r2, r4
 800a964:	4649      	mov	r1, r9
 800a966:	4658      	mov	r0, fp
 800a968:	f000 f9a8 	bl	800acbc <__ssputs_r>
 800a96c:	3001      	adds	r0, #1
 800a96e:	f43f af22 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800a972:	3e10      	subs	r6, #16
 800a974:	e7d1      	b.n	800a91a <_svfwprintf_r+0x91a>
 800a976:	07fe      	lsls	r6, r7, #31
 800a978:	d4e0      	bmi.n	800a93c <_svfwprintf_r+0x93c>
 800a97a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a97c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a97e:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 800a982:	10a4      	asrs	r4, r4, #2
 800a984:	1a9b      	subs	r3, r3, r2
 800a986:	429c      	cmp	r4, r3
 800a988:	bfa8      	it	ge
 800a98a:	461c      	movge	r4, r3
 800a98c:	2c00      	cmp	r4, #0
 800a98e:	dd09      	ble.n	800a9a4 <_svfwprintf_r+0x9a4>
 800a990:	00a3      	lsls	r3, r4, #2
 800a992:	eb0a 0205 	add.w	r2, sl, r5
 800a996:	4649      	mov	r1, r9
 800a998:	4658      	mov	r0, fp
 800a99a:	f000 f98f 	bl	800acbc <__ssputs_r>
 800a99e:	3001      	adds	r0, #1
 800a9a0:	f43f af09 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800a9a4:	e9dd 3518 	ldrd	r3, r5, [sp, #96]	; 0x60
 800a9a8:	2c00      	cmp	r4, #0
 800a9aa:	eba5 0503 	sub.w	r5, r5, r3
 800a9ae:	bfa8      	it	ge
 800a9b0:	1b2d      	subge	r5, r5, r4
 800a9b2:	2d00      	cmp	r5, #0
 800a9b4:	f77f adcd 	ble.w	800a552 <_svfwprintf_r+0x552>
 800a9b8:	4c4a      	ldr	r4, [pc, #296]	; (800aae4 <_svfwprintf_r+0xae4>)
 800a9ba:	2d10      	cmp	r5, #16
 800a9bc:	dc01      	bgt.n	800a9c2 <_svfwprintf_r+0x9c2>
 800a9be:	00ab      	lsls	r3, r5, #2
 800a9c0:	e74d      	b.n	800a85e <_svfwprintf_r+0x85e>
 800a9c2:	2340      	movs	r3, #64	; 0x40
 800a9c4:	4622      	mov	r2, r4
 800a9c6:	4649      	mov	r1, r9
 800a9c8:	4658      	mov	r0, fp
 800a9ca:	f000 f977 	bl	800acbc <__ssputs_r>
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	f43f aef1 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800a9d4:	3d10      	subs	r5, #16
 800a9d6:	e7f0      	b.n	800a9ba <_svfwprintf_r+0x9ba>
 800a9d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	4652      	mov	r2, sl
 800a9de:	f04f 0304 	mov.w	r3, #4
 800a9e2:	4649      	mov	r1, r9
 800a9e4:	4658      	mov	r0, fp
 800a9e6:	dc01      	bgt.n	800a9ec <_svfwprintf_r+0x9ec>
 800a9e8:	07fc      	lsls	r4, r7, #31
 800a9ea:	d51b      	bpl.n	800aa24 <_svfwprintf_r+0xa24>
 800a9ec:	f000 f966 	bl	800acbc <__ssputs_r>
 800a9f0:	3001      	adds	r0, #1
 800a9f2:	f43f aee0 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800a9f6:	2304      	movs	r3, #4
 800a9f8:	aa16      	add	r2, sp, #88	; 0x58
 800a9fa:	4649      	mov	r1, r9
 800a9fc:	4658      	mov	r0, fp
 800a9fe:	f000 f95d 	bl	800acbc <__ssputs_r>
 800aa02:	3001      	adds	r0, #1
 800aa04:	f43f aed7 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800aa08:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800aa0a:	ec51 0b18 	vmov	r0, r1, d8
 800aa0e:	2200      	movs	r2, #0
 800aa10:	2300      	movs	r3, #0
 800aa12:	3c01      	subs	r4, #1
 800aa14:	f7f6 f858 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa18:	b968      	cbnz	r0, 800aa36 <_svfwprintf_r+0xa36>
 800aa1a:	00a3      	lsls	r3, r4, #2
 800aa1c:	f10a 0204 	add.w	r2, sl, #4
 800aa20:	4649      	mov	r1, r9
 800aa22:	4658      	mov	r0, fp
 800aa24:	f000 f94a 	bl	800acbc <__ssputs_r>
 800aa28:	3001      	adds	r0, #1
 800aa2a:	f43f aec4 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800aa2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa30:	aa1c      	add	r2, sp, #112	; 0x70
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	e586      	b.n	800a544 <_svfwprintf_r+0x544>
 800aa36:	2c00      	cmp	r4, #0
 800aa38:	ddf9      	ble.n	800aa2e <_svfwprintf_r+0xa2e>
 800aa3a:	4d2a      	ldr	r5, [pc, #168]	; (800aae4 <_svfwprintf_r+0xae4>)
 800aa3c:	2c10      	cmp	r4, #16
 800aa3e:	dc02      	bgt.n	800aa46 <_svfwprintf_r+0xa46>
 800aa40:	4a28      	ldr	r2, [pc, #160]	; (800aae4 <_svfwprintf_r+0xae4>)
 800aa42:	00a3      	lsls	r3, r4, #2
 800aa44:	e7ec      	b.n	800aa20 <_svfwprintf_r+0xa20>
 800aa46:	2340      	movs	r3, #64	; 0x40
 800aa48:	462a      	mov	r2, r5
 800aa4a:	4649      	mov	r1, r9
 800aa4c:	4658      	mov	r0, fp
 800aa4e:	f000 f935 	bl	800acbc <__ssputs_r>
 800aa52:	3001      	adds	r0, #1
 800aa54:	f43f aeaf 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800aa58:	3c10      	subs	r4, #16
 800aa5a:	e7ef      	b.n	800aa3c <_svfwprintf_r+0xa3c>
 800aa5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa60:	1a9c      	subs	r4, r3, r2
 800aa62:	2c00      	cmp	r4, #0
 800aa64:	f77f ad78 	ble.w	800a558 <_svfwprintf_r+0x558>
 800aa68:	2c10      	cmp	r4, #16
 800aa6a:	dc09      	bgt.n	800aa80 <_svfwprintf_r+0xa80>
 800aa6c:	4a1e      	ldr	r2, [pc, #120]	; (800aae8 <_svfwprintf_r+0xae8>)
 800aa6e:	00a3      	lsls	r3, r4, #2
 800aa70:	4649      	mov	r1, r9
 800aa72:	4658      	mov	r0, fp
 800aa74:	f000 f922 	bl	800acbc <__ssputs_r>
 800aa78:	3001      	adds	r0, #1
 800aa7a:	f47f ad6d 	bne.w	800a558 <_svfwprintf_r+0x558>
 800aa7e:	e69a      	b.n	800a7b6 <_svfwprintf_r+0x7b6>
 800aa80:	4a19      	ldr	r2, [pc, #100]	; (800aae8 <_svfwprintf_r+0xae8>)
 800aa82:	2340      	movs	r3, #64	; 0x40
 800aa84:	4649      	mov	r1, r9
 800aa86:	4658      	mov	r0, fp
 800aa88:	f000 f918 	bl	800acbc <__ssputs_r>
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	f43f ae92 	beq.w	800a7b6 <_svfwprintf_r+0x7b6>
 800aa92:	3c10      	subs	r4, #16
 800aa94:	e7e8      	b.n	800aa68 <_svfwprintf_r+0xa68>
 800aa96:	4639      	mov	r1, r7
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f43f add7 	beq.w	800a64c <_svfwprintf_r+0x64c>
 800aa9e:	2a01      	cmp	r2, #1
 800aaa0:	f43f ae4c 	beq.w	800a73c <_svfwprintf_r+0x73c>
 800aaa4:	2a02      	cmp	r2, #2
 800aaa6:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800aaaa:	f43f ae5d 	beq.w	800a768 <_svfwprintf_r+0x768>
 800aaae:	f003 0207 	and.w	r2, r3, #7
 800aab2:	3230      	adds	r2, #48	; 0x30
 800aab4:	08db      	lsrs	r3, r3, #3
 800aab6:	4650      	mov	r0, sl
 800aab8:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800aabc:	d1f7      	bne.n	800aaae <_svfwprintf_r+0xaae>
 800aabe:	07cd      	lsls	r5, r1, #31
 800aac0:	d506      	bpl.n	800aad0 <_svfwprintf_r+0xad0>
 800aac2:	2a30      	cmp	r2, #48	; 0x30
 800aac4:	d004      	beq.n	800aad0 <_svfwprintf_r+0xad0>
 800aac6:	2330      	movs	r3, #48	; 0x30
 800aac8:	f84a 3c04 	str.w	r3, [sl, #-4]
 800aacc:	f1a0 0a08 	sub.w	sl, r0, #8
 800aad0:	ab52      	add	r3, sp, #328	; 0x148
 800aad2:	eba3 030a 	sub.w	r3, r3, sl
 800aad6:	4626      	mov	r6, r4
 800aad8:	460f      	mov	r7, r1
 800aada:	109c      	asrs	r4, r3, #2
 800aadc:	f04f 0800 	mov.w	r8, #0
 800aae0:	4645      	mov	r5, r8
 800aae2:	e4d7      	b.n	800a494 <_svfwprintf_r+0x494>
 800aae4:	0800e1f4 	.word	0x0800e1f4
 800aae8:	0800e1b4 	.word	0x0800e1b4

0800aaec <wcslen>:
 800aaec:	4602      	mov	r2, r0
 800aaee:	4613      	mov	r3, r2
 800aaf0:	3204      	adds	r2, #4
 800aaf2:	6819      	ldr	r1, [r3, #0]
 800aaf4:	2900      	cmp	r1, #0
 800aaf6:	d1fa      	bne.n	800aaee <wcslen+0x2>
 800aaf8:	1a18      	subs	r0, r3, r0
 800aafa:	1080      	asrs	r0, r0, #2
 800aafc:	4770      	bx	lr

0800aafe <wmemchr>:
 800aafe:	b530      	push	{r4, r5, lr}
 800ab00:	2400      	movs	r4, #0
 800ab02:	4294      	cmp	r4, r2
 800ab04:	4603      	mov	r3, r0
 800ab06:	d102      	bne.n	800ab0e <wmemchr+0x10>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	bd30      	pop	{r4, r5, pc}
 800ab0e:	681d      	ldr	r5, [r3, #0]
 800ab10:	428d      	cmp	r5, r1
 800ab12:	f100 0004 	add.w	r0, r0, #4
 800ab16:	d0f8      	beq.n	800ab0a <wmemchr+0xc>
 800ab18:	3401      	adds	r4, #1
 800ab1a:	e7f2      	b.n	800ab02 <wmemchr+0x4>

0800ab1c <_fstat_r>:
 800ab1c:	b538      	push	{r3, r4, r5, lr}
 800ab1e:	4d07      	ldr	r5, [pc, #28]	; (800ab3c <_fstat_r+0x20>)
 800ab20:	2300      	movs	r3, #0
 800ab22:	4604      	mov	r4, r0
 800ab24:	4608      	mov	r0, r1
 800ab26:	4611      	mov	r1, r2
 800ab28:	602b      	str	r3, [r5, #0]
 800ab2a:	f7f7 fb7e 	bl	800222a <_fstat>
 800ab2e:	1c43      	adds	r3, r0, #1
 800ab30:	d102      	bne.n	800ab38 <_fstat_r+0x1c>
 800ab32:	682b      	ldr	r3, [r5, #0]
 800ab34:	b103      	cbz	r3, 800ab38 <_fstat_r+0x1c>
 800ab36:	6023      	str	r3, [r4, #0]
 800ab38:	bd38      	pop	{r3, r4, r5, pc}
 800ab3a:	bf00      	nop
 800ab3c:	2000a580 	.word	0x2000a580

0800ab40 <_isatty_r>:
 800ab40:	b538      	push	{r3, r4, r5, lr}
 800ab42:	4d06      	ldr	r5, [pc, #24]	; (800ab5c <_isatty_r+0x1c>)
 800ab44:	2300      	movs	r3, #0
 800ab46:	4604      	mov	r4, r0
 800ab48:	4608      	mov	r0, r1
 800ab4a:	602b      	str	r3, [r5, #0]
 800ab4c:	f7f7 fb7d 	bl	800224a <_isatty>
 800ab50:	1c43      	adds	r3, r0, #1
 800ab52:	d102      	bne.n	800ab5a <_isatty_r+0x1a>
 800ab54:	682b      	ldr	r3, [r5, #0]
 800ab56:	b103      	cbz	r3, 800ab5a <_isatty_r+0x1a>
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
 800ab5c:	2000a580 	.word	0x2000a580

0800ab60 <_sbrk_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4d06      	ldr	r5, [pc, #24]	; (800ab7c <_sbrk_r+0x1c>)
 800ab64:	2300      	movs	r3, #0
 800ab66:	4604      	mov	r4, r0
 800ab68:	4608      	mov	r0, r1
 800ab6a:	602b      	str	r3, [r5, #0]
 800ab6c:	f7f7 fb86 	bl	800227c <_sbrk>
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	d102      	bne.n	800ab7a <_sbrk_r+0x1a>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	b103      	cbz	r3, 800ab7a <_sbrk_r+0x1a>
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	bd38      	pop	{r3, r4, r5, pc}
 800ab7c:	2000a580 	.word	0x2000a580

0800ab80 <__assert_func>:
 800ab80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab82:	4614      	mov	r4, r2
 800ab84:	461a      	mov	r2, r3
 800ab86:	4b09      	ldr	r3, [pc, #36]	; (800abac <__assert_func+0x2c>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	68d8      	ldr	r0, [r3, #12]
 800ab8e:	b14c      	cbz	r4, 800aba4 <__assert_func+0x24>
 800ab90:	4b07      	ldr	r3, [pc, #28]	; (800abb0 <__assert_func+0x30>)
 800ab92:	9100      	str	r1, [sp, #0]
 800ab94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab98:	4906      	ldr	r1, [pc, #24]	; (800abb4 <__assert_func+0x34>)
 800ab9a:	462b      	mov	r3, r5
 800ab9c:	f000 f8e8 	bl	800ad70 <fiprintf>
 800aba0:	f000 f912 	bl	800adc8 <abort>
 800aba4:	4b04      	ldr	r3, [pc, #16]	; (800abb8 <__assert_func+0x38>)
 800aba6:	461c      	mov	r4, r3
 800aba8:	e7f3      	b.n	800ab92 <__assert_func+0x12>
 800abaa:	bf00      	nop
 800abac:	2000006c 	.word	0x2000006c
 800abb0:	0800e23e 	.word	0x0800e23e
 800abb4:	0800e24b 	.word	0x0800e24b
 800abb8:	0800e279 	.word	0x0800e279

0800abbc <_calloc_r>:
 800abbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abbe:	fba1 2402 	umull	r2, r4, r1, r2
 800abc2:	b94c      	cbnz	r4, 800abd8 <_calloc_r+0x1c>
 800abc4:	4611      	mov	r1, r2
 800abc6:	9201      	str	r2, [sp, #4]
 800abc8:	f7fe fd40 	bl	800964c <_malloc_r>
 800abcc:	9a01      	ldr	r2, [sp, #4]
 800abce:	4605      	mov	r5, r0
 800abd0:	b930      	cbnz	r0, 800abe0 <_calloc_r+0x24>
 800abd2:	4628      	mov	r0, r5
 800abd4:	b003      	add	sp, #12
 800abd6:	bd30      	pop	{r4, r5, pc}
 800abd8:	220c      	movs	r2, #12
 800abda:	6002      	str	r2, [r0, #0]
 800abdc:	2500      	movs	r5, #0
 800abde:	e7f8      	b.n	800abd2 <_calloc_r+0x16>
 800abe0:	4621      	mov	r1, r4
 800abe2:	f7fd fdb5 	bl	8008750 <memset>
 800abe6:	e7f4      	b.n	800abd2 <_calloc_r+0x16>

0800abe8 <__ascii_mbtowc>:
 800abe8:	b082      	sub	sp, #8
 800abea:	b901      	cbnz	r1, 800abee <__ascii_mbtowc+0x6>
 800abec:	a901      	add	r1, sp, #4
 800abee:	b142      	cbz	r2, 800ac02 <__ascii_mbtowc+0x1a>
 800abf0:	b14b      	cbz	r3, 800ac06 <__ascii_mbtowc+0x1e>
 800abf2:	7813      	ldrb	r3, [r2, #0]
 800abf4:	600b      	str	r3, [r1, #0]
 800abf6:	7812      	ldrb	r2, [r2, #0]
 800abf8:	1e10      	subs	r0, r2, #0
 800abfa:	bf18      	it	ne
 800abfc:	2001      	movne	r0, #1
 800abfe:	b002      	add	sp, #8
 800ac00:	4770      	bx	lr
 800ac02:	4610      	mov	r0, r2
 800ac04:	e7fb      	b.n	800abfe <__ascii_mbtowc+0x16>
 800ac06:	f06f 0001 	mvn.w	r0, #1
 800ac0a:	e7f8      	b.n	800abfe <__ascii_mbtowc+0x16>

0800ac0c <__ascii_wctomb>:
 800ac0c:	b149      	cbz	r1, 800ac22 <__ascii_wctomb+0x16>
 800ac0e:	2aff      	cmp	r2, #255	; 0xff
 800ac10:	bf85      	ittet	hi
 800ac12:	238a      	movhi	r3, #138	; 0x8a
 800ac14:	6003      	strhi	r3, [r0, #0]
 800ac16:	700a      	strbls	r2, [r1, #0]
 800ac18:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac1c:	bf98      	it	ls
 800ac1e:	2001      	movls	r0, #1
 800ac20:	4770      	bx	lr
 800ac22:	4608      	mov	r0, r1
 800ac24:	4770      	bx	lr
	...

0800ac28 <btowc>:
 800ac28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac2a:	1c43      	adds	r3, r0, #1
 800ac2c:	b087      	sub	sp, #28
 800ac2e:	d103      	bne.n	800ac38 <btowc+0x10>
 800ac30:	f04f 30ff 	mov.w	r0, #4294967295
 800ac34:	b007      	add	sp, #28
 800ac36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac38:	4d1c      	ldr	r5, [pc, #112]	; (800acac <btowc+0x84>)
 800ac3a:	f88d 000b 	strb.w	r0, [sp, #11]
 800ac3e:	ae04      	add	r6, sp, #16
 800ac40:	2208      	movs	r2, #8
 800ac42:	2100      	movs	r1, #0
 800ac44:	4630      	mov	r0, r6
 800ac46:	f7fd fd83 	bl	8008750 <memset>
 800ac4a:	682f      	ldr	r7, [r5, #0]
 800ac4c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800ac4e:	b9fc      	cbnz	r4, 800ac90 <btowc+0x68>
 800ac50:	2050      	movs	r0, #80	; 0x50
 800ac52:	f7fe fcd3 	bl	80095fc <malloc>
 800ac56:	4602      	mov	r2, r0
 800ac58:	6478      	str	r0, [r7, #68]	; 0x44
 800ac5a:	b920      	cbnz	r0, 800ac66 <btowc+0x3e>
 800ac5c:	4b14      	ldr	r3, [pc, #80]	; (800acb0 <btowc+0x88>)
 800ac5e:	4815      	ldr	r0, [pc, #84]	; (800acb4 <btowc+0x8c>)
 800ac60:	2118      	movs	r1, #24
 800ac62:	f7ff ff8d 	bl	800ab80 <__assert_func>
 800ac66:	682b      	ldr	r3, [r5, #0]
 800ac68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac6a:	e9c3 4400 	strd	r4, r4, [r3]
 800ac6e:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800ac72:	e9c3 4404 	strd	r4, r4, [r3, #16]
 800ac76:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 800ac7a:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 800ac7e:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 800ac82:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 800ac86:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 800ac8a:	619c      	str	r4, [r3, #24]
 800ac8c:	771c      	strb	r4, [r3, #28]
 800ac8e:	625c      	str	r4, [r3, #36]	; 0x24
 800ac90:	4b09      	ldr	r3, [pc, #36]	; (800acb8 <btowc+0x90>)
 800ac92:	9600      	str	r6, [sp, #0]
 800ac94:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 800ac98:	6828      	ldr	r0, [r5, #0]
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f10d 020b 	add.w	r2, sp, #11
 800aca0:	a903      	add	r1, sp, #12
 800aca2:	47a0      	blx	r4
 800aca4:	2801      	cmp	r0, #1
 800aca6:	d8c3      	bhi.n	800ac30 <btowc+0x8>
 800aca8:	9803      	ldr	r0, [sp, #12]
 800acaa:	e7c3      	b.n	800ac34 <btowc+0xc>
 800acac:	2000006c 	.word	0x2000006c
 800acb0:	0800df0d 	.word	0x0800df0d
 800acb4:	0800e27a 	.word	0x0800e27a
 800acb8:	20000070 	.word	0x20000070

0800acbc <__ssputs_r>:
 800acbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc0:	688e      	ldr	r6, [r1, #8]
 800acc2:	461f      	mov	r7, r3
 800acc4:	42be      	cmp	r6, r7
 800acc6:	680b      	ldr	r3, [r1, #0]
 800acc8:	4682      	mov	sl, r0
 800acca:	460c      	mov	r4, r1
 800accc:	4690      	mov	r8, r2
 800acce:	d82c      	bhi.n	800ad2a <__ssputs_r+0x6e>
 800acd0:	898a      	ldrh	r2, [r1, #12]
 800acd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acd6:	d026      	beq.n	800ad26 <__ssputs_r+0x6a>
 800acd8:	6965      	ldr	r5, [r4, #20]
 800acda:	6909      	ldr	r1, [r1, #16]
 800acdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ace0:	eba3 0901 	sub.w	r9, r3, r1
 800ace4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ace8:	1c7b      	adds	r3, r7, #1
 800acea:	444b      	add	r3, r9
 800acec:	106d      	asrs	r5, r5, #1
 800acee:	429d      	cmp	r5, r3
 800acf0:	bf38      	it	cc
 800acf2:	461d      	movcc	r5, r3
 800acf4:	0553      	lsls	r3, r2, #21
 800acf6:	d527      	bpl.n	800ad48 <__ssputs_r+0x8c>
 800acf8:	4629      	mov	r1, r5
 800acfa:	f7fe fca7 	bl	800964c <_malloc_r>
 800acfe:	4606      	mov	r6, r0
 800ad00:	b360      	cbz	r0, 800ad5c <__ssputs_r+0xa0>
 800ad02:	6921      	ldr	r1, [r4, #16]
 800ad04:	464a      	mov	r2, r9
 800ad06:	f7fd fda2 	bl	800884e <memcpy>
 800ad0a:	89a3      	ldrh	r3, [r4, #12]
 800ad0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad14:	81a3      	strh	r3, [r4, #12]
 800ad16:	6126      	str	r6, [r4, #16]
 800ad18:	6165      	str	r5, [r4, #20]
 800ad1a:	444e      	add	r6, r9
 800ad1c:	eba5 0509 	sub.w	r5, r5, r9
 800ad20:	6026      	str	r6, [r4, #0]
 800ad22:	60a5      	str	r5, [r4, #8]
 800ad24:	463e      	mov	r6, r7
 800ad26:	42be      	cmp	r6, r7
 800ad28:	d900      	bls.n	800ad2c <__ssputs_r+0x70>
 800ad2a:	463e      	mov	r6, r7
 800ad2c:	6820      	ldr	r0, [r4, #0]
 800ad2e:	4632      	mov	r2, r6
 800ad30:	4641      	mov	r1, r8
 800ad32:	f000 f82f 	bl	800ad94 <memmove>
 800ad36:	68a3      	ldr	r3, [r4, #8]
 800ad38:	1b9b      	subs	r3, r3, r6
 800ad3a:	60a3      	str	r3, [r4, #8]
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	4433      	add	r3, r6
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	2000      	movs	r0, #0
 800ad44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad48:	462a      	mov	r2, r5
 800ad4a:	f000 f844 	bl	800add6 <_realloc_r>
 800ad4e:	4606      	mov	r6, r0
 800ad50:	2800      	cmp	r0, #0
 800ad52:	d1e0      	bne.n	800ad16 <__ssputs_r+0x5a>
 800ad54:	6921      	ldr	r1, [r4, #16]
 800ad56:	4650      	mov	r0, sl
 800ad58:	f7fe fc04 	bl	8009564 <_free_r>
 800ad5c:	230c      	movs	r3, #12
 800ad5e:	f8ca 3000 	str.w	r3, [sl]
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6e:	e7e9      	b.n	800ad44 <__ssputs_r+0x88>

0800ad70 <fiprintf>:
 800ad70:	b40e      	push	{r1, r2, r3}
 800ad72:	b503      	push	{r0, r1, lr}
 800ad74:	4601      	mov	r1, r0
 800ad76:	ab03      	add	r3, sp, #12
 800ad78:	4805      	ldr	r0, [pc, #20]	; (800ad90 <fiprintf+0x20>)
 800ad7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad7e:	6800      	ldr	r0, [r0, #0]
 800ad80:	9301      	str	r3, [sp, #4]
 800ad82:	f000 f881 	bl	800ae88 <_vfiprintf_r>
 800ad86:	b002      	add	sp, #8
 800ad88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad8c:	b003      	add	sp, #12
 800ad8e:	4770      	bx	lr
 800ad90:	2000006c 	.word	0x2000006c

0800ad94 <memmove>:
 800ad94:	4288      	cmp	r0, r1
 800ad96:	b510      	push	{r4, lr}
 800ad98:	eb01 0402 	add.w	r4, r1, r2
 800ad9c:	d902      	bls.n	800ada4 <memmove+0x10>
 800ad9e:	4284      	cmp	r4, r0
 800ada0:	4623      	mov	r3, r4
 800ada2:	d807      	bhi.n	800adb4 <memmove+0x20>
 800ada4:	1e43      	subs	r3, r0, #1
 800ada6:	42a1      	cmp	r1, r4
 800ada8:	d008      	beq.n	800adbc <memmove+0x28>
 800adaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adb2:	e7f8      	b.n	800ada6 <memmove+0x12>
 800adb4:	4402      	add	r2, r0
 800adb6:	4601      	mov	r1, r0
 800adb8:	428a      	cmp	r2, r1
 800adba:	d100      	bne.n	800adbe <memmove+0x2a>
 800adbc:	bd10      	pop	{r4, pc}
 800adbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adc6:	e7f7      	b.n	800adb8 <memmove+0x24>

0800adc8 <abort>:
 800adc8:	b508      	push	{r3, lr}
 800adca:	2006      	movs	r0, #6
 800adcc:	f000 fa34 	bl	800b238 <raise>
 800add0:	2001      	movs	r0, #1
 800add2:	f7f7 f9db 	bl	800218c <_exit>

0800add6 <_realloc_r>:
 800add6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adda:	4680      	mov	r8, r0
 800addc:	4614      	mov	r4, r2
 800adde:	460e      	mov	r6, r1
 800ade0:	b921      	cbnz	r1, 800adec <_realloc_r+0x16>
 800ade2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ade6:	4611      	mov	r1, r2
 800ade8:	f7fe bc30 	b.w	800964c <_malloc_r>
 800adec:	b92a      	cbnz	r2, 800adfa <_realloc_r+0x24>
 800adee:	f7fe fbb9 	bl	8009564 <_free_r>
 800adf2:	4625      	mov	r5, r4
 800adf4:	4628      	mov	r0, r5
 800adf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adfa:	f000 fa39 	bl	800b270 <_malloc_usable_size_r>
 800adfe:	4284      	cmp	r4, r0
 800ae00:	4607      	mov	r7, r0
 800ae02:	d802      	bhi.n	800ae0a <_realloc_r+0x34>
 800ae04:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae08:	d812      	bhi.n	800ae30 <_realloc_r+0x5a>
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	4640      	mov	r0, r8
 800ae0e:	f7fe fc1d 	bl	800964c <_malloc_r>
 800ae12:	4605      	mov	r5, r0
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d0ed      	beq.n	800adf4 <_realloc_r+0x1e>
 800ae18:	42bc      	cmp	r4, r7
 800ae1a:	4622      	mov	r2, r4
 800ae1c:	4631      	mov	r1, r6
 800ae1e:	bf28      	it	cs
 800ae20:	463a      	movcs	r2, r7
 800ae22:	f7fd fd14 	bl	800884e <memcpy>
 800ae26:	4631      	mov	r1, r6
 800ae28:	4640      	mov	r0, r8
 800ae2a:	f7fe fb9b 	bl	8009564 <_free_r>
 800ae2e:	e7e1      	b.n	800adf4 <_realloc_r+0x1e>
 800ae30:	4635      	mov	r5, r6
 800ae32:	e7df      	b.n	800adf4 <_realloc_r+0x1e>

0800ae34 <__sfputc_r>:
 800ae34:	6893      	ldr	r3, [r2, #8]
 800ae36:	3b01      	subs	r3, #1
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	b410      	push	{r4}
 800ae3c:	6093      	str	r3, [r2, #8]
 800ae3e:	da08      	bge.n	800ae52 <__sfputc_r+0x1e>
 800ae40:	6994      	ldr	r4, [r2, #24]
 800ae42:	42a3      	cmp	r3, r4
 800ae44:	db01      	blt.n	800ae4a <__sfputc_r+0x16>
 800ae46:	290a      	cmp	r1, #10
 800ae48:	d103      	bne.n	800ae52 <__sfputc_r+0x1e>
 800ae4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae4e:	f000 b935 	b.w	800b0bc <__swbuf_r>
 800ae52:	6813      	ldr	r3, [r2, #0]
 800ae54:	1c58      	adds	r0, r3, #1
 800ae56:	6010      	str	r0, [r2, #0]
 800ae58:	7019      	strb	r1, [r3, #0]
 800ae5a:	4608      	mov	r0, r1
 800ae5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <__sfputs_r>:
 800ae62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae64:	4606      	mov	r6, r0
 800ae66:	460f      	mov	r7, r1
 800ae68:	4614      	mov	r4, r2
 800ae6a:	18d5      	adds	r5, r2, r3
 800ae6c:	42ac      	cmp	r4, r5
 800ae6e:	d101      	bne.n	800ae74 <__sfputs_r+0x12>
 800ae70:	2000      	movs	r0, #0
 800ae72:	e007      	b.n	800ae84 <__sfputs_r+0x22>
 800ae74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae78:	463a      	mov	r2, r7
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f7ff ffda 	bl	800ae34 <__sfputc_r>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d1f3      	bne.n	800ae6c <__sfputs_r+0xa>
 800ae84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae88 <_vfiprintf_r>:
 800ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	460d      	mov	r5, r1
 800ae8e:	b09d      	sub	sp, #116	; 0x74
 800ae90:	4614      	mov	r4, r2
 800ae92:	4698      	mov	r8, r3
 800ae94:	4606      	mov	r6, r0
 800ae96:	b118      	cbz	r0, 800aea0 <_vfiprintf_r+0x18>
 800ae98:	6a03      	ldr	r3, [r0, #32]
 800ae9a:	b90b      	cbnz	r3, 800aea0 <_vfiprintf_r+0x18>
 800ae9c:	f7fd fbaa 	bl	80085f4 <__sinit>
 800aea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aea2:	07d9      	lsls	r1, r3, #31
 800aea4:	d405      	bmi.n	800aeb2 <_vfiprintf_r+0x2a>
 800aea6:	89ab      	ldrh	r3, [r5, #12]
 800aea8:	059a      	lsls	r2, r3, #22
 800aeaa:	d402      	bmi.n	800aeb2 <_vfiprintf_r+0x2a>
 800aeac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeae:	f7fd fccc 	bl	800884a <__retarget_lock_acquire_recursive>
 800aeb2:	89ab      	ldrh	r3, [r5, #12]
 800aeb4:	071b      	lsls	r3, r3, #28
 800aeb6:	d501      	bpl.n	800aebc <_vfiprintf_r+0x34>
 800aeb8:	692b      	ldr	r3, [r5, #16]
 800aeba:	b99b      	cbnz	r3, 800aee4 <_vfiprintf_r+0x5c>
 800aebc:	4629      	mov	r1, r5
 800aebe:	4630      	mov	r0, r6
 800aec0:	f000 f93a 	bl	800b138 <__swsetup_r>
 800aec4:	b170      	cbz	r0, 800aee4 <_vfiprintf_r+0x5c>
 800aec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aec8:	07dc      	lsls	r4, r3, #31
 800aeca:	d504      	bpl.n	800aed6 <_vfiprintf_r+0x4e>
 800aecc:	f04f 30ff 	mov.w	r0, #4294967295
 800aed0:	b01d      	add	sp, #116	; 0x74
 800aed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed6:	89ab      	ldrh	r3, [r5, #12]
 800aed8:	0598      	lsls	r0, r3, #22
 800aeda:	d4f7      	bmi.n	800aecc <_vfiprintf_r+0x44>
 800aedc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aede:	f7fd fcb5 	bl	800884c <__retarget_lock_release_recursive>
 800aee2:	e7f3      	b.n	800aecc <_vfiprintf_r+0x44>
 800aee4:	2300      	movs	r3, #0
 800aee6:	9309      	str	r3, [sp, #36]	; 0x24
 800aee8:	2320      	movs	r3, #32
 800aeea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aeee:	f8cd 800c 	str.w	r8, [sp, #12]
 800aef2:	2330      	movs	r3, #48	; 0x30
 800aef4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b0a8 <_vfiprintf_r+0x220>
 800aef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aefc:	f04f 0901 	mov.w	r9, #1
 800af00:	4623      	mov	r3, r4
 800af02:	469a      	mov	sl, r3
 800af04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af08:	b10a      	cbz	r2, 800af0e <_vfiprintf_r+0x86>
 800af0a:	2a25      	cmp	r2, #37	; 0x25
 800af0c:	d1f9      	bne.n	800af02 <_vfiprintf_r+0x7a>
 800af0e:	ebba 0b04 	subs.w	fp, sl, r4
 800af12:	d00b      	beq.n	800af2c <_vfiprintf_r+0xa4>
 800af14:	465b      	mov	r3, fp
 800af16:	4622      	mov	r2, r4
 800af18:	4629      	mov	r1, r5
 800af1a:	4630      	mov	r0, r6
 800af1c:	f7ff ffa1 	bl	800ae62 <__sfputs_r>
 800af20:	3001      	adds	r0, #1
 800af22:	f000 80a9 	beq.w	800b078 <_vfiprintf_r+0x1f0>
 800af26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af28:	445a      	add	r2, fp
 800af2a:	9209      	str	r2, [sp, #36]	; 0x24
 800af2c:	f89a 3000 	ldrb.w	r3, [sl]
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 80a1 	beq.w	800b078 <_vfiprintf_r+0x1f0>
 800af36:	2300      	movs	r3, #0
 800af38:	f04f 32ff 	mov.w	r2, #4294967295
 800af3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af40:	f10a 0a01 	add.w	sl, sl, #1
 800af44:	9304      	str	r3, [sp, #16]
 800af46:	9307      	str	r3, [sp, #28]
 800af48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af4c:	931a      	str	r3, [sp, #104]	; 0x68
 800af4e:	4654      	mov	r4, sl
 800af50:	2205      	movs	r2, #5
 800af52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af56:	4854      	ldr	r0, [pc, #336]	; (800b0a8 <_vfiprintf_r+0x220>)
 800af58:	f7f5 f93a 	bl	80001d0 <memchr>
 800af5c:	9a04      	ldr	r2, [sp, #16]
 800af5e:	b9d8      	cbnz	r0, 800af98 <_vfiprintf_r+0x110>
 800af60:	06d1      	lsls	r1, r2, #27
 800af62:	bf44      	itt	mi
 800af64:	2320      	movmi	r3, #32
 800af66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af6a:	0713      	lsls	r3, r2, #28
 800af6c:	bf44      	itt	mi
 800af6e:	232b      	movmi	r3, #43	; 0x2b
 800af70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af74:	f89a 3000 	ldrb.w	r3, [sl]
 800af78:	2b2a      	cmp	r3, #42	; 0x2a
 800af7a:	d015      	beq.n	800afa8 <_vfiprintf_r+0x120>
 800af7c:	9a07      	ldr	r2, [sp, #28]
 800af7e:	4654      	mov	r4, sl
 800af80:	2000      	movs	r0, #0
 800af82:	f04f 0c0a 	mov.w	ip, #10
 800af86:	4621      	mov	r1, r4
 800af88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af8c:	3b30      	subs	r3, #48	; 0x30
 800af8e:	2b09      	cmp	r3, #9
 800af90:	d94d      	bls.n	800b02e <_vfiprintf_r+0x1a6>
 800af92:	b1b0      	cbz	r0, 800afc2 <_vfiprintf_r+0x13a>
 800af94:	9207      	str	r2, [sp, #28]
 800af96:	e014      	b.n	800afc2 <_vfiprintf_r+0x13a>
 800af98:	eba0 0308 	sub.w	r3, r0, r8
 800af9c:	fa09 f303 	lsl.w	r3, r9, r3
 800afa0:	4313      	orrs	r3, r2
 800afa2:	9304      	str	r3, [sp, #16]
 800afa4:	46a2      	mov	sl, r4
 800afa6:	e7d2      	b.n	800af4e <_vfiprintf_r+0xc6>
 800afa8:	9b03      	ldr	r3, [sp, #12]
 800afaa:	1d19      	adds	r1, r3, #4
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	9103      	str	r1, [sp, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	bfbb      	ittet	lt
 800afb4:	425b      	neglt	r3, r3
 800afb6:	f042 0202 	orrlt.w	r2, r2, #2
 800afba:	9307      	strge	r3, [sp, #28]
 800afbc:	9307      	strlt	r3, [sp, #28]
 800afbe:	bfb8      	it	lt
 800afc0:	9204      	strlt	r2, [sp, #16]
 800afc2:	7823      	ldrb	r3, [r4, #0]
 800afc4:	2b2e      	cmp	r3, #46	; 0x2e
 800afc6:	d10c      	bne.n	800afe2 <_vfiprintf_r+0x15a>
 800afc8:	7863      	ldrb	r3, [r4, #1]
 800afca:	2b2a      	cmp	r3, #42	; 0x2a
 800afcc:	d134      	bne.n	800b038 <_vfiprintf_r+0x1b0>
 800afce:	9b03      	ldr	r3, [sp, #12]
 800afd0:	1d1a      	adds	r2, r3, #4
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	9203      	str	r2, [sp, #12]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	bfb8      	it	lt
 800afda:	f04f 33ff 	movlt.w	r3, #4294967295
 800afde:	3402      	adds	r4, #2
 800afe0:	9305      	str	r3, [sp, #20]
 800afe2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b0b8 <_vfiprintf_r+0x230>
 800afe6:	7821      	ldrb	r1, [r4, #0]
 800afe8:	2203      	movs	r2, #3
 800afea:	4650      	mov	r0, sl
 800afec:	f7f5 f8f0 	bl	80001d0 <memchr>
 800aff0:	b138      	cbz	r0, 800b002 <_vfiprintf_r+0x17a>
 800aff2:	9b04      	ldr	r3, [sp, #16]
 800aff4:	eba0 000a 	sub.w	r0, r0, sl
 800aff8:	2240      	movs	r2, #64	; 0x40
 800affa:	4082      	lsls	r2, r0
 800affc:	4313      	orrs	r3, r2
 800affe:	3401      	adds	r4, #1
 800b000:	9304      	str	r3, [sp, #16]
 800b002:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b006:	4829      	ldr	r0, [pc, #164]	; (800b0ac <_vfiprintf_r+0x224>)
 800b008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b00c:	2206      	movs	r2, #6
 800b00e:	f7f5 f8df 	bl	80001d0 <memchr>
 800b012:	2800      	cmp	r0, #0
 800b014:	d03f      	beq.n	800b096 <_vfiprintf_r+0x20e>
 800b016:	4b26      	ldr	r3, [pc, #152]	; (800b0b0 <_vfiprintf_r+0x228>)
 800b018:	bb1b      	cbnz	r3, 800b062 <_vfiprintf_r+0x1da>
 800b01a:	9b03      	ldr	r3, [sp, #12]
 800b01c:	3307      	adds	r3, #7
 800b01e:	f023 0307 	bic.w	r3, r3, #7
 800b022:	3308      	adds	r3, #8
 800b024:	9303      	str	r3, [sp, #12]
 800b026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b028:	443b      	add	r3, r7
 800b02a:	9309      	str	r3, [sp, #36]	; 0x24
 800b02c:	e768      	b.n	800af00 <_vfiprintf_r+0x78>
 800b02e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b032:	460c      	mov	r4, r1
 800b034:	2001      	movs	r0, #1
 800b036:	e7a6      	b.n	800af86 <_vfiprintf_r+0xfe>
 800b038:	2300      	movs	r3, #0
 800b03a:	3401      	adds	r4, #1
 800b03c:	9305      	str	r3, [sp, #20]
 800b03e:	4619      	mov	r1, r3
 800b040:	f04f 0c0a 	mov.w	ip, #10
 800b044:	4620      	mov	r0, r4
 800b046:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b04a:	3a30      	subs	r2, #48	; 0x30
 800b04c:	2a09      	cmp	r2, #9
 800b04e:	d903      	bls.n	800b058 <_vfiprintf_r+0x1d0>
 800b050:	2b00      	cmp	r3, #0
 800b052:	d0c6      	beq.n	800afe2 <_vfiprintf_r+0x15a>
 800b054:	9105      	str	r1, [sp, #20]
 800b056:	e7c4      	b.n	800afe2 <_vfiprintf_r+0x15a>
 800b058:	fb0c 2101 	mla	r1, ip, r1, r2
 800b05c:	4604      	mov	r4, r0
 800b05e:	2301      	movs	r3, #1
 800b060:	e7f0      	b.n	800b044 <_vfiprintf_r+0x1bc>
 800b062:	ab03      	add	r3, sp, #12
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	462a      	mov	r2, r5
 800b068:	4b12      	ldr	r3, [pc, #72]	; (800b0b4 <_vfiprintf_r+0x22c>)
 800b06a:	a904      	add	r1, sp, #16
 800b06c:	4630      	mov	r0, r6
 800b06e:	f7fc fdc1 	bl	8007bf4 <_printf_float>
 800b072:	4607      	mov	r7, r0
 800b074:	1c78      	adds	r0, r7, #1
 800b076:	d1d6      	bne.n	800b026 <_vfiprintf_r+0x19e>
 800b078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b07a:	07d9      	lsls	r1, r3, #31
 800b07c:	d405      	bmi.n	800b08a <_vfiprintf_r+0x202>
 800b07e:	89ab      	ldrh	r3, [r5, #12]
 800b080:	059a      	lsls	r2, r3, #22
 800b082:	d402      	bmi.n	800b08a <_vfiprintf_r+0x202>
 800b084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b086:	f7fd fbe1 	bl	800884c <__retarget_lock_release_recursive>
 800b08a:	89ab      	ldrh	r3, [r5, #12]
 800b08c:	065b      	lsls	r3, r3, #25
 800b08e:	f53f af1d 	bmi.w	800aecc <_vfiprintf_r+0x44>
 800b092:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b094:	e71c      	b.n	800aed0 <_vfiprintf_r+0x48>
 800b096:	ab03      	add	r3, sp, #12
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	462a      	mov	r2, r5
 800b09c:	4b05      	ldr	r3, [pc, #20]	; (800b0b4 <_vfiprintf_r+0x22c>)
 800b09e:	a904      	add	r1, sp, #16
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f7fd f84b 	bl	800813c <_printf_i>
 800b0a6:	e7e4      	b.n	800b072 <_vfiprintf_r+0x1ea>
 800b0a8:	0800e3d4 	.word	0x0800e3d4
 800b0ac:	0800e3de 	.word	0x0800e3de
 800b0b0:	08007bf5 	.word	0x08007bf5
 800b0b4:	0800ae63 	.word	0x0800ae63
 800b0b8:	0800e3da 	.word	0x0800e3da

0800b0bc <__swbuf_r>:
 800b0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0be:	460e      	mov	r6, r1
 800b0c0:	4614      	mov	r4, r2
 800b0c2:	4605      	mov	r5, r0
 800b0c4:	b118      	cbz	r0, 800b0ce <__swbuf_r+0x12>
 800b0c6:	6a03      	ldr	r3, [r0, #32]
 800b0c8:	b90b      	cbnz	r3, 800b0ce <__swbuf_r+0x12>
 800b0ca:	f7fd fa93 	bl	80085f4 <__sinit>
 800b0ce:	69a3      	ldr	r3, [r4, #24]
 800b0d0:	60a3      	str	r3, [r4, #8]
 800b0d2:	89a3      	ldrh	r3, [r4, #12]
 800b0d4:	071a      	lsls	r2, r3, #28
 800b0d6:	d525      	bpl.n	800b124 <__swbuf_r+0x68>
 800b0d8:	6923      	ldr	r3, [r4, #16]
 800b0da:	b31b      	cbz	r3, 800b124 <__swbuf_r+0x68>
 800b0dc:	6823      	ldr	r3, [r4, #0]
 800b0de:	6922      	ldr	r2, [r4, #16]
 800b0e0:	1a98      	subs	r0, r3, r2
 800b0e2:	6963      	ldr	r3, [r4, #20]
 800b0e4:	b2f6      	uxtb	r6, r6
 800b0e6:	4283      	cmp	r3, r0
 800b0e8:	4637      	mov	r7, r6
 800b0ea:	dc04      	bgt.n	800b0f6 <__swbuf_r+0x3a>
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	f7fd f9cc 	bl	800848c <_fflush_r>
 800b0f4:	b9e0      	cbnz	r0, 800b130 <__swbuf_r+0x74>
 800b0f6:	68a3      	ldr	r3, [r4, #8]
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	60a3      	str	r3, [r4, #8]
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	1c5a      	adds	r2, r3, #1
 800b100:	6022      	str	r2, [r4, #0]
 800b102:	701e      	strb	r6, [r3, #0]
 800b104:	6962      	ldr	r2, [r4, #20]
 800b106:	1c43      	adds	r3, r0, #1
 800b108:	429a      	cmp	r2, r3
 800b10a:	d004      	beq.n	800b116 <__swbuf_r+0x5a>
 800b10c:	89a3      	ldrh	r3, [r4, #12]
 800b10e:	07db      	lsls	r3, r3, #31
 800b110:	d506      	bpl.n	800b120 <__swbuf_r+0x64>
 800b112:	2e0a      	cmp	r6, #10
 800b114:	d104      	bne.n	800b120 <__swbuf_r+0x64>
 800b116:	4621      	mov	r1, r4
 800b118:	4628      	mov	r0, r5
 800b11a:	f7fd f9b7 	bl	800848c <_fflush_r>
 800b11e:	b938      	cbnz	r0, 800b130 <__swbuf_r+0x74>
 800b120:	4638      	mov	r0, r7
 800b122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b124:	4621      	mov	r1, r4
 800b126:	4628      	mov	r0, r5
 800b128:	f000 f806 	bl	800b138 <__swsetup_r>
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d0d5      	beq.n	800b0dc <__swbuf_r+0x20>
 800b130:	f04f 37ff 	mov.w	r7, #4294967295
 800b134:	e7f4      	b.n	800b120 <__swbuf_r+0x64>
	...

0800b138 <__swsetup_r>:
 800b138:	b538      	push	{r3, r4, r5, lr}
 800b13a:	4b2a      	ldr	r3, [pc, #168]	; (800b1e4 <__swsetup_r+0xac>)
 800b13c:	4605      	mov	r5, r0
 800b13e:	6818      	ldr	r0, [r3, #0]
 800b140:	460c      	mov	r4, r1
 800b142:	b118      	cbz	r0, 800b14c <__swsetup_r+0x14>
 800b144:	6a03      	ldr	r3, [r0, #32]
 800b146:	b90b      	cbnz	r3, 800b14c <__swsetup_r+0x14>
 800b148:	f7fd fa54 	bl	80085f4 <__sinit>
 800b14c:	89a3      	ldrh	r3, [r4, #12]
 800b14e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b152:	0718      	lsls	r0, r3, #28
 800b154:	d422      	bmi.n	800b19c <__swsetup_r+0x64>
 800b156:	06d9      	lsls	r1, r3, #27
 800b158:	d407      	bmi.n	800b16a <__swsetup_r+0x32>
 800b15a:	2309      	movs	r3, #9
 800b15c:	602b      	str	r3, [r5, #0]
 800b15e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b162:	81a3      	strh	r3, [r4, #12]
 800b164:	f04f 30ff 	mov.w	r0, #4294967295
 800b168:	e034      	b.n	800b1d4 <__swsetup_r+0x9c>
 800b16a:	0758      	lsls	r0, r3, #29
 800b16c:	d512      	bpl.n	800b194 <__swsetup_r+0x5c>
 800b16e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b170:	b141      	cbz	r1, 800b184 <__swsetup_r+0x4c>
 800b172:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b176:	4299      	cmp	r1, r3
 800b178:	d002      	beq.n	800b180 <__swsetup_r+0x48>
 800b17a:	4628      	mov	r0, r5
 800b17c:	f7fe f9f2 	bl	8009564 <_free_r>
 800b180:	2300      	movs	r3, #0
 800b182:	6363      	str	r3, [r4, #52]	; 0x34
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b18a:	81a3      	strh	r3, [r4, #12]
 800b18c:	2300      	movs	r3, #0
 800b18e:	6063      	str	r3, [r4, #4]
 800b190:	6923      	ldr	r3, [r4, #16]
 800b192:	6023      	str	r3, [r4, #0]
 800b194:	89a3      	ldrh	r3, [r4, #12]
 800b196:	f043 0308 	orr.w	r3, r3, #8
 800b19a:	81a3      	strh	r3, [r4, #12]
 800b19c:	6923      	ldr	r3, [r4, #16]
 800b19e:	b94b      	cbnz	r3, 800b1b4 <__swsetup_r+0x7c>
 800b1a0:	89a3      	ldrh	r3, [r4, #12]
 800b1a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1aa:	d003      	beq.n	800b1b4 <__swsetup_r+0x7c>
 800b1ac:	4621      	mov	r1, r4
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	f7fe fe7a 	bl	8009ea8 <__smakebuf_r>
 800b1b4:	89a0      	ldrh	r0, [r4, #12]
 800b1b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1ba:	f010 0301 	ands.w	r3, r0, #1
 800b1be:	d00a      	beq.n	800b1d6 <__swsetup_r+0x9e>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	60a3      	str	r3, [r4, #8]
 800b1c4:	6963      	ldr	r3, [r4, #20]
 800b1c6:	425b      	negs	r3, r3
 800b1c8:	61a3      	str	r3, [r4, #24]
 800b1ca:	6923      	ldr	r3, [r4, #16]
 800b1cc:	b943      	cbnz	r3, 800b1e0 <__swsetup_r+0xa8>
 800b1ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b1d2:	d1c4      	bne.n	800b15e <__swsetup_r+0x26>
 800b1d4:	bd38      	pop	{r3, r4, r5, pc}
 800b1d6:	0781      	lsls	r1, r0, #30
 800b1d8:	bf58      	it	pl
 800b1da:	6963      	ldrpl	r3, [r4, #20]
 800b1dc:	60a3      	str	r3, [r4, #8]
 800b1de:	e7f4      	b.n	800b1ca <__swsetup_r+0x92>
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	e7f7      	b.n	800b1d4 <__swsetup_r+0x9c>
 800b1e4:	2000006c 	.word	0x2000006c

0800b1e8 <_raise_r>:
 800b1e8:	291f      	cmp	r1, #31
 800b1ea:	b538      	push	{r3, r4, r5, lr}
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	460d      	mov	r5, r1
 800b1f0:	d904      	bls.n	800b1fc <_raise_r+0x14>
 800b1f2:	2316      	movs	r3, #22
 800b1f4:	6003      	str	r3, [r0, #0]
 800b1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1fa:	bd38      	pop	{r3, r4, r5, pc}
 800b1fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b1fe:	b112      	cbz	r2, 800b206 <_raise_r+0x1e>
 800b200:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b204:	b94b      	cbnz	r3, 800b21a <_raise_r+0x32>
 800b206:	4620      	mov	r0, r4
 800b208:	f000 f830 	bl	800b26c <_getpid_r>
 800b20c:	462a      	mov	r2, r5
 800b20e:	4601      	mov	r1, r0
 800b210:	4620      	mov	r0, r4
 800b212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b216:	f000 b817 	b.w	800b248 <_kill_r>
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d00a      	beq.n	800b234 <_raise_r+0x4c>
 800b21e:	1c59      	adds	r1, r3, #1
 800b220:	d103      	bne.n	800b22a <_raise_r+0x42>
 800b222:	2316      	movs	r3, #22
 800b224:	6003      	str	r3, [r0, #0]
 800b226:	2001      	movs	r0, #1
 800b228:	e7e7      	b.n	800b1fa <_raise_r+0x12>
 800b22a:	2400      	movs	r4, #0
 800b22c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b230:	4628      	mov	r0, r5
 800b232:	4798      	blx	r3
 800b234:	2000      	movs	r0, #0
 800b236:	e7e0      	b.n	800b1fa <_raise_r+0x12>

0800b238 <raise>:
 800b238:	4b02      	ldr	r3, [pc, #8]	; (800b244 <raise+0xc>)
 800b23a:	4601      	mov	r1, r0
 800b23c:	6818      	ldr	r0, [r3, #0]
 800b23e:	f7ff bfd3 	b.w	800b1e8 <_raise_r>
 800b242:	bf00      	nop
 800b244:	2000006c 	.word	0x2000006c

0800b248 <_kill_r>:
 800b248:	b538      	push	{r3, r4, r5, lr}
 800b24a:	4d07      	ldr	r5, [pc, #28]	; (800b268 <_kill_r+0x20>)
 800b24c:	2300      	movs	r3, #0
 800b24e:	4604      	mov	r4, r0
 800b250:	4608      	mov	r0, r1
 800b252:	4611      	mov	r1, r2
 800b254:	602b      	str	r3, [r5, #0]
 800b256:	f7f6 ff89 	bl	800216c <_kill>
 800b25a:	1c43      	adds	r3, r0, #1
 800b25c:	d102      	bne.n	800b264 <_kill_r+0x1c>
 800b25e:	682b      	ldr	r3, [r5, #0]
 800b260:	b103      	cbz	r3, 800b264 <_kill_r+0x1c>
 800b262:	6023      	str	r3, [r4, #0]
 800b264:	bd38      	pop	{r3, r4, r5, pc}
 800b266:	bf00      	nop
 800b268:	2000a580 	.word	0x2000a580

0800b26c <_getpid_r>:
 800b26c:	f7f6 bf76 	b.w	800215c <_getpid>

0800b270 <_malloc_usable_size_r>:
 800b270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b274:	1f18      	subs	r0, r3, #4
 800b276:	2b00      	cmp	r3, #0
 800b278:	bfbc      	itt	lt
 800b27a:	580b      	ldrlt	r3, [r1, r0]
 800b27c:	18c0      	addlt	r0, r0, r3
 800b27e:	4770      	bx	lr

0800b280 <log>:
 800b280:	b538      	push	{r3, r4, r5, lr}
 800b282:	ed2d 8b02 	vpush	{d8}
 800b286:	ec55 4b10 	vmov	r4, r5, d0
 800b28a:	f000 f841 	bl	800b310 <__ieee754_log>
 800b28e:	4622      	mov	r2, r4
 800b290:	462b      	mov	r3, r5
 800b292:	4620      	mov	r0, r4
 800b294:	4629      	mov	r1, r5
 800b296:	eeb0 8a40 	vmov.f32	s16, s0
 800b29a:	eef0 8a60 	vmov.f32	s17, s1
 800b29e:	f7f5 fc45 	bl	8000b2c <__aeabi_dcmpun>
 800b2a2:	b998      	cbnz	r0, 800b2cc <log+0x4c>
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	f7f5 fc34 	bl	8000b18 <__aeabi_dcmpgt>
 800b2b0:	b960      	cbnz	r0, 800b2cc <log+0x4c>
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	f7f5 fc05 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2be:	b160      	cbz	r0, 800b2da <log+0x5a>
 800b2c0:	f7fd fa98 	bl	80087f4 <__errno>
 800b2c4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800b2f0 <log+0x70>
 800b2c8:	2322      	movs	r3, #34	; 0x22
 800b2ca:	6003      	str	r3, [r0, #0]
 800b2cc:	eeb0 0a48 	vmov.f32	s0, s16
 800b2d0:	eef0 0a68 	vmov.f32	s1, s17
 800b2d4:	ecbd 8b02 	vpop	{d8}
 800b2d8:	bd38      	pop	{r3, r4, r5, pc}
 800b2da:	f7fd fa8b 	bl	80087f4 <__errno>
 800b2de:	ecbd 8b02 	vpop	{d8}
 800b2e2:	2321      	movs	r3, #33	; 0x21
 800b2e4:	6003      	str	r3, [r0, #0]
 800b2e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2ea:	4803      	ldr	r0, [pc, #12]	; (800b2f8 <log+0x78>)
 800b2ec:	f000 b808 	b.w	800b300 <nan>
 800b2f0:	00000000 	.word	0x00000000
 800b2f4:	fff00000 	.word	0xfff00000
 800b2f8:	0800e279 	.word	0x0800e279
 800b2fc:	00000000 	.word	0x00000000

0800b300 <nan>:
 800b300:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b308 <nan+0x8>
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	00000000 	.word	0x00000000
 800b30c:	7ff80000 	.word	0x7ff80000

0800b310 <__ieee754_log>:
 800b310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b314:	ec51 0b10 	vmov	r0, r1, d0
 800b318:	ed2d 8b04 	vpush	{d8-d9}
 800b31c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b320:	b083      	sub	sp, #12
 800b322:	460d      	mov	r5, r1
 800b324:	da29      	bge.n	800b37a <__ieee754_log+0x6a>
 800b326:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b32a:	4303      	orrs	r3, r0
 800b32c:	ee10 2a10 	vmov	r2, s0
 800b330:	d10c      	bne.n	800b34c <__ieee754_log+0x3c>
 800b332:	49cf      	ldr	r1, [pc, #828]	; (800b670 <__ieee754_log+0x360>)
 800b334:	2200      	movs	r2, #0
 800b336:	2300      	movs	r3, #0
 800b338:	2000      	movs	r0, #0
 800b33a:	f7f5 fa87 	bl	800084c <__aeabi_ddiv>
 800b33e:	ec41 0b10 	vmov	d0, r0, r1
 800b342:	b003      	add	sp, #12
 800b344:	ecbd 8b04 	vpop	{d8-d9}
 800b348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34c:	2900      	cmp	r1, #0
 800b34e:	da05      	bge.n	800b35c <__ieee754_log+0x4c>
 800b350:	460b      	mov	r3, r1
 800b352:	f7f4 ff99 	bl	8000288 <__aeabi_dsub>
 800b356:	2200      	movs	r2, #0
 800b358:	2300      	movs	r3, #0
 800b35a:	e7ee      	b.n	800b33a <__ieee754_log+0x2a>
 800b35c:	4bc5      	ldr	r3, [pc, #788]	; (800b674 <__ieee754_log+0x364>)
 800b35e:	2200      	movs	r2, #0
 800b360:	f7f5 f94a 	bl	80005f8 <__aeabi_dmul>
 800b364:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b368:	460d      	mov	r5, r1
 800b36a:	4ac3      	ldr	r2, [pc, #780]	; (800b678 <__ieee754_log+0x368>)
 800b36c:	4295      	cmp	r5, r2
 800b36e:	dd06      	ble.n	800b37e <__ieee754_log+0x6e>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	f7f4 ff8a 	bl	800028c <__adddf3>
 800b378:	e7e1      	b.n	800b33e <__ieee754_log+0x2e>
 800b37a:	2300      	movs	r3, #0
 800b37c:	e7f5      	b.n	800b36a <__ieee754_log+0x5a>
 800b37e:	152c      	asrs	r4, r5, #20
 800b380:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b384:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b388:	441c      	add	r4, r3
 800b38a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800b38e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b396:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800b39a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800b39e:	ea42 0105 	orr.w	r1, r2, r5
 800b3a2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	4bb4      	ldr	r3, [pc, #720]	; (800b67c <__ieee754_log+0x36c>)
 800b3aa:	f7f4 ff6d 	bl	8000288 <__aeabi_dsub>
 800b3ae:	1cab      	adds	r3, r5, #2
 800b3b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	4682      	mov	sl, r0
 800b3b8:	468b      	mov	fp, r1
 800b3ba:	f04f 0200 	mov.w	r2, #0
 800b3be:	dc53      	bgt.n	800b468 <__ieee754_log+0x158>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	f7f5 fb81 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3c6:	b1d0      	cbz	r0, 800b3fe <__ieee754_log+0xee>
 800b3c8:	2c00      	cmp	r4, #0
 800b3ca:	f000 8122 	beq.w	800b612 <__ieee754_log+0x302>
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f7f5 f8a8 	bl	8000524 <__aeabi_i2d>
 800b3d4:	a390      	add	r3, pc, #576	; (adr r3, 800b618 <__ieee754_log+0x308>)
 800b3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3da:	4606      	mov	r6, r0
 800b3dc:	460f      	mov	r7, r1
 800b3de:	f7f5 f90b 	bl	80005f8 <__aeabi_dmul>
 800b3e2:	a38f      	add	r3, pc, #572	; (adr r3, 800b620 <__ieee754_log+0x310>)
 800b3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	460d      	mov	r5, r1
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	f7f5 f902 	bl	80005f8 <__aeabi_dmul>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	4629      	mov	r1, r5
 800b3fc:	e7ba      	b.n	800b374 <__ieee754_log+0x64>
 800b3fe:	a38a      	add	r3, pc, #552	; (adr r3, 800b628 <__ieee754_log+0x318>)
 800b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b404:	4650      	mov	r0, sl
 800b406:	4659      	mov	r1, fp
 800b408:	f7f5 f8f6 	bl	80005f8 <__aeabi_dmul>
 800b40c:	4602      	mov	r2, r0
 800b40e:	460b      	mov	r3, r1
 800b410:	2000      	movs	r0, #0
 800b412:	499b      	ldr	r1, [pc, #620]	; (800b680 <__ieee754_log+0x370>)
 800b414:	f7f4 ff38 	bl	8000288 <__aeabi_dsub>
 800b418:	4652      	mov	r2, sl
 800b41a:	4606      	mov	r6, r0
 800b41c:	460f      	mov	r7, r1
 800b41e:	465b      	mov	r3, fp
 800b420:	4650      	mov	r0, sl
 800b422:	4659      	mov	r1, fp
 800b424:	f7f5 f8e8 	bl	80005f8 <__aeabi_dmul>
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	4630      	mov	r0, r6
 800b42e:	4639      	mov	r1, r7
 800b430:	f7f5 f8e2 	bl	80005f8 <__aeabi_dmul>
 800b434:	4606      	mov	r6, r0
 800b436:	460f      	mov	r7, r1
 800b438:	b914      	cbnz	r4, 800b440 <__ieee754_log+0x130>
 800b43a:	4632      	mov	r2, r6
 800b43c:	463b      	mov	r3, r7
 800b43e:	e0a2      	b.n	800b586 <__ieee754_log+0x276>
 800b440:	4620      	mov	r0, r4
 800b442:	f7f5 f86f 	bl	8000524 <__aeabi_i2d>
 800b446:	a374      	add	r3, pc, #464	; (adr r3, 800b618 <__ieee754_log+0x308>)
 800b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44c:	4680      	mov	r8, r0
 800b44e:	4689      	mov	r9, r1
 800b450:	f7f5 f8d2 	bl	80005f8 <__aeabi_dmul>
 800b454:	a372      	add	r3, pc, #456	; (adr r3, 800b620 <__ieee754_log+0x310>)
 800b456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45a:	4604      	mov	r4, r0
 800b45c:	460d      	mov	r5, r1
 800b45e:	4640      	mov	r0, r8
 800b460:	4649      	mov	r1, r9
 800b462:	f7f5 f8c9 	bl	80005f8 <__aeabi_dmul>
 800b466:	e0a7      	b.n	800b5b8 <__ieee754_log+0x2a8>
 800b468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b46c:	f7f4 ff0e 	bl	800028c <__adddf3>
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	4650      	mov	r0, sl
 800b476:	4659      	mov	r1, fp
 800b478:	f7f5 f9e8 	bl	800084c <__aeabi_ddiv>
 800b47c:	ec41 0b18 	vmov	d8, r0, r1
 800b480:	4620      	mov	r0, r4
 800b482:	f7f5 f84f 	bl	8000524 <__aeabi_i2d>
 800b486:	ec53 2b18 	vmov	r2, r3, d8
 800b48a:	ec41 0b19 	vmov	d9, r0, r1
 800b48e:	ec51 0b18 	vmov	r0, r1, d8
 800b492:	f7f5 f8b1 	bl	80005f8 <__aeabi_dmul>
 800b496:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800b49a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b49e:	9301      	str	r3, [sp, #4]
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4680      	mov	r8, r0
 800b4a6:	4689      	mov	r9, r1
 800b4a8:	f7f5 f8a6 	bl	80005f8 <__aeabi_dmul>
 800b4ac:	a360      	add	r3, pc, #384	; (adr r3, 800b630 <__ieee754_log+0x320>)
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	460f      	mov	r7, r1
 800b4b6:	f7f5 f89f 	bl	80005f8 <__aeabi_dmul>
 800b4ba:	a35f      	add	r3, pc, #380	; (adr r3, 800b638 <__ieee754_log+0x328>)
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	f7f4 fee4 	bl	800028c <__adddf3>
 800b4c4:	4632      	mov	r2, r6
 800b4c6:	463b      	mov	r3, r7
 800b4c8:	f7f5 f896 	bl	80005f8 <__aeabi_dmul>
 800b4cc:	a35c      	add	r3, pc, #368	; (adr r3, 800b640 <__ieee754_log+0x330>)
 800b4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d2:	f7f4 fedb 	bl	800028c <__adddf3>
 800b4d6:	4632      	mov	r2, r6
 800b4d8:	463b      	mov	r3, r7
 800b4da:	f7f5 f88d 	bl	80005f8 <__aeabi_dmul>
 800b4de:	a35a      	add	r3, pc, #360	; (adr r3, 800b648 <__ieee754_log+0x338>)
 800b4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e4:	f7f4 fed2 	bl	800028c <__adddf3>
 800b4e8:	4642      	mov	r2, r8
 800b4ea:	464b      	mov	r3, r9
 800b4ec:	f7f5 f884 	bl	80005f8 <__aeabi_dmul>
 800b4f0:	a357      	add	r3, pc, #348	; (adr r3, 800b650 <__ieee754_log+0x340>)
 800b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f6:	4680      	mov	r8, r0
 800b4f8:	4689      	mov	r9, r1
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	4639      	mov	r1, r7
 800b4fe:	f7f5 f87b 	bl	80005f8 <__aeabi_dmul>
 800b502:	a355      	add	r3, pc, #340	; (adr r3, 800b658 <__ieee754_log+0x348>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f7f4 fec0 	bl	800028c <__adddf3>
 800b50c:	4632      	mov	r2, r6
 800b50e:	463b      	mov	r3, r7
 800b510:	f7f5 f872 	bl	80005f8 <__aeabi_dmul>
 800b514:	a352      	add	r3, pc, #328	; (adr r3, 800b660 <__ieee754_log+0x350>)
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	f7f4 feb7 	bl	800028c <__adddf3>
 800b51e:	4632      	mov	r2, r6
 800b520:	463b      	mov	r3, r7
 800b522:	f7f5 f869 	bl	80005f8 <__aeabi_dmul>
 800b526:	460b      	mov	r3, r1
 800b528:	4602      	mov	r2, r0
 800b52a:	4649      	mov	r1, r9
 800b52c:	4640      	mov	r0, r8
 800b52e:	f7f4 fead 	bl	800028c <__adddf3>
 800b532:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b536:	9b01      	ldr	r3, [sp, #4]
 800b538:	3551      	adds	r5, #81	; 0x51
 800b53a:	431d      	orrs	r5, r3
 800b53c:	2d00      	cmp	r5, #0
 800b53e:	4680      	mov	r8, r0
 800b540:	4689      	mov	r9, r1
 800b542:	dd48      	ble.n	800b5d6 <__ieee754_log+0x2c6>
 800b544:	4b4e      	ldr	r3, [pc, #312]	; (800b680 <__ieee754_log+0x370>)
 800b546:	2200      	movs	r2, #0
 800b548:	4650      	mov	r0, sl
 800b54a:	4659      	mov	r1, fp
 800b54c:	f7f5 f854 	bl	80005f8 <__aeabi_dmul>
 800b550:	4652      	mov	r2, sl
 800b552:	465b      	mov	r3, fp
 800b554:	f7f5 f850 	bl	80005f8 <__aeabi_dmul>
 800b558:	4602      	mov	r2, r0
 800b55a:	460b      	mov	r3, r1
 800b55c:	4606      	mov	r6, r0
 800b55e:	460f      	mov	r7, r1
 800b560:	4640      	mov	r0, r8
 800b562:	4649      	mov	r1, r9
 800b564:	f7f4 fe92 	bl	800028c <__adddf3>
 800b568:	ec53 2b18 	vmov	r2, r3, d8
 800b56c:	f7f5 f844 	bl	80005f8 <__aeabi_dmul>
 800b570:	4680      	mov	r8, r0
 800b572:	4689      	mov	r9, r1
 800b574:	b964      	cbnz	r4, 800b590 <__ieee754_log+0x280>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	4630      	mov	r0, r6
 800b57c:	4639      	mov	r1, r7
 800b57e:	f7f4 fe83 	bl	8000288 <__aeabi_dsub>
 800b582:	4602      	mov	r2, r0
 800b584:	460b      	mov	r3, r1
 800b586:	4650      	mov	r0, sl
 800b588:	4659      	mov	r1, fp
 800b58a:	f7f4 fe7d 	bl	8000288 <__aeabi_dsub>
 800b58e:	e6d6      	b.n	800b33e <__ieee754_log+0x2e>
 800b590:	a321      	add	r3, pc, #132	; (adr r3, 800b618 <__ieee754_log+0x308>)
 800b592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b596:	ec51 0b19 	vmov	r0, r1, d9
 800b59a:	f7f5 f82d 	bl	80005f8 <__aeabi_dmul>
 800b59e:	a320      	add	r3, pc, #128	; (adr r3, 800b620 <__ieee754_log+0x310>)
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	460d      	mov	r5, r1
 800b5a8:	ec51 0b19 	vmov	r0, r1, d9
 800b5ac:	f7f5 f824 	bl	80005f8 <__aeabi_dmul>
 800b5b0:	4642      	mov	r2, r8
 800b5b2:	464b      	mov	r3, r9
 800b5b4:	f7f4 fe6a 	bl	800028c <__adddf3>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	4630      	mov	r0, r6
 800b5be:	4639      	mov	r1, r7
 800b5c0:	f7f4 fe62 	bl	8000288 <__aeabi_dsub>
 800b5c4:	4652      	mov	r2, sl
 800b5c6:	465b      	mov	r3, fp
 800b5c8:	f7f4 fe5e 	bl	8000288 <__aeabi_dsub>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	4629      	mov	r1, r5
 800b5d4:	e7d9      	b.n	800b58a <__ieee754_log+0x27a>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4650      	mov	r0, sl
 800b5dc:	4659      	mov	r1, fp
 800b5de:	f7f4 fe53 	bl	8000288 <__aeabi_dsub>
 800b5e2:	ec53 2b18 	vmov	r2, r3, d8
 800b5e6:	f7f5 f807 	bl	80005f8 <__aeabi_dmul>
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	460f      	mov	r7, r1
 800b5ee:	2c00      	cmp	r4, #0
 800b5f0:	f43f af23 	beq.w	800b43a <__ieee754_log+0x12a>
 800b5f4:	a308      	add	r3, pc, #32	; (adr r3, 800b618 <__ieee754_log+0x308>)
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	ec51 0b19 	vmov	r0, r1, d9
 800b5fe:	f7f4 fffb 	bl	80005f8 <__aeabi_dmul>
 800b602:	a307      	add	r3, pc, #28	; (adr r3, 800b620 <__ieee754_log+0x310>)
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	4604      	mov	r4, r0
 800b60a:	460d      	mov	r5, r1
 800b60c:	ec51 0b19 	vmov	r0, r1, d9
 800b610:	e727      	b.n	800b462 <__ieee754_log+0x152>
 800b612:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800b668 <__ieee754_log+0x358>
 800b616:	e694      	b.n	800b342 <__ieee754_log+0x32>
 800b618:	fee00000 	.word	0xfee00000
 800b61c:	3fe62e42 	.word	0x3fe62e42
 800b620:	35793c76 	.word	0x35793c76
 800b624:	3dea39ef 	.word	0x3dea39ef
 800b628:	55555555 	.word	0x55555555
 800b62c:	3fd55555 	.word	0x3fd55555
 800b630:	df3e5244 	.word	0xdf3e5244
 800b634:	3fc2f112 	.word	0x3fc2f112
 800b638:	96cb03de 	.word	0x96cb03de
 800b63c:	3fc74664 	.word	0x3fc74664
 800b640:	94229359 	.word	0x94229359
 800b644:	3fd24924 	.word	0x3fd24924
 800b648:	55555593 	.word	0x55555593
 800b64c:	3fe55555 	.word	0x3fe55555
 800b650:	d078c69f 	.word	0xd078c69f
 800b654:	3fc39a09 	.word	0x3fc39a09
 800b658:	1d8e78af 	.word	0x1d8e78af
 800b65c:	3fcc71c5 	.word	0x3fcc71c5
 800b660:	9997fa04 	.word	0x9997fa04
 800b664:	3fd99999 	.word	0x3fd99999
	...
 800b670:	c3500000 	.word	0xc3500000
 800b674:	43500000 	.word	0x43500000
 800b678:	7fefffff 	.word	0x7fefffff
 800b67c:	3ff00000 	.word	0x3ff00000
 800b680:	3fe00000 	.word	0x3fe00000

0800b684 <_init>:
 800b684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b686:	bf00      	nop
 800b688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b68a:	bc08      	pop	{r3}
 800b68c:	469e      	mov	lr, r3
 800b68e:	4770      	bx	lr

0800b690 <_fini>:
 800b690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b692:	bf00      	nop
 800b694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b696:	bc08      	pop	{r3}
 800b698:	469e      	mov	lr, r3
 800b69a:	4770      	bx	lr
