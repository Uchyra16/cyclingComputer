
cyclingSpeedometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08008390  08008390  00018390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008774  08008774  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008774  08008774  00018774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800877c  0800877c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800877c  0800877c  0001877c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008780  08008780  00018780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001d4  08008958  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08008958  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b8f  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e51  00000000  00000000  00034dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  00037c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9d  00000000  00000000  00038ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028dfe  00000000  00000000  00039d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187c5  00000000  00000000  00062b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7937  00000000  00000000  0007b350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f58  00000000  00000000  00172c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00178be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008374 	.word	0x08008374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008374 	.word	0x08008374

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_GPIO_Init+0x94>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <MX_GPIO_Init+0x94>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_GPIO_Init+0x94>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_GPIO_Init+0x94>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <MX_GPIO_Init+0x94>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_GPIO_Init+0x94>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <MX_GPIO_Init+0x94>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <MX_GPIO_Init+0x94>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <MX_GPIO_Init+0x94>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HALL_SENSOR_Pin;
 8000fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fa8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4808      	ldr	r0, [pc, #32]	; (8000fdc <MX_GPIO_Init+0x98>)
 8000fba:	f000 ff33 	bl	8001e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	210a      	movs	r1, #10
 8000fc2:	2028      	movs	r0, #40	; 0x28
 8000fc4:	f000 fef7 	bl	8001db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fc8:	2028      	movs	r0, #40	; 0x28
 8000fca:	f000 ff10 	bl	8001dee <HAL_NVIC_EnableIRQ>

}
 8000fce:	bf00      	nop
 8000fd0:	3720      	adds	r7, #32
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	48000800 	.word	0x48000800

08000fe0 <HAL_GPIO_EXTI_Callback>:
volatile uint32_t current_time = 0;
volatile uint32_t period = 0;
volatile float speed = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == HALL_SENSOR_Pin) {
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ff0:	d113      	bne.n	800101a <HAL_GPIO_EXTI_Callback+0x3a>
		//Zapisz aktualny czas
		current_time = HAL_GetTick();
 8000ff2:	f000 fdd5 	bl	8001ba0 <HAL_GetTick>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ffa:	6013      	str	r3, [r2, #0]
		//Oblicz czas pomiędzy wykryciami magnesu (w ms)
		period = current_time - old_time;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_GPIO_EXTI_Callback+0x48>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001008:	6013      	str	r3, [r2, #0]
		old_time = current_time;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_GPIO_EXTI_Callback+0x44>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_GPIO_EXTI_Callback+0x48>)
 8001010:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <HAL_GPIO_EXTI_Callback+0x50>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200001f4 	.word	0x200001f4
 8001028:	200001f0 	.word	0x200001f0
 800102c:	200001f8 	.word	0x200001f8
 8001030:	20000258 	.word	0x20000258

08001034 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	if(htim == &htim6) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d108      	bne.n	8001056 <HAL_TIM_PeriodElapsedCallback+0x22>
		//Wyzeruj predkosc
		current_time = 0;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
		old_time = 0;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
		period = 0;
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
	}
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000258 	.word	0x20000258
 8001068:	200001f4 	.word	0x200001f4
 800106c:	200001f0 	.word	0x200001f0
 8001070:	200001f8 	.word	0x200001f8
 8001074:	00000000 	.word	0x00000000

08001078 <speedValue>:

float speedValue(uint32_t period, uint8_t wheelSize_inch)
{
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
	float wheelSize_m = (float)wheelSize_inch * 0.0254;
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800108e:	ee17 0a90 	vmov	r0, s15
 8001092:	f7ff fa59 	bl	8000548 <__aeabi_f2d>
 8001096:	a335      	add	r3, pc, #212	; (adr r3, 800116c <speedValue+0xf4>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff faac 	bl	80005f8 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fd7e 	bl	8000ba8 <__aeabi_d2f>
 80010ac:	4603      	mov	r3, r0
 80010ae:	617b      	str	r3, [r7, #20]
	float radius_m = wheelSize_m / 2;
 80010b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80010b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80010b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010bc:	edc7 7a04 	vstr	s15, [r7, #16]
	float period_s = 0.001 * (float)period;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ca:	ee17 0a90 	vmov	r0, s15
 80010ce:	f7ff fa3b 	bl	8000548 <__aeabi_f2d>
 80010d2:	a328      	add	r3, pc, #160	; (adr r3, 8001174 <speedValue+0xfc>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	f7ff fa8e 	bl	80005f8 <__aeabi_dmul>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fd60 	bl	8000ba8 <__aeabi_d2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	60fb      	str	r3, [r7, #12]

	if(period > 0)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d01e      	beq.n	8001130 <speedValue+0xb8>
	speed = (2.0*3.14*radius_m)/period_s;
 80010f2:	6938      	ldr	r0, [r7, #16]
 80010f4:	f7ff fa28 	bl	8000548 <__aeabi_f2d>
 80010f8:	a320      	add	r3, pc, #128	; (adr r3, 800117c <speedValue+0x104>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff fa7b 	bl	80005f8 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4614      	mov	r4, r2
 8001108:	461d      	mov	r5, r3
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f7ff fa1c 	bl	8000548 <__aeabi_f2d>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4620      	mov	r0, r4
 8001116:	4629      	mov	r1, r5
 8001118:	f7ff fb98 	bl	800084c <__aeabi_ddiv>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fd40 	bl	8000ba8 <__aeabi_d2f>
 8001128:	4603      	mov	r3, r0
 800112a:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <speedValue+0xe8>)
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e003      	b.n	8001138 <speedValue+0xc0>
	else speed = 0.0;
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <speedValue+0xe8>)
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	601a      	str	r2, [r3, #0]

	return speed*3600/1000;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <speedValue+0xe8>)
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001164 <speedValue+0xec>
 8001142:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001146:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001168 <speedValue+0xf0>
 800114a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800114e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001152:	eeb0 0a67 	vmov.f32	s0, s15
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bdb0      	pop	{r4, r5, r7, pc}
 800115c:	f3af 8000 	nop.w
 8001160:	200001fc 	.word	0x200001fc
 8001164:	45610000 	.word	0x45610000
 8001168:	447a0000 	.word	0x447a0000
 800116c:	25460aa6 	.word	0x25460aa6
 8001170:	3f9a0275 	.word	0x3f9a0275
 8001174:	d2f1a9fc 	.word	0xd2f1a9fc
 8001178:	3f50624d 	.word	0x3f50624d
 800117c:	51eb851f 	.word	0x51eb851f
 8001180:	40191eb8 	.word	0x40191eb8

08001184 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_I2C1_Init+0x74>)
 800118a:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <MX_I2C1_Init+0x78>)
 800118c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_I2C1_Init+0x74>)
 8001190:	4a1b      	ldr	r2, [pc, #108]	; (8001200 <MX_I2C1_Init+0x7c>)
 8001192:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_I2C1_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_I2C1_Init+0x74>)
 800119c:	2201      	movs	r2, #1
 800119e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_I2C1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_I2C1_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_I2C1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_I2C1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_I2C1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011be:	480e      	ldr	r0, [pc, #56]	; (80011f8 <MX_I2C1_Init+0x74>)
 80011c0:	f000 fff2 	bl	80021a8 <HAL_I2C_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011ca:	f000 fa2f 	bl	800162c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ce:	2100      	movs	r1, #0
 80011d0:	4809      	ldr	r0, [pc, #36]	; (80011f8 <MX_I2C1_Init+0x74>)
 80011d2:	f001 fd6b 	bl	8002cac <HAL_I2CEx_ConfigAnalogFilter>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011dc:	f000 fa26 	bl	800162c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011e0:	2100      	movs	r1, #0
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_I2C1_Init+0x74>)
 80011e4:	f001 fdad 	bl	8002d42 <HAL_I2CEx_ConfigDigitalFilter>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ee:	f000 fa1d 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000200 	.word	0x20000200
 80011fc:	40005400 	.word	0x40005400
 8001200:	10909cec 	.word	0x10909cec

08001204 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0ac      	sub	sp, #176	; 0xb0
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2288      	movs	r2, #136	; 0x88
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f004 ff4e 	bl	80060c6 <memset>
  if(i2cHandle->Instance==I2C1)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <HAL_I2C_MspInit+0xb0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d13a      	bne.n	80012aa <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001234:	2340      	movs	r3, #64	; 0x40
 8001236:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001238:	2300      	movs	r3, #0
 800123a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4618      	mov	r0, r3
 8001242:	f002 fc2f 	bl	8003aa4 <HAL_RCCEx_PeriphCLKConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800124c:	f000 f9ee 	bl	800162c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_I2C_MspInit+0xb4>)
 8001252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001254:	4a18      	ldr	r2, [pc, #96]	; (80012b8 <HAL_I2C_MspInit+0xb4>)
 8001256:	f043 0302 	orr.w	r3, r3, #2
 800125a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_I2C_MspInit+0xb4>)
 800125e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001268:	23c0      	movs	r3, #192	; 0xc0
 800126a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126e:	2312      	movs	r3, #18
 8001270:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001280:	2304      	movs	r3, #4
 8001282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800128a:	4619      	mov	r1, r3
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <HAL_I2C_MspInit+0xb8>)
 800128e:	f000 fdc9 	bl	8001e24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_I2C_MspInit+0xb4>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_I2C_MspInit+0xb4>)
 8001298:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800129c:	6593      	str	r3, [r2, #88]	; 0x58
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_I2C_MspInit+0xb4>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012aa:	bf00      	nop
 80012ac:	37b0      	adds	r7, #176	; 0xb0
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40005400 	.word	0x40005400
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000400 	.word	0x48000400

080012c0 <lps_read_reg>:
#define TIMEOUT                 100

//Function responsible for:
//Reading data from lps25hb registers
static uint8_t lps_read_reg(uint8_t reg)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	9302      	str	r3, [sp, #8]
 80012d6:	2301      	movs	r3, #1
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	f107 030f 	add.w	r3, r7, #15
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2301      	movs	r3, #1
 80012e2:	21ba      	movs	r1, #186	; 0xba
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <lps_read_reg+0x34>)
 80012e6:	f001 f90f 	bl	8002508 <HAL_I2C_Mem_Read>

    return value;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000200 	.word	0x20000200

080012f8 <lps_write_reg>:

//Function responsible for:
//Writing data to lps25hb registers
static void lps_write_reg(uint8_t reg, uint8_t value)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af04      	add	r7, sp, #16
 80012fe:	4603      	mov	r3, r0
 8001300:	460a      	mov	r2, r1
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	4613      	mov	r3, r2
 8001306:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	b29a      	uxth	r2, r3
 800130c:	2364      	movs	r3, #100	; 0x64
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	2301      	movs	r3, #1
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	1dbb      	adds	r3, r7, #6
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	21ba      	movs	r1, #186	; 0xba
 800131c:	4803      	ldr	r0, [pc, #12]	; (800132c <lps_write_reg+0x34>)
 800131e:	f000 ffdf 	bl	80022e0 <HAL_I2C_Mem_Write>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000200 	.word	0x20000200

08001330 <lps25hb_init>:

HAL_StatusTypeDef lps25hb_init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	if (lps_read_reg(LPS25HB_WHO_AM_I) != 0xbd)
 8001334:	200f      	movs	r0, #15
 8001336:	f7ff ffc3 	bl	80012c0 <lps_read_reg>
 800133a:	4603      	mov	r3, r0
 800133c:	2bbd      	cmp	r3, #189	; 0xbd
 800133e:	d001      	beq.n	8001344 <lps25hb_init+0x14>
		 return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e00c      	b.n	800135e <lps25hb_init+0x2e>

	lps_write_reg(LPS25HB_CTRL_REG1,  0xC0);
 8001344:	21c0      	movs	r1, #192	; 0xc0
 8001346:	2020      	movs	r0, #32
 8001348:	f7ff ffd6 	bl	80012f8 <lps_write_reg>
	lps_write_reg(LPS25HB_CTRL_REG2,  0x40);
 800134c:	2140      	movs	r1, #64	; 0x40
 800134e:	2021      	movs	r0, #33	; 0x21
 8001350:	f7ff ffd2 	bl	80012f8 <lps_write_reg>
	lps_write_reg(LPS25HB_FIFO_CTRL,  0xDF);
 8001354:	21df      	movs	r1, #223	; 0xdf
 8001356:	202e      	movs	r0, #46	; 0x2e
 8001358:	f7ff ffce 	bl	80012f8 <lps_write_reg>

	return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <lps25hb_read_temp>:

float lps25hb_read_temp(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af04      	add	r7, sp, #16
     int16_t temp;

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, sizeof(temp), TIMEOUT) != HAL_OK)
 800136a:	2364      	movs	r3, #100	; 0x64
 800136c:	9302      	str	r3, [sp, #8]
 800136e:	2302      	movs	r3, #2
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	1dbb      	adds	r3, r7, #6
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2301      	movs	r3, #1
 8001378:	22ab      	movs	r2, #171	; 0xab
 800137a:	21ba      	movs	r1, #186	; 0xba
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <lps25hb_read_temp+0x50>)
 800137e:	f001 f8c3 	bl	8002508 <HAL_I2C_Mem_Read>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <lps25hb_read_temp+0x28>
         Error_Handler();
 8001388:	f000 f950 	bl	800162c <Error_Handler>

     return 42.5f + temp / 480.0f;
 800138c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001398:	eddf 6a07 	vldr	s13, [pc, #28]	; 80013b8 <lps25hb_read_temp+0x54>
 800139c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80013bc <lps25hb_read_temp+0x58>
 80013a4:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80013a8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000200 	.word	0x20000200
 80013b8:	43f00000 	.word	0x43f00000
 80013bc:	422a0000 	.word	0x422a0000

080013c0 <lps25hb_read_pressure>:

float lps25hb_read_pressure(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af04      	add	r7, sp, #16
     int32_t pressure = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_PRESS_OUT_XL | 0x80, 1, (int8_t*)&pressure, 3, TIMEOUT) != HAL_OK)
 80013ca:	2364      	movs	r3, #100	; 0x64
 80013cc:	9302      	str	r3, [sp, #8]
 80013ce:	2303      	movs	r3, #3
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2301      	movs	r3, #1
 80013d8:	22a8      	movs	r2, #168	; 0xa8
 80013da:	21ba      	movs	r1, #186	; 0xba
 80013dc:	480b      	ldr	r0, [pc, #44]	; (800140c <lps25hb_read_pressure+0x4c>)
 80013de:	f001 f893 	bl	8002508 <HAL_I2C_Mem_Read>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <lps25hb_read_pressure+0x2c>
         Error_Handler();
 80013e8:	f000 f920 	bl	800162c <Error_Handler>

     return pressure / 4096.0f;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001410 <lps25hb_read_pressure+0x50>
 80013fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013fe:	eef0 7a66 	vmov.f32	s15, s13
}
 8001402:	eeb0 0a67 	vmov.f32	s0, s15
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000200 	.word	0x20000200
 8001410:	45800000 	.word	0x45800000

08001414 <__io_putchar>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
int __io_putchar(int ch)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	if(ch == '\n') {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b0a      	cmp	r3, #10
 8001420:	d102      	bne.n	8001428 <__io_putchar+0x14>
		__io_putchar('\r');
 8001422:	200d      	movs	r0, #13
 8001424:	f7ff fff6 	bl	8001414 <__io_putchar>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001428:	1d39      	adds	r1, r7, #4
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	2201      	movs	r2, #1
 8001430:	4803      	ldr	r0, [pc, #12]	; (8001440 <__io_putchar+0x2c>)
 8001432:	f003 fb73 	bl	8004b1c <HAL_UART_Transmit>

	return 1;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200002a4 	.word	0x200002a4
 8001444:	00000000 	.word	0x00000000

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144e:	f000 fb3e 	bl	8001ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001452:	f000 f899 	bl	8001588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001456:	f7ff fd75 	bl	8000f44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800145a:	f000 fa83 	bl	8001964 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800145e:	f000 fa23 	bl	80018a8 <MX_TIM6_Init>
  MX_I2C1_Init();
 8001462:	f7ff fe8f 	bl	8001184 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim6);
 8001466:	4842      	ldr	r0, [pc, #264]	; (8001570 <main+0x128>)
 8001468:	f003 f830 	bl	80044cc <HAL_TIM_Base_Start_IT>
  lps25hb_init();
 800146c:	f7ff ff60 	bl	8001330 <lps25hb_init>

  float p0 = lps25hb_read_pressure();
 8001470:	f7ff ffa6 	bl	80013c0 <lps25hb_read_pressure>
 8001474:	ed87 0a05 	vstr	s0, [r7, #20]

  HAL_Delay(5000);
 8001478:	f241 3088 	movw	r0, #5000	; 0x1388
 800147c:	f000 fb9c 	bl	8001bb8 <HAL_Delay>

  while (1)
  {
	float temp = lps25hb_read_temp() + 273.15;
 8001480:	f7ff ff70 	bl	8001364 <lps25hb_read_temp>
 8001484:	ee10 3a10 	vmov	r3, s0
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f85d 	bl	8000548 <__aeabi_f2d>
 800148e:	a334      	add	r3, pc, #208	; (adr r3, 8001560 <main+0x118>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7fe fefa 	bl	800028c <__adddf3>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fb82 	bl	8000ba8 <__aeabi_d2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	613b      	str	r3, [r7, #16]
	float p = lps25hb_read_pressure();
 80014a8:	f7ff ff8a 	bl	80013c0 <lps25hb_read_pressure>
 80014ac:	ed87 0a03 	vstr	s0, [r7, #12]
	float h = -29.271769 * temp * log(p / p0);
 80014b0:	6938      	ldr	r0, [r7, #16]
 80014b2:	f7ff f849 	bl	8000548 <__aeabi_f2d>
 80014b6:	a32c      	add	r3, pc, #176	; (adr r3, 8001568 <main+0x120>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff f89c 	bl	80005f8 <__aeabi_dmul>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4614      	mov	r4, r2
 80014c6:	461d      	mov	r5, r3
 80014c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80014cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014d4:	ee16 0a90 	vmov	r0, s13
 80014d8:	f7ff f836 	bl	8000548 <__aeabi_f2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	ec43 2b10 	vmov	d0, r2, r3
 80014e4:	f006 fd44 	bl	8007f70 <log>
 80014e8:	ec53 2b10 	vmov	r2, r3, d0
 80014ec:	4620      	mov	r0, r4
 80014ee:	4629      	mov	r1, r5
 80014f0:	f7ff f882 	bl	80005f8 <__aeabi_dmul>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fb54 	bl	8000ba8 <__aeabi_d2f>
 8001500:	4603      	mov	r3, r0
 8001502:	60bb      	str	r3, [r7, #8]
	float temperature_C = lps25hb_read_temp();
 8001504:	f7ff ff2e 	bl	8001364 <lps25hb_read_temp>
 8001508:	ed87 0a01 	vstr	s0, [r7, #4]

	printf("T = %.1f *C\n", temperature_C);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff f81b 	bl	8000548 <__aeabi_f2d>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4817      	ldr	r0, [pc, #92]	; (8001574 <main+0x12c>)
 8001518:	f004 fd80 	bl	800601c <iprintf>
	printf("h = %.2f m\n", h);
 800151c:	68b8      	ldr	r0, [r7, #8]
 800151e:	f7ff f813 	bl	8000548 <__aeabi_f2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4814      	ldr	r0, [pc, #80]	; (8001578 <main+0x130>)
 8001528:	f004 fd78 	bl	800601c <iprintf>
	HAL_Delay(1000);
 800152c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001530:	f000 fb42 	bl	8001bb8 <HAL_Delay>
	printf("p = %.1f\n", p);
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff f807 	bl	8000548 <__aeabi_f2d>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	480f      	ldr	r0, [pc, #60]	; (800157c <main+0x134>)
 8001540:	f004 fd6c 	bl	800601c <iprintf>
	speed = speedValue(period, 2);
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <main+0x138>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2102      	movs	r1, #2
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fd94 	bl	8001078 <speedValue>
 8001550:	eef0 7a40 	vmov.f32	s15, s0
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <main+0x13c>)
 8001556:	edc3 7a00 	vstr	s15, [r3]
  {
 800155a:	e791      	b.n	8001480 <main+0x38>
 800155c:	f3af 8000 	nop.w
 8001560:	66666666 	.word	0x66666666
 8001564:	40711266 	.word	0x40711266
 8001568:	a737110e 	.word	0xa737110e
 800156c:	c03d4592 	.word	0xc03d4592
 8001570:	20000258 	.word	0x20000258
 8001574:	08008390 	.word	0x08008390
 8001578:	080083a0 	.word	0x080083a0
 800157c:	080083ac 	.word	0x080083ac
 8001580:	200001f8 	.word	0x200001f8
 8001584:	200001fc 	.word	0x200001fc

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b096      	sub	sp, #88	; 0x58
 800158c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	2244      	movs	r2, #68	; 0x44
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f004 fd95 	bl	80060c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159c:	463b      	mov	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015ae:	f001 fc23 	bl	8002df8 <HAL_PWREx_ControlVoltageScaling>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015b8:	f000 f838 	bl	800162c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80015bc:	2310      	movs	r3, #16
 80015be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015c0:	2301      	movs	r3, #1
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015c8:	2360      	movs	r3, #96	; 0x60
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015cc:	2302      	movs	r3, #2
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015d0:	2301      	movs	r3, #1
 80015d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015d4:	2301      	movs	r3, #1
 80015d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80015d8:	2328      	movs	r3, #40	; 0x28
 80015da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015dc:	2307      	movs	r3, #7
 80015de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 fc59 	bl	8002ea4 <HAL_RCC_OscConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80015f8:	f000 f818 	bl	800162c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fc:	230f      	movs	r3, #15
 80015fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001600:	2303      	movs	r3, #3
 8001602:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	2104      	movs	r1, #4
 8001614:	4618      	mov	r0, r3
 8001616:	f002 f821 	bl	800365c <HAL_RCC_ClockConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001620:	f000 f804 	bl	800162c <Error_Handler>
  }
}
 8001624:	bf00      	nop
 8001626:	3758      	adds	r7, #88	; 0x58
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
}
 8001632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001634:	e7fe      	b.n	8001634 <Error_Handler+0x8>
	...

08001638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_MspInit+0x44>)
 8001640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001642:	4a0e      	ldr	r2, [pc, #56]	; (800167c <HAL_MspInit+0x44>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6613      	str	r3, [r2, #96]	; 0x60
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_MspInit+0x44>)
 800164c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_MspInit+0x44>)
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	4a08      	ldr	r2, [pc, #32]	; (800167c <HAL_MspInit+0x44>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	6593      	str	r3, [r2, #88]	; 0x58
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_MspInit+0x44>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001684:	e7fe      	b.n	8001684 <NMI_Handler+0x4>

08001686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <MemManage_Handler+0x4>

08001692 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <UsageFault_Handler+0x4>

0800169e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016cc:	f000 fa54 	bl	8001b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_SENSOR_Pin);
 80016d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016dc:	f000 fd4c 	bl	8002178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <TIM6_DAC_IRQHandler+0x10>)
 80016ea:	f002 ff5f 	bl	80045ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000258 	.word	0x20000258

080016f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return 1;
 80016fc:	2301      	movs	r3, #1
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_kill>:

int _kill(int pid, int sig)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001712:	f004 fd2b 	bl	800616c <__errno>
 8001716:	4603      	mov	r3, r0
 8001718:	2216      	movs	r2, #22
 800171a:	601a      	str	r2, [r3, #0]
  return -1;
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_exit>:

void _exit (int status)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ffe7 	bl	8001708 <_kill>
  while (1) {}    /* Make sure we hang here */
 800173a:	e7fe      	b.n	800173a <_exit+0x12>

0800173c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	e00a      	b.n	8001764 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800174e:	f3af 8000 	nop.w
 8001752:	4601      	mov	r1, r0
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	60ba      	str	r2, [r7, #8]
 800175a:	b2ca      	uxtb	r2, r1
 800175c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3301      	adds	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	429a      	cmp	r2, r3
 800176a:	dbf0      	blt.n	800174e <_read+0x12>
  }

  return len;
 800176c:	687b      	ldr	r3, [r7, #4]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e009      	b.n	800179c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	60ba      	str	r2, [r7, #8]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fe3f 	bl	8001414 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbf1      	blt.n	8001788 <_write+0x12>
  }
  return len;
 80017a4:	687b      	ldr	r3, [r7, #4]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_close>:

int _close(int file)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017d6:	605a      	str	r2, [r3, #4]
  return 0;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <_isatty>:

int _isatty(int file)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001820:	4a14      	ldr	r2, [pc, #80]	; (8001874 <_sbrk+0x5c>)
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <_sbrk+0x60>)
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <_sbrk+0x64>)
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <_sbrk+0x68>)
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	d207      	bcs.n	8001858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001848:	f004 fc90 	bl	800616c <__errno>
 800184c:	4603      	mov	r3, r0
 800184e:	220c      	movs	r2, #12
 8001850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	e009      	b.n	800186c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <_sbrk+0x64>)
 8001868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20018000 	.word	0x20018000
 8001878:	00000400 	.word	0x00000400
 800187c:	20000254 	.word	0x20000254
 8001880:	20000480 	.word	0x20000480

08001884 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <SystemInit+0x20>)
 800188a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <SystemInit+0x20>)
 8001890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MX_TIM6_Init+0x68>)
 80018ba:	4a16      	ldr	r2, [pc, #88]	; (8001914 <MX_TIM6_Init+0x6c>)
 80018bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_TIM6_Init+0x68>)
 80018c0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80018c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_TIM6_Init+0x68>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <MX_TIM6_Init+0x68>)
 80018ce:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80018d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_TIM6_Init+0x68>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018da:	480d      	ldr	r0, [pc, #52]	; (8001910 <MX_TIM6_Init+0x68>)
 80018dc:	f002 fd9e 	bl	800441c <HAL_TIM_Base_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80018e6:	f7ff fea1 	bl	800162c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4806      	ldr	r0, [pc, #24]	; (8001910 <MX_TIM6_Init+0x68>)
 80018f8:	f003 f81c 	bl	8004934 <HAL_TIMEx_MasterConfigSynchronization>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001902:	f7ff fe93 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000258 	.word	0x20000258
 8001914:	40001000 	.word	0x40001000

08001918 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0d      	ldr	r2, [pc, #52]	; (800195c <HAL_TIM_Base_MspInit+0x44>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d113      	bne.n	8001952 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_TIM_Base_MspInit+0x48>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <HAL_TIM_Base_MspInit+0x48>)
 8001930:	f043 0310 	orr.w	r3, r3, #16
 8001934:	6593      	str	r3, [r2, #88]	; 0x58
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_TIM_Base_MspInit+0x48>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	210a      	movs	r1, #10
 8001946:	2036      	movs	r0, #54	; 0x36
 8001948:	f000 fa35 	bl	8001db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800194c:	2036      	movs	r0, #54	; 0x36
 800194e:	f000 fa4e 	bl	8001dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40001000 	.word	0x40001000
 8001960:	40021000 	.word	0x40021000

08001964 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <MX_USART2_UART_Init+0x58>)
 800196a:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <MX_USART2_UART_Init+0x5c>)
 800196c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <MX_USART2_UART_Init+0x58>)
 8001970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_USART2_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <MX_USART2_UART_Init+0x58>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <MX_USART2_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <MX_USART2_UART_Init+0x58>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <MX_USART2_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <MX_USART2_UART_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <MX_USART2_UART_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <MX_USART2_UART_Init+0x58>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_USART2_UART_Init+0x58>)
 80019a8:	f003 f86a 	bl	8004a80 <HAL_UART_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019b2:	f7ff fe3b 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200002a4 	.word	0x200002a4
 80019c0:	40004400 	.word	0x40004400

080019c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b0ac      	sub	sp, #176	; 0xb0
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2288      	movs	r2, #136	; 0x88
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f004 fb6e 	bl	80060c6 <memset>
  if(uartHandle->Instance==USART2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a21      	ldr	r2, [pc, #132]	; (8001a74 <HAL_UART_MspInit+0xb0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d13b      	bne.n	8001a6c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019f4:	2302      	movs	r3, #2
 80019f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 f84f 	bl	8003aa4 <HAL_RCCEx_PeriphCLKConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a0c:	f7ff fe0e 	bl	800162c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_UART_MspInit+0xb4>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_UART_MspInit+0xb4>)
 8001a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_UART_MspInit+0xb4>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HAL_UART_MspInit+0xb4>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2c:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <HAL_UART_MspInit+0xb4>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_UART_MspInit+0xb4>)
 8001a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a40:	230c      	movs	r3, #12
 8001a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a58:	2307      	movs	r3, #7
 8001a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a62:	4619      	mov	r1, r3
 8001a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a68:	f000 f9dc 	bl	8001e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	37b0      	adds	r7, #176	; 0xb0
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40004400 	.word	0x40004400
 8001a78:	40021000 	.word	0x40021000

08001a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a80:	f7ff ff00 	bl	8001884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a86:	490d      	ldr	r1, [pc, #52]	; (8001abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <LoopForever+0xe>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a8c:	e002      	b.n	8001a94 <LoopCopyDataInit>

08001a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a92:	3304      	adds	r3, #4

08001a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a98:	d3f9      	bcc.n	8001a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ac8 <LoopForever+0x16>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa0:	e001      	b.n	8001aa6 <LoopFillZerobss>

08001aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa4:	3204      	adds	r2, #4

08001aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa8:	d3fb      	bcc.n	8001aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f004 fb65 	bl	8006178 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aae:	f7ff fccb 	bl	8001448 <main>

08001ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ab2:	e7fe      	b.n	8001ab2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ac0:	08008784 	.word	0x08008784
  ldr r2, =_sbss
 8001ac4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ac8:	2000047c 	.word	0x2000047c

08001acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC1_2_IRQHandler>

08001ace <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad8:	2003      	movs	r0, #3
 8001ada:	f000 f961 	bl	8001da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ade:	200f      	movs	r0, #15
 8001ae0:	f000 f80e 	bl	8001b00 <HAL_InitTick>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	71fb      	strb	r3, [r7, #7]
 8001aee:	e001      	b.n	8001af4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001af0:	f7ff fda2 	bl	8001638 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af4:	79fb      	ldrb	r3, [r7, #7]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_InitTick+0x6c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d023      	beq.n	8001b5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_InitTick+0x70>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_InitTick+0x6c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f96d 	bl	8001e0a <HAL_SYSTICK_Config>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10f      	bne.n	8001b56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d809      	bhi.n	8001b50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f937 	bl	8001db6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b48:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <HAL_InitTick+0x74>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e007      	b.n	8001b60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e004      	b.n	8001b60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	e001      	b.n	8001b60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000004 	.word	0x20000004

08001b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_IncTick+0x20>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_IncTick+0x24>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <HAL_IncTick+0x24>)
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000008 	.word	0x20000008
 8001b9c:	2000032c 	.word	0x2000032c

08001ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_GetTick+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	2000032c 	.word	0x2000032c

08001bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc0:	f7ff ffee 	bl	8001ba0 <HAL_GetTick>
 8001bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d005      	beq.n	8001bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_Delay+0x44>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bde:	bf00      	nop
 8001be0:	f7ff ffde 	bl	8001ba0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d8f7      	bhi.n	8001be0 <HAL_Delay+0x28>
  {
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000008 	.word	0x20000008

08001c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c32:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60d3      	str	r3, [r2, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <__NVIC_GetPriorityGrouping+0x18>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f003 0307 	and.w	r3, r3, #7
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db0b      	blt.n	8001c8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	4907      	ldr	r1, [pc, #28]	; (8001c9c <__NVIC_EnableIRQ+0x38>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	2001      	movs	r0, #1
 8001c86:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000e100 	.word	0xe000e100

08001ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	db0a      	blt.n	8001cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	490c      	ldr	r1, [pc, #48]	; (8001cec <__NVIC_SetPriority+0x4c>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc8:	e00a      	b.n	8001ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4908      	ldr	r1, [pc, #32]	; (8001cf0 <__NVIC_SetPriority+0x50>)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	3b04      	subs	r3, #4
 8001cd8:	0112      	lsls	r2, r2, #4
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	440b      	add	r3, r1
 8001cde:	761a      	strb	r2, [r3, #24]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000e100 	.word	0xe000e100
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f1c3 0307 	rsb	r3, r3, #7
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	bf28      	it	cs
 8001d12:	2304      	movcs	r3, #4
 8001d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	2b06      	cmp	r3, #6
 8001d1c:	d902      	bls.n	8001d24 <NVIC_EncodePriority+0x30>
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3b03      	subs	r3, #3
 8001d22:	e000      	b.n	8001d26 <NVIC_EncodePriority+0x32>
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	401a      	ands	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43d9      	mvns	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	4313      	orrs	r3, r2
         );
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3724      	adds	r7, #36	; 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d6c:	d301      	bcc.n	8001d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00f      	b.n	8001d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <SysTick_Config+0x40>)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	f7ff ff8e 	bl	8001ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <SysTick_Config+0x40>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <SysTick_Config+0x40>)
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	e000e010 	.word	0xe000e010

08001da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ff29 	bl	8001c00 <__NVIC_SetPriorityGrouping>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc8:	f7ff ff3e 	bl	8001c48 <__NVIC_GetPriorityGrouping>
 8001dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	6978      	ldr	r0, [r7, #20]
 8001dd4:	f7ff ff8e 	bl	8001cf4 <NVIC_EncodePriority>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff5d 	bl	8001ca0 <__NVIC_SetPriority>
}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff31 	bl	8001c64 <__NVIC_EnableIRQ>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ffa2 	bl	8001d5c <SysTick_Config>
 8001e18:	4603      	mov	r3, r0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e32:	e17f      	b.n	8002134 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8171 	beq.w	800212e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d005      	beq.n	8001e64 <HAL_GPIO_Init+0x40>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d130      	bne.n	8001ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	f003 0201 	and.w	r2, r3, #1
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d118      	bne.n	8001f04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	08db      	lsrs	r3, r3, #3
 8001eee:	f003 0201 	and.w	r2, r3, #1
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d017      	beq.n	8001f40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d123      	bne.n	8001f94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	08da      	lsrs	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3208      	adds	r2, #8
 8001f8e:	6939      	ldr	r1, [r7, #16]
 8001f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80ac 	beq.w	800212e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	4b5f      	ldr	r3, [pc, #380]	; (8002154 <HAL_GPIO_Init+0x330>)
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fda:	4a5e      	ldr	r2, [pc, #376]	; (8002154 <HAL_GPIO_Init+0x330>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6613      	str	r3, [r2, #96]	; 0x60
 8001fe2:	4b5c      	ldr	r3, [pc, #368]	; (8002154 <HAL_GPIO_Init+0x330>)
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fee:	4a5a      	ldr	r2, [pc, #360]	; (8002158 <HAL_GPIO_Init+0x334>)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002018:	d025      	beq.n	8002066 <HAL_GPIO_Init+0x242>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4f      	ldr	r2, [pc, #316]	; (800215c <HAL_GPIO_Init+0x338>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01f      	beq.n	8002062 <HAL_GPIO_Init+0x23e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4e      	ldr	r2, [pc, #312]	; (8002160 <HAL_GPIO_Init+0x33c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d019      	beq.n	800205e <HAL_GPIO_Init+0x23a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4d      	ldr	r2, [pc, #308]	; (8002164 <HAL_GPIO_Init+0x340>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0x236>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4c      	ldr	r2, [pc, #304]	; (8002168 <HAL_GPIO_Init+0x344>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00d      	beq.n	8002056 <HAL_GPIO_Init+0x232>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4b      	ldr	r2, [pc, #300]	; (800216c <HAL_GPIO_Init+0x348>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <HAL_GPIO_Init+0x22e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4a      	ldr	r2, [pc, #296]	; (8002170 <HAL_GPIO_Init+0x34c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_GPIO_Init+0x22a>
 800204a:	2306      	movs	r3, #6
 800204c:	e00c      	b.n	8002068 <HAL_GPIO_Init+0x244>
 800204e:	2307      	movs	r3, #7
 8002050:	e00a      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002052:	2305      	movs	r3, #5
 8002054:	e008      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002056:	2304      	movs	r3, #4
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x244>
 800205a:	2303      	movs	r3, #3
 800205c:	e004      	b.n	8002068 <HAL_GPIO_Init+0x244>
 800205e:	2302      	movs	r3, #2
 8002060:	e002      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002066:	2300      	movs	r3, #0
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	f002 0203 	and.w	r2, r2, #3
 800206e:	0092      	lsls	r2, r2, #2
 8002070:	4093      	lsls	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002078:	4937      	ldr	r1, [pc, #220]	; (8002158 <HAL_GPIO_Init+0x334>)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	3302      	adds	r3, #2
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002086:	4b3b      	ldr	r3, [pc, #236]	; (8002174 <HAL_GPIO_Init+0x350>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020aa:	4a32      	ldr	r2, [pc, #200]	; (8002174 <HAL_GPIO_Init+0x350>)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020b0:	4b30      	ldr	r3, [pc, #192]	; (8002174 <HAL_GPIO_Init+0x350>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020d4:	4a27      	ldr	r2, [pc, #156]	; (8002174 <HAL_GPIO_Init+0x350>)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <HAL_GPIO_Init+0x350>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020fe:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_GPIO_Init+0x350>)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_GPIO_Init+0x350>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002128:	4a12      	ldr	r2, [pc, #72]	; (8002174 <HAL_GPIO_Init+0x350>)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3301      	adds	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa22 f303 	lsr.w	r3, r2, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	f47f ae78 	bne.w	8001e34 <HAL_GPIO_Init+0x10>
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	40010000 	.word	0x40010000
 800215c:	48000400 	.word	0x48000400
 8002160:	48000800 	.word	0x48000800
 8002164:	48000c00 	.word	0x48000c00
 8002168:	48001000 	.word	0x48001000
 800216c:	48001400 	.word	0x48001400
 8002170:	48001800 	.word	0x48001800
 8002174:	40010400 	.word	0x40010400

08002178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d006      	beq.n	800219c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe ff22 	bl	8000fe0 <HAL_GPIO_EXTI_Callback>
  }
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40010400 	.word	0x40010400

080021a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e08d      	b.n	80022d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff f818 	bl	8001204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2224      	movs	r2, #36	; 0x24
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002208:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	e006      	b.n	8002230 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800222e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d108      	bne.n	800224a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	e007      	b.n	800225a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002258:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800226c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800227c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69d9      	ldr	r1, [r3, #28]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1a      	ldr	r2, [r3, #32]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	4608      	mov	r0, r1
 80022ea:	4611      	mov	r1, r2
 80022ec:	461a      	mov	r2, r3
 80022ee:	4603      	mov	r3, r0
 80022f0:	817b      	strh	r3, [r7, #10]
 80022f2:	460b      	mov	r3, r1
 80022f4:	813b      	strh	r3, [r7, #8]
 80022f6:	4613      	mov	r3, r2
 80022f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b20      	cmp	r3, #32
 8002304:	f040 80f9 	bne.w	80024fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_I2C_Mem_Write+0x34>
 800230e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002310:	2b00      	cmp	r3, #0
 8002312:	d105      	bne.n	8002320 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800231a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0ed      	b.n	80024fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_I2C_Mem_Write+0x4e>
 800232a:	2302      	movs	r3, #2
 800232c:	e0e6      	b.n	80024fc <HAL_I2C_Mem_Write+0x21c>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002336:	f7ff fc33 	bl	8001ba0 <HAL_GetTick>
 800233a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2319      	movs	r3, #25
 8002342:	2201      	movs	r2, #1
 8002344:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 fac3 	bl	80028d4 <I2C_WaitOnFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0d1      	b.n	80024fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2221      	movs	r2, #33	; 0x21
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2240      	movs	r2, #64	; 0x40
 8002364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a3a      	ldr	r2, [r7, #32]
 8002372:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002378:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002380:	88f8      	ldrh	r0, [r7, #6]
 8002382:	893a      	ldrh	r2, [r7, #8]
 8002384:	8979      	ldrh	r1, [r7, #10]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	4603      	mov	r3, r0
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f9d3 	bl	800273c <I2C_RequestMemoryWrite>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0a9      	b.n	80024fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2bff      	cmp	r3, #255	; 0xff
 80023b0:	d90e      	bls.n	80023d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	22ff      	movs	r2, #255	; 0xff
 80023b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	8979      	ldrh	r1, [r7, #10]
 80023c0:	2300      	movs	r3, #0
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fc3d 	bl	8002c48 <I2C_TransferConfig>
 80023ce:	e00f      	b.n	80023f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	8979      	ldrh	r1, [r7, #10]
 80023e2:	2300      	movs	r3, #0
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fc2c 	bl	8002c48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fabc 	bl	8002972 <I2C_WaitOnTXISFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e07b      	b.n	80024fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	781a      	ldrb	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d034      	beq.n	80024a8 <HAL_I2C_Mem_Write+0x1c8>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002442:	2b00      	cmp	r3, #0
 8002444:	d130      	bne.n	80024a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244c:	2200      	movs	r2, #0
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 fa3f 	bl	80028d4 <I2C_WaitOnFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e04d      	b.n	80024fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	2bff      	cmp	r3, #255	; 0xff
 8002468:	d90e      	bls.n	8002488 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	22ff      	movs	r2, #255	; 0xff
 800246e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	b2da      	uxtb	r2, r3
 8002476:	8979      	ldrh	r1, [r7, #10]
 8002478:	2300      	movs	r3, #0
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 fbe1 	bl	8002c48 <I2C_TransferConfig>
 8002486:	e00f      	b.n	80024a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002496:	b2da      	uxtb	r2, r3
 8002498:	8979      	ldrh	r1, [r7, #10]
 800249a:	2300      	movs	r3, #0
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 fbd0 	bl	8002c48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d19e      	bne.n	80023f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 faa2 	bl	8002a00 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e01a      	b.n	80024fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2220      	movs	r2, #32
 80024cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <HAL_I2C_Mem_Write+0x224>)
 80024da:	400b      	ands	r3, r1
 80024dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e000      	b.n	80024fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024fa:	2302      	movs	r3, #2
  }
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	fe00e800 	.word	0xfe00e800

08002508 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af02      	add	r7, sp, #8
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	4608      	mov	r0, r1
 8002512:	4611      	mov	r1, r2
 8002514:	461a      	mov	r2, r3
 8002516:	4603      	mov	r3, r0
 8002518:	817b      	strh	r3, [r7, #10]
 800251a:	460b      	mov	r3, r1
 800251c:	813b      	strh	r3, [r7, #8]
 800251e:	4613      	mov	r3, r2
 8002520:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b20      	cmp	r3, #32
 800252c:	f040 80fd 	bne.w	800272a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_I2C_Mem_Read+0x34>
 8002536:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002542:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0f1      	b.n	800272c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_I2C_Mem_Read+0x4e>
 8002552:	2302      	movs	r3, #2
 8002554:	e0ea      	b.n	800272c <HAL_I2C_Mem_Read+0x224>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800255e:	f7ff fb1f 	bl	8001ba0 <HAL_GetTick>
 8002562:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2319      	movs	r3, #25
 800256a:	2201      	movs	r2, #1
 800256c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f9af 	bl	80028d4 <I2C_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0d5      	b.n	800272c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2222      	movs	r2, #34	; 0x22
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2240      	movs	r2, #64	; 0x40
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a3a      	ldr	r2, [r7, #32]
 800259a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025a8:	88f8      	ldrh	r0, [r7, #6]
 80025aa:	893a      	ldrh	r2, [r7, #8]
 80025ac:	8979      	ldrh	r1, [r7, #10]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	4603      	mov	r3, r0
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 f913 	bl	80027e4 <I2C_RequestMemoryRead>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0ad      	b.n	800272c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2bff      	cmp	r3, #255	; 0xff
 80025d8:	d90e      	bls.n	80025f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	22ff      	movs	r2, #255	; 0xff
 80025de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	8979      	ldrh	r1, [r7, #10]
 80025e8:	4b52      	ldr	r3, [pc, #328]	; (8002734 <HAL_I2C_Mem_Read+0x22c>)
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fb29 	bl	8002c48 <I2C_TransferConfig>
 80025f6:	e00f      	b.n	8002618 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002606:	b2da      	uxtb	r2, r3
 8002608:	8979      	ldrh	r1, [r7, #10]
 800260a:	4b4a      	ldr	r3, [pc, #296]	; (8002734 <HAL_I2C_Mem_Read+0x22c>)
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 fb18 	bl	8002c48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261e:	2200      	movs	r2, #0
 8002620:	2104      	movs	r1, #4
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f956 	bl	80028d4 <I2C_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e07c      	b.n	800272c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d034      	beq.n	80026d8 <HAL_I2C_Mem_Read+0x1d0>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	2b00      	cmp	r3, #0
 8002674:	d130      	bne.n	80026d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267c:	2200      	movs	r2, #0
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f927 	bl	80028d4 <I2C_WaitOnFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e04d      	b.n	800272c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	2bff      	cmp	r3, #255	; 0xff
 8002698:	d90e      	bls.n	80026b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	22ff      	movs	r2, #255	; 0xff
 800269e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	8979      	ldrh	r1, [r7, #10]
 80026a8:	2300      	movs	r3, #0
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 fac9 	bl	8002c48 <I2C_TransferConfig>
 80026b6:	e00f      	b.n	80026d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	8979      	ldrh	r1, [r7, #10]
 80026ca:	2300      	movs	r3, #0
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 fab8 	bl	8002c48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d19a      	bne.n	8002618 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f98a 	bl	8002a00 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e01a      	b.n	800272c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2220      	movs	r2, #32
 80026fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_I2C_Mem_Read+0x230>)
 800270a:	400b      	ands	r3, r1
 800270c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	e000      	b.n	800272c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800272a:	2302      	movs	r3, #2
  }
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	80002400 	.word	0x80002400
 8002738:	fe00e800 	.word	0xfe00e800

0800273c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af02      	add	r7, sp, #8
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	4608      	mov	r0, r1
 8002746:	4611      	mov	r1, r2
 8002748:	461a      	mov	r2, r3
 800274a:	4603      	mov	r3, r0
 800274c:	817b      	strh	r3, [r7, #10]
 800274e:	460b      	mov	r3, r1
 8002750:	813b      	strh	r3, [r7, #8]
 8002752:	4613      	mov	r3, r2
 8002754:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	8979      	ldrh	r1, [r7, #10]
 800275c:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <I2C_RequestMemoryWrite+0xa4>)
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fa6f 	bl	8002c48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	69b9      	ldr	r1, [r7, #24]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f8ff 	bl	8002972 <I2C_WaitOnTXISFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e02c      	b.n	80027d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d105      	bne.n	8002790 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002784:	893b      	ldrh	r3, [r7, #8]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
 800278e:	e015      	b.n	80027bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002790:	893b      	ldrh	r3, [r7, #8]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	b29b      	uxth	r3, r3
 8002796:	b2da      	uxtb	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	69b9      	ldr	r1, [r7, #24]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f8e5 	bl	8002972 <I2C_WaitOnTXISFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e012      	b.n	80027d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027b2:	893b      	ldrh	r3, [r7, #8]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2200      	movs	r2, #0
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f884 	bl	80028d4 <I2C_WaitOnFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	80002000 	.word	0x80002000

080027e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	4608      	mov	r0, r1
 80027ee:	4611      	mov	r1, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	817b      	strh	r3, [r7, #10]
 80027f6:	460b      	mov	r3, r1
 80027f8:	813b      	strh	r3, [r7, #8]
 80027fa:	4613      	mov	r3, r2
 80027fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	8979      	ldrh	r1, [r7, #10]
 8002804:	4b20      	ldr	r3, [pc, #128]	; (8002888 <I2C_RequestMemoryRead+0xa4>)
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2300      	movs	r3, #0
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fa1c 	bl	8002c48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	69b9      	ldr	r1, [r7, #24]
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f8ac 	bl	8002972 <I2C_WaitOnTXISFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e02c      	b.n	800287e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d105      	bne.n	8002836 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800282a:	893b      	ldrh	r3, [r7, #8]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
 8002834:	e015      	b.n	8002862 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002836:	893b      	ldrh	r3, [r7, #8]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	b29b      	uxth	r3, r3
 800283c:	b2da      	uxtb	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	69b9      	ldr	r1, [r7, #24]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f892 	bl	8002972 <I2C_WaitOnTXISFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e012      	b.n	800287e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002858:	893b      	ldrh	r3, [r7, #8]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	2200      	movs	r2, #0
 800286a:	2140      	movs	r1, #64	; 0x40
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f831 	bl	80028d4 <I2C_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	80002000 	.word	0x80002000

0800288c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d103      	bne.n	80028aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2200      	movs	r2, #0
 80028a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d007      	beq.n	80028c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	619a      	str	r2, [r3, #24]
  }
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e4:	e031      	b.n	800294a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d02d      	beq.n	800294a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ee:	f7ff f957 	bl	8001ba0 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d302      	bcc.n	8002904 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d122      	bne.n	800294a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	4013      	ands	r3, r2
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	429a      	cmp	r2, r3
 8002912:	bf0c      	ite	eq
 8002914:	2301      	moveq	r3, #1
 8002916:	2300      	movne	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	429a      	cmp	r2, r3
 8002920:	d113      	bne.n	800294a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f043 0220 	orr.w	r2, r3, #32
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e00f      	b.n	800296a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699a      	ldr	r2, [r3, #24]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4013      	ands	r3, r2
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	429a      	cmp	r2, r3
 8002958:	bf0c      	ite	eq
 800295a:	2301      	moveq	r3, #1
 800295c:	2300      	movne	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	429a      	cmp	r2, r3
 8002966:	d0be      	beq.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800297e:	e033      	b.n	80029e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f87f 	bl	8002a88 <I2C_IsErrorOccurred>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e031      	b.n	80029f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299a:	d025      	beq.n	80029e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299c:	f7ff f900 	bl	8001ba0 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d302      	bcc.n	80029b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d11a      	bne.n	80029e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d013      	beq.n	80029e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	f043 0220 	orr.w	r2, r3, #32
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e007      	b.n	80029f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d1c4      	bne.n	8002980 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a0c:	e02f      	b.n	8002a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f838 	bl	8002a88 <I2C_IsErrorOccurred>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e02d      	b.n	8002a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a22:	f7ff f8bd 	bl	8001ba0 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d302      	bcc.n	8002a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11a      	bne.n	8002a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	d013      	beq.n	8002a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e007      	b.n	8002a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d1c8      	bne.n	8002a0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d068      	beq.n	8002b86 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002abc:	e049      	b.n	8002b52 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d045      	beq.n	8002b52 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ac6:	f7ff f86b 	bl	8001ba0 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d302      	bcc.n	8002adc <I2C_IsErrorOccurred+0x54>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d13a      	bne.n	8002b52 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002aee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002afe:	d121      	bne.n	8002b44 <I2C_IsErrorOccurred+0xbc>
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b06:	d01d      	beq.n	8002b44 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d01a      	beq.n	8002b44 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b1c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b1e:	f7ff f83f 	bl	8001ba0 <HAL_GetTick>
 8002b22:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b24:	e00e      	b.n	8002b44 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b26:	f7ff f83b 	bl	8001ba0 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b19      	cmp	r3, #25
 8002b32:	d907      	bls.n	8002b44 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	f043 0320 	orr.w	r3, r3, #32
 8002b3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002b42:	e006      	b.n	8002b52 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d1e9      	bne.n	8002b26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d003      	beq.n	8002b68 <I2C_IsErrorOccurred+0xe0>
 8002b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0aa      	beq.n	8002abe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d103      	bne.n	8002b78 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2220      	movs	r2, #32
 8002b76:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	f043 0304 	orr.w	r3, r3, #4
 8002b7e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00b      	beq.n	8002bb0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	f043 0308 	orr.w	r3, r3, #8
 8002bc0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00b      	beq.n	8002bf4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	f043 0302 	orr.w	r3, r3, #2
 8002be2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d01c      	beq.n	8002c36 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f7ff fe45 	bl	800288c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <I2C_IsErrorOccurred+0x1bc>)
 8002c0e:	400b      	ands	r3, r1
 8002c10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3728      	adds	r7, #40	; 0x28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	fe00e800 	.word	0xfe00e800

08002c48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	817b      	strh	r3, [r7, #10]
 8002c56:	4613      	mov	r3, r2
 8002c58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c5a:	897b      	ldrh	r3, [r7, #10]
 8002c5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c60:	7a7b      	ldrb	r3, [r7, #9]
 8002c62:	041b      	lsls	r3, r3, #16
 8002c64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	0d5b      	lsrs	r3, r3, #21
 8002c82:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <I2C_TransferConfig+0x60>)
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	ea02 0103 	and.w	r1, r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c9a:	bf00      	nop
 8002c9c:	371c      	adds	r7, #28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	03ff63ff 	.word	0x03ff63ff

08002cac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d138      	bne.n	8002d34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e032      	b.n	8002d36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2224      	movs	r2, #36	; 0x24
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b085      	sub	sp, #20
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d139      	bne.n	8002dcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e033      	b.n	8002dce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2224      	movs	r2, #36	; 0x24
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0201 	bic.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	021b      	lsls	r3, r3, #8
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e000      	b.n	8002dce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
  }
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40007000 	.word	0x40007000

08002df8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e06:	d130      	bne.n	8002e6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e08:	4b23      	ldr	r3, [pc, #140]	; (8002e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e14:	d038      	beq.n	8002e88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e16:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e1e:	4a1e      	ldr	r2, [pc, #120]	; (8002e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2232      	movs	r2, #50	; 0x32
 8002e2c:	fb02 f303 	mul.w	r3, r2, r3
 8002e30:	4a1b      	ldr	r2, [pc, #108]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0c9b      	lsrs	r3, r3, #18
 8002e38:	3301      	adds	r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e3c:	e002      	b.n	8002e44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e44:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e50:	d102      	bne.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f2      	bne.n	8002e3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e58:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e64:	d110      	bne.n	8002e88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e00f      	b.n	8002e8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e76:	d007      	beq.n	8002e88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e78:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e80:	4a05      	ldr	r2, [pc, #20]	; (8002e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40007000 	.word	0x40007000
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	431bde83 	.word	0x431bde83

08002ea4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e3ca      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eb6:	4b97      	ldr	r3, [pc, #604]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ec0:	4b94      	ldr	r3, [pc, #592]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80e4 	beq.w	80030a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d007      	beq.n	8002eee <HAL_RCC_OscConfig+0x4a>
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	f040 808b 	bne.w	8002ffc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	f040 8087 	bne.w	8002ffc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eee:	4b89      	ldr	r3, [pc, #548]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <HAL_RCC_OscConfig+0x62>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e3a2      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1a      	ldr	r2, [r3, #32]
 8002f0a:	4b82      	ldr	r3, [pc, #520]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d004      	beq.n	8002f20 <HAL_RCC_OscConfig+0x7c>
 8002f16:	4b7f      	ldr	r3, [pc, #508]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f1e:	e005      	b.n	8002f2c <HAL_RCC_OscConfig+0x88>
 8002f20:	4b7c      	ldr	r3, [pc, #496]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f26:	091b      	lsrs	r3, r3, #4
 8002f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d223      	bcs.n	8002f78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fd55 	bl	80039e4 <RCC_SetFlashLatencyFromMSIRange>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e383      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f44:	4b73      	ldr	r3, [pc, #460]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a72      	ldr	r2, [pc, #456]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002f4a:	f043 0308 	orr.w	r3, r3, #8
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4b70      	ldr	r3, [pc, #448]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	496d      	ldr	r1, [pc, #436]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f62:	4b6c      	ldr	r3, [pc, #432]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	4968      	ldr	r1, [pc, #416]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]
 8002f76:	e025      	b.n	8002fc4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f78:	4b66      	ldr	r3, [pc, #408]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a65      	ldr	r2, [pc, #404]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	f043 0308 	orr.w	r3, r3, #8
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4b63      	ldr	r3, [pc, #396]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4960      	ldr	r1, [pc, #384]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f96:	4b5f      	ldr	r3, [pc, #380]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	495b      	ldr	r1, [pc, #364]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fd15 	bl	80039e4 <RCC_SetFlashLatencyFromMSIRange>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e343      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fc4:	f000 fc4a 	bl	800385c <HAL_RCC_GetSysClockFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b52      	ldr	r3, [pc, #328]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	4950      	ldr	r1, [pc, #320]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe0:	4a4e      	ldr	r2, [pc, #312]	; (800311c <HAL_RCC_OscConfig+0x278>)
 8002fe2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fe4:	4b4e      	ldr	r3, [pc, #312]	; (8003120 <HAL_RCC_OscConfig+0x27c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fd89 	bl	8001b00 <HAL_InitTick>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d052      	beq.n	800309e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	e327      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d032      	beq.n	800306a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003004:	4b43      	ldr	r3, [pc, #268]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a42      	ldr	r2, [pc, #264]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003010:	f7fe fdc6 	bl	8001ba0 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003018:	f7fe fdc2 	bl	8001ba0 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e310      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800302a:	4b3a      	ldr	r3, [pc, #232]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003036:	4b37      	ldr	r3, [pc, #220]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a36      	ldr	r2, [pc, #216]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 800303c:	f043 0308 	orr.w	r3, r3, #8
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4b34      	ldr	r3, [pc, #208]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	4931      	ldr	r1, [pc, #196]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8003050:	4313      	orrs	r3, r2
 8003052:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003054:	4b2f      	ldr	r3, [pc, #188]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	492c      	ldr	r1, [pc, #176]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
 8003068:	e01a      	b.n	80030a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800306a:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a29      	ldr	r2, [pc, #164]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003076:	f7fe fd93 	bl	8001ba0 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800307e:	f7fe fd8f 	bl	8001ba0 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e2dd      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003090:	4b20      	ldr	r3, [pc, #128]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f0      	bne.n	800307e <HAL_RCC_OscConfig+0x1da>
 800309c:	e000      	b.n	80030a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800309e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d074      	beq.n	8003196 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d005      	beq.n	80030be <HAL_RCC_OscConfig+0x21a>
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b0c      	cmp	r3, #12
 80030b6:	d10e      	bne.n	80030d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d10b      	bne.n	80030d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030be:	4b15      	ldr	r3, [pc, #84]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d064      	beq.n	8003194 <HAL_RCC_OscConfig+0x2f0>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d160      	bne.n	8003194 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e2ba      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030de:	d106      	bne.n	80030ee <HAL_RCC_OscConfig+0x24a>
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 80030e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	e026      	b.n	800313c <HAL_RCC_OscConfig+0x298>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f6:	d115      	bne.n	8003124 <HAL_RCC_OscConfig+0x280>
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a05      	ldr	r2, [pc, #20]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 80030fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a02      	ldr	r2, [pc, #8]	; (8003114 <HAL_RCC_OscConfig+0x270>)
 800310a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	e014      	b.n	800313c <HAL_RCC_OscConfig+0x298>
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	080083b8 	.word	0x080083b8
 800311c:	20000000 	.word	0x20000000
 8003120:	20000004 	.word	0x20000004
 8003124:	4ba0      	ldr	r3, [pc, #640]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a9f      	ldr	r2, [pc, #636]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 800312a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	4b9d      	ldr	r3, [pc, #628]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a9c      	ldr	r2, [pc, #624]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 8003136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800313a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d013      	beq.n	800316c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe fd2c 	bl	8001ba0 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800314c:	f7fe fd28 	bl	8001ba0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e276      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800315e:	4b92      	ldr	r3, [pc, #584]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x2a8>
 800316a:	e014      	b.n	8003196 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe fd18 	bl	8001ba0 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003174:	f7fe fd14 	bl	8001ba0 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e262      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003186:	4b88      	ldr	r3, [pc, #544]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x2d0>
 8003192:	e000      	b.n	8003196 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d060      	beq.n	8003264 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d005      	beq.n	80031b4 <HAL_RCC_OscConfig+0x310>
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	d119      	bne.n	80031e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d116      	bne.n	80031e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031b4:	4b7c      	ldr	r3, [pc, #496]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_RCC_OscConfig+0x328>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e23f      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031cc:	4b76      	ldr	r3, [pc, #472]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	061b      	lsls	r3, r3, #24
 80031da:	4973      	ldr	r1, [pc, #460]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031e0:	e040      	b.n	8003264 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d023      	beq.n	8003232 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ea:	4b6f      	ldr	r3, [pc, #444]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a6e      	ldr	r2, [pc, #440]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 80031f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7fe fcd3 	bl	8001ba0 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fe:	f7fe fccf 	bl	8001ba0 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e21d      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003210:	4b65      	ldr	r3, [pc, #404]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321c:	4b62      	ldr	r3, [pc, #392]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	061b      	lsls	r3, r3, #24
 800322a:	495f      	ldr	r1, [pc, #380]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
 8003230:	e018      	b.n	8003264 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003232:	4b5d      	ldr	r3, [pc, #372]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a5c      	ldr	r2, [pc, #368]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 8003238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800323c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7fe fcaf 	bl	8001ba0 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003246:	f7fe fcab 	bl	8001ba0 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e1f9      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003258:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d03c      	beq.n	80032ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01c      	beq.n	80032b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003278:	4b4b      	ldr	r3, [pc, #300]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 800327a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800327e:	4a4a      	ldr	r2, [pc, #296]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003288:	f7fe fc8a 	bl	8001ba0 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003290:	f7fe fc86 	bl	8001ba0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e1d4      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032a2:	4b41      	ldr	r3, [pc, #260]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 80032a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0ef      	beq.n	8003290 <HAL_RCC_OscConfig+0x3ec>
 80032b0:	e01b      	b.n	80032ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b2:	4b3d      	ldr	r3, [pc, #244]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 80032b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b8:	4a3b      	ldr	r2, [pc, #236]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c2:	f7fe fc6d 	bl	8001ba0 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ca:	f7fe fc69 	bl	8001ba0 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e1b7      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032dc:	4b32      	ldr	r3, [pc, #200]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 80032de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1ef      	bne.n	80032ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80a6 	beq.w	8003444 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f8:	2300      	movs	r3, #0
 80032fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032fc:	4b2a      	ldr	r3, [pc, #168]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10d      	bne.n	8003324 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003308:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330c:	4a26      	ldr	r2, [pc, #152]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 800330e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003312:	6593      	str	r3, [r2, #88]	; 0x58
 8003314:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003320:	2301      	movs	r3, #1
 8003322:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003324:	4b21      	ldr	r3, [pc, #132]	; (80033ac <HAL_RCC_OscConfig+0x508>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d118      	bne.n	8003362 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003330:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <HAL_RCC_OscConfig+0x508>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1d      	ldr	r2, [pc, #116]	; (80033ac <HAL_RCC_OscConfig+0x508>)
 8003336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333c:	f7fe fc30 	bl	8001ba0 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003344:	f7fe fc2c 	bl	8001ba0 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e17a      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <HAL_RCC_OscConfig+0x508>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d108      	bne.n	800337c <HAL_RCC_OscConfig+0x4d8>
 800336a:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	4a0d      	ldr	r2, [pc, #52]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800337a:	e029      	b.n	80033d0 <HAL_RCC_OscConfig+0x52c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b05      	cmp	r3, #5
 8003382:	d115      	bne.n	80033b0 <HAL_RCC_OscConfig+0x50c>
 8003384:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338a:	4a07      	ldr	r2, [pc, #28]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339a:	4a03      	ldr	r2, [pc, #12]	; (80033a8 <HAL_RCC_OscConfig+0x504>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033a4:	e014      	b.n	80033d0 <HAL_RCC_OscConfig+0x52c>
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40007000 	.word	0x40007000
 80033b0:	4b9c      	ldr	r3, [pc, #624]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	4a9b      	ldr	r2, [pc, #620]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033c0:	4b98      	ldr	r3, [pc, #608]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c6:	4a97      	ldr	r2, [pc, #604]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d016      	beq.n	8003406 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fe fbe2 	bl	8001ba0 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e0:	f7fe fbde 	bl	8001ba0 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e12a      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f6:	4b8b      	ldr	r3, [pc, #556]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ed      	beq.n	80033e0 <HAL_RCC_OscConfig+0x53c>
 8003404:	e015      	b.n	8003432 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7fe fbcb 	bl	8001ba0 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe fbc7 	bl	8001ba0 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e113      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003424:	4b7f      	ldr	r3, [pc, #508]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1ed      	bne.n	800340e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003432:	7ffb      	ldrb	r3, [r7, #31]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003438:	4b7a      	ldr	r3, [pc, #488]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	4a79      	ldr	r2, [pc, #484]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 800343e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003442:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80fe 	beq.w	800364a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	2b02      	cmp	r3, #2
 8003454:	f040 80d0 	bne.w	80035f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003458:	4b72      	ldr	r3, [pc, #456]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f003 0203 	and.w	r2, r3, #3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	429a      	cmp	r2, r3
 800346a:	d130      	bne.n	80034ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	3b01      	subs	r3, #1
 8003478:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800347a:	429a      	cmp	r2, r3
 800347c:	d127      	bne.n	80034ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003488:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d11f      	bne.n	80034ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003498:	2a07      	cmp	r2, #7
 800349a:	bf14      	ite	ne
 800349c:	2201      	movne	r2, #1
 800349e:	2200      	moveq	r2, #0
 80034a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d113      	bne.n	80034ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	3b01      	subs	r3, #1
 80034b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d109      	bne.n	80034ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	3b01      	subs	r3, #1
 80034c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d06e      	beq.n	80035ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b0c      	cmp	r3, #12
 80034d2:	d069      	beq.n	80035a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034d4:	4b53      	ldr	r3, [pc, #332]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034e0:	4b50      	ldr	r3, [pc, #320]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0ad      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034f0:	4b4c      	ldr	r3, [pc, #304]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a4b      	ldr	r2, [pc, #300]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 80034f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034fc:	f7fe fb50 	bl	8001ba0 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003504:	f7fe fb4c 	bl	8001ba0 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e09a      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003516:	4b43      	ldr	r3, [pc, #268]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003522:	4b40      	ldr	r3, [pc, #256]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	4b40      	ldr	r3, [pc, #256]	; (8003628 <HAL_RCC_OscConfig+0x784>)
 8003528:	4013      	ands	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003532:	3a01      	subs	r2, #1
 8003534:	0112      	lsls	r2, r2, #4
 8003536:	4311      	orrs	r1, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800353c:	0212      	lsls	r2, r2, #8
 800353e:	4311      	orrs	r1, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003544:	0852      	lsrs	r2, r2, #1
 8003546:	3a01      	subs	r2, #1
 8003548:	0552      	lsls	r2, r2, #21
 800354a:	4311      	orrs	r1, r2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003550:	0852      	lsrs	r2, r2, #1
 8003552:	3a01      	subs	r2, #1
 8003554:	0652      	lsls	r2, r2, #25
 8003556:	4311      	orrs	r1, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800355c:	0912      	lsrs	r2, r2, #4
 800355e:	0452      	lsls	r2, r2, #17
 8003560:	430a      	orrs	r2, r1
 8003562:	4930      	ldr	r1, [pc, #192]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 8003564:	4313      	orrs	r3, r2
 8003566:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003568:	4b2e      	ldr	r3, [pc, #184]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a2d      	ldr	r2, [pc, #180]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 800356e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003572:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a2a      	ldr	r2, [pc, #168]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 800357a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800357e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003580:	f7fe fb0e 	bl	8001ba0 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003588:	f7fe fb0a 	bl	8001ba0 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e058      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359a:	4b22      	ldr	r3, [pc, #136]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035a6:	e050      	b.n	800364a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e04f      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ac:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d148      	bne.n	800364a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035b8:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a19      	ldr	r2, [pc, #100]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 80035be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035c4:	4b17      	ldr	r3, [pc, #92]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4a16      	ldr	r2, [pc, #88]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 80035ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035d0:	f7fe fae6 	bl	8001ba0 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d8:	f7fe fae2 	bl	8001ba0 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e030      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ea:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x734>
 80035f6:	e028      	b.n	800364a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b0c      	cmp	r3, #12
 80035fc:	d023      	beq.n	8003646 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a08      	ldr	r2, [pc, #32]	; (8003624 <HAL_RCC_OscConfig+0x780>)
 8003604:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360a:	f7fe fac9 	bl	8001ba0 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003610:	e00c      	b.n	800362c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003612:	f7fe fac5 	bl	8001ba0 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d905      	bls.n	800362c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e013      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
 8003624:	40021000 	.word	0x40021000
 8003628:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800362c:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_OscConfig+0x7b0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ec      	bne.n	8003612 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_RCC_OscConfig+0x7b0>)
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	4905      	ldr	r1, [pc, #20]	; (8003654 <HAL_RCC_OscConfig+0x7b0>)
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_RCC_OscConfig+0x7b4>)
 8003640:	4013      	ands	r3, r2
 8003642:	60cb      	str	r3, [r1, #12]
 8003644:	e001      	b.n	800364a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000
 8003658:	feeefffc 	.word	0xfeeefffc

0800365c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0e7      	b.n	8003840 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003670:	4b75      	ldr	r3, [pc, #468]	; (8003848 <HAL_RCC_ClockConfig+0x1ec>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d910      	bls.n	80036a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367e:	4b72      	ldr	r3, [pc, #456]	; (8003848 <HAL_RCC_ClockConfig+0x1ec>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 0207 	bic.w	r2, r3, #7
 8003686:	4970      	ldr	r1, [pc, #448]	; (8003848 <HAL_RCC_ClockConfig+0x1ec>)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368e:	4b6e      	ldr	r3, [pc, #440]	; (8003848 <HAL_RCC_ClockConfig+0x1ec>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0cf      	b.n	8003840 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d010      	beq.n	80036ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	4b66      	ldr	r3, [pc, #408]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d908      	bls.n	80036ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036bc:	4b63      	ldr	r3, [pc, #396]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4960      	ldr	r1, [pc, #384]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d04c      	beq.n	8003774 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d107      	bne.n	80036f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e2:	4b5a      	ldr	r3, [pc, #360]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d121      	bne.n	8003732 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e0a6      	b.n	8003840 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d107      	bne.n	800370a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036fa:	4b54      	ldr	r3, [pc, #336]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d115      	bne.n	8003732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e09a      	b.n	8003840 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d107      	bne.n	8003722 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003712:	4b4e      	ldr	r3, [pc, #312]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e08e      	b.n	8003840 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003722:	4b4a      	ldr	r3, [pc, #296]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e086      	b.n	8003840 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003732:	4b46      	ldr	r3, [pc, #280]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f023 0203 	bic.w	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4943      	ldr	r1, [pc, #268]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 8003740:	4313      	orrs	r3, r2
 8003742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003744:	f7fe fa2c 	bl	8001ba0 <HAL_GetTick>
 8003748:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374a:	e00a      	b.n	8003762 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374c:	f7fe fa28 	bl	8001ba0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	; 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e06e      	b.n	8003840 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003762:	4b3a      	ldr	r3, [pc, #232]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 020c 	and.w	r2, r3, #12
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	429a      	cmp	r2, r3
 8003772:	d1eb      	bne.n	800374c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d010      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	4b31      	ldr	r3, [pc, #196]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800378c:	429a      	cmp	r2, r3
 800378e:	d208      	bcs.n	80037a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003790:	4b2e      	ldr	r3, [pc, #184]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	492b      	ldr	r1, [pc, #172]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037a2:	4b29      	ldr	r3, [pc, #164]	; (8003848 <HAL_RCC_ClockConfig+0x1ec>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d210      	bcs.n	80037d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b0:	4b25      	ldr	r3, [pc, #148]	; (8003848 <HAL_RCC_ClockConfig+0x1ec>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f023 0207 	bic.w	r2, r3, #7
 80037b8:	4923      	ldr	r1, [pc, #140]	; (8003848 <HAL_RCC_ClockConfig+0x1ec>)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	4313      	orrs	r3, r2
 80037be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c0:	4b21      	ldr	r3, [pc, #132]	; (8003848 <HAL_RCC_ClockConfig+0x1ec>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e036      	b.n	8003840 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037de:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	4918      	ldr	r1, [pc, #96]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d009      	beq.n	8003810 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037fc:	4b13      	ldr	r3, [pc, #76]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4910      	ldr	r1, [pc, #64]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 800380c:	4313      	orrs	r3, r2
 800380e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003810:	f000 f824 	bl	800385c <HAL_RCC_GetSysClockFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <HAL_RCC_ClockConfig+0x1f0>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	490b      	ldr	r1, [pc, #44]	; (8003850 <HAL_RCC_ClockConfig+0x1f4>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
 800382c:	4a09      	ldr	r2, [pc, #36]	; (8003854 <HAL_RCC_ClockConfig+0x1f8>)
 800382e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_RCC_ClockConfig+0x1fc>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe f963 	bl	8001b00 <HAL_InitTick>
 800383a:	4603      	mov	r3, r0
 800383c:	72fb      	strb	r3, [r7, #11]

  return status;
 800383e:	7afb      	ldrb	r3, [r7, #11]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40022000 	.word	0x40022000
 800384c:	40021000 	.word	0x40021000
 8003850:	080083b8 	.word	0x080083b8
 8003854:	20000000 	.word	0x20000000
 8003858:	20000004 	.word	0x20000004

0800385c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	2300      	movs	r3, #0
 8003868:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800386a:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <HAL_RCC_GetSysClockFreq+0x108>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003874:	4b3b      	ldr	r3, [pc, #236]	; (8003964 <HAL_RCC_GetSysClockFreq+0x108>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x34>
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b0c      	cmp	r3, #12
 8003888:	d121      	bne.n	80038ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d11e      	bne.n	80038ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003890:	4b34      	ldr	r3, [pc, #208]	; (8003964 <HAL_RCC_GetSysClockFreq+0x108>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d107      	bne.n	80038ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800389c:	4b31      	ldr	r3, [pc, #196]	; (8003964 <HAL_RCC_GetSysClockFreq+0x108>)
 800389e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	e005      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038ac:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038b8:	4a2b      	ldr	r2, [pc, #172]	; (8003968 <HAL_RCC_GetSysClockFreq+0x10c>)
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10d      	bne.n	80038e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038cc:	e00a      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d102      	bne.n	80038da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038d4:	4b25      	ldr	r3, [pc, #148]	; (800396c <HAL_RCC_GetSysClockFreq+0x110>)
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	e004      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d101      	bne.n	80038e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038e0:	4b23      	ldr	r3, [pc, #140]	; (8003970 <HAL_RCC_GetSysClockFreq+0x114>)
 80038e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b0c      	cmp	r3, #12
 80038e8:	d134      	bne.n	8003954 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ea:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d003      	beq.n	8003902 <HAL_RCC_GetSysClockFreq+0xa6>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d003      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0xac>
 8003900:	e005      	b.n	800390e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003902:	4b1a      	ldr	r3, [pc, #104]	; (800396c <HAL_RCC_GetSysClockFreq+0x110>)
 8003904:	617b      	str	r3, [r7, #20]
      break;
 8003906:	e005      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_RCC_GetSysClockFreq+0x114>)
 800390a:	617b      	str	r3, [r7, #20]
      break;
 800390c:	e002      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	617b      	str	r3, [r7, #20]
      break;
 8003912:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <HAL_RCC_GetSysClockFreq+0x108>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	3301      	adds	r3, #1
 8003920:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <HAL_RCC_GetSysClockFreq+0x108>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	0a1b      	lsrs	r3, r3, #8
 8003928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	fb03 f202 	mul.w	r2, r3, r2
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <HAL_RCC_GetSysClockFreq+0x108>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	0e5b      	lsrs	r3, r3, #25
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	3301      	adds	r3, #1
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003952:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003954:	69bb      	ldr	r3, [r7, #24]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3724      	adds	r7, #36	; 0x24
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40021000 	.word	0x40021000
 8003968:	080083d0 	.word	0x080083d0
 800396c:	00f42400 	.word	0x00f42400
 8003970:	007a1200 	.word	0x007a1200

08003974 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <HAL_RCC_GetHCLKFreq+0x14>)
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000000 	.word	0x20000000

0800398c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003990:	f7ff fff0 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 8003994:	4602      	mov	r2, r0
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	4904      	ldr	r1, [pc, #16]	; (80039b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039a2:	5ccb      	ldrb	r3, [r1, r3]
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021000 	.word	0x40021000
 80039b4:	080083c8 	.word	0x080083c8

080039b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039bc:	f7ff ffda 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b06      	ldr	r3, [pc, #24]	; (80039dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	0adb      	lsrs	r3, r3, #11
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4904      	ldr	r1, [pc, #16]	; (80039e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d8:	4618      	mov	r0, r3
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40021000 	.word	0x40021000
 80039e0:	080083c8 	.word	0x080083c8

080039e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039f0:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039fc:	f7ff f9ee 	bl	8002ddc <HAL_PWREx_GetVoltageRange>
 8003a00:	6178      	str	r0, [r7, #20]
 8003a02:	e014      	b.n	8003a2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a04:	4b25      	ldr	r3, [pc, #148]	; (8003a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	4a24      	ldr	r2, [pc, #144]	; (8003a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a10:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a1c:	f7ff f9de 	bl	8002ddc <HAL_PWREx_GetVoltageRange>
 8003a20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a22:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	4a1d      	ldr	r2, [pc, #116]	; (8003a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a34:	d10b      	bne.n	8003a4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b80      	cmp	r3, #128	; 0x80
 8003a3a:	d919      	bls.n	8003a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2ba0      	cmp	r3, #160	; 0xa0
 8003a40:	d902      	bls.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a42:	2302      	movs	r3, #2
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	e013      	b.n	8003a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a48:	2301      	movs	r3, #1
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	e010      	b.n	8003a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b80      	cmp	r3, #128	; 0x80
 8003a52:	d902      	bls.n	8003a5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a54:	2303      	movs	r3, #3
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	e00a      	b.n	8003a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b80      	cmp	r3, #128	; 0x80
 8003a5e:	d102      	bne.n	8003a66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a60:	2302      	movs	r3, #2
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	e004      	b.n	8003a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b70      	cmp	r3, #112	; 0x70
 8003a6a:	d101      	bne.n	8003a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f023 0207 	bic.w	r2, r3, #7
 8003a78:	4909      	ldr	r1, [pc, #36]	; (8003aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a80:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d001      	beq.n	8003a92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40022000 	.word	0x40022000

08003aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003aac:	2300      	movs	r3, #0
 8003aae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d041      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ac4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ac8:	d02a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003aca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ace:	d824      	bhi.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ad0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ad4:	d008      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ad6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ada:	d81e      	bhi.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ae4:	d010      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ae6:	e018      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ae8:	4b86      	ldr	r3, [pc, #536]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4a85      	ldr	r2, [pc, #532]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003af4:	e015      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3304      	adds	r3, #4
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fabb 	bl	8004078 <RCCEx_PLLSAI1_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b06:	e00c      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3320      	adds	r3, #32
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fba6 	bl	8004260 <RCCEx_PLLSAI2_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b18:	e003      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	74fb      	strb	r3, [r7, #19]
      break;
 8003b1e:	e000      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b22:	7cfb      	ldrb	r3, [r7, #19]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10b      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b28:	4b76      	ldr	r3, [pc, #472]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b36:	4973      	ldr	r1, [pc, #460]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b3e:	e001      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b40:	7cfb      	ldrb	r3, [r7, #19]
 8003b42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d041      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b58:	d02a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b5e:	d824      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b64:	d008      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b6a:	d81e      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b74:	d010      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b76:	e018      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b78:	4b62      	ldr	r3, [pc, #392]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4a61      	ldr	r2, [pc, #388]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b84:	e015      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fa73 	bl	8004078 <RCCEx_PLLSAI1_Config>
 8003b92:	4603      	mov	r3, r0
 8003b94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b96:	e00c      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3320      	adds	r3, #32
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fb5e 	bl	8004260 <RCCEx_PLLSAI2_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ba8:	e003      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	74fb      	strb	r3, [r7, #19]
      break;
 8003bae:	e000      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb2:	7cfb      	ldrb	r3, [r7, #19]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bb8:	4b52      	ldr	r3, [pc, #328]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bc6:	494f      	ldr	r1, [pc, #316]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bce:	e001      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80a0 	beq.w	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be2:	2300      	movs	r3, #0
 8003be4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003be6:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00d      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfc:	4b41      	ldr	r3, [pc, #260]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	4a40      	ldr	r2, [pc, #256]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c06:	6593      	str	r3, [r2, #88]	; 0x58
 8003c08:	4b3e      	ldr	r3, [pc, #248]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c14:	2301      	movs	r3, #1
 8003c16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c18:	4b3b      	ldr	r3, [pc, #236]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a3a      	ldr	r2, [pc, #232]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c24:	f7fd ffbc 	bl	8001ba0 <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c2a:	e009      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2c:	f7fd ffb8 	bl	8001ba0 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d902      	bls.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	74fb      	strb	r3, [r7, #19]
        break;
 8003c3e:	e005      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c40:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0ef      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c4c:	7cfb      	ldrb	r3, [r7, #19]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d15c      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c52:	4b2c      	ldr	r3, [pc, #176]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01f      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d019      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c70:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c7c:	4b21      	ldr	r3, [pc, #132]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	4a20      	ldr	r2, [pc, #128]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c8c:	4b1d      	ldr	r3, [pc, #116]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c92:	4a1c      	ldr	r2, [pc, #112]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c9c:	4a19      	ldr	r2, [pc, #100]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d016      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fd ff77 	bl	8001ba0 <HAL_GetTick>
 8003cb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb4:	e00b      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb6:	f7fd ff73 	bl	8001ba0 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d902      	bls.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	74fb      	strb	r3, [r7, #19]
            break;
 8003ccc:	e006      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cce:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0ec      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf2:	4904      	ldr	r1, [pc, #16]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cfa:	e009      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cfc:	7cfb      	ldrb	r3, [r7, #19]
 8003cfe:	74bb      	strb	r3, [r7, #18]
 8003d00:	e006      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d02:	bf00      	nop
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d10:	7c7b      	ldrb	r3, [r7, #17]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d105      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d16:	4b9e      	ldr	r3, [pc, #632]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	4a9d      	ldr	r2, [pc, #628]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d2e:	4b98      	ldr	r3, [pc, #608]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	f023 0203 	bic.w	r2, r3, #3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	4994      	ldr	r1, [pc, #592]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d50:	4b8f      	ldr	r3, [pc, #572]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	f023 020c 	bic.w	r2, r3, #12
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	498c      	ldr	r1, [pc, #560]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d72:	4b87      	ldr	r3, [pc, #540]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	4983      	ldr	r1, [pc, #524]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d94:	4b7e      	ldr	r3, [pc, #504]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	497b      	ldr	r1, [pc, #492]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003db6:	4b76      	ldr	r3, [pc, #472]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc4:	4972      	ldr	r1, [pc, #456]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dd8:	4b6d      	ldr	r3, [pc, #436]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de6:	496a      	ldr	r1, [pc, #424]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dfa:	4b65      	ldr	r3, [pc, #404]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e08:	4961      	ldr	r1, [pc, #388]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e1c:	4b5c      	ldr	r3, [pc, #368]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2a:	4959      	ldr	r1, [pc, #356]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e3e:	4b54      	ldr	r3, [pc, #336]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4c:	4950      	ldr	r1, [pc, #320]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e60:	4b4b      	ldr	r3, [pc, #300]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	4948      	ldr	r1, [pc, #288]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e82:	4b43      	ldr	r3, [pc, #268]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	493f      	ldr	r1, [pc, #252]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d028      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ea4:	4b3a      	ldr	r3, [pc, #232]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb2:	4937      	ldr	r1, [pc, #220]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ec2:	d106      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ec4:	4b32      	ldr	r3, [pc, #200]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4a31      	ldr	r2, [pc, #196]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ece:	60d3      	str	r3, [r2, #12]
 8003ed0:	e011      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eda:	d10c      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f8c8 	bl	8004078 <RCCEx_PLLSAI1_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ef2:	7cfb      	ldrb	r3, [r7, #19]
 8003ef4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d028      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f02:	4b23      	ldr	r3, [pc, #140]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	491f      	ldr	r1, [pc, #124]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f20:	d106      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f22:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	4a1a      	ldr	r2, [pc, #104]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f2c:	60d3      	str	r3, [r2, #12]
 8003f2e:	e011      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	2101      	movs	r1, #1
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 f899 	bl	8004078 <RCCEx_PLLSAI1_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f4a:	7cfb      	ldrb	r3, [r7, #19]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
 8003f52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d02b      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6e:	4908      	ldr	r1, [pc, #32]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f7e:	d109      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f80:	4b03      	ldr	r3, [pc, #12]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4a02      	ldr	r2, [pc, #8]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f8a:	60d3      	str	r3, [r2, #12]
 8003f8c:	e014      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f8e:	bf00      	nop
 8003f90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 f867 	bl	8004078 <RCCEx_PLLSAI1_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fae:	7cfb      	ldrb	r3, [r7, #19]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003fb4:	7cfb      	ldrb	r3, [r7, #19]
 8003fb6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d02f      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fd2:	4928      	ldr	r1, [pc, #160]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fe2:	d10d      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	2102      	movs	r1, #2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f844 	bl	8004078 <RCCEx_PLLSAI1_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ff4:	7cfb      	ldrb	r3, [r7, #19]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d014      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ffa:	7cfb      	ldrb	r3, [r7, #19]
 8003ffc:	74bb      	strb	r3, [r7, #18]
 8003ffe:	e011      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004008:	d10c      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3320      	adds	r3, #32
 800400e:	2102      	movs	r1, #2
 8004010:	4618      	mov	r0, r3
 8004012:	f000 f925 	bl	8004260 <RCCEx_PLLSAI2_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800401a:	7cfb      	ldrb	r3, [r7, #19]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004030:	4b10      	ldr	r3, [pc, #64]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800403e:	490d      	ldr	r1, [pc, #52]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004052:	4b08      	ldr	r3, [pc, #32]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004062:	4904      	ldr	r1, [pc, #16]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800406a:	7cbb      	ldrb	r3, [r7, #18]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40021000 	.word	0x40021000

08004078 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004086:	4b75      	ldr	r3, [pc, #468]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d018      	beq.n	80040c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004092:	4b72      	ldr	r3, [pc, #456]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0203 	and.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d10d      	bne.n	80040be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
       ||
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040aa:	4b6c      	ldr	r3, [pc, #432]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
       ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d047      	beq.n	800414e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
 80040c2:	e044      	b.n	800414e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d018      	beq.n	80040fe <RCCEx_PLLSAI1_Config+0x86>
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d825      	bhi.n	800411c <RCCEx_PLLSAI1_Config+0xa4>
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d002      	beq.n	80040da <RCCEx_PLLSAI1_Config+0x62>
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d009      	beq.n	80040ec <RCCEx_PLLSAI1_Config+0x74>
 80040d8:	e020      	b.n	800411c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040da:	4b60      	ldr	r3, [pc, #384]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d11d      	bne.n	8004122 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ea:	e01a      	b.n	8004122 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040ec:	4b5b      	ldr	r3, [pc, #364]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d116      	bne.n	8004126 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040fc:	e013      	b.n	8004126 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040fe:	4b57      	ldr	r3, [pc, #348]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10f      	bne.n	800412a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800410a:	4b54      	ldr	r3, [pc, #336]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800411a:	e006      	b.n	800412a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      break;
 8004120:	e004      	b.n	800412c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004122:	bf00      	nop
 8004124:	e002      	b.n	800412c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004126:	bf00      	nop
 8004128:	e000      	b.n	800412c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800412a:	bf00      	nop
    }

    if(status == HAL_OK)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10d      	bne.n	800414e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004132:	4b4a      	ldr	r3, [pc, #296]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6819      	ldr	r1, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	3b01      	subs	r3, #1
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	430b      	orrs	r3, r1
 8004148:	4944      	ldr	r1, [pc, #272]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 800414a:	4313      	orrs	r3, r2
 800414c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d17d      	bne.n	8004250 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004154:	4b41      	ldr	r3, [pc, #260]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a40      	ldr	r2, [pc, #256]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 800415a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800415e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004160:	f7fd fd1e 	bl	8001ba0 <HAL_GetTick>
 8004164:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004166:	e009      	b.n	800417c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004168:	f7fd fd1a 	bl	8001ba0 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d902      	bls.n	800417c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	73fb      	strb	r3, [r7, #15]
        break;
 800417a:	e005      	b.n	8004188 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800417c:	4b37      	ldr	r3, [pc, #220]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1ef      	bne.n	8004168 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d160      	bne.n	8004250 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d111      	bne.n	80041b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004194:	4b31      	ldr	r3, [pc, #196]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800419c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6892      	ldr	r2, [r2, #8]
 80041a4:	0211      	lsls	r1, r2, #8
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68d2      	ldr	r2, [r2, #12]
 80041aa:	0912      	lsrs	r2, r2, #4
 80041ac:	0452      	lsls	r2, r2, #17
 80041ae:	430a      	orrs	r2, r1
 80041b0:	492a      	ldr	r1, [pc, #168]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	610b      	str	r3, [r1, #16]
 80041b6:	e027      	b.n	8004208 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d112      	bne.n	80041e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041be:	4b27      	ldr	r3, [pc, #156]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80041c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6892      	ldr	r2, [r2, #8]
 80041ce:	0211      	lsls	r1, r2, #8
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6912      	ldr	r2, [r2, #16]
 80041d4:	0852      	lsrs	r2, r2, #1
 80041d6:	3a01      	subs	r2, #1
 80041d8:	0552      	lsls	r2, r2, #21
 80041da:	430a      	orrs	r2, r1
 80041dc:	491f      	ldr	r1, [pc, #124]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	610b      	str	r3, [r1, #16]
 80041e2:	e011      	b.n	8004208 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041e4:	4b1d      	ldr	r3, [pc, #116]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6892      	ldr	r2, [r2, #8]
 80041f4:	0211      	lsls	r1, r2, #8
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6952      	ldr	r2, [r2, #20]
 80041fa:	0852      	lsrs	r2, r2, #1
 80041fc:	3a01      	subs	r2, #1
 80041fe:	0652      	lsls	r2, r2, #25
 8004200:	430a      	orrs	r2, r1
 8004202:	4916      	ldr	r1, [pc, #88]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004204:	4313      	orrs	r3, r2
 8004206:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004208:	4b14      	ldr	r3, [pc, #80]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a13      	ldr	r2, [pc, #76]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 800420e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004212:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004214:	f7fd fcc4 	bl	8001ba0 <HAL_GetTick>
 8004218:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800421a:	e009      	b.n	8004230 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800421c:	f7fd fcc0 	bl	8001ba0 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d902      	bls.n	8004230 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	73fb      	strb	r3, [r7, #15]
          break;
 800422e:	e005      	b.n	800423c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0ef      	beq.n	800421c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	4904      	ldr	r1, [pc, #16]	; (800425c <RCCEx_PLLSAI1_Config+0x1e4>)
 800424c:	4313      	orrs	r3, r2
 800424e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000

08004260 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800426e:	4b6a      	ldr	r3, [pc, #424]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d018      	beq.n	80042ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800427a:	4b67      	ldr	r3, [pc, #412]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0203 	and.w	r2, r3, #3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d10d      	bne.n	80042a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
       ||
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004292:	4b61      	ldr	r3, [pc, #388]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
       ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d047      	beq.n	8004336 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
 80042aa:	e044      	b.n	8004336 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d018      	beq.n	80042e6 <RCCEx_PLLSAI2_Config+0x86>
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d825      	bhi.n	8004304 <RCCEx_PLLSAI2_Config+0xa4>
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d002      	beq.n	80042c2 <RCCEx_PLLSAI2_Config+0x62>
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d009      	beq.n	80042d4 <RCCEx_PLLSAI2_Config+0x74>
 80042c0:	e020      	b.n	8004304 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042c2:	4b55      	ldr	r3, [pc, #340]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d11d      	bne.n	800430a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042d2:	e01a      	b.n	800430a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042d4:	4b50      	ldr	r3, [pc, #320]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d116      	bne.n	800430e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042e4:	e013      	b.n	800430e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042e6:	4b4c      	ldr	r3, [pc, #304]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10f      	bne.n	8004312 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042f2:	4b49      	ldr	r3, [pc, #292]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004302:	e006      	b.n	8004312 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
      break;
 8004308:	e004      	b.n	8004314 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800430a:	bf00      	nop
 800430c:	e002      	b.n	8004314 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800430e:	bf00      	nop
 8004310:	e000      	b.n	8004314 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004312:	bf00      	nop
    }

    if(status == HAL_OK)
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10d      	bne.n	8004336 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800431a:	4b3f      	ldr	r3, [pc, #252]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6819      	ldr	r1, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	3b01      	subs	r3, #1
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	430b      	orrs	r3, r1
 8004330:	4939      	ldr	r1, [pc, #228]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004332:	4313      	orrs	r3, r2
 8004334:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d167      	bne.n	800440c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800433c:	4b36      	ldr	r3, [pc, #216]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a35      	ldr	r2, [pc, #212]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004348:	f7fd fc2a 	bl	8001ba0 <HAL_GetTick>
 800434c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800434e:	e009      	b.n	8004364 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004350:	f7fd fc26 	bl	8001ba0 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d902      	bls.n	8004364 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	73fb      	strb	r3, [r7, #15]
        break;
 8004362:	e005      	b.n	8004370 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004364:	4b2c      	ldr	r3, [pc, #176]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ef      	bne.n	8004350 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d14a      	bne.n	800440c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d111      	bne.n	80043a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800437c:	4b26      	ldr	r3, [pc, #152]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6892      	ldr	r2, [r2, #8]
 800438c:	0211      	lsls	r1, r2, #8
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68d2      	ldr	r2, [r2, #12]
 8004392:	0912      	lsrs	r2, r2, #4
 8004394:	0452      	lsls	r2, r2, #17
 8004396:	430a      	orrs	r2, r1
 8004398:	491f      	ldr	r1, [pc, #124]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439a:	4313      	orrs	r3, r2
 800439c:	614b      	str	r3, [r1, #20]
 800439e:	e011      	b.n	80043c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043a0:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6892      	ldr	r2, [r2, #8]
 80043b0:	0211      	lsls	r1, r2, #8
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6912      	ldr	r2, [r2, #16]
 80043b6:	0852      	lsrs	r2, r2, #1
 80043b8:	3a01      	subs	r2, #1
 80043ba:	0652      	lsls	r2, r2, #25
 80043bc:	430a      	orrs	r2, r1
 80043be:	4916      	ldr	r1, [pc, #88]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80043c4:	4b14      	ldr	r3, [pc, #80]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a13      	ldr	r2, [pc, #76]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fd fbe6 	bl	8001ba0 <HAL_GetTick>
 80043d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043d6:	e009      	b.n	80043ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043d8:	f7fd fbe2 	bl	8001ba0 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d902      	bls.n	80043ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	73fb      	strb	r3, [r7, #15]
          break;
 80043ea:	e005      	b.n	80043f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ef      	beq.n	80043d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004400:	695a      	ldr	r2, [r3, #20]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	4904      	ldr	r1, [pc, #16]	; (8004418 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004408:	4313      	orrs	r3, r2
 800440a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40021000 	.word	0x40021000

0800441c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e049      	b.n	80044c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fd fa68 	bl	8001918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f000 f9d0 	bl	8004800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d001      	beq.n	80044e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e04f      	b.n	8004584 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a23      	ldr	r2, [pc, #140]	; (8004590 <HAL_TIM_Base_Start_IT+0xc4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01d      	beq.n	8004542 <HAL_TIM_Base_Start_IT+0x76>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450e:	d018      	beq.n	8004542 <HAL_TIM_Base_Start_IT+0x76>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1f      	ldr	r2, [pc, #124]	; (8004594 <HAL_TIM_Base_Start_IT+0xc8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <HAL_TIM_Base_Start_IT+0x76>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1e      	ldr	r2, [pc, #120]	; (8004598 <HAL_TIM_Base_Start_IT+0xcc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00e      	beq.n	8004542 <HAL_TIM_Base_Start_IT+0x76>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1c      	ldr	r2, [pc, #112]	; (800459c <HAL_TIM_Base_Start_IT+0xd0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d009      	beq.n	8004542 <HAL_TIM_Base_Start_IT+0x76>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1b      	ldr	r2, [pc, #108]	; (80045a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d004      	beq.n	8004542 <HAL_TIM_Base_Start_IT+0x76>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a19      	ldr	r2, [pc, #100]	; (80045a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d115      	bne.n	800456e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800454a:	4013      	ands	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b06      	cmp	r3, #6
 8004552:	d015      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0xb4>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455a:	d011      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456c:	e008      	b.n	8004580 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0201 	orr.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	e000      	b.n	8004582 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004580:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40012c00 	.word	0x40012c00
 8004594:	40000400 	.word	0x40000400
 8004598:	40000800 	.word	0x40000800
 800459c:	40000c00 	.word	0x40000c00
 80045a0:	40013400 	.word	0x40013400
 80045a4:	40014000 	.word	0x40014000
 80045a8:	00010007 	.word	0x00010007

080045ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d020      	beq.n	8004610 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01b      	beq.n	8004610 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0202 	mvn.w	r2, #2
 80045e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f8e4 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 80045fc:	e005      	b.n	800460a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8d6 	bl	80047b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f8e7 	bl	80047d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d020      	beq.n	800465c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01b      	beq.n	800465c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0204 	mvn.w	r2, #4
 800462c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f8be 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 8004648:	e005      	b.n	8004656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8b0 	bl	80047b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f8c1 	bl	80047d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d020      	beq.n	80046a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01b      	beq.n	80046a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0208 	mvn.w	r2, #8
 8004678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2204      	movs	r2, #4
 800467e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f898 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 8004694:	e005      	b.n	80046a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f88a 	bl	80047b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f89b 	bl	80047d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d020      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01b      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0210 	mvn.w	r2, #16
 80046c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2208      	movs	r2, #8
 80046ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f872 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 80046e0:	e005      	b.n	80046ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f864 	bl	80047b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f875 	bl	80047d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0201 	mvn.w	r2, #1
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc fc8e 	bl	8001034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00c      	beq.n	800473c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f98e 	bl	8004a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00c      	beq.n	8004760 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f986 	bl	8004a6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00c      	beq.n	8004784 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f834 	bl	80047ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00c      	beq.n	80047a8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0220 	mvn.w	r2, #32
 80047a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f94e 	bl	8004a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a40      	ldr	r2, [pc, #256]	; (8004914 <TIM_Base_SetConfig+0x114>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d013      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481e:	d00f      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3d      	ldr	r2, [pc, #244]	; (8004918 <TIM_Base_SetConfig+0x118>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00b      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3c      	ldr	r2, [pc, #240]	; (800491c <TIM_Base_SetConfig+0x11c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d007      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a3b      	ldr	r2, [pc, #236]	; (8004920 <TIM_Base_SetConfig+0x120>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a3a      	ldr	r2, [pc, #232]	; (8004924 <TIM_Base_SetConfig+0x124>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d108      	bne.n	8004852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2f      	ldr	r2, [pc, #188]	; (8004914 <TIM_Base_SetConfig+0x114>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01f      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004860:	d01b      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2c      	ldr	r2, [pc, #176]	; (8004918 <TIM_Base_SetConfig+0x118>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d017      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2b      	ldr	r2, [pc, #172]	; (800491c <TIM_Base_SetConfig+0x11c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a2a      	ldr	r2, [pc, #168]	; (8004920 <TIM_Base_SetConfig+0x120>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00f      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a29      	ldr	r2, [pc, #164]	; (8004924 <TIM_Base_SetConfig+0x124>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00b      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a28      	ldr	r2, [pc, #160]	; (8004928 <TIM_Base_SetConfig+0x128>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a27      	ldr	r2, [pc, #156]	; (800492c <TIM_Base_SetConfig+0x12c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a26      	ldr	r2, [pc, #152]	; (8004930 <TIM_Base_SetConfig+0x130>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d108      	bne.n	80048ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a10      	ldr	r2, [pc, #64]	; (8004914 <TIM_Base_SetConfig+0x114>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00f      	beq.n	80048f8 <TIM_Base_SetConfig+0xf8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a12      	ldr	r2, [pc, #72]	; (8004924 <TIM_Base_SetConfig+0x124>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00b      	beq.n	80048f8 <TIM_Base_SetConfig+0xf8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a11      	ldr	r2, [pc, #68]	; (8004928 <TIM_Base_SetConfig+0x128>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d007      	beq.n	80048f8 <TIM_Base_SetConfig+0xf8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a10      	ldr	r2, [pc, #64]	; (800492c <TIM_Base_SetConfig+0x12c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d003      	beq.n	80048f8 <TIM_Base_SetConfig+0xf8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a0f      	ldr	r2, [pc, #60]	; (8004930 <TIM_Base_SetConfig+0x130>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d103      	bne.n	8004900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	615a      	str	r2, [r3, #20]
}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40000c00 	.word	0x40000c00
 8004924:	40013400 	.word	0x40013400
 8004928:	40014000 	.word	0x40014000
 800492c:	40014400 	.word	0x40014400
 8004930:	40014800 	.word	0x40014800

08004934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004948:	2302      	movs	r3, #2
 800494a:	e068      	b.n	8004a1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a2e      	ldr	r2, [pc, #184]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d004      	beq.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a2d      	ldr	r2, [pc, #180]	; (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d108      	bne.n	8004992 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004986:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004998:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1e      	ldr	r2, [pc, #120]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d01d      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049be:	d018      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1b      	ldr	r2, [pc, #108]	; (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1a      	ldr	r2, [pc, #104]	; (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d00e      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a18      	ldr	r2, [pc, #96]	; (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d009      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a13      	ldr	r2, [pc, #76]	; (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d004      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a14      	ldr	r2, [pc, #80]	; (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d10c      	bne.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40012c00 	.word	0x40012c00
 8004a30:	40013400 	.word	0x40013400
 8004a34:	40000400 	.word	0x40000400
 8004a38:	40000800 	.word	0x40000800
 8004a3c:	40000c00 	.word	0x40000c00
 8004a40:	40014000 	.word	0x40014000

08004a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e040      	b.n	8004b14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fc ff8e 	bl	80019c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2224      	movs	r2, #36	; 0x24
 8004aac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0201 	bic.w	r2, r2, #1
 8004abc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fb6a 	bl	80051a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f8af 	bl	8004c30 <UART_SetConfig>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e01b      	b.n	8004b14 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0201 	orr.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fbe9 	bl	80052e4 <UART_CheckIdleState>
 8004b12:	4603      	mov	r3, r0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d178      	bne.n	8004c26 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_UART_Transmit+0x24>
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e071      	b.n	8004c28 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2221      	movs	r2, #33	; 0x21
 8004b50:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b52:	f7fd f825 	bl	8001ba0 <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	88fa      	ldrh	r2, [r7, #6]
 8004b64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b70:	d108      	bne.n	8004b84 <HAL_UART_Transmit+0x68>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d104      	bne.n	8004b84 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	e003      	b.n	8004b8c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b8c:	e030      	b.n	8004bf0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2200      	movs	r2, #0
 8004b96:	2180      	movs	r1, #128	; 0x80
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fc4b 	bl	8005434 <UART_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d004      	beq.n	8004bae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e03c      	b.n	8004c28 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10b      	bne.n	8004bcc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	881a      	ldrh	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc0:	b292      	uxth	r2, r2
 8004bc2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	3302      	adds	r3, #2
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	e008      	b.n	8004bde <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	781a      	ldrb	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	b292      	uxth	r2, r2
 8004bd6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1c8      	bne.n	8004b8e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2200      	movs	r2, #0
 8004c04:	2140      	movs	r1, #64	; 0x40
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fc14 	bl	8005434 <UART_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d004      	beq.n	8004c1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e005      	b.n	8004c28 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	e000      	b.n	8004c28 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004c26:	2302      	movs	r3, #2
  }
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3720      	adds	r7, #32
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c34:	b08a      	sub	sp, #40	; 0x28
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4ba4      	ldr	r3, [pc, #656]	; (8004ef0 <UART_SetConfig+0x2c0>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a99      	ldr	r2, [pc, #612]	; (8004ef4 <UART_SetConfig+0x2c4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d004      	beq.n	8004c9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cac:	430a      	orrs	r2, r1
 8004cae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a90      	ldr	r2, [pc, #576]	; (8004ef8 <UART_SetConfig+0x2c8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d126      	bne.n	8004d08 <UART_SetConfig+0xd8>
 8004cba:	4b90      	ldr	r3, [pc, #576]	; (8004efc <UART_SetConfig+0x2cc>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d81b      	bhi.n	8004d00 <UART_SetConfig+0xd0>
 8004cc8:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <UART_SetConfig+0xa0>)
 8004cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cce:	bf00      	nop
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004cf1 	.word	0x08004cf1
 8004cd8:	08004ce9 	.word	0x08004ce9
 8004cdc:	08004cf9 	.word	0x08004cf9
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce6:	e116      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cee:	e112      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf6:	e10e      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfe:	e10a      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004d00:	2310      	movs	r3, #16
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d06:	e106      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a7c      	ldr	r2, [pc, #496]	; (8004f00 <UART_SetConfig+0x2d0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d138      	bne.n	8004d84 <UART_SetConfig+0x154>
 8004d12:	4b7a      	ldr	r3, [pc, #488]	; (8004efc <UART_SetConfig+0x2cc>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	2b0c      	cmp	r3, #12
 8004d1e:	d82d      	bhi.n	8004d7c <UART_SetConfig+0x14c>
 8004d20:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <UART_SetConfig+0xf8>)
 8004d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d26:	bf00      	nop
 8004d28:	08004d5d 	.word	0x08004d5d
 8004d2c:	08004d7d 	.word	0x08004d7d
 8004d30:	08004d7d 	.word	0x08004d7d
 8004d34:	08004d7d 	.word	0x08004d7d
 8004d38:	08004d6d 	.word	0x08004d6d
 8004d3c:	08004d7d 	.word	0x08004d7d
 8004d40:	08004d7d 	.word	0x08004d7d
 8004d44:	08004d7d 	.word	0x08004d7d
 8004d48:	08004d65 	.word	0x08004d65
 8004d4c:	08004d7d 	.word	0x08004d7d
 8004d50:	08004d7d 	.word	0x08004d7d
 8004d54:	08004d7d 	.word	0x08004d7d
 8004d58:	08004d75 	.word	0x08004d75
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d62:	e0d8      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004d64:	2302      	movs	r3, #2
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6a:	e0d4      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d72:	e0d0      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004d74:	2308      	movs	r3, #8
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7a:	e0cc      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004d7c:	2310      	movs	r3, #16
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d82:	e0c8      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a5e      	ldr	r2, [pc, #376]	; (8004f04 <UART_SetConfig+0x2d4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d125      	bne.n	8004dda <UART_SetConfig+0x1aa>
 8004d8e:	4b5b      	ldr	r3, [pc, #364]	; (8004efc <UART_SetConfig+0x2cc>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d98:	2b30      	cmp	r3, #48	; 0x30
 8004d9a:	d016      	beq.n	8004dca <UART_SetConfig+0x19a>
 8004d9c:	2b30      	cmp	r3, #48	; 0x30
 8004d9e:	d818      	bhi.n	8004dd2 <UART_SetConfig+0x1a2>
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d00a      	beq.n	8004dba <UART_SetConfig+0x18a>
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d814      	bhi.n	8004dd2 <UART_SetConfig+0x1a2>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <UART_SetConfig+0x182>
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	d008      	beq.n	8004dc2 <UART_SetConfig+0x192>
 8004db0:	e00f      	b.n	8004dd2 <UART_SetConfig+0x1a2>
 8004db2:	2300      	movs	r3, #0
 8004db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db8:	e0ad      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc0:	e0a9      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004dc2:	2304      	movs	r3, #4
 8004dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc8:	e0a5      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004dca:	2308      	movs	r3, #8
 8004dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd0:	e0a1      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004dd2:	2310      	movs	r3, #16
 8004dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd8:	e09d      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a4a      	ldr	r2, [pc, #296]	; (8004f08 <UART_SetConfig+0x2d8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d125      	bne.n	8004e30 <UART_SetConfig+0x200>
 8004de4:	4b45      	ldr	r3, [pc, #276]	; (8004efc <UART_SetConfig+0x2cc>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dee:	2bc0      	cmp	r3, #192	; 0xc0
 8004df0:	d016      	beq.n	8004e20 <UART_SetConfig+0x1f0>
 8004df2:	2bc0      	cmp	r3, #192	; 0xc0
 8004df4:	d818      	bhi.n	8004e28 <UART_SetConfig+0x1f8>
 8004df6:	2b80      	cmp	r3, #128	; 0x80
 8004df8:	d00a      	beq.n	8004e10 <UART_SetConfig+0x1e0>
 8004dfa:	2b80      	cmp	r3, #128	; 0x80
 8004dfc:	d814      	bhi.n	8004e28 <UART_SetConfig+0x1f8>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <UART_SetConfig+0x1d8>
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d008      	beq.n	8004e18 <UART_SetConfig+0x1e8>
 8004e06:	e00f      	b.n	8004e28 <UART_SetConfig+0x1f8>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0e:	e082      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004e10:	2302      	movs	r3, #2
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e16:	e07e      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e1e:	e07a      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004e20:	2308      	movs	r3, #8
 8004e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e26:	e076      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2e:	e072      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a35      	ldr	r2, [pc, #212]	; (8004f0c <UART_SetConfig+0x2dc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d12a      	bne.n	8004e90 <UART_SetConfig+0x260>
 8004e3a:	4b30      	ldr	r3, [pc, #192]	; (8004efc <UART_SetConfig+0x2cc>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e48:	d01a      	beq.n	8004e80 <UART_SetConfig+0x250>
 8004e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e4e:	d81b      	bhi.n	8004e88 <UART_SetConfig+0x258>
 8004e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e54:	d00c      	beq.n	8004e70 <UART_SetConfig+0x240>
 8004e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e5a:	d815      	bhi.n	8004e88 <UART_SetConfig+0x258>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <UART_SetConfig+0x238>
 8004e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e64:	d008      	beq.n	8004e78 <UART_SetConfig+0x248>
 8004e66:	e00f      	b.n	8004e88 <UART_SetConfig+0x258>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6e:	e052      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004e70:	2302      	movs	r3, #2
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e76:	e04e      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004e78:	2304      	movs	r3, #4
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7e:	e04a      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004e80:	2308      	movs	r3, #8
 8004e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e86:	e046      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8e:	e042      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a17      	ldr	r2, [pc, #92]	; (8004ef4 <UART_SetConfig+0x2c4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d13a      	bne.n	8004f10 <UART_SetConfig+0x2e0>
 8004e9a:	4b18      	ldr	r3, [pc, #96]	; (8004efc <UART_SetConfig+0x2cc>)
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ea8:	d01a      	beq.n	8004ee0 <UART_SetConfig+0x2b0>
 8004eaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eae:	d81b      	bhi.n	8004ee8 <UART_SetConfig+0x2b8>
 8004eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb4:	d00c      	beq.n	8004ed0 <UART_SetConfig+0x2a0>
 8004eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eba:	d815      	bhi.n	8004ee8 <UART_SetConfig+0x2b8>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <UART_SetConfig+0x298>
 8004ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec4:	d008      	beq.n	8004ed8 <UART_SetConfig+0x2a8>
 8004ec6:	e00f      	b.n	8004ee8 <UART_SetConfig+0x2b8>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ece:	e022      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed6:	e01e      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ede:	e01a      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee6:	e016      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eee:	e012      	b.n	8004f16 <UART_SetConfig+0x2e6>
 8004ef0:	efff69f3 	.word	0xefff69f3
 8004ef4:	40008000 	.word	0x40008000
 8004ef8:	40013800 	.word	0x40013800
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40004400 	.word	0x40004400
 8004f04:	40004800 	.word	0x40004800
 8004f08:	40004c00 	.word	0x40004c00
 8004f0c:	40005000 	.word	0x40005000
 8004f10:	2310      	movs	r3, #16
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a9f      	ldr	r2, [pc, #636]	; (8005198 <UART_SetConfig+0x568>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d17a      	bne.n	8005016 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d824      	bhi.n	8004f72 <UART_SetConfig+0x342>
 8004f28:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <UART_SetConfig+0x300>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f55 	.word	0x08004f55
 8004f34:	08004f73 	.word	0x08004f73
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	08004f73 	.word	0x08004f73
 8004f40:	08004f63 	.word	0x08004f63
 8004f44:	08004f73 	.word	0x08004f73
 8004f48:	08004f73 	.word	0x08004f73
 8004f4c:	08004f73 	.word	0x08004f73
 8004f50:	08004f6b 	.word	0x08004f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f54:	f7fe fd1a 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 8004f58:	61f8      	str	r0, [r7, #28]
        break;
 8004f5a:	e010      	b.n	8004f7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f5c:	4b8f      	ldr	r3, [pc, #572]	; (800519c <UART_SetConfig+0x56c>)
 8004f5e:	61fb      	str	r3, [r7, #28]
        break;
 8004f60:	e00d      	b.n	8004f7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f62:	f7fe fc7b 	bl	800385c <HAL_RCC_GetSysClockFreq>
 8004f66:	61f8      	str	r0, [r7, #28]
        break;
 8004f68:	e009      	b.n	8004f7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f6e:	61fb      	str	r3, [r7, #28]
        break;
 8004f70:	e005      	b.n	8004f7e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 80fb 	beq.w	800517c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	4413      	add	r3, r2
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d305      	bcc.n	8004fa2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d903      	bls.n	8004faa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fa8:	e0e8      	b.n	800517c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	2200      	movs	r2, #0
 8004fae:	461c      	mov	r4, r3
 8004fb0:	4615      	mov	r5, r2
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	022b      	lsls	r3, r5, #8
 8004fbc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004fc0:	0222      	lsls	r2, r4, #8
 8004fc2:	68f9      	ldr	r1, [r7, #12]
 8004fc4:	6849      	ldr	r1, [r1, #4]
 8004fc6:	0849      	lsrs	r1, r1, #1
 8004fc8:	2000      	movs	r0, #0
 8004fca:	4688      	mov	r8, r1
 8004fcc:	4681      	mov	r9, r0
 8004fce:	eb12 0a08 	adds.w	sl, r2, r8
 8004fd2:	eb43 0b09 	adc.w	fp, r3, r9
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	603b      	str	r3, [r7, #0]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fe4:	4650      	mov	r0, sl
 8004fe6:	4659      	mov	r1, fp
 8004fe8:	f7fb fe2e 	bl	8000c48 <__aeabi_uldivmod>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ffa:	d308      	bcc.n	800500e <UART_SetConfig+0x3de>
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005002:	d204      	bcs.n	800500e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	60da      	str	r2, [r3, #12]
 800500c:	e0b6      	b.n	800517c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005014:	e0b2      	b.n	800517c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800501e:	d15e      	bne.n	80050de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005020:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005024:	2b08      	cmp	r3, #8
 8005026:	d828      	bhi.n	800507a <UART_SetConfig+0x44a>
 8005028:	a201      	add	r2, pc, #4	; (adr r2, 8005030 <UART_SetConfig+0x400>)
 800502a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502e:	bf00      	nop
 8005030:	08005055 	.word	0x08005055
 8005034:	0800505d 	.word	0x0800505d
 8005038:	08005065 	.word	0x08005065
 800503c:	0800507b 	.word	0x0800507b
 8005040:	0800506b 	.word	0x0800506b
 8005044:	0800507b 	.word	0x0800507b
 8005048:	0800507b 	.word	0x0800507b
 800504c:	0800507b 	.word	0x0800507b
 8005050:	08005073 	.word	0x08005073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005054:	f7fe fc9a 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 8005058:	61f8      	str	r0, [r7, #28]
        break;
 800505a:	e014      	b.n	8005086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800505c:	f7fe fcac 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 8005060:	61f8      	str	r0, [r7, #28]
        break;
 8005062:	e010      	b.n	8005086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005064:	4b4d      	ldr	r3, [pc, #308]	; (800519c <UART_SetConfig+0x56c>)
 8005066:	61fb      	str	r3, [r7, #28]
        break;
 8005068:	e00d      	b.n	8005086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800506a:	f7fe fbf7 	bl	800385c <HAL_RCC_GetSysClockFreq>
 800506e:	61f8      	str	r0, [r7, #28]
        break;
 8005070:	e009      	b.n	8005086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005076:	61fb      	str	r3, [r7, #28]
        break;
 8005078:	e005      	b.n	8005086 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d077      	beq.n	800517c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	005a      	lsls	r2, r3, #1
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	085b      	lsrs	r3, r3, #1
 8005096:	441a      	add	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b0f      	cmp	r3, #15
 80050a6:	d916      	bls.n	80050d6 <UART_SetConfig+0x4a6>
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ae:	d212      	bcs.n	80050d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	f023 030f 	bic.w	r3, r3, #15
 80050b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	085b      	lsrs	r3, r3, #1
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	8afb      	ldrh	r3, [r7, #22]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	8afa      	ldrh	r2, [r7, #22]
 80050d2:	60da      	str	r2, [r3, #12]
 80050d4:	e052      	b.n	800517c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050dc:	e04e      	b.n	800517c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d827      	bhi.n	8005136 <UART_SetConfig+0x506>
 80050e6:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <UART_SetConfig+0x4bc>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005119 	.word	0x08005119
 80050f4:	08005121 	.word	0x08005121
 80050f8:	08005137 	.word	0x08005137
 80050fc:	08005127 	.word	0x08005127
 8005100:	08005137 	.word	0x08005137
 8005104:	08005137 	.word	0x08005137
 8005108:	08005137 	.word	0x08005137
 800510c:	0800512f 	.word	0x0800512f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005110:	f7fe fc3c 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 8005114:	61f8      	str	r0, [r7, #28]
        break;
 8005116:	e014      	b.n	8005142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005118:	f7fe fc4e 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 800511c:	61f8      	str	r0, [r7, #28]
        break;
 800511e:	e010      	b.n	8005142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005120:	4b1e      	ldr	r3, [pc, #120]	; (800519c <UART_SetConfig+0x56c>)
 8005122:	61fb      	str	r3, [r7, #28]
        break;
 8005124:	e00d      	b.n	8005142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005126:	f7fe fb99 	bl	800385c <HAL_RCC_GetSysClockFreq>
 800512a:	61f8      	str	r0, [r7, #28]
        break;
 800512c:	e009      	b.n	8005142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005132:	61fb      	str	r3, [r7, #28]
        break;
 8005134:	e005      	b.n	8005142 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005140:	bf00      	nop
    }

    if (pclk != 0U)
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d019      	beq.n	800517c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	085a      	lsrs	r2, r3, #1
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	441a      	add	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	fbb2 f3f3 	udiv	r3, r2, r3
 800515a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	2b0f      	cmp	r3, #15
 8005160:	d909      	bls.n	8005176 <UART_SetConfig+0x546>
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005168:	d205      	bcs.n	8005176 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	60da      	str	r2, [r3, #12]
 8005174:	e002      	b.n	800517c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005188:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800518c:	4618      	mov	r0, r3
 800518e:	3728      	adds	r7, #40	; 0x28
 8005190:	46bd      	mov	sp, r7
 8005192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005196:	bf00      	nop
 8005198:	40008000 	.word	0x40008000
 800519c:	00f42400 	.word	0x00f42400

080051a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01a      	beq.n	80052b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800529e:	d10a      	bne.n	80052b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	605a      	str	r2, [r3, #4]
  }
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b098      	sub	sp, #96	; 0x60
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052f4:	f7fc fc54 	bl	8001ba0 <HAL_GetTick>
 80052f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b08      	cmp	r3, #8
 8005306:	d12e      	bne.n	8005366 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005310:	2200      	movs	r2, #0
 8005312:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f88c 	bl	8005434 <UART_WaitOnFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d021      	beq.n	8005366 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	e853 3f00 	ldrex	r3, [r3]
 800532e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005336:	653b      	str	r3, [r7, #80]	; 0x50
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005340:	647b      	str	r3, [r7, #68]	; 0x44
 8005342:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005344:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005348:	e841 2300 	strex	r3, r2, [r1]
 800534c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800534e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1e6      	bne.n	8005322 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2220      	movs	r2, #32
 8005358:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e062      	b.n	800542c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b04      	cmp	r3, #4
 8005372:	d149      	bne.n	8005408 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800537c:	2200      	movs	r2, #0
 800537e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f856 	bl	8005434 <UART_WaitOnFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d03c      	beq.n	8005408 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	623b      	str	r3, [r7, #32]
   return(result);
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ac:	633b      	str	r3, [r7, #48]	; 0x30
 80053ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e6      	bne.n	800538e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3308      	adds	r3, #8
 80053c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	e853 3f00 	ldrex	r3, [r3]
 80053ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0301 	bic.w	r3, r3, #1
 80053d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3308      	adds	r3, #8
 80053de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053e0:	61fa      	str	r2, [r7, #28]
 80053e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e4:	69b9      	ldr	r1, [r7, #24]
 80053e6:	69fa      	ldr	r2, [r7, #28]
 80053e8:	e841 2300 	strex	r3, r2, [r1]
 80053ec:	617b      	str	r3, [r7, #20]
   return(result);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e5      	bne.n	80053c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e011      	b.n	800542c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3758      	adds	r7, #88	; 0x58
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	4613      	mov	r3, r2
 8005442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005444:	e049      	b.n	80054da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544c:	d045      	beq.n	80054da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544e:	f7fc fba7 	bl	8001ba0 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	429a      	cmp	r2, r3
 800545c:	d302      	bcc.n	8005464 <UART_WaitOnFlagUntilTimeout+0x30>
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e048      	b.n	80054fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d031      	beq.n	80054da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b08      	cmp	r3, #8
 8005482:	d110      	bne.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2208      	movs	r2, #8
 800548a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f838 	bl	8005502 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2208      	movs	r2, #8
 8005496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e029      	b.n	80054fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b4:	d111      	bne.n	80054da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f81e 	bl	8005502 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e00f      	b.n	80054fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4013      	ands	r3, r2
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	bf0c      	ite	eq
 80054ea:	2301      	moveq	r3, #1
 80054ec:	2300      	movne	r3, #0
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	461a      	mov	r2, r3
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d0a6      	beq.n	8005446 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005502:	b480      	push	{r7}
 8005504:	b095      	sub	sp, #84	; 0x54
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800551e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005528:	643b      	str	r3, [r7, #64]	; 0x40
 800552a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800552e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e6      	bne.n	800550a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3308      	adds	r3, #8
 8005542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	61fb      	str	r3, [r7, #28]
   return(result);
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f023 0301 	bic.w	r3, r3, #1
 8005552:	64bb      	str	r3, [r7, #72]	; 0x48
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3308      	adds	r3, #8
 800555a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800555c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e5      	bne.n	800553c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005574:	2b01      	cmp	r3, #1
 8005576:	d118      	bne.n	80055aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	60bb      	str	r3, [r7, #8]
   return(result);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f023 0310 	bic.w	r3, r3, #16
 800558c:	647b      	str	r3, [r7, #68]	; 0x44
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005596:	61bb      	str	r3, [r7, #24]
 8005598:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6979      	ldr	r1, [r7, #20]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	613b      	str	r3, [r7, #16]
   return(result);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e6      	bne.n	8005578 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055be:	bf00      	nop
 80055c0:	3754      	adds	r7, #84	; 0x54
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <__cvt>:
 80055ca:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055ce:	ec55 4b10 	vmov	r4, r5, d0
 80055d2:	2d00      	cmp	r5, #0
 80055d4:	460e      	mov	r6, r1
 80055d6:	4619      	mov	r1, r3
 80055d8:	462b      	mov	r3, r5
 80055da:	bfbb      	ittet	lt
 80055dc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055e0:	461d      	movlt	r5, r3
 80055e2:	2300      	movge	r3, #0
 80055e4:	232d      	movlt	r3, #45	; 0x2d
 80055e6:	700b      	strb	r3, [r1, #0]
 80055e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055ea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80055ee:	4691      	mov	r9, r2
 80055f0:	f023 0820 	bic.w	r8, r3, #32
 80055f4:	bfbc      	itt	lt
 80055f6:	4622      	movlt	r2, r4
 80055f8:	4614      	movlt	r4, r2
 80055fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055fe:	d005      	beq.n	800560c <__cvt+0x42>
 8005600:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005604:	d100      	bne.n	8005608 <__cvt+0x3e>
 8005606:	3601      	adds	r6, #1
 8005608:	2102      	movs	r1, #2
 800560a:	e000      	b.n	800560e <__cvt+0x44>
 800560c:	2103      	movs	r1, #3
 800560e:	ab03      	add	r3, sp, #12
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	ab02      	add	r3, sp, #8
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	ec45 4b10 	vmov	d0, r4, r5
 800561a:	4653      	mov	r3, sl
 800561c:	4632      	mov	r2, r6
 800561e:	f000 fe5b 	bl	80062d8 <_dtoa_r>
 8005622:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005626:	4607      	mov	r7, r0
 8005628:	d102      	bne.n	8005630 <__cvt+0x66>
 800562a:	f019 0f01 	tst.w	r9, #1
 800562e:	d022      	beq.n	8005676 <__cvt+0xac>
 8005630:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005634:	eb07 0906 	add.w	r9, r7, r6
 8005638:	d110      	bne.n	800565c <__cvt+0x92>
 800563a:	783b      	ldrb	r3, [r7, #0]
 800563c:	2b30      	cmp	r3, #48	; 0x30
 800563e:	d10a      	bne.n	8005656 <__cvt+0x8c>
 8005640:	2200      	movs	r2, #0
 8005642:	2300      	movs	r3, #0
 8005644:	4620      	mov	r0, r4
 8005646:	4629      	mov	r1, r5
 8005648:	f7fb fa3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800564c:	b918      	cbnz	r0, 8005656 <__cvt+0x8c>
 800564e:	f1c6 0601 	rsb	r6, r6, #1
 8005652:	f8ca 6000 	str.w	r6, [sl]
 8005656:	f8da 3000 	ldr.w	r3, [sl]
 800565a:	4499      	add	r9, r3
 800565c:	2200      	movs	r2, #0
 800565e:	2300      	movs	r3, #0
 8005660:	4620      	mov	r0, r4
 8005662:	4629      	mov	r1, r5
 8005664:	f7fb fa30 	bl	8000ac8 <__aeabi_dcmpeq>
 8005668:	b108      	cbz	r0, 800566e <__cvt+0xa4>
 800566a:	f8cd 900c 	str.w	r9, [sp, #12]
 800566e:	2230      	movs	r2, #48	; 0x30
 8005670:	9b03      	ldr	r3, [sp, #12]
 8005672:	454b      	cmp	r3, r9
 8005674:	d307      	bcc.n	8005686 <__cvt+0xbc>
 8005676:	9b03      	ldr	r3, [sp, #12]
 8005678:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800567a:	1bdb      	subs	r3, r3, r7
 800567c:	4638      	mov	r0, r7
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	b004      	add	sp, #16
 8005682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005686:	1c59      	adds	r1, r3, #1
 8005688:	9103      	str	r1, [sp, #12]
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	e7f0      	b.n	8005670 <__cvt+0xa6>

0800568e <__exponent>:
 800568e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005690:	4603      	mov	r3, r0
 8005692:	2900      	cmp	r1, #0
 8005694:	bfb8      	it	lt
 8005696:	4249      	neglt	r1, r1
 8005698:	f803 2b02 	strb.w	r2, [r3], #2
 800569c:	bfb4      	ite	lt
 800569e:	222d      	movlt	r2, #45	; 0x2d
 80056a0:	222b      	movge	r2, #43	; 0x2b
 80056a2:	2909      	cmp	r1, #9
 80056a4:	7042      	strb	r2, [r0, #1]
 80056a6:	dd2a      	ble.n	80056fe <__exponent+0x70>
 80056a8:	f10d 0207 	add.w	r2, sp, #7
 80056ac:	4617      	mov	r7, r2
 80056ae:	260a      	movs	r6, #10
 80056b0:	4694      	mov	ip, r2
 80056b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80056b6:	fb06 1415 	mls	r4, r6, r5, r1
 80056ba:	3430      	adds	r4, #48	; 0x30
 80056bc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80056c0:	460c      	mov	r4, r1
 80056c2:	2c63      	cmp	r4, #99	; 0x63
 80056c4:	f102 32ff 	add.w	r2, r2, #4294967295
 80056c8:	4629      	mov	r1, r5
 80056ca:	dcf1      	bgt.n	80056b0 <__exponent+0x22>
 80056cc:	3130      	adds	r1, #48	; 0x30
 80056ce:	f1ac 0402 	sub.w	r4, ip, #2
 80056d2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80056d6:	1c41      	adds	r1, r0, #1
 80056d8:	4622      	mov	r2, r4
 80056da:	42ba      	cmp	r2, r7
 80056dc:	d30a      	bcc.n	80056f4 <__exponent+0x66>
 80056de:	f10d 0209 	add.w	r2, sp, #9
 80056e2:	eba2 020c 	sub.w	r2, r2, ip
 80056e6:	42bc      	cmp	r4, r7
 80056e8:	bf88      	it	hi
 80056ea:	2200      	movhi	r2, #0
 80056ec:	4413      	add	r3, r2
 80056ee:	1a18      	subs	r0, r3, r0
 80056f0:	b003      	add	sp, #12
 80056f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80056f8:	f801 5f01 	strb.w	r5, [r1, #1]!
 80056fc:	e7ed      	b.n	80056da <__exponent+0x4c>
 80056fe:	2330      	movs	r3, #48	; 0x30
 8005700:	3130      	adds	r1, #48	; 0x30
 8005702:	7083      	strb	r3, [r0, #2]
 8005704:	70c1      	strb	r1, [r0, #3]
 8005706:	1d03      	adds	r3, r0, #4
 8005708:	e7f1      	b.n	80056ee <__exponent+0x60>
	...

0800570c <_printf_float>:
 800570c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005710:	ed2d 8b02 	vpush	{d8}
 8005714:	b08d      	sub	sp, #52	; 0x34
 8005716:	460c      	mov	r4, r1
 8005718:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800571c:	4616      	mov	r6, r2
 800571e:	461f      	mov	r7, r3
 8005720:	4605      	mov	r5, r0
 8005722:	f000 fcd9 	bl	80060d8 <_localeconv_r>
 8005726:	f8d0 a000 	ldr.w	sl, [r0]
 800572a:	4650      	mov	r0, sl
 800572c:	f7fa fda0 	bl	8000270 <strlen>
 8005730:	2300      	movs	r3, #0
 8005732:	930a      	str	r3, [sp, #40]	; 0x28
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	9305      	str	r3, [sp, #20]
 8005738:	f8d8 3000 	ldr.w	r3, [r8]
 800573c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005740:	3307      	adds	r3, #7
 8005742:	f023 0307 	bic.w	r3, r3, #7
 8005746:	f103 0208 	add.w	r2, r3, #8
 800574a:	f8c8 2000 	str.w	r2, [r8]
 800574e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005752:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005756:	9307      	str	r3, [sp, #28]
 8005758:	f8cd 8018 	str.w	r8, [sp, #24]
 800575c:	ee08 0a10 	vmov	s16, r0
 8005760:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005768:	4b9e      	ldr	r3, [pc, #632]	; (80059e4 <_printf_float+0x2d8>)
 800576a:	f04f 32ff 	mov.w	r2, #4294967295
 800576e:	f7fb f9dd 	bl	8000b2c <__aeabi_dcmpun>
 8005772:	bb88      	cbnz	r0, 80057d8 <_printf_float+0xcc>
 8005774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005778:	4b9a      	ldr	r3, [pc, #616]	; (80059e4 <_printf_float+0x2d8>)
 800577a:	f04f 32ff 	mov.w	r2, #4294967295
 800577e:	f7fb f9b7 	bl	8000af0 <__aeabi_dcmple>
 8005782:	bb48      	cbnz	r0, 80057d8 <_printf_float+0xcc>
 8005784:	2200      	movs	r2, #0
 8005786:	2300      	movs	r3, #0
 8005788:	4640      	mov	r0, r8
 800578a:	4649      	mov	r1, r9
 800578c:	f7fb f9a6 	bl	8000adc <__aeabi_dcmplt>
 8005790:	b110      	cbz	r0, 8005798 <_printf_float+0x8c>
 8005792:	232d      	movs	r3, #45	; 0x2d
 8005794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005798:	4a93      	ldr	r2, [pc, #588]	; (80059e8 <_printf_float+0x2dc>)
 800579a:	4b94      	ldr	r3, [pc, #592]	; (80059ec <_printf_float+0x2e0>)
 800579c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80057a0:	bf94      	ite	ls
 80057a2:	4690      	movls	r8, r2
 80057a4:	4698      	movhi	r8, r3
 80057a6:	2303      	movs	r3, #3
 80057a8:	6123      	str	r3, [r4, #16]
 80057aa:	9b05      	ldr	r3, [sp, #20]
 80057ac:	f023 0304 	bic.w	r3, r3, #4
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	f04f 0900 	mov.w	r9, #0
 80057b6:	9700      	str	r7, [sp, #0]
 80057b8:	4633      	mov	r3, r6
 80057ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80057bc:	4621      	mov	r1, r4
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 f9da 	bl	8005b78 <_printf_common>
 80057c4:	3001      	adds	r0, #1
 80057c6:	f040 8090 	bne.w	80058ea <_printf_float+0x1de>
 80057ca:	f04f 30ff 	mov.w	r0, #4294967295
 80057ce:	b00d      	add	sp, #52	; 0x34
 80057d0:	ecbd 8b02 	vpop	{d8}
 80057d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d8:	4642      	mov	r2, r8
 80057da:	464b      	mov	r3, r9
 80057dc:	4640      	mov	r0, r8
 80057de:	4649      	mov	r1, r9
 80057e0:	f7fb f9a4 	bl	8000b2c <__aeabi_dcmpun>
 80057e4:	b140      	cbz	r0, 80057f8 <_printf_float+0xec>
 80057e6:	464b      	mov	r3, r9
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bfbc      	itt	lt
 80057ec:	232d      	movlt	r3, #45	; 0x2d
 80057ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057f2:	4a7f      	ldr	r2, [pc, #508]	; (80059f0 <_printf_float+0x2e4>)
 80057f4:	4b7f      	ldr	r3, [pc, #508]	; (80059f4 <_printf_float+0x2e8>)
 80057f6:	e7d1      	b.n	800579c <_printf_float+0x90>
 80057f8:	6863      	ldr	r3, [r4, #4]
 80057fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80057fe:	9206      	str	r2, [sp, #24]
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	d13f      	bne.n	8005884 <_printf_float+0x178>
 8005804:	2306      	movs	r3, #6
 8005806:	6063      	str	r3, [r4, #4]
 8005808:	9b05      	ldr	r3, [sp, #20]
 800580a:	6861      	ldr	r1, [r4, #4]
 800580c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005810:	2300      	movs	r3, #0
 8005812:	9303      	str	r3, [sp, #12]
 8005814:	ab0a      	add	r3, sp, #40	; 0x28
 8005816:	e9cd b301 	strd	fp, r3, [sp, #4]
 800581a:	ab09      	add	r3, sp, #36	; 0x24
 800581c:	ec49 8b10 	vmov	d0, r8, r9
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	6022      	str	r2, [r4, #0]
 8005824:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005828:	4628      	mov	r0, r5
 800582a:	f7ff fece 	bl	80055ca <__cvt>
 800582e:	9b06      	ldr	r3, [sp, #24]
 8005830:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005832:	2b47      	cmp	r3, #71	; 0x47
 8005834:	4680      	mov	r8, r0
 8005836:	d108      	bne.n	800584a <_printf_float+0x13e>
 8005838:	1cc8      	adds	r0, r1, #3
 800583a:	db02      	blt.n	8005842 <_printf_float+0x136>
 800583c:	6863      	ldr	r3, [r4, #4]
 800583e:	4299      	cmp	r1, r3
 8005840:	dd41      	ble.n	80058c6 <_printf_float+0x1ba>
 8005842:	f1ab 0302 	sub.w	r3, fp, #2
 8005846:	fa5f fb83 	uxtb.w	fp, r3
 800584a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800584e:	d820      	bhi.n	8005892 <_printf_float+0x186>
 8005850:	3901      	subs	r1, #1
 8005852:	465a      	mov	r2, fp
 8005854:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005858:	9109      	str	r1, [sp, #36]	; 0x24
 800585a:	f7ff ff18 	bl	800568e <__exponent>
 800585e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005860:	1813      	adds	r3, r2, r0
 8005862:	2a01      	cmp	r2, #1
 8005864:	4681      	mov	r9, r0
 8005866:	6123      	str	r3, [r4, #16]
 8005868:	dc02      	bgt.n	8005870 <_printf_float+0x164>
 800586a:	6822      	ldr	r2, [r4, #0]
 800586c:	07d2      	lsls	r2, r2, #31
 800586e:	d501      	bpl.n	8005874 <_printf_float+0x168>
 8005870:	3301      	adds	r3, #1
 8005872:	6123      	str	r3, [r4, #16]
 8005874:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005878:	2b00      	cmp	r3, #0
 800587a:	d09c      	beq.n	80057b6 <_printf_float+0xaa>
 800587c:	232d      	movs	r3, #45	; 0x2d
 800587e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005882:	e798      	b.n	80057b6 <_printf_float+0xaa>
 8005884:	9a06      	ldr	r2, [sp, #24]
 8005886:	2a47      	cmp	r2, #71	; 0x47
 8005888:	d1be      	bne.n	8005808 <_printf_float+0xfc>
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1bc      	bne.n	8005808 <_printf_float+0xfc>
 800588e:	2301      	movs	r3, #1
 8005890:	e7b9      	b.n	8005806 <_printf_float+0xfa>
 8005892:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005896:	d118      	bne.n	80058ca <_printf_float+0x1be>
 8005898:	2900      	cmp	r1, #0
 800589a:	6863      	ldr	r3, [r4, #4]
 800589c:	dd0b      	ble.n	80058b6 <_printf_float+0x1aa>
 800589e:	6121      	str	r1, [r4, #16]
 80058a0:	b913      	cbnz	r3, 80058a8 <_printf_float+0x19c>
 80058a2:	6822      	ldr	r2, [r4, #0]
 80058a4:	07d0      	lsls	r0, r2, #31
 80058a6:	d502      	bpl.n	80058ae <_printf_float+0x1a2>
 80058a8:	3301      	adds	r3, #1
 80058aa:	440b      	add	r3, r1
 80058ac:	6123      	str	r3, [r4, #16]
 80058ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80058b0:	f04f 0900 	mov.w	r9, #0
 80058b4:	e7de      	b.n	8005874 <_printf_float+0x168>
 80058b6:	b913      	cbnz	r3, 80058be <_printf_float+0x1b2>
 80058b8:	6822      	ldr	r2, [r4, #0]
 80058ba:	07d2      	lsls	r2, r2, #31
 80058bc:	d501      	bpl.n	80058c2 <_printf_float+0x1b6>
 80058be:	3302      	adds	r3, #2
 80058c0:	e7f4      	b.n	80058ac <_printf_float+0x1a0>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e7f2      	b.n	80058ac <_printf_float+0x1a0>
 80058c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80058ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058cc:	4299      	cmp	r1, r3
 80058ce:	db05      	blt.n	80058dc <_printf_float+0x1d0>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	6121      	str	r1, [r4, #16]
 80058d4:	07d8      	lsls	r0, r3, #31
 80058d6:	d5ea      	bpl.n	80058ae <_printf_float+0x1a2>
 80058d8:	1c4b      	adds	r3, r1, #1
 80058da:	e7e7      	b.n	80058ac <_printf_float+0x1a0>
 80058dc:	2900      	cmp	r1, #0
 80058de:	bfd4      	ite	le
 80058e0:	f1c1 0202 	rsble	r2, r1, #2
 80058e4:	2201      	movgt	r2, #1
 80058e6:	4413      	add	r3, r2
 80058e8:	e7e0      	b.n	80058ac <_printf_float+0x1a0>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	055a      	lsls	r2, r3, #21
 80058ee:	d407      	bmi.n	8005900 <_printf_float+0x1f4>
 80058f0:	6923      	ldr	r3, [r4, #16]
 80058f2:	4642      	mov	r2, r8
 80058f4:	4631      	mov	r1, r6
 80058f6:	4628      	mov	r0, r5
 80058f8:	47b8      	blx	r7
 80058fa:	3001      	adds	r0, #1
 80058fc:	d12c      	bne.n	8005958 <_printf_float+0x24c>
 80058fe:	e764      	b.n	80057ca <_printf_float+0xbe>
 8005900:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005904:	f240 80e0 	bls.w	8005ac8 <_printf_float+0x3bc>
 8005908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800590c:	2200      	movs	r2, #0
 800590e:	2300      	movs	r3, #0
 8005910:	f7fb f8da 	bl	8000ac8 <__aeabi_dcmpeq>
 8005914:	2800      	cmp	r0, #0
 8005916:	d034      	beq.n	8005982 <_printf_float+0x276>
 8005918:	4a37      	ldr	r2, [pc, #220]	; (80059f8 <_printf_float+0x2ec>)
 800591a:	2301      	movs	r3, #1
 800591c:	4631      	mov	r1, r6
 800591e:	4628      	mov	r0, r5
 8005920:	47b8      	blx	r7
 8005922:	3001      	adds	r0, #1
 8005924:	f43f af51 	beq.w	80057ca <_printf_float+0xbe>
 8005928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800592c:	429a      	cmp	r2, r3
 800592e:	db02      	blt.n	8005936 <_printf_float+0x22a>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	07d8      	lsls	r0, r3, #31
 8005934:	d510      	bpl.n	8005958 <_printf_float+0x24c>
 8005936:	ee18 3a10 	vmov	r3, s16
 800593a:	4652      	mov	r2, sl
 800593c:	4631      	mov	r1, r6
 800593e:	4628      	mov	r0, r5
 8005940:	47b8      	blx	r7
 8005942:	3001      	adds	r0, #1
 8005944:	f43f af41 	beq.w	80057ca <_printf_float+0xbe>
 8005948:	f04f 0800 	mov.w	r8, #0
 800594c:	f104 091a 	add.w	r9, r4, #26
 8005950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005952:	3b01      	subs	r3, #1
 8005954:	4543      	cmp	r3, r8
 8005956:	dc09      	bgt.n	800596c <_printf_float+0x260>
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	079b      	lsls	r3, r3, #30
 800595c:	f100 8107 	bmi.w	8005b6e <_printf_float+0x462>
 8005960:	68e0      	ldr	r0, [r4, #12]
 8005962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005964:	4298      	cmp	r0, r3
 8005966:	bfb8      	it	lt
 8005968:	4618      	movlt	r0, r3
 800596a:	e730      	b.n	80057ce <_printf_float+0xc2>
 800596c:	2301      	movs	r3, #1
 800596e:	464a      	mov	r2, r9
 8005970:	4631      	mov	r1, r6
 8005972:	4628      	mov	r0, r5
 8005974:	47b8      	blx	r7
 8005976:	3001      	adds	r0, #1
 8005978:	f43f af27 	beq.w	80057ca <_printf_float+0xbe>
 800597c:	f108 0801 	add.w	r8, r8, #1
 8005980:	e7e6      	b.n	8005950 <_printf_float+0x244>
 8005982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005984:	2b00      	cmp	r3, #0
 8005986:	dc39      	bgt.n	80059fc <_printf_float+0x2f0>
 8005988:	4a1b      	ldr	r2, [pc, #108]	; (80059f8 <_printf_float+0x2ec>)
 800598a:	2301      	movs	r3, #1
 800598c:	4631      	mov	r1, r6
 800598e:	4628      	mov	r0, r5
 8005990:	47b8      	blx	r7
 8005992:	3001      	adds	r0, #1
 8005994:	f43f af19 	beq.w	80057ca <_printf_float+0xbe>
 8005998:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800599c:	4313      	orrs	r3, r2
 800599e:	d102      	bne.n	80059a6 <_printf_float+0x29a>
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	07d9      	lsls	r1, r3, #31
 80059a4:	d5d8      	bpl.n	8005958 <_printf_float+0x24c>
 80059a6:	ee18 3a10 	vmov	r3, s16
 80059aa:	4652      	mov	r2, sl
 80059ac:	4631      	mov	r1, r6
 80059ae:	4628      	mov	r0, r5
 80059b0:	47b8      	blx	r7
 80059b2:	3001      	adds	r0, #1
 80059b4:	f43f af09 	beq.w	80057ca <_printf_float+0xbe>
 80059b8:	f04f 0900 	mov.w	r9, #0
 80059bc:	f104 0a1a 	add.w	sl, r4, #26
 80059c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c2:	425b      	negs	r3, r3
 80059c4:	454b      	cmp	r3, r9
 80059c6:	dc01      	bgt.n	80059cc <_printf_float+0x2c0>
 80059c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ca:	e792      	b.n	80058f2 <_printf_float+0x1e6>
 80059cc:	2301      	movs	r3, #1
 80059ce:	4652      	mov	r2, sl
 80059d0:	4631      	mov	r1, r6
 80059d2:	4628      	mov	r0, r5
 80059d4:	47b8      	blx	r7
 80059d6:	3001      	adds	r0, #1
 80059d8:	f43f aef7 	beq.w	80057ca <_printf_float+0xbe>
 80059dc:	f109 0901 	add.w	r9, r9, #1
 80059e0:	e7ee      	b.n	80059c0 <_printf_float+0x2b4>
 80059e2:	bf00      	nop
 80059e4:	7fefffff 	.word	0x7fefffff
 80059e8:	08008400 	.word	0x08008400
 80059ec:	08008404 	.word	0x08008404
 80059f0:	08008408 	.word	0x08008408
 80059f4:	0800840c 	.word	0x0800840c
 80059f8:	08008410 	.word	0x08008410
 80059fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a00:	429a      	cmp	r2, r3
 8005a02:	bfa8      	it	ge
 8005a04:	461a      	movge	r2, r3
 8005a06:	2a00      	cmp	r2, #0
 8005a08:	4691      	mov	r9, r2
 8005a0a:	dc37      	bgt.n	8005a7c <_printf_float+0x370>
 8005a0c:	f04f 0b00 	mov.w	fp, #0
 8005a10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a14:	f104 021a 	add.w	r2, r4, #26
 8005a18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a1a:	9305      	str	r3, [sp, #20]
 8005a1c:	eba3 0309 	sub.w	r3, r3, r9
 8005a20:	455b      	cmp	r3, fp
 8005a22:	dc33      	bgt.n	8005a8c <_printf_float+0x380>
 8005a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	db3b      	blt.n	8005aa4 <_printf_float+0x398>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	07da      	lsls	r2, r3, #31
 8005a30:	d438      	bmi.n	8005aa4 <_printf_float+0x398>
 8005a32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a36:	eba2 0903 	sub.w	r9, r2, r3
 8005a3a:	9b05      	ldr	r3, [sp, #20]
 8005a3c:	1ad2      	subs	r2, r2, r3
 8005a3e:	4591      	cmp	r9, r2
 8005a40:	bfa8      	it	ge
 8005a42:	4691      	movge	r9, r2
 8005a44:	f1b9 0f00 	cmp.w	r9, #0
 8005a48:	dc35      	bgt.n	8005ab6 <_printf_float+0x3aa>
 8005a4a:	f04f 0800 	mov.w	r8, #0
 8005a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a52:	f104 0a1a 	add.w	sl, r4, #26
 8005a56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a5a:	1a9b      	subs	r3, r3, r2
 8005a5c:	eba3 0309 	sub.w	r3, r3, r9
 8005a60:	4543      	cmp	r3, r8
 8005a62:	f77f af79 	ble.w	8005958 <_printf_float+0x24c>
 8005a66:	2301      	movs	r3, #1
 8005a68:	4652      	mov	r2, sl
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	47b8      	blx	r7
 8005a70:	3001      	adds	r0, #1
 8005a72:	f43f aeaa 	beq.w	80057ca <_printf_float+0xbe>
 8005a76:	f108 0801 	add.w	r8, r8, #1
 8005a7a:	e7ec      	b.n	8005a56 <_printf_float+0x34a>
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4642      	mov	r2, r8
 8005a82:	4628      	mov	r0, r5
 8005a84:	47b8      	blx	r7
 8005a86:	3001      	adds	r0, #1
 8005a88:	d1c0      	bne.n	8005a0c <_printf_float+0x300>
 8005a8a:	e69e      	b.n	80057ca <_printf_float+0xbe>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4631      	mov	r1, r6
 8005a90:	4628      	mov	r0, r5
 8005a92:	9205      	str	r2, [sp, #20]
 8005a94:	47b8      	blx	r7
 8005a96:	3001      	adds	r0, #1
 8005a98:	f43f ae97 	beq.w	80057ca <_printf_float+0xbe>
 8005a9c:	9a05      	ldr	r2, [sp, #20]
 8005a9e:	f10b 0b01 	add.w	fp, fp, #1
 8005aa2:	e7b9      	b.n	8005a18 <_printf_float+0x30c>
 8005aa4:	ee18 3a10 	vmov	r3, s16
 8005aa8:	4652      	mov	r2, sl
 8005aaa:	4631      	mov	r1, r6
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b8      	blx	r7
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d1be      	bne.n	8005a32 <_printf_float+0x326>
 8005ab4:	e689      	b.n	80057ca <_printf_float+0xbe>
 8005ab6:	9a05      	ldr	r2, [sp, #20]
 8005ab8:	464b      	mov	r3, r9
 8005aba:	4442      	add	r2, r8
 8005abc:	4631      	mov	r1, r6
 8005abe:	4628      	mov	r0, r5
 8005ac0:	47b8      	blx	r7
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	d1c1      	bne.n	8005a4a <_printf_float+0x33e>
 8005ac6:	e680      	b.n	80057ca <_printf_float+0xbe>
 8005ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aca:	2a01      	cmp	r2, #1
 8005acc:	dc01      	bgt.n	8005ad2 <_printf_float+0x3c6>
 8005ace:	07db      	lsls	r3, r3, #31
 8005ad0:	d53a      	bpl.n	8005b48 <_printf_float+0x43c>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	4628      	mov	r0, r5
 8005ada:	47b8      	blx	r7
 8005adc:	3001      	adds	r0, #1
 8005ade:	f43f ae74 	beq.w	80057ca <_printf_float+0xbe>
 8005ae2:	ee18 3a10 	vmov	r3, s16
 8005ae6:	4652      	mov	r2, sl
 8005ae8:	4631      	mov	r1, r6
 8005aea:	4628      	mov	r0, r5
 8005aec:	47b8      	blx	r7
 8005aee:	3001      	adds	r0, #1
 8005af0:	f43f ae6b 	beq.w	80057ca <_printf_float+0xbe>
 8005af4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005af8:	2200      	movs	r2, #0
 8005afa:	2300      	movs	r3, #0
 8005afc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005b00:	f7fa ffe2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b04:	b9d8      	cbnz	r0, 8005b3e <_printf_float+0x432>
 8005b06:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b0a:	f108 0201 	add.w	r2, r8, #1
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4628      	mov	r0, r5
 8005b12:	47b8      	blx	r7
 8005b14:	3001      	adds	r0, #1
 8005b16:	d10e      	bne.n	8005b36 <_printf_float+0x42a>
 8005b18:	e657      	b.n	80057ca <_printf_float+0xbe>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	4652      	mov	r2, sl
 8005b1e:	4631      	mov	r1, r6
 8005b20:	4628      	mov	r0, r5
 8005b22:	47b8      	blx	r7
 8005b24:	3001      	adds	r0, #1
 8005b26:	f43f ae50 	beq.w	80057ca <_printf_float+0xbe>
 8005b2a:	f108 0801 	add.w	r8, r8, #1
 8005b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b30:	3b01      	subs	r3, #1
 8005b32:	4543      	cmp	r3, r8
 8005b34:	dcf1      	bgt.n	8005b1a <_printf_float+0x40e>
 8005b36:	464b      	mov	r3, r9
 8005b38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b3c:	e6da      	b.n	80058f4 <_printf_float+0x1e8>
 8005b3e:	f04f 0800 	mov.w	r8, #0
 8005b42:	f104 0a1a 	add.w	sl, r4, #26
 8005b46:	e7f2      	b.n	8005b2e <_printf_float+0x422>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	4642      	mov	r2, r8
 8005b4c:	e7df      	b.n	8005b0e <_printf_float+0x402>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	464a      	mov	r2, r9
 8005b52:	4631      	mov	r1, r6
 8005b54:	4628      	mov	r0, r5
 8005b56:	47b8      	blx	r7
 8005b58:	3001      	adds	r0, #1
 8005b5a:	f43f ae36 	beq.w	80057ca <_printf_float+0xbe>
 8005b5e:	f108 0801 	add.w	r8, r8, #1
 8005b62:	68e3      	ldr	r3, [r4, #12]
 8005b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b66:	1a5b      	subs	r3, r3, r1
 8005b68:	4543      	cmp	r3, r8
 8005b6a:	dcf0      	bgt.n	8005b4e <_printf_float+0x442>
 8005b6c:	e6f8      	b.n	8005960 <_printf_float+0x254>
 8005b6e:	f04f 0800 	mov.w	r8, #0
 8005b72:	f104 0919 	add.w	r9, r4, #25
 8005b76:	e7f4      	b.n	8005b62 <_printf_float+0x456>

08005b78 <_printf_common>:
 8005b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7c:	4616      	mov	r6, r2
 8005b7e:	4699      	mov	r9, r3
 8005b80:	688a      	ldr	r2, [r1, #8]
 8005b82:	690b      	ldr	r3, [r1, #16]
 8005b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	bfb8      	it	lt
 8005b8c:	4613      	movlt	r3, r2
 8005b8e:	6033      	str	r3, [r6, #0]
 8005b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b94:	4607      	mov	r7, r0
 8005b96:	460c      	mov	r4, r1
 8005b98:	b10a      	cbz	r2, 8005b9e <_printf_common+0x26>
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	6033      	str	r3, [r6, #0]
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	0699      	lsls	r1, r3, #26
 8005ba2:	bf42      	ittt	mi
 8005ba4:	6833      	ldrmi	r3, [r6, #0]
 8005ba6:	3302      	addmi	r3, #2
 8005ba8:	6033      	strmi	r3, [r6, #0]
 8005baa:	6825      	ldr	r5, [r4, #0]
 8005bac:	f015 0506 	ands.w	r5, r5, #6
 8005bb0:	d106      	bne.n	8005bc0 <_printf_common+0x48>
 8005bb2:	f104 0a19 	add.w	sl, r4, #25
 8005bb6:	68e3      	ldr	r3, [r4, #12]
 8005bb8:	6832      	ldr	r2, [r6, #0]
 8005bba:	1a9b      	subs	r3, r3, r2
 8005bbc:	42ab      	cmp	r3, r5
 8005bbe:	dc26      	bgt.n	8005c0e <_printf_common+0x96>
 8005bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bc4:	1e13      	subs	r3, r2, #0
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	bf18      	it	ne
 8005bca:	2301      	movne	r3, #1
 8005bcc:	0692      	lsls	r2, r2, #26
 8005bce:	d42b      	bmi.n	8005c28 <_printf_common+0xb0>
 8005bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	47c0      	blx	r8
 8005bda:	3001      	adds	r0, #1
 8005bdc:	d01e      	beq.n	8005c1c <_printf_common+0xa4>
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	6922      	ldr	r2, [r4, #16]
 8005be2:	f003 0306 	and.w	r3, r3, #6
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	bf02      	ittt	eq
 8005bea:	68e5      	ldreq	r5, [r4, #12]
 8005bec:	6833      	ldreq	r3, [r6, #0]
 8005bee:	1aed      	subeq	r5, r5, r3
 8005bf0:	68a3      	ldr	r3, [r4, #8]
 8005bf2:	bf0c      	ite	eq
 8005bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bf8:	2500      	movne	r5, #0
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	bfc4      	itt	gt
 8005bfe:	1a9b      	subgt	r3, r3, r2
 8005c00:	18ed      	addgt	r5, r5, r3
 8005c02:	2600      	movs	r6, #0
 8005c04:	341a      	adds	r4, #26
 8005c06:	42b5      	cmp	r5, r6
 8005c08:	d11a      	bne.n	8005c40 <_printf_common+0xc8>
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	e008      	b.n	8005c20 <_printf_common+0xa8>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4652      	mov	r2, sl
 8005c12:	4649      	mov	r1, r9
 8005c14:	4638      	mov	r0, r7
 8005c16:	47c0      	blx	r8
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d103      	bne.n	8005c24 <_printf_common+0xac>
 8005c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c24:	3501      	adds	r5, #1
 8005c26:	e7c6      	b.n	8005bb6 <_printf_common+0x3e>
 8005c28:	18e1      	adds	r1, r4, r3
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	2030      	movs	r0, #48	; 0x30
 8005c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c32:	4422      	add	r2, r4
 8005c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c3c:	3302      	adds	r3, #2
 8005c3e:	e7c7      	b.n	8005bd0 <_printf_common+0x58>
 8005c40:	2301      	movs	r3, #1
 8005c42:	4622      	mov	r2, r4
 8005c44:	4649      	mov	r1, r9
 8005c46:	4638      	mov	r0, r7
 8005c48:	47c0      	blx	r8
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	d0e6      	beq.n	8005c1c <_printf_common+0xa4>
 8005c4e:	3601      	adds	r6, #1
 8005c50:	e7d9      	b.n	8005c06 <_printf_common+0x8e>
	...

08005c54 <_printf_i>:
 8005c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c58:	7e0f      	ldrb	r7, [r1, #24]
 8005c5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c5c:	2f78      	cmp	r7, #120	; 0x78
 8005c5e:	4691      	mov	r9, r2
 8005c60:	4680      	mov	r8, r0
 8005c62:	460c      	mov	r4, r1
 8005c64:	469a      	mov	sl, r3
 8005c66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c6a:	d807      	bhi.n	8005c7c <_printf_i+0x28>
 8005c6c:	2f62      	cmp	r7, #98	; 0x62
 8005c6e:	d80a      	bhi.n	8005c86 <_printf_i+0x32>
 8005c70:	2f00      	cmp	r7, #0
 8005c72:	f000 80d4 	beq.w	8005e1e <_printf_i+0x1ca>
 8005c76:	2f58      	cmp	r7, #88	; 0x58
 8005c78:	f000 80c0 	beq.w	8005dfc <_printf_i+0x1a8>
 8005c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c84:	e03a      	b.n	8005cfc <_printf_i+0xa8>
 8005c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c8a:	2b15      	cmp	r3, #21
 8005c8c:	d8f6      	bhi.n	8005c7c <_printf_i+0x28>
 8005c8e:	a101      	add	r1, pc, #4	; (adr r1, 8005c94 <_printf_i+0x40>)
 8005c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c94:	08005ced 	.word	0x08005ced
 8005c98:	08005d01 	.word	0x08005d01
 8005c9c:	08005c7d 	.word	0x08005c7d
 8005ca0:	08005c7d 	.word	0x08005c7d
 8005ca4:	08005c7d 	.word	0x08005c7d
 8005ca8:	08005c7d 	.word	0x08005c7d
 8005cac:	08005d01 	.word	0x08005d01
 8005cb0:	08005c7d 	.word	0x08005c7d
 8005cb4:	08005c7d 	.word	0x08005c7d
 8005cb8:	08005c7d 	.word	0x08005c7d
 8005cbc:	08005c7d 	.word	0x08005c7d
 8005cc0:	08005e05 	.word	0x08005e05
 8005cc4:	08005d2d 	.word	0x08005d2d
 8005cc8:	08005dbf 	.word	0x08005dbf
 8005ccc:	08005c7d 	.word	0x08005c7d
 8005cd0:	08005c7d 	.word	0x08005c7d
 8005cd4:	08005e27 	.word	0x08005e27
 8005cd8:	08005c7d 	.word	0x08005c7d
 8005cdc:	08005d2d 	.word	0x08005d2d
 8005ce0:	08005c7d 	.word	0x08005c7d
 8005ce4:	08005c7d 	.word	0x08005c7d
 8005ce8:	08005dc7 	.word	0x08005dc7
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	1d1a      	adds	r2, r3, #4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	602a      	str	r2, [r5, #0]
 8005cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e09f      	b.n	8005e40 <_printf_i+0x1ec>
 8005d00:	6820      	ldr	r0, [r4, #0]
 8005d02:	682b      	ldr	r3, [r5, #0]
 8005d04:	0607      	lsls	r7, r0, #24
 8005d06:	f103 0104 	add.w	r1, r3, #4
 8005d0a:	6029      	str	r1, [r5, #0]
 8005d0c:	d501      	bpl.n	8005d12 <_printf_i+0xbe>
 8005d0e:	681e      	ldr	r6, [r3, #0]
 8005d10:	e003      	b.n	8005d1a <_printf_i+0xc6>
 8005d12:	0646      	lsls	r6, r0, #25
 8005d14:	d5fb      	bpl.n	8005d0e <_printf_i+0xba>
 8005d16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d1a:	2e00      	cmp	r6, #0
 8005d1c:	da03      	bge.n	8005d26 <_printf_i+0xd2>
 8005d1e:	232d      	movs	r3, #45	; 0x2d
 8005d20:	4276      	negs	r6, r6
 8005d22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d26:	485a      	ldr	r0, [pc, #360]	; (8005e90 <_printf_i+0x23c>)
 8005d28:	230a      	movs	r3, #10
 8005d2a:	e012      	b.n	8005d52 <_printf_i+0xfe>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	6820      	ldr	r0, [r4, #0]
 8005d30:	1d19      	adds	r1, r3, #4
 8005d32:	6029      	str	r1, [r5, #0]
 8005d34:	0605      	lsls	r5, r0, #24
 8005d36:	d501      	bpl.n	8005d3c <_printf_i+0xe8>
 8005d38:	681e      	ldr	r6, [r3, #0]
 8005d3a:	e002      	b.n	8005d42 <_printf_i+0xee>
 8005d3c:	0641      	lsls	r1, r0, #25
 8005d3e:	d5fb      	bpl.n	8005d38 <_printf_i+0xe4>
 8005d40:	881e      	ldrh	r6, [r3, #0]
 8005d42:	4853      	ldr	r0, [pc, #332]	; (8005e90 <_printf_i+0x23c>)
 8005d44:	2f6f      	cmp	r7, #111	; 0x6f
 8005d46:	bf0c      	ite	eq
 8005d48:	2308      	moveq	r3, #8
 8005d4a:	230a      	movne	r3, #10
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d52:	6865      	ldr	r5, [r4, #4]
 8005d54:	60a5      	str	r5, [r4, #8]
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	bfa2      	ittt	ge
 8005d5a:	6821      	ldrge	r1, [r4, #0]
 8005d5c:	f021 0104 	bicge.w	r1, r1, #4
 8005d60:	6021      	strge	r1, [r4, #0]
 8005d62:	b90e      	cbnz	r6, 8005d68 <_printf_i+0x114>
 8005d64:	2d00      	cmp	r5, #0
 8005d66:	d04b      	beq.n	8005e00 <_printf_i+0x1ac>
 8005d68:	4615      	mov	r5, r2
 8005d6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d6e:	fb03 6711 	mls	r7, r3, r1, r6
 8005d72:	5dc7      	ldrb	r7, [r0, r7]
 8005d74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d78:	4637      	mov	r7, r6
 8005d7a:	42bb      	cmp	r3, r7
 8005d7c:	460e      	mov	r6, r1
 8005d7e:	d9f4      	bls.n	8005d6a <_printf_i+0x116>
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d10b      	bne.n	8005d9c <_printf_i+0x148>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	07de      	lsls	r6, r3, #31
 8005d88:	d508      	bpl.n	8005d9c <_printf_i+0x148>
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	6861      	ldr	r1, [r4, #4]
 8005d8e:	4299      	cmp	r1, r3
 8005d90:	bfde      	ittt	le
 8005d92:	2330      	movle	r3, #48	; 0x30
 8005d94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d9c:	1b52      	subs	r2, r2, r5
 8005d9e:	6122      	str	r2, [r4, #16]
 8005da0:	f8cd a000 	str.w	sl, [sp]
 8005da4:	464b      	mov	r3, r9
 8005da6:	aa03      	add	r2, sp, #12
 8005da8:	4621      	mov	r1, r4
 8005daa:	4640      	mov	r0, r8
 8005dac:	f7ff fee4 	bl	8005b78 <_printf_common>
 8005db0:	3001      	adds	r0, #1
 8005db2:	d14a      	bne.n	8005e4a <_printf_i+0x1f6>
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295
 8005db8:	b004      	add	sp, #16
 8005dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	f043 0320 	orr.w	r3, r3, #32
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	4833      	ldr	r0, [pc, #204]	; (8005e94 <_printf_i+0x240>)
 8005dc8:	2778      	movs	r7, #120	; 0x78
 8005dca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	6829      	ldr	r1, [r5, #0]
 8005dd2:	061f      	lsls	r7, r3, #24
 8005dd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dd8:	d402      	bmi.n	8005de0 <_printf_i+0x18c>
 8005dda:	065f      	lsls	r7, r3, #25
 8005ddc:	bf48      	it	mi
 8005dde:	b2b6      	uxthmi	r6, r6
 8005de0:	07df      	lsls	r7, r3, #31
 8005de2:	bf48      	it	mi
 8005de4:	f043 0320 	orrmi.w	r3, r3, #32
 8005de8:	6029      	str	r1, [r5, #0]
 8005dea:	bf48      	it	mi
 8005dec:	6023      	strmi	r3, [r4, #0]
 8005dee:	b91e      	cbnz	r6, 8005df8 <_printf_i+0x1a4>
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	f023 0320 	bic.w	r3, r3, #32
 8005df6:	6023      	str	r3, [r4, #0]
 8005df8:	2310      	movs	r3, #16
 8005dfa:	e7a7      	b.n	8005d4c <_printf_i+0xf8>
 8005dfc:	4824      	ldr	r0, [pc, #144]	; (8005e90 <_printf_i+0x23c>)
 8005dfe:	e7e4      	b.n	8005dca <_printf_i+0x176>
 8005e00:	4615      	mov	r5, r2
 8005e02:	e7bd      	b.n	8005d80 <_printf_i+0x12c>
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	6826      	ldr	r6, [r4, #0]
 8005e08:	6961      	ldr	r1, [r4, #20]
 8005e0a:	1d18      	adds	r0, r3, #4
 8005e0c:	6028      	str	r0, [r5, #0]
 8005e0e:	0635      	lsls	r5, r6, #24
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	d501      	bpl.n	8005e18 <_printf_i+0x1c4>
 8005e14:	6019      	str	r1, [r3, #0]
 8005e16:	e002      	b.n	8005e1e <_printf_i+0x1ca>
 8005e18:	0670      	lsls	r0, r6, #25
 8005e1a:	d5fb      	bpl.n	8005e14 <_printf_i+0x1c0>
 8005e1c:	8019      	strh	r1, [r3, #0]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	6123      	str	r3, [r4, #16]
 8005e22:	4615      	mov	r5, r2
 8005e24:	e7bc      	b.n	8005da0 <_printf_i+0x14c>
 8005e26:	682b      	ldr	r3, [r5, #0]
 8005e28:	1d1a      	adds	r2, r3, #4
 8005e2a:	602a      	str	r2, [r5, #0]
 8005e2c:	681d      	ldr	r5, [r3, #0]
 8005e2e:	6862      	ldr	r2, [r4, #4]
 8005e30:	2100      	movs	r1, #0
 8005e32:	4628      	mov	r0, r5
 8005e34:	f7fa f9cc 	bl	80001d0 <memchr>
 8005e38:	b108      	cbz	r0, 8005e3e <_printf_i+0x1ea>
 8005e3a:	1b40      	subs	r0, r0, r5
 8005e3c:	6060      	str	r0, [r4, #4]
 8005e3e:	6863      	ldr	r3, [r4, #4]
 8005e40:	6123      	str	r3, [r4, #16]
 8005e42:	2300      	movs	r3, #0
 8005e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e48:	e7aa      	b.n	8005da0 <_printf_i+0x14c>
 8005e4a:	6923      	ldr	r3, [r4, #16]
 8005e4c:	462a      	mov	r2, r5
 8005e4e:	4649      	mov	r1, r9
 8005e50:	4640      	mov	r0, r8
 8005e52:	47d0      	blx	sl
 8005e54:	3001      	adds	r0, #1
 8005e56:	d0ad      	beq.n	8005db4 <_printf_i+0x160>
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	079b      	lsls	r3, r3, #30
 8005e5c:	d413      	bmi.n	8005e86 <_printf_i+0x232>
 8005e5e:	68e0      	ldr	r0, [r4, #12]
 8005e60:	9b03      	ldr	r3, [sp, #12]
 8005e62:	4298      	cmp	r0, r3
 8005e64:	bfb8      	it	lt
 8005e66:	4618      	movlt	r0, r3
 8005e68:	e7a6      	b.n	8005db8 <_printf_i+0x164>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	4632      	mov	r2, r6
 8005e6e:	4649      	mov	r1, r9
 8005e70:	4640      	mov	r0, r8
 8005e72:	47d0      	blx	sl
 8005e74:	3001      	adds	r0, #1
 8005e76:	d09d      	beq.n	8005db4 <_printf_i+0x160>
 8005e78:	3501      	adds	r5, #1
 8005e7a:	68e3      	ldr	r3, [r4, #12]
 8005e7c:	9903      	ldr	r1, [sp, #12]
 8005e7e:	1a5b      	subs	r3, r3, r1
 8005e80:	42ab      	cmp	r3, r5
 8005e82:	dcf2      	bgt.n	8005e6a <_printf_i+0x216>
 8005e84:	e7eb      	b.n	8005e5e <_printf_i+0x20a>
 8005e86:	2500      	movs	r5, #0
 8005e88:	f104 0619 	add.w	r6, r4, #25
 8005e8c:	e7f5      	b.n	8005e7a <_printf_i+0x226>
 8005e8e:	bf00      	nop
 8005e90:	08008412 	.word	0x08008412
 8005e94:	08008423 	.word	0x08008423

08005e98 <std>:
 8005e98:	2300      	movs	r3, #0
 8005e9a:	b510      	push	{r4, lr}
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	e9c0 3300 	strd	r3, r3, [r0]
 8005ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ea6:	6083      	str	r3, [r0, #8]
 8005ea8:	8181      	strh	r1, [r0, #12]
 8005eaa:	6643      	str	r3, [r0, #100]	; 0x64
 8005eac:	81c2      	strh	r2, [r0, #14]
 8005eae:	6183      	str	r3, [r0, #24]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	2208      	movs	r2, #8
 8005eb4:	305c      	adds	r0, #92	; 0x5c
 8005eb6:	f000 f906 	bl	80060c6 <memset>
 8005eba:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <std+0x58>)
 8005ebc:	6263      	str	r3, [r4, #36]	; 0x24
 8005ebe:	4b0d      	ldr	r3, [pc, #52]	; (8005ef4 <std+0x5c>)
 8005ec0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ec2:	4b0d      	ldr	r3, [pc, #52]	; (8005ef8 <std+0x60>)
 8005ec4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <std+0x64>)
 8005ec8:	6323      	str	r3, [r4, #48]	; 0x30
 8005eca:	4b0d      	ldr	r3, [pc, #52]	; (8005f00 <std+0x68>)
 8005ecc:	6224      	str	r4, [r4, #32]
 8005ece:	429c      	cmp	r4, r3
 8005ed0:	d006      	beq.n	8005ee0 <std+0x48>
 8005ed2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005ed6:	4294      	cmp	r4, r2
 8005ed8:	d002      	beq.n	8005ee0 <std+0x48>
 8005eda:	33d0      	adds	r3, #208	; 0xd0
 8005edc:	429c      	cmp	r4, r3
 8005ede:	d105      	bne.n	8005eec <std+0x54>
 8005ee0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee8:	f000 b96a 	b.w	80061c0 <__retarget_lock_init_recursive>
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	bf00      	nop
 8005ef0:	08006041 	.word	0x08006041
 8005ef4:	08006063 	.word	0x08006063
 8005ef8:	0800609b 	.word	0x0800609b
 8005efc:	080060bf 	.word	0x080060bf
 8005f00:	20000330 	.word	0x20000330

08005f04 <stdio_exit_handler>:
 8005f04:	4a02      	ldr	r2, [pc, #8]	; (8005f10 <stdio_exit_handler+0xc>)
 8005f06:	4903      	ldr	r1, [pc, #12]	; (8005f14 <stdio_exit_handler+0x10>)
 8005f08:	4803      	ldr	r0, [pc, #12]	; (8005f18 <stdio_exit_handler+0x14>)
 8005f0a:	f000 b869 	b.w	8005fe0 <_fwalk_sglue>
 8005f0e:	bf00      	nop
 8005f10:	2000000c 	.word	0x2000000c
 8005f14:	08007b49 	.word	0x08007b49
 8005f18:	20000018 	.word	0x20000018

08005f1c <cleanup_stdio>:
 8005f1c:	6841      	ldr	r1, [r0, #4]
 8005f1e:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <cleanup_stdio+0x34>)
 8005f20:	4299      	cmp	r1, r3
 8005f22:	b510      	push	{r4, lr}
 8005f24:	4604      	mov	r4, r0
 8005f26:	d001      	beq.n	8005f2c <cleanup_stdio+0x10>
 8005f28:	f001 fe0e 	bl	8007b48 <_fflush_r>
 8005f2c:	68a1      	ldr	r1, [r4, #8]
 8005f2e:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <cleanup_stdio+0x38>)
 8005f30:	4299      	cmp	r1, r3
 8005f32:	d002      	beq.n	8005f3a <cleanup_stdio+0x1e>
 8005f34:	4620      	mov	r0, r4
 8005f36:	f001 fe07 	bl	8007b48 <_fflush_r>
 8005f3a:	68e1      	ldr	r1, [r4, #12]
 8005f3c:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <cleanup_stdio+0x3c>)
 8005f3e:	4299      	cmp	r1, r3
 8005f40:	d004      	beq.n	8005f4c <cleanup_stdio+0x30>
 8005f42:	4620      	mov	r0, r4
 8005f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f48:	f001 bdfe 	b.w	8007b48 <_fflush_r>
 8005f4c:	bd10      	pop	{r4, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000330 	.word	0x20000330
 8005f54:	20000398 	.word	0x20000398
 8005f58:	20000400 	.word	0x20000400

08005f5c <global_stdio_init.part.0>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <global_stdio_init.part.0+0x30>)
 8005f60:	4c0b      	ldr	r4, [pc, #44]	; (8005f90 <global_stdio_init.part.0+0x34>)
 8005f62:	4a0c      	ldr	r2, [pc, #48]	; (8005f94 <global_stdio_init.part.0+0x38>)
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	4620      	mov	r0, r4
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2104      	movs	r1, #4
 8005f6c:	f7ff ff94 	bl	8005e98 <std>
 8005f70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005f74:	2201      	movs	r2, #1
 8005f76:	2109      	movs	r1, #9
 8005f78:	f7ff ff8e 	bl	8005e98 <std>
 8005f7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005f80:	2202      	movs	r2, #2
 8005f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f86:	2112      	movs	r1, #18
 8005f88:	f7ff bf86 	b.w	8005e98 <std>
 8005f8c:	20000468 	.word	0x20000468
 8005f90:	20000330 	.word	0x20000330
 8005f94:	08005f05 	.word	0x08005f05

08005f98 <__sfp_lock_acquire>:
 8005f98:	4801      	ldr	r0, [pc, #4]	; (8005fa0 <__sfp_lock_acquire+0x8>)
 8005f9a:	f000 b912 	b.w	80061c2 <__retarget_lock_acquire_recursive>
 8005f9e:	bf00      	nop
 8005fa0:	20000471 	.word	0x20000471

08005fa4 <__sfp_lock_release>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	; (8005fac <__sfp_lock_release+0x8>)
 8005fa6:	f000 b90d 	b.w	80061c4 <__retarget_lock_release_recursive>
 8005faa:	bf00      	nop
 8005fac:	20000471 	.word	0x20000471

08005fb0 <__sinit>:
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	f7ff fff0 	bl	8005f98 <__sfp_lock_acquire>
 8005fb8:	6a23      	ldr	r3, [r4, #32]
 8005fba:	b11b      	cbz	r3, 8005fc4 <__sinit+0x14>
 8005fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fc0:	f7ff bff0 	b.w	8005fa4 <__sfp_lock_release>
 8005fc4:	4b04      	ldr	r3, [pc, #16]	; (8005fd8 <__sinit+0x28>)
 8005fc6:	6223      	str	r3, [r4, #32]
 8005fc8:	4b04      	ldr	r3, [pc, #16]	; (8005fdc <__sinit+0x2c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1f5      	bne.n	8005fbc <__sinit+0xc>
 8005fd0:	f7ff ffc4 	bl	8005f5c <global_stdio_init.part.0>
 8005fd4:	e7f2      	b.n	8005fbc <__sinit+0xc>
 8005fd6:	bf00      	nop
 8005fd8:	08005f1d 	.word	0x08005f1d
 8005fdc:	20000468 	.word	0x20000468

08005fe0 <_fwalk_sglue>:
 8005fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe4:	4607      	mov	r7, r0
 8005fe6:	4688      	mov	r8, r1
 8005fe8:	4614      	mov	r4, r2
 8005fea:	2600      	movs	r6, #0
 8005fec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ff0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ff4:	d505      	bpl.n	8006002 <_fwalk_sglue+0x22>
 8005ff6:	6824      	ldr	r4, [r4, #0]
 8005ff8:	2c00      	cmp	r4, #0
 8005ffa:	d1f7      	bne.n	8005fec <_fwalk_sglue+0xc>
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006002:	89ab      	ldrh	r3, [r5, #12]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d907      	bls.n	8006018 <_fwalk_sglue+0x38>
 8006008:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800600c:	3301      	adds	r3, #1
 800600e:	d003      	beq.n	8006018 <_fwalk_sglue+0x38>
 8006010:	4629      	mov	r1, r5
 8006012:	4638      	mov	r0, r7
 8006014:	47c0      	blx	r8
 8006016:	4306      	orrs	r6, r0
 8006018:	3568      	adds	r5, #104	; 0x68
 800601a:	e7e9      	b.n	8005ff0 <_fwalk_sglue+0x10>

0800601c <iprintf>:
 800601c:	b40f      	push	{r0, r1, r2, r3}
 800601e:	b507      	push	{r0, r1, r2, lr}
 8006020:	4906      	ldr	r1, [pc, #24]	; (800603c <iprintf+0x20>)
 8006022:	ab04      	add	r3, sp, #16
 8006024:	6808      	ldr	r0, [r1, #0]
 8006026:	f853 2b04 	ldr.w	r2, [r3], #4
 800602a:	6881      	ldr	r1, [r0, #8]
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	f001 fbeb 	bl	8007808 <_vfiprintf_r>
 8006032:	b003      	add	sp, #12
 8006034:	f85d eb04 	ldr.w	lr, [sp], #4
 8006038:	b004      	add	sp, #16
 800603a:	4770      	bx	lr
 800603c:	20000064 	.word	0x20000064

08006040 <__sread>:
 8006040:	b510      	push	{r4, lr}
 8006042:	460c      	mov	r4, r1
 8006044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006048:	f000 f86c 	bl	8006124 <_read_r>
 800604c:	2800      	cmp	r0, #0
 800604e:	bfab      	itete	ge
 8006050:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006052:	89a3      	ldrhlt	r3, [r4, #12]
 8006054:	181b      	addge	r3, r3, r0
 8006056:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800605a:	bfac      	ite	ge
 800605c:	6563      	strge	r3, [r4, #84]	; 0x54
 800605e:	81a3      	strhlt	r3, [r4, #12]
 8006060:	bd10      	pop	{r4, pc}

08006062 <__swrite>:
 8006062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006066:	461f      	mov	r7, r3
 8006068:	898b      	ldrh	r3, [r1, #12]
 800606a:	05db      	lsls	r3, r3, #23
 800606c:	4605      	mov	r5, r0
 800606e:	460c      	mov	r4, r1
 8006070:	4616      	mov	r6, r2
 8006072:	d505      	bpl.n	8006080 <__swrite+0x1e>
 8006074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006078:	2302      	movs	r3, #2
 800607a:	2200      	movs	r2, #0
 800607c:	f000 f840 	bl	8006100 <_lseek_r>
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800608a:	81a3      	strh	r3, [r4, #12]
 800608c:	4632      	mov	r2, r6
 800608e:	463b      	mov	r3, r7
 8006090:	4628      	mov	r0, r5
 8006092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006096:	f000 b857 	b.w	8006148 <_write_r>

0800609a <__sseek>:
 800609a:	b510      	push	{r4, lr}
 800609c:	460c      	mov	r4, r1
 800609e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a2:	f000 f82d 	bl	8006100 <_lseek_r>
 80060a6:	1c43      	adds	r3, r0, #1
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	bf15      	itete	ne
 80060ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80060ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060b6:	81a3      	strheq	r3, [r4, #12]
 80060b8:	bf18      	it	ne
 80060ba:	81a3      	strhne	r3, [r4, #12]
 80060bc:	bd10      	pop	{r4, pc}

080060be <__sclose>:
 80060be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c2:	f000 b80d 	b.w	80060e0 <_close_r>

080060c6 <memset>:
 80060c6:	4402      	add	r2, r0
 80060c8:	4603      	mov	r3, r0
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d100      	bne.n	80060d0 <memset+0xa>
 80060ce:	4770      	bx	lr
 80060d0:	f803 1b01 	strb.w	r1, [r3], #1
 80060d4:	e7f9      	b.n	80060ca <memset+0x4>
	...

080060d8 <_localeconv_r>:
 80060d8:	4800      	ldr	r0, [pc, #0]	; (80060dc <_localeconv_r+0x4>)
 80060da:	4770      	bx	lr
 80060dc:	20000158 	.word	0x20000158

080060e0 <_close_r>:
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	4d06      	ldr	r5, [pc, #24]	; (80060fc <_close_r+0x1c>)
 80060e4:	2300      	movs	r3, #0
 80060e6:	4604      	mov	r4, r0
 80060e8:	4608      	mov	r0, r1
 80060ea:	602b      	str	r3, [r5, #0]
 80060ec:	f7fb fb5f 	bl	80017ae <_close>
 80060f0:	1c43      	adds	r3, r0, #1
 80060f2:	d102      	bne.n	80060fa <_close_r+0x1a>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	b103      	cbz	r3, 80060fa <_close_r+0x1a>
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	bd38      	pop	{r3, r4, r5, pc}
 80060fc:	2000046c 	.word	0x2000046c

08006100 <_lseek_r>:
 8006100:	b538      	push	{r3, r4, r5, lr}
 8006102:	4d07      	ldr	r5, [pc, #28]	; (8006120 <_lseek_r+0x20>)
 8006104:	4604      	mov	r4, r0
 8006106:	4608      	mov	r0, r1
 8006108:	4611      	mov	r1, r2
 800610a:	2200      	movs	r2, #0
 800610c:	602a      	str	r2, [r5, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	f7fb fb74 	bl	80017fc <_lseek>
 8006114:	1c43      	adds	r3, r0, #1
 8006116:	d102      	bne.n	800611e <_lseek_r+0x1e>
 8006118:	682b      	ldr	r3, [r5, #0]
 800611a:	b103      	cbz	r3, 800611e <_lseek_r+0x1e>
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	bd38      	pop	{r3, r4, r5, pc}
 8006120:	2000046c 	.word	0x2000046c

08006124 <_read_r>:
 8006124:	b538      	push	{r3, r4, r5, lr}
 8006126:	4d07      	ldr	r5, [pc, #28]	; (8006144 <_read_r+0x20>)
 8006128:	4604      	mov	r4, r0
 800612a:	4608      	mov	r0, r1
 800612c:	4611      	mov	r1, r2
 800612e:	2200      	movs	r2, #0
 8006130:	602a      	str	r2, [r5, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	f7fb fb02 	bl	800173c <_read>
 8006138:	1c43      	adds	r3, r0, #1
 800613a:	d102      	bne.n	8006142 <_read_r+0x1e>
 800613c:	682b      	ldr	r3, [r5, #0]
 800613e:	b103      	cbz	r3, 8006142 <_read_r+0x1e>
 8006140:	6023      	str	r3, [r4, #0]
 8006142:	bd38      	pop	{r3, r4, r5, pc}
 8006144:	2000046c 	.word	0x2000046c

08006148 <_write_r>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	4d07      	ldr	r5, [pc, #28]	; (8006168 <_write_r+0x20>)
 800614c:	4604      	mov	r4, r0
 800614e:	4608      	mov	r0, r1
 8006150:	4611      	mov	r1, r2
 8006152:	2200      	movs	r2, #0
 8006154:	602a      	str	r2, [r5, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	f7fb fb0d 	bl	8001776 <_write>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	d102      	bne.n	8006166 <_write_r+0x1e>
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	b103      	cbz	r3, 8006166 <_write_r+0x1e>
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	2000046c 	.word	0x2000046c

0800616c <__errno>:
 800616c:	4b01      	ldr	r3, [pc, #4]	; (8006174 <__errno+0x8>)
 800616e:	6818      	ldr	r0, [r3, #0]
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20000064 	.word	0x20000064

08006178 <__libc_init_array>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	4d0d      	ldr	r5, [pc, #52]	; (80061b0 <__libc_init_array+0x38>)
 800617c:	4c0d      	ldr	r4, [pc, #52]	; (80061b4 <__libc_init_array+0x3c>)
 800617e:	1b64      	subs	r4, r4, r5
 8006180:	10a4      	asrs	r4, r4, #2
 8006182:	2600      	movs	r6, #0
 8006184:	42a6      	cmp	r6, r4
 8006186:	d109      	bne.n	800619c <__libc_init_array+0x24>
 8006188:	4d0b      	ldr	r5, [pc, #44]	; (80061b8 <__libc_init_array+0x40>)
 800618a:	4c0c      	ldr	r4, [pc, #48]	; (80061bc <__libc_init_array+0x44>)
 800618c:	f002 f8f2 	bl	8008374 <_init>
 8006190:	1b64      	subs	r4, r4, r5
 8006192:	10a4      	asrs	r4, r4, #2
 8006194:	2600      	movs	r6, #0
 8006196:	42a6      	cmp	r6, r4
 8006198:	d105      	bne.n	80061a6 <__libc_init_array+0x2e>
 800619a:	bd70      	pop	{r4, r5, r6, pc}
 800619c:	f855 3b04 	ldr.w	r3, [r5], #4
 80061a0:	4798      	blx	r3
 80061a2:	3601      	adds	r6, #1
 80061a4:	e7ee      	b.n	8006184 <__libc_init_array+0xc>
 80061a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061aa:	4798      	blx	r3
 80061ac:	3601      	adds	r6, #1
 80061ae:	e7f2      	b.n	8006196 <__libc_init_array+0x1e>
 80061b0:	0800877c 	.word	0x0800877c
 80061b4:	0800877c 	.word	0x0800877c
 80061b8:	0800877c 	.word	0x0800877c
 80061bc:	08008780 	.word	0x08008780

080061c0 <__retarget_lock_init_recursive>:
 80061c0:	4770      	bx	lr

080061c2 <__retarget_lock_acquire_recursive>:
 80061c2:	4770      	bx	lr

080061c4 <__retarget_lock_release_recursive>:
 80061c4:	4770      	bx	lr

080061c6 <quorem>:
 80061c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ca:	6903      	ldr	r3, [r0, #16]
 80061cc:	690c      	ldr	r4, [r1, #16]
 80061ce:	42a3      	cmp	r3, r4
 80061d0:	4607      	mov	r7, r0
 80061d2:	db7e      	blt.n	80062d2 <quorem+0x10c>
 80061d4:	3c01      	subs	r4, #1
 80061d6:	f101 0814 	add.w	r8, r1, #20
 80061da:	f100 0514 	add.w	r5, r0, #20
 80061de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061ec:	3301      	adds	r3, #1
 80061ee:	429a      	cmp	r2, r3
 80061f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80061fc:	d331      	bcc.n	8006262 <quorem+0x9c>
 80061fe:	f04f 0e00 	mov.w	lr, #0
 8006202:	4640      	mov	r0, r8
 8006204:	46ac      	mov	ip, r5
 8006206:	46f2      	mov	sl, lr
 8006208:	f850 2b04 	ldr.w	r2, [r0], #4
 800620c:	b293      	uxth	r3, r2
 800620e:	fb06 e303 	mla	r3, r6, r3, lr
 8006212:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006216:	0c1a      	lsrs	r2, r3, #16
 8006218:	b29b      	uxth	r3, r3
 800621a:	ebaa 0303 	sub.w	r3, sl, r3
 800621e:	f8dc a000 	ldr.w	sl, [ip]
 8006222:	fa13 f38a 	uxtah	r3, r3, sl
 8006226:	fb06 220e 	mla	r2, r6, lr, r2
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	9b00      	ldr	r3, [sp, #0]
 800622e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006232:	b292      	uxth	r2, r2
 8006234:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006238:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800623c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006240:	4581      	cmp	r9, r0
 8006242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006246:	f84c 3b04 	str.w	r3, [ip], #4
 800624a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800624e:	d2db      	bcs.n	8006208 <quorem+0x42>
 8006250:	f855 300b 	ldr.w	r3, [r5, fp]
 8006254:	b92b      	cbnz	r3, 8006262 <quorem+0x9c>
 8006256:	9b01      	ldr	r3, [sp, #4]
 8006258:	3b04      	subs	r3, #4
 800625a:	429d      	cmp	r5, r3
 800625c:	461a      	mov	r2, r3
 800625e:	d32c      	bcc.n	80062ba <quorem+0xf4>
 8006260:	613c      	str	r4, [r7, #16]
 8006262:	4638      	mov	r0, r7
 8006264:	f001 f9a6 	bl	80075b4 <__mcmp>
 8006268:	2800      	cmp	r0, #0
 800626a:	db22      	blt.n	80062b2 <quorem+0xec>
 800626c:	3601      	adds	r6, #1
 800626e:	4629      	mov	r1, r5
 8006270:	2000      	movs	r0, #0
 8006272:	f858 2b04 	ldr.w	r2, [r8], #4
 8006276:	f8d1 c000 	ldr.w	ip, [r1]
 800627a:	b293      	uxth	r3, r2
 800627c:	1ac3      	subs	r3, r0, r3
 800627e:	0c12      	lsrs	r2, r2, #16
 8006280:	fa13 f38c 	uxtah	r3, r3, ip
 8006284:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006288:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800628c:	b29b      	uxth	r3, r3
 800628e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006292:	45c1      	cmp	r9, r8
 8006294:	f841 3b04 	str.w	r3, [r1], #4
 8006298:	ea4f 4022 	mov.w	r0, r2, asr #16
 800629c:	d2e9      	bcs.n	8006272 <quorem+0xac>
 800629e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062a6:	b922      	cbnz	r2, 80062b2 <quorem+0xec>
 80062a8:	3b04      	subs	r3, #4
 80062aa:	429d      	cmp	r5, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	d30a      	bcc.n	80062c6 <quorem+0x100>
 80062b0:	613c      	str	r4, [r7, #16]
 80062b2:	4630      	mov	r0, r6
 80062b4:	b003      	add	sp, #12
 80062b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ba:	6812      	ldr	r2, [r2, #0]
 80062bc:	3b04      	subs	r3, #4
 80062be:	2a00      	cmp	r2, #0
 80062c0:	d1ce      	bne.n	8006260 <quorem+0x9a>
 80062c2:	3c01      	subs	r4, #1
 80062c4:	e7c9      	b.n	800625a <quorem+0x94>
 80062c6:	6812      	ldr	r2, [r2, #0]
 80062c8:	3b04      	subs	r3, #4
 80062ca:	2a00      	cmp	r2, #0
 80062cc:	d1f0      	bne.n	80062b0 <quorem+0xea>
 80062ce:	3c01      	subs	r4, #1
 80062d0:	e7eb      	b.n	80062aa <quorem+0xe4>
 80062d2:	2000      	movs	r0, #0
 80062d4:	e7ee      	b.n	80062b4 <quorem+0xee>
	...

080062d8 <_dtoa_r>:
 80062d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	ed2d 8b04 	vpush	{d8-d9}
 80062e0:	69c5      	ldr	r5, [r0, #28]
 80062e2:	b093      	sub	sp, #76	; 0x4c
 80062e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80062e8:	ec57 6b10 	vmov	r6, r7, d0
 80062ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80062f0:	9107      	str	r1, [sp, #28]
 80062f2:	4604      	mov	r4, r0
 80062f4:	920a      	str	r2, [sp, #40]	; 0x28
 80062f6:	930d      	str	r3, [sp, #52]	; 0x34
 80062f8:	b975      	cbnz	r5, 8006318 <_dtoa_r+0x40>
 80062fa:	2010      	movs	r0, #16
 80062fc:	f000 fe2a 	bl	8006f54 <malloc>
 8006300:	4602      	mov	r2, r0
 8006302:	61e0      	str	r0, [r4, #28]
 8006304:	b920      	cbnz	r0, 8006310 <_dtoa_r+0x38>
 8006306:	4bae      	ldr	r3, [pc, #696]	; (80065c0 <_dtoa_r+0x2e8>)
 8006308:	21ef      	movs	r1, #239	; 0xef
 800630a:	48ae      	ldr	r0, [pc, #696]	; (80065c4 <_dtoa_r+0x2ec>)
 800630c:	f001 fcf8 	bl	8007d00 <__assert_func>
 8006310:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006314:	6005      	str	r5, [r0, #0]
 8006316:	60c5      	str	r5, [r0, #12]
 8006318:	69e3      	ldr	r3, [r4, #28]
 800631a:	6819      	ldr	r1, [r3, #0]
 800631c:	b151      	cbz	r1, 8006334 <_dtoa_r+0x5c>
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	604a      	str	r2, [r1, #4]
 8006322:	2301      	movs	r3, #1
 8006324:	4093      	lsls	r3, r2
 8006326:	608b      	str	r3, [r1, #8]
 8006328:	4620      	mov	r0, r4
 800632a:	f000 ff07 	bl	800713c <_Bfree>
 800632e:	69e3      	ldr	r3, [r4, #28]
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	1e3b      	subs	r3, r7, #0
 8006336:	bfbb      	ittet	lt
 8006338:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800633c:	9303      	strlt	r3, [sp, #12]
 800633e:	2300      	movge	r3, #0
 8006340:	2201      	movlt	r2, #1
 8006342:	bfac      	ite	ge
 8006344:	f8c8 3000 	strge.w	r3, [r8]
 8006348:	f8c8 2000 	strlt.w	r2, [r8]
 800634c:	4b9e      	ldr	r3, [pc, #632]	; (80065c8 <_dtoa_r+0x2f0>)
 800634e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006352:	ea33 0308 	bics.w	r3, r3, r8
 8006356:	d11b      	bne.n	8006390 <_dtoa_r+0xb8>
 8006358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800635a:	f242 730f 	movw	r3, #9999	; 0x270f
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006364:	4333      	orrs	r3, r6
 8006366:	f000 8593 	beq.w	8006e90 <_dtoa_r+0xbb8>
 800636a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800636c:	b963      	cbnz	r3, 8006388 <_dtoa_r+0xb0>
 800636e:	4b97      	ldr	r3, [pc, #604]	; (80065cc <_dtoa_r+0x2f4>)
 8006370:	e027      	b.n	80063c2 <_dtoa_r+0xea>
 8006372:	4b97      	ldr	r3, [pc, #604]	; (80065d0 <_dtoa_r+0x2f8>)
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	3308      	adds	r3, #8
 8006378:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	9800      	ldr	r0, [sp, #0]
 800637e:	b013      	add	sp, #76	; 0x4c
 8006380:	ecbd 8b04 	vpop	{d8-d9}
 8006384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006388:	4b90      	ldr	r3, [pc, #576]	; (80065cc <_dtoa_r+0x2f4>)
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	3303      	adds	r3, #3
 800638e:	e7f3      	b.n	8006378 <_dtoa_r+0xa0>
 8006390:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006394:	2200      	movs	r2, #0
 8006396:	ec51 0b17 	vmov	r0, r1, d7
 800639a:	eeb0 8a47 	vmov.f32	s16, s14
 800639e:	eef0 8a67 	vmov.f32	s17, s15
 80063a2:	2300      	movs	r3, #0
 80063a4:	f7fa fb90 	bl	8000ac8 <__aeabi_dcmpeq>
 80063a8:	4681      	mov	r9, r0
 80063aa:	b160      	cbz	r0, 80063c6 <_dtoa_r+0xee>
 80063ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063ae:	2301      	movs	r3, #1
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8568 	beq.w	8006e8a <_dtoa_r+0xbb2>
 80063ba:	4b86      	ldr	r3, [pc, #536]	; (80065d4 <_dtoa_r+0x2fc>)
 80063bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	e7da      	b.n	800637c <_dtoa_r+0xa4>
 80063c6:	aa10      	add	r2, sp, #64	; 0x40
 80063c8:	a911      	add	r1, sp, #68	; 0x44
 80063ca:	4620      	mov	r0, r4
 80063cc:	eeb0 0a48 	vmov.f32	s0, s16
 80063d0:	eef0 0a68 	vmov.f32	s1, s17
 80063d4:	f001 f994 	bl	8007700 <__d2b>
 80063d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80063dc:	4682      	mov	sl, r0
 80063de:	2d00      	cmp	r5, #0
 80063e0:	d07f      	beq.n	80064e2 <_dtoa_r+0x20a>
 80063e2:	ee18 3a90 	vmov	r3, s17
 80063e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80063ee:	ec51 0b18 	vmov	r0, r1, d8
 80063f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80063f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80063fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80063fe:	4619      	mov	r1, r3
 8006400:	2200      	movs	r2, #0
 8006402:	4b75      	ldr	r3, [pc, #468]	; (80065d8 <_dtoa_r+0x300>)
 8006404:	f7f9 ff40 	bl	8000288 <__aeabi_dsub>
 8006408:	a367      	add	r3, pc, #412	; (adr r3, 80065a8 <_dtoa_r+0x2d0>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f7fa f8f3 	bl	80005f8 <__aeabi_dmul>
 8006412:	a367      	add	r3, pc, #412	; (adr r3, 80065b0 <_dtoa_r+0x2d8>)
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	f7f9 ff38 	bl	800028c <__adddf3>
 800641c:	4606      	mov	r6, r0
 800641e:	4628      	mov	r0, r5
 8006420:	460f      	mov	r7, r1
 8006422:	f7fa f87f 	bl	8000524 <__aeabi_i2d>
 8006426:	a364      	add	r3, pc, #400	; (adr r3, 80065b8 <_dtoa_r+0x2e0>)
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	f7fa f8e4 	bl	80005f8 <__aeabi_dmul>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4630      	mov	r0, r6
 8006436:	4639      	mov	r1, r7
 8006438:	f7f9 ff28 	bl	800028c <__adddf3>
 800643c:	4606      	mov	r6, r0
 800643e:	460f      	mov	r7, r1
 8006440:	f7fa fb8a 	bl	8000b58 <__aeabi_d2iz>
 8006444:	2200      	movs	r2, #0
 8006446:	4683      	mov	fp, r0
 8006448:	2300      	movs	r3, #0
 800644a:	4630      	mov	r0, r6
 800644c:	4639      	mov	r1, r7
 800644e:	f7fa fb45 	bl	8000adc <__aeabi_dcmplt>
 8006452:	b148      	cbz	r0, 8006468 <_dtoa_r+0x190>
 8006454:	4658      	mov	r0, fp
 8006456:	f7fa f865 	bl	8000524 <__aeabi_i2d>
 800645a:	4632      	mov	r2, r6
 800645c:	463b      	mov	r3, r7
 800645e:	f7fa fb33 	bl	8000ac8 <__aeabi_dcmpeq>
 8006462:	b908      	cbnz	r0, 8006468 <_dtoa_r+0x190>
 8006464:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006468:	f1bb 0f16 	cmp.w	fp, #22
 800646c:	d857      	bhi.n	800651e <_dtoa_r+0x246>
 800646e:	4b5b      	ldr	r3, [pc, #364]	; (80065dc <_dtoa_r+0x304>)
 8006470:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	ec51 0b18 	vmov	r0, r1, d8
 800647c:	f7fa fb2e 	bl	8000adc <__aeabi_dcmplt>
 8006480:	2800      	cmp	r0, #0
 8006482:	d04e      	beq.n	8006522 <_dtoa_r+0x24a>
 8006484:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006488:	2300      	movs	r3, #0
 800648a:	930c      	str	r3, [sp, #48]	; 0x30
 800648c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800648e:	1b5b      	subs	r3, r3, r5
 8006490:	1e5a      	subs	r2, r3, #1
 8006492:	bf45      	ittet	mi
 8006494:	f1c3 0301 	rsbmi	r3, r3, #1
 8006498:	9305      	strmi	r3, [sp, #20]
 800649a:	2300      	movpl	r3, #0
 800649c:	2300      	movmi	r3, #0
 800649e:	9206      	str	r2, [sp, #24]
 80064a0:	bf54      	ite	pl
 80064a2:	9305      	strpl	r3, [sp, #20]
 80064a4:	9306      	strmi	r3, [sp, #24]
 80064a6:	f1bb 0f00 	cmp.w	fp, #0
 80064aa:	db3c      	blt.n	8006526 <_dtoa_r+0x24e>
 80064ac:	9b06      	ldr	r3, [sp, #24]
 80064ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80064b2:	445b      	add	r3, fp
 80064b4:	9306      	str	r3, [sp, #24]
 80064b6:	2300      	movs	r3, #0
 80064b8:	9308      	str	r3, [sp, #32]
 80064ba:	9b07      	ldr	r3, [sp, #28]
 80064bc:	2b09      	cmp	r3, #9
 80064be:	d868      	bhi.n	8006592 <_dtoa_r+0x2ba>
 80064c0:	2b05      	cmp	r3, #5
 80064c2:	bfc4      	itt	gt
 80064c4:	3b04      	subgt	r3, #4
 80064c6:	9307      	strgt	r3, [sp, #28]
 80064c8:	9b07      	ldr	r3, [sp, #28]
 80064ca:	f1a3 0302 	sub.w	r3, r3, #2
 80064ce:	bfcc      	ite	gt
 80064d0:	2500      	movgt	r5, #0
 80064d2:	2501      	movle	r5, #1
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	f200 8085 	bhi.w	80065e4 <_dtoa_r+0x30c>
 80064da:	e8df f003 	tbb	[pc, r3]
 80064de:	3b2e      	.short	0x3b2e
 80064e0:	5839      	.short	0x5839
 80064e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80064e6:	441d      	add	r5, r3
 80064e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	bfc1      	itttt	gt
 80064f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80064f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80064fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006500:	bfd6      	itet	le
 8006502:	f1c3 0320 	rsble	r3, r3, #32
 8006506:	ea48 0003 	orrgt.w	r0, r8, r3
 800650a:	fa06 f003 	lslle.w	r0, r6, r3
 800650e:	f7f9 fff9 	bl	8000504 <__aeabi_ui2d>
 8006512:	2201      	movs	r2, #1
 8006514:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006518:	3d01      	subs	r5, #1
 800651a:	920e      	str	r2, [sp, #56]	; 0x38
 800651c:	e76f      	b.n	80063fe <_dtoa_r+0x126>
 800651e:	2301      	movs	r3, #1
 8006520:	e7b3      	b.n	800648a <_dtoa_r+0x1b2>
 8006522:	900c      	str	r0, [sp, #48]	; 0x30
 8006524:	e7b2      	b.n	800648c <_dtoa_r+0x1b4>
 8006526:	9b05      	ldr	r3, [sp, #20]
 8006528:	eba3 030b 	sub.w	r3, r3, fp
 800652c:	9305      	str	r3, [sp, #20]
 800652e:	f1cb 0300 	rsb	r3, fp, #0
 8006532:	9308      	str	r3, [sp, #32]
 8006534:	2300      	movs	r3, #0
 8006536:	930b      	str	r3, [sp, #44]	; 0x2c
 8006538:	e7bf      	b.n	80064ba <_dtoa_r+0x1e2>
 800653a:	2300      	movs	r3, #0
 800653c:	9309      	str	r3, [sp, #36]	; 0x24
 800653e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006540:	2b00      	cmp	r3, #0
 8006542:	dc52      	bgt.n	80065ea <_dtoa_r+0x312>
 8006544:	2301      	movs	r3, #1
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	9304      	str	r3, [sp, #16]
 800654a:	461a      	mov	r2, r3
 800654c:	920a      	str	r2, [sp, #40]	; 0x28
 800654e:	e00b      	b.n	8006568 <_dtoa_r+0x290>
 8006550:	2301      	movs	r3, #1
 8006552:	e7f3      	b.n	800653c <_dtoa_r+0x264>
 8006554:	2300      	movs	r3, #0
 8006556:	9309      	str	r3, [sp, #36]	; 0x24
 8006558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800655a:	445b      	add	r3, fp
 800655c:	9301      	str	r3, [sp, #4]
 800655e:	3301      	adds	r3, #1
 8006560:	2b01      	cmp	r3, #1
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	bfb8      	it	lt
 8006566:	2301      	movlt	r3, #1
 8006568:	69e0      	ldr	r0, [r4, #28]
 800656a:	2100      	movs	r1, #0
 800656c:	2204      	movs	r2, #4
 800656e:	f102 0614 	add.w	r6, r2, #20
 8006572:	429e      	cmp	r6, r3
 8006574:	d93d      	bls.n	80065f2 <_dtoa_r+0x31a>
 8006576:	6041      	str	r1, [r0, #4]
 8006578:	4620      	mov	r0, r4
 800657a:	f000 fd9f 	bl	80070bc <_Balloc>
 800657e:	9000      	str	r0, [sp, #0]
 8006580:	2800      	cmp	r0, #0
 8006582:	d139      	bne.n	80065f8 <_dtoa_r+0x320>
 8006584:	4b16      	ldr	r3, [pc, #88]	; (80065e0 <_dtoa_r+0x308>)
 8006586:	4602      	mov	r2, r0
 8006588:	f240 11af 	movw	r1, #431	; 0x1af
 800658c:	e6bd      	b.n	800630a <_dtoa_r+0x32>
 800658e:	2301      	movs	r3, #1
 8006590:	e7e1      	b.n	8006556 <_dtoa_r+0x27e>
 8006592:	2501      	movs	r5, #1
 8006594:	2300      	movs	r3, #0
 8006596:	9307      	str	r3, [sp, #28]
 8006598:	9509      	str	r5, [sp, #36]	; 0x24
 800659a:	f04f 33ff 	mov.w	r3, #4294967295
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	9304      	str	r3, [sp, #16]
 80065a2:	2200      	movs	r2, #0
 80065a4:	2312      	movs	r3, #18
 80065a6:	e7d1      	b.n	800654c <_dtoa_r+0x274>
 80065a8:	636f4361 	.word	0x636f4361
 80065ac:	3fd287a7 	.word	0x3fd287a7
 80065b0:	8b60c8b3 	.word	0x8b60c8b3
 80065b4:	3fc68a28 	.word	0x3fc68a28
 80065b8:	509f79fb 	.word	0x509f79fb
 80065bc:	3fd34413 	.word	0x3fd34413
 80065c0:	08008441 	.word	0x08008441
 80065c4:	08008458 	.word	0x08008458
 80065c8:	7ff00000 	.word	0x7ff00000
 80065cc:	0800843d 	.word	0x0800843d
 80065d0:	08008434 	.word	0x08008434
 80065d4:	08008411 	.word	0x08008411
 80065d8:	3ff80000 	.word	0x3ff80000
 80065dc:	08008548 	.word	0x08008548
 80065e0:	080084b0 	.word	0x080084b0
 80065e4:	2301      	movs	r3, #1
 80065e6:	9309      	str	r3, [sp, #36]	; 0x24
 80065e8:	e7d7      	b.n	800659a <_dtoa_r+0x2c2>
 80065ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ec:	9301      	str	r3, [sp, #4]
 80065ee:	9304      	str	r3, [sp, #16]
 80065f0:	e7ba      	b.n	8006568 <_dtoa_r+0x290>
 80065f2:	3101      	adds	r1, #1
 80065f4:	0052      	lsls	r2, r2, #1
 80065f6:	e7ba      	b.n	800656e <_dtoa_r+0x296>
 80065f8:	69e3      	ldr	r3, [r4, #28]
 80065fa:	9a00      	ldr	r2, [sp, #0]
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	9b04      	ldr	r3, [sp, #16]
 8006600:	2b0e      	cmp	r3, #14
 8006602:	f200 80a8 	bhi.w	8006756 <_dtoa_r+0x47e>
 8006606:	2d00      	cmp	r5, #0
 8006608:	f000 80a5 	beq.w	8006756 <_dtoa_r+0x47e>
 800660c:	f1bb 0f00 	cmp.w	fp, #0
 8006610:	dd38      	ble.n	8006684 <_dtoa_r+0x3ac>
 8006612:	4bc0      	ldr	r3, [pc, #768]	; (8006914 <_dtoa_r+0x63c>)
 8006614:	f00b 020f 	and.w	r2, fp, #15
 8006618:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800661c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006620:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006624:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006628:	d019      	beq.n	800665e <_dtoa_r+0x386>
 800662a:	4bbb      	ldr	r3, [pc, #748]	; (8006918 <_dtoa_r+0x640>)
 800662c:	ec51 0b18 	vmov	r0, r1, d8
 8006630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006634:	f7fa f90a 	bl	800084c <__aeabi_ddiv>
 8006638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800663c:	f008 080f 	and.w	r8, r8, #15
 8006640:	2503      	movs	r5, #3
 8006642:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006918 <_dtoa_r+0x640>
 8006646:	f1b8 0f00 	cmp.w	r8, #0
 800664a:	d10a      	bne.n	8006662 <_dtoa_r+0x38a>
 800664c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006650:	4632      	mov	r2, r6
 8006652:	463b      	mov	r3, r7
 8006654:	f7fa f8fa 	bl	800084c <__aeabi_ddiv>
 8006658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800665c:	e02b      	b.n	80066b6 <_dtoa_r+0x3de>
 800665e:	2502      	movs	r5, #2
 8006660:	e7ef      	b.n	8006642 <_dtoa_r+0x36a>
 8006662:	f018 0f01 	tst.w	r8, #1
 8006666:	d008      	beq.n	800667a <_dtoa_r+0x3a2>
 8006668:	4630      	mov	r0, r6
 800666a:	4639      	mov	r1, r7
 800666c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006670:	f7f9 ffc2 	bl	80005f8 <__aeabi_dmul>
 8006674:	3501      	adds	r5, #1
 8006676:	4606      	mov	r6, r0
 8006678:	460f      	mov	r7, r1
 800667a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800667e:	f109 0908 	add.w	r9, r9, #8
 8006682:	e7e0      	b.n	8006646 <_dtoa_r+0x36e>
 8006684:	f000 809f 	beq.w	80067c6 <_dtoa_r+0x4ee>
 8006688:	f1cb 0600 	rsb	r6, fp, #0
 800668c:	4ba1      	ldr	r3, [pc, #644]	; (8006914 <_dtoa_r+0x63c>)
 800668e:	4fa2      	ldr	r7, [pc, #648]	; (8006918 <_dtoa_r+0x640>)
 8006690:	f006 020f 	and.w	r2, r6, #15
 8006694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669c:	ec51 0b18 	vmov	r0, r1, d8
 80066a0:	f7f9 ffaa 	bl	80005f8 <__aeabi_dmul>
 80066a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066a8:	1136      	asrs	r6, r6, #4
 80066aa:	2300      	movs	r3, #0
 80066ac:	2502      	movs	r5, #2
 80066ae:	2e00      	cmp	r6, #0
 80066b0:	d17e      	bne.n	80067b0 <_dtoa_r+0x4d8>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1d0      	bne.n	8006658 <_dtoa_r+0x380>
 80066b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 8084 	beq.w	80067ca <_dtoa_r+0x4f2>
 80066c2:	4b96      	ldr	r3, [pc, #600]	; (800691c <_dtoa_r+0x644>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	4640      	mov	r0, r8
 80066c8:	4649      	mov	r1, r9
 80066ca:	f7fa fa07 	bl	8000adc <__aeabi_dcmplt>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d07b      	beq.n	80067ca <_dtoa_r+0x4f2>
 80066d2:	9b04      	ldr	r3, [sp, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d078      	beq.n	80067ca <_dtoa_r+0x4f2>
 80066d8:	9b01      	ldr	r3, [sp, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	dd39      	ble.n	8006752 <_dtoa_r+0x47a>
 80066de:	4b90      	ldr	r3, [pc, #576]	; (8006920 <_dtoa_r+0x648>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	4640      	mov	r0, r8
 80066e4:	4649      	mov	r1, r9
 80066e6:	f7f9 ff87 	bl	80005f8 <__aeabi_dmul>
 80066ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066ee:	9e01      	ldr	r6, [sp, #4]
 80066f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80066f4:	3501      	adds	r5, #1
 80066f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80066fa:	4628      	mov	r0, r5
 80066fc:	f7f9 ff12 	bl	8000524 <__aeabi_i2d>
 8006700:	4642      	mov	r2, r8
 8006702:	464b      	mov	r3, r9
 8006704:	f7f9 ff78 	bl	80005f8 <__aeabi_dmul>
 8006708:	4b86      	ldr	r3, [pc, #536]	; (8006924 <_dtoa_r+0x64c>)
 800670a:	2200      	movs	r2, #0
 800670c:	f7f9 fdbe 	bl	800028c <__adddf3>
 8006710:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006718:	9303      	str	r3, [sp, #12]
 800671a:	2e00      	cmp	r6, #0
 800671c:	d158      	bne.n	80067d0 <_dtoa_r+0x4f8>
 800671e:	4b82      	ldr	r3, [pc, #520]	; (8006928 <_dtoa_r+0x650>)
 8006720:	2200      	movs	r2, #0
 8006722:	4640      	mov	r0, r8
 8006724:	4649      	mov	r1, r9
 8006726:	f7f9 fdaf 	bl	8000288 <__aeabi_dsub>
 800672a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800672e:	4680      	mov	r8, r0
 8006730:	4689      	mov	r9, r1
 8006732:	f7fa f9f1 	bl	8000b18 <__aeabi_dcmpgt>
 8006736:	2800      	cmp	r0, #0
 8006738:	f040 8296 	bne.w	8006c68 <_dtoa_r+0x990>
 800673c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006740:	4640      	mov	r0, r8
 8006742:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006746:	4649      	mov	r1, r9
 8006748:	f7fa f9c8 	bl	8000adc <__aeabi_dcmplt>
 800674c:	2800      	cmp	r0, #0
 800674e:	f040 8289 	bne.w	8006c64 <_dtoa_r+0x98c>
 8006752:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006758:	2b00      	cmp	r3, #0
 800675a:	f2c0 814e 	blt.w	80069fa <_dtoa_r+0x722>
 800675e:	f1bb 0f0e 	cmp.w	fp, #14
 8006762:	f300 814a 	bgt.w	80069fa <_dtoa_r+0x722>
 8006766:	4b6b      	ldr	r3, [pc, #428]	; (8006914 <_dtoa_r+0x63c>)
 8006768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800676c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006772:	2b00      	cmp	r3, #0
 8006774:	f280 80dc 	bge.w	8006930 <_dtoa_r+0x658>
 8006778:	9b04      	ldr	r3, [sp, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	f300 80d8 	bgt.w	8006930 <_dtoa_r+0x658>
 8006780:	f040 826f 	bne.w	8006c62 <_dtoa_r+0x98a>
 8006784:	4b68      	ldr	r3, [pc, #416]	; (8006928 <_dtoa_r+0x650>)
 8006786:	2200      	movs	r2, #0
 8006788:	4640      	mov	r0, r8
 800678a:	4649      	mov	r1, r9
 800678c:	f7f9 ff34 	bl	80005f8 <__aeabi_dmul>
 8006790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006794:	f7fa f9b6 	bl	8000b04 <__aeabi_dcmpge>
 8006798:	9e04      	ldr	r6, [sp, #16]
 800679a:	4637      	mov	r7, r6
 800679c:	2800      	cmp	r0, #0
 800679e:	f040 8245 	bne.w	8006c2c <_dtoa_r+0x954>
 80067a2:	9d00      	ldr	r5, [sp, #0]
 80067a4:	2331      	movs	r3, #49	; 0x31
 80067a6:	f805 3b01 	strb.w	r3, [r5], #1
 80067aa:	f10b 0b01 	add.w	fp, fp, #1
 80067ae:	e241      	b.n	8006c34 <_dtoa_r+0x95c>
 80067b0:	07f2      	lsls	r2, r6, #31
 80067b2:	d505      	bpl.n	80067c0 <_dtoa_r+0x4e8>
 80067b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067b8:	f7f9 ff1e 	bl	80005f8 <__aeabi_dmul>
 80067bc:	3501      	adds	r5, #1
 80067be:	2301      	movs	r3, #1
 80067c0:	1076      	asrs	r6, r6, #1
 80067c2:	3708      	adds	r7, #8
 80067c4:	e773      	b.n	80066ae <_dtoa_r+0x3d6>
 80067c6:	2502      	movs	r5, #2
 80067c8:	e775      	b.n	80066b6 <_dtoa_r+0x3de>
 80067ca:	9e04      	ldr	r6, [sp, #16]
 80067cc:	465f      	mov	r7, fp
 80067ce:	e792      	b.n	80066f6 <_dtoa_r+0x41e>
 80067d0:	9900      	ldr	r1, [sp, #0]
 80067d2:	4b50      	ldr	r3, [pc, #320]	; (8006914 <_dtoa_r+0x63c>)
 80067d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067d8:	4431      	add	r1, r6
 80067da:	9102      	str	r1, [sp, #8]
 80067dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067de:	eeb0 9a47 	vmov.f32	s18, s14
 80067e2:	eef0 9a67 	vmov.f32	s19, s15
 80067e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80067ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067ee:	2900      	cmp	r1, #0
 80067f0:	d044      	beq.n	800687c <_dtoa_r+0x5a4>
 80067f2:	494e      	ldr	r1, [pc, #312]	; (800692c <_dtoa_r+0x654>)
 80067f4:	2000      	movs	r0, #0
 80067f6:	f7fa f829 	bl	800084c <__aeabi_ddiv>
 80067fa:	ec53 2b19 	vmov	r2, r3, d9
 80067fe:	f7f9 fd43 	bl	8000288 <__aeabi_dsub>
 8006802:	9d00      	ldr	r5, [sp, #0]
 8006804:	ec41 0b19 	vmov	d9, r0, r1
 8006808:	4649      	mov	r1, r9
 800680a:	4640      	mov	r0, r8
 800680c:	f7fa f9a4 	bl	8000b58 <__aeabi_d2iz>
 8006810:	4606      	mov	r6, r0
 8006812:	f7f9 fe87 	bl	8000524 <__aeabi_i2d>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4640      	mov	r0, r8
 800681c:	4649      	mov	r1, r9
 800681e:	f7f9 fd33 	bl	8000288 <__aeabi_dsub>
 8006822:	3630      	adds	r6, #48	; 0x30
 8006824:	f805 6b01 	strb.w	r6, [r5], #1
 8006828:	ec53 2b19 	vmov	r2, r3, d9
 800682c:	4680      	mov	r8, r0
 800682e:	4689      	mov	r9, r1
 8006830:	f7fa f954 	bl	8000adc <__aeabi_dcmplt>
 8006834:	2800      	cmp	r0, #0
 8006836:	d164      	bne.n	8006902 <_dtoa_r+0x62a>
 8006838:	4642      	mov	r2, r8
 800683a:	464b      	mov	r3, r9
 800683c:	4937      	ldr	r1, [pc, #220]	; (800691c <_dtoa_r+0x644>)
 800683e:	2000      	movs	r0, #0
 8006840:	f7f9 fd22 	bl	8000288 <__aeabi_dsub>
 8006844:	ec53 2b19 	vmov	r2, r3, d9
 8006848:	f7fa f948 	bl	8000adc <__aeabi_dcmplt>
 800684c:	2800      	cmp	r0, #0
 800684e:	f040 80b6 	bne.w	80069be <_dtoa_r+0x6e6>
 8006852:	9b02      	ldr	r3, [sp, #8]
 8006854:	429d      	cmp	r5, r3
 8006856:	f43f af7c 	beq.w	8006752 <_dtoa_r+0x47a>
 800685a:	4b31      	ldr	r3, [pc, #196]	; (8006920 <_dtoa_r+0x648>)
 800685c:	ec51 0b19 	vmov	r0, r1, d9
 8006860:	2200      	movs	r2, #0
 8006862:	f7f9 fec9 	bl	80005f8 <__aeabi_dmul>
 8006866:	4b2e      	ldr	r3, [pc, #184]	; (8006920 <_dtoa_r+0x648>)
 8006868:	ec41 0b19 	vmov	d9, r0, r1
 800686c:	2200      	movs	r2, #0
 800686e:	4640      	mov	r0, r8
 8006870:	4649      	mov	r1, r9
 8006872:	f7f9 fec1 	bl	80005f8 <__aeabi_dmul>
 8006876:	4680      	mov	r8, r0
 8006878:	4689      	mov	r9, r1
 800687a:	e7c5      	b.n	8006808 <_dtoa_r+0x530>
 800687c:	ec51 0b17 	vmov	r0, r1, d7
 8006880:	f7f9 feba 	bl	80005f8 <__aeabi_dmul>
 8006884:	9b02      	ldr	r3, [sp, #8]
 8006886:	9d00      	ldr	r5, [sp, #0]
 8006888:	930f      	str	r3, [sp, #60]	; 0x3c
 800688a:	ec41 0b19 	vmov	d9, r0, r1
 800688e:	4649      	mov	r1, r9
 8006890:	4640      	mov	r0, r8
 8006892:	f7fa f961 	bl	8000b58 <__aeabi_d2iz>
 8006896:	4606      	mov	r6, r0
 8006898:	f7f9 fe44 	bl	8000524 <__aeabi_i2d>
 800689c:	3630      	adds	r6, #48	; 0x30
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4640      	mov	r0, r8
 80068a4:	4649      	mov	r1, r9
 80068a6:	f7f9 fcef 	bl	8000288 <__aeabi_dsub>
 80068aa:	f805 6b01 	strb.w	r6, [r5], #1
 80068ae:	9b02      	ldr	r3, [sp, #8]
 80068b0:	429d      	cmp	r5, r3
 80068b2:	4680      	mov	r8, r0
 80068b4:	4689      	mov	r9, r1
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	d124      	bne.n	8006906 <_dtoa_r+0x62e>
 80068bc:	4b1b      	ldr	r3, [pc, #108]	; (800692c <_dtoa_r+0x654>)
 80068be:	ec51 0b19 	vmov	r0, r1, d9
 80068c2:	f7f9 fce3 	bl	800028c <__adddf3>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4640      	mov	r0, r8
 80068cc:	4649      	mov	r1, r9
 80068ce:	f7fa f923 	bl	8000b18 <__aeabi_dcmpgt>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d173      	bne.n	80069be <_dtoa_r+0x6e6>
 80068d6:	ec53 2b19 	vmov	r2, r3, d9
 80068da:	4914      	ldr	r1, [pc, #80]	; (800692c <_dtoa_r+0x654>)
 80068dc:	2000      	movs	r0, #0
 80068de:	f7f9 fcd3 	bl	8000288 <__aeabi_dsub>
 80068e2:	4602      	mov	r2, r0
 80068e4:	460b      	mov	r3, r1
 80068e6:	4640      	mov	r0, r8
 80068e8:	4649      	mov	r1, r9
 80068ea:	f7fa f8f7 	bl	8000adc <__aeabi_dcmplt>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	f43f af2f 	beq.w	8006752 <_dtoa_r+0x47a>
 80068f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80068f6:	1e6b      	subs	r3, r5, #1
 80068f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80068fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068fe:	2b30      	cmp	r3, #48	; 0x30
 8006900:	d0f8      	beq.n	80068f4 <_dtoa_r+0x61c>
 8006902:	46bb      	mov	fp, r7
 8006904:	e04a      	b.n	800699c <_dtoa_r+0x6c4>
 8006906:	4b06      	ldr	r3, [pc, #24]	; (8006920 <_dtoa_r+0x648>)
 8006908:	f7f9 fe76 	bl	80005f8 <__aeabi_dmul>
 800690c:	4680      	mov	r8, r0
 800690e:	4689      	mov	r9, r1
 8006910:	e7bd      	b.n	800688e <_dtoa_r+0x5b6>
 8006912:	bf00      	nop
 8006914:	08008548 	.word	0x08008548
 8006918:	08008520 	.word	0x08008520
 800691c:	3ff00000 	.word	0x3ff00000
 8006920:	40240000 	.word	0x40240000
 8006924:	401c0000 	.word	0x401c0000
 8006928:	40140000 	.word	0x40140000
 800692c:	3fe00000 	.word	0x3fe00000
 8006930:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006934:	9d00      	ldr	r5, [sp, #0]
 8006936:	4642      	mov	r2, r8
 8006938:	464b      	mov	r3, r9
 800693a:	4630      	mov	r0, r6
 800693c:	4639      	mov	r1, r7
 800693e:	f7f9 ff85 	bl	800084c <__aeabi_ddiv>
 8006942:	f7fa f909 	bl	8000b58 <__aeabi_d2iz>
 8006946:	9001      	str	r0, [sp, #4]
 8006948:	f7f9 fdec 	bl	8000524 <__aeabi_i2d>
 800694c:	4642      	mov	r2, r8
 800694e:	464b      	mov	r3, r9
 8006950:	f7f9 fe52 	bl	80005f8 <__aeabi_dmul>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4630      	mov	r0, r6
 800695a:	4639      	mov	r1, r7
 800695c:	f7f9 fc94 	bl	8000288 <__aeabi_dsub>
 8006960:	9e01      	ldr	r6, [sp, #4]
 8006962:	9f04      	ldr	r7, [sp, #16]
 8006964:	3630      	adds	r6, #48	; 0x30
 8006966:	f805 6b01 	strb.w	r6, [r5], #1
 800696a:	9e00      	ldr	r6, [sp, #0]
 800696c:	1bae      	subs	r6, r5, r6
 800696e:	42b7      	cmp	r7, r6
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	d134      	bne.n	80069e0 <_dtoa_r+0x708>
 8006976:	f7f9 fc89 	bl	800028c <__adddf3>
 800697a:	4642      	mov	r2, r8
 800697c:	464b      	mov	r3, r9
 800697e:	4606      	mov	r6, r0
 8006980:	460f      	mov	r7, r1
 8006982:	f7fa f8c9 	bl	8000b18 <__aeabi_dcmpgt>
 8006986:	b9c8      	cbnz	r0, 80069bc <_dtoa_r+0x6e4>
 8006988:	4642      	mov	r2, r8
 800698a:	464b      	mov	r3, r9
 800698c:	4630      	mov	r0, r6
 800698e:	4639      	mov	r1, r7
 8006990:	f7fa f89a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006994:	b110      	cbz	r0, 800699c <_dtoa_r+0x6c4>
 8006996:	9b01      	ldr	r3, [sp, #4]
 8006998:	07db      	lsls	r3, r3, #31
 800699a:	d40f      	bmi.n	80069bc <_dtoa_r+0x6e4>
 800699c:	4651      	mov	r1, sl
 800699e:	4620      	mov	r0, r4
 80069a0:	f000 fbcc 	bl	800713c <_Bfree>
 80069a4:	2300      	movs	r3, #0
 80069a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069a8:	702b      	strb	r3, [r5, #0]
 80069aa:	f10b 0301 	add.w	r3, fp, #1
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f43f ace2 	beq.w	800637c <_dtoa_r+0xa4>
 80069b8:	601d      	str	r5, [r3, #0]
 80069ba:	e4df      	b.n	800637c <_dtoa_r+0xa4>
 80069bc:	465f      	mov	r7, fp
 80069be:	462b      	mov	r3, r5
 80069c0:	461d      	mov	r5, r3
 80069c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069c6:	2a39      	cmp	r2, #57	; 0x39
 80069c8:	d106      	bne.n	80069d8 <_dtoa_r+0x700>
 80069ca:	9a00      	ldr	r2, [sp, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d1f7      	bne.n	80069c0 <_dtoa_r+0x6e8>
 80069d0:	9900      	ldr	r1, [sp, #0]
 80069d2:	2230      	movs	r2, #48	; 0x30
 80069d4:	3701      	adds	r7, #1
 80069d6:	700a      	strb	r2, [r1, #0]
 80069d8:	781a      	ldrb	r2, [r3, #0]
 80069da:	3201      	adds	r2, #1
 80069dc:	701a      	strb	r2, [r3, #0]
 80069de:	e790      	b.n	8006902 <_dtoa_r+0x62a>
 80069e0:	4ba3      	ldr	r3, [pc, #652]	; (8006c70 <_dtoa_r+0x998>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	f7f9 fe08 	bl	80005f8 <__aeabi_dmul>
 80069e8:	2200      	movs	r2, #0
 80069ea:	2300      	movs	r3, #0
 80069ec:	4606      	mov	r6, r0
 80069ee:	460f      	mov	r7, r1
 80069f0:	f7fa f86a 	bl	8000ac8 <__aeabi_dcmpeq>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d09e      	beq.n	8006936 <_dtoa_r+0x65e>
 80069f8:	e7d0      	b.n	800699c <_dtoa_r+0x6c4>
 80069fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069fc:	2a00      	cmp	r2, #0
 80069fe:	f000 80ca 	beq.w	8006b96 <_dtoa_r+0x8be>
 8006a02:	9a07      	ldr	r2, [sp, #28]
 8006a04:	2a01      	cmp	r2, #1
 8006a06:	f300 80ad 	bgt.w	8006b64 <_dtoa_r+0x88c>
 8006a0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a0c:	2a00      	cmp	r2, #0
 8006a0e:	f000 80a5 	beq.w	8006b5c <_dtoa_r+0x884>
 8006a12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a16:	9e08      	ldr	r6, [sp, #32]
 8006a18:	9d05      	ldr	r5, [sp, #20]
 8006a1a:	9a05      	ldr	r2, [sp, #20]
 8006a1c:	441a      	add	r2, r3
 8006a1e:	9205      	str	r2, [sp, #20]
 8006a20:	9a06      	ldr	r2, [sp, #24]
 8006a22:	2101      	movs	r1, #1
 8006a24:	441a      	add	r2, r3
 8006a26:	4620      	mov	r0, r4
 8006a28:	9206      	str	r2, [sp, #24]
 8006a2a:	f000 fc3d 	bl	80072a8 <__i2b>
 8006a2e:	4607      	mov	r7, r0
 8006a30:	b165      	cbz	r5, 8006a4c <_dtoa_r+0x774>
 8006a32:	9b06      	ldr	r3, [sp, #24]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dd09      	ble.n	8006a4c <_dtoa_r+0x774>
 8006a38:	42ab      	cmp	r3, r5
 8006a3a:	9a05      	ldr	r2, [sp, #20]
 8006a3c:	bfa8      	it	ge
 8006a3e:	462b      	movge	r3, r5
 8006a40:	1ad2      	subs	r2, r2, r3
 8006a42:	9205      	str	r2, [sp, #20]
 8006a44:	9a06      	ldr	r2, [sp, #24]
 8006a46:	1aed      	subs	r5, r5, r3
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	9306      	str	r3, [sp, #24]
 8006a4c:	9b08      	ldr	r3, [sp, #32]
 8006a4e:	b1f3      	cbz	r3, 8006a8e <_dtoa_r+0x7b6>
 8006a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 80a3 	beq.w	8006b9e <_dtoa_r+0x8c6>
 8006a58:	2e00      	cmp	r6, #0
 8006a5a:	dd10      	ble.n	8006a7e <_dtoa_r+0x7a6>
 8006a5c:	4639      	mov	r1, r7
 8006a5e:	4632      	mov	r2, r6
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 fce1 	bl	8007428 <__pow5mult>
 8006a66:	4652      	mov	r2, sl
 8006a68:	4601      	mov	r1, r0
 8006a6a:	4607      	mov	r7, r0
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f000 fc31 	bl	80072d4 <__multiply>
 8006a72:	4651      	mov	r1, sl
 8006a74:	4680      	mov	r8, r0
 8006a76:	4620      	mov	r0, r4
 8006a78:	f000 fb60 	bl	800713c <_Bfree>
 8006a7c:	46c2      	mov	sl, r8
 8006a7e:	9b08      	ldr	r3, [sp, #32]
 8006a80:	1b9a      	subs	r2, r3, r6
 8006a82:	d004      	beq.n	8006a8e <_dtoa_r+0x7b6>
 8006a84:	4651      	mov	r1, sl
 8006a86:	4620      	mov	r0, r4
 8006a88:	f000 fcce 	bl	8007428 <__pow5mult>
 8006a8c:	4682      	mov	sl, r0
 8006a8e:	2101      	movs	r1, #1
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 fc09 	bl	80072a8 <__i2b>
 8006a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	f340 8081 	ble.w	8006ba2 <_dtoa_r+0x8ca>
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f000 fcbf 	bl	8007428 <__pow5mult>
 8006aaa:	9b07      	ldr	r3, [sp, #28]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	4606      	mov	r6, r0
 8006ab0:	dd7a      	ble.n	8006ba8 <_dtoa_r+0x8d0>
 8006ab2:	f04f 0800 	mov.w	r8, #0
 8006ab6:	6933      	ldr	r3, [r6, #16]
 8006ab8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006abc:	6918      	ldr	r0, [r3, #16]
 8006abe:	f000 fba5 	bl	800720c <__hi0bits>
 8006ac2:	f1c0 0020 	rsb	r0, r0, #32
 8006ac6:	9b06      	ldr	r3, [sp, #24]
 8006ac8:	4418      	add	r0, r3
 8006aca:	f010 001f 	ands.w	r0, r0, #31
 8006ace:	f000 8094 	beq.w	8006bfa <_dtoa_r+0x922>
 8006ad2:	f1c0 0320 	rsb	r3, r0, #32
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	f340 8085 	ble.w	8006be6 <_dtoa_r+0x90e>
 8006adc:	9b05      	ldr	r3, [sp, #20]
 8006ade:	f1c0 001c 	rsb	r0, r0, #28
 8006ae2:	4403      	add	r3, r0
 8006ae4:	9305      	str	r3, [sp, #20]
 8006ae6:	9b06      	ldr	r3, [sp, #24]
 8006ae8:	4403      	add	r3, r0
 8006aea:	4405      	add	r5, r0
 8006aec:	9306      	str	r3, [sp, #24]
 8006aee:	9b05      	ldr	r3, [sp, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	dd05      	ble.n	8006b00 <_dtoa_r+0x828>
 8006af4:	4651      	mov	r1, sl
 8006af6:	461a      	mov	r2, r3
 8006af8:	4620      	mov	r0, r4
 8006afa:	f000 fcef 	bl	80074dc <__lshift>
 8006afe:	4682      	mov	sl, r0
 8006b00:	9b06      	ldr	r3, [sp, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	dd05      	ble.n	8006b12 <_dtoa_r+0x83a>
 8006b06:	4631      	mov	r1, r6
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 fce6 	bl	80074dc <__lshift>
 8006b10:	4606      	mov	r6, r0
 8006b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d072      	beq.n	8006bfe <_dtoa_r+0x926>
 8006b18:	4631      	mov	r1, r6
 8006b1a:	4650      	mov	r0, sl
 8006b1c:	f000 fd4a 	bl	80075b4 <__mcmp>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	da6c      	bge.n	8006bfe <_dtoa_r+0x926>
 8006b24:	2300      	movs	r3, #0
 8006b26:	4651      	mov	r1, sl
 8006b28:	220a      	movs	r2, #10
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f000 fb28 	bl	8007180 <__multadd>
 8006b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b36:	4682      	mov	sl, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 81b0 	beq.w	8006e9e <_dtoa_r+0xbc6>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	4639      	mov	r1, r7
 8006b42:	220a      	movs	r2, #10
 8006b44:	4620      	mov	r0, r4
 8006b46:	f000 fb1b 	bl	8007180 <__multadd>
 8006b4a:	9b01      	ldr	r3, [sp, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	4607      	mov	r7, r0
 8006b50:	f300 8096 	bgt.w	8006c80 <_dtoa_r+0x9a8>
 8006b54:	9b07      	ldr	r3, [sp, #28]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	dc59      	bgt.n	8006c0e <_dtoa_r+0x936>
 8006b5a:	e091      	b.n	8006c80 <_dtoa_r+0x9a8>
 8006b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b62:	e758      	b.n	8006a16 <_dtoa_r+0x73e>
 8006b64:	9b04      	ldr	r3, [sp, #16]
 8006b66:	1e5e      	subs	r6, r3, #1
 8006b68:	9b08      	ldr	r3, [sp, #32]
 8006b6a:	42b3      	cmp	r3, r6
 8006b6c:	bfbf      	itttt	lt
 8006b6e:	9b08      	ldrlt	r3, [sp, #32]
 8006b70:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006b72:	9608      	strlt	r6, [sp, #32]
 8006b74:	1af3      	sublt	r3, r6, r3
 8006b76:	bfb4      	ite	lt
 8006b78:	18d2      	addlt	r2, r2, r3
 8006b7a:	1b9e      	subge	r6, r3, r6
 8006b7c:	9b04      	ldr	r3, [sp, #16]
 8006b7e:	bfbc      	itt	lt
 8006b80:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006b82:	2600      	movlt	r6, #0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	bfb7      	itett	lt
 8006b88:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006b8c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006b90:	1a9d      	sublt	r5, r3, r2
 8006b92:	2300      	movlt	r3, #0
 8006b94:	e741      	b.n	8006a1a <_dtoa_r+0x742>
 8006b96:	9e08      	ldr	r6, [sp, #32]
 8006b98:	9d05      	ldr	r5, [sp, #20]
 8006b9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b9c:	e748      	b.n	8006a30 <_dtoa_r+0x758>
 8006b9e:	9a08      	ldr	r2, [sp, #32]
 8006ba0:	e770      	b.n	8006a84 <_dtoa_r+0x7ac>
 8006ba2:	9b07      	ldr	r3, [sp, #28]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	dc19      	bgt.n	8006bdc <_dtoa_r+0x904>
 8006ba8:	9b02      	ldr	r3, [sp, #8]
 8006baa:	b9bb      	cbnz	r3, 8006bdc <_dtoa_r+0x904>
 8006bac:	9b03      	ldr	r3, [sp, #12]
 8006bae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bb2:	b99b      	cbnz	r3, 8006bdc <_dtoa_r+0x904>
 8006bb4:	9b03      	ldr	r3, [sp, #12]
 8006bb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bba:	0d1b      	lsrs	r3, r3, #20
 8006bbc:	051b      	lsls	r3, r3, #20
 8006bbe:	b183      	cbz	r3, 8006be2 <_dtoa_r+0x90a>
 8006bc0:	9b05      	ldr	r3, [sp, #20]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	9305      	str	r3, [sp, #20]
 8006bc6:	9b06      	ldr	r3, [sp, #24]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	9306      	str	r3, [sp, #24]
 8006bcc:	f04f 0801 	mov.w	r8, #1
 8006bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f47f af6f 	bne.w	8006ab6 <_dtoa_r+0x7de>
 8006bd8:	2001      	movs	r0, #1
 8006bda:	e774      	b.n	8006ac6 <_dtoa_r+0x7ee>
 8006bdc:	f04f 0800 	mov.w	r8, #0
 8006be0:	e7f6      	b.n	8006bd0 <_dtoa_r+0x8f8>
 8006be2:	4698      	mov	r8, r3
 8006be4:	e7f4      	b.n	8006bd0 <_dtoa_r+0x8f8>
 8006be6:	d082      	beq.n	8006aee <_dtoa_r+0x816>
 8006be8:	9a05      	ldr	r2, [sp, #20]
 8006bea:	331c      	adds	r3, #28
 8006bec:	441a      	add	r2, r3
 8006bee:	9205      	str	r2, [sp, #20]
 8006bf0:	9a06      	ldr	r2, [sp, #24]
 8006bf2:	441a      	add	r2, r3
 8006bf4:	441d      	add	r5, r3
 8006bf6:	9206      	str	r2, [sp, #24]
 8006bf8:	e779      	b.n	8006aee <_dtoa_r+0x816>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	e7f4      	b.n	8006be8 <_dtoa_r+0x910>
 8006bfe:	9b04      	ldr	r3, [sp, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	dc37      	bgt.n	8006c74 <_dtoa_r+0x99c>
 8006c04:	9b07      	ldr	r3, [sp, #28]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	dd34      	ble.n	8006c74 <_dtoa_r+0x99c>
 8006c0a:	9b04      	ldr	r3, [sp, #16]
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	9b01      	ldr	r3, [sp, #4]
 8006c10:	b963      	cbnz	r3, 8006c2c <_dtoa_r+0x954>
 8006c12:	4631      	mov	r1, r6
 8006c14:	2205      	movs	r2, #5
 8006c16:	4620      	mov	r0, r4
 8006c18:	f000 fab2 	bl	8007180 <__multadd>
 8006c1c:	4601      	mov	r1, r0
 8006c1e:	4606      	mov	r6, r0
 8006c20:	4650      	mov	r0, sl
 8006c22:	f000 fcc7 	bl	80075b4 <__mcmp>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f73f adbb 	bgt.w	80067a2 <_dtoa_r+0x4ca>
 8006c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c2e:	9d00      	ldr	r5, [sp, #0]
 8006c30:	ea6f 0b03 	mvn.w	fp, r3
 8006c34:	f04f 0800 	mov.w	r8, #0
 8006c38:	4631      	mov	r1, r6
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 fa7e 	bl	800713c <_Bfree>
 8006c40:	2f00      	cmp	r7, #0
 8006c42:	f43f aeab 	beq.w	800699c <_dtoa_r+0x6c4>
 8006c46:	f1b8 0f00 	cmp.w	r8, #0
 8006c4a:	d005      	beq.n	8006c58 <_dtoa_r+0x980>
 8006c4c:	45b8      	cmp	r8, r7
 8006c4e:	d003      	beq.n	8006c58 <_dtoa_r+0x980>
 8006c50:	4641      	mov	r1, r8
 8006c52:	4620      	mov	r0, r4
 8006c54:	f000 fa72 	bl	800713c <_Bfree>
 8006c58:	4639      	mov	r1, r7
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 fa6e 	bl	800713c <_Bfree>
 8006c60:	e69c      	b.n	800699c <_dtoa_r+0x6c4>
 8006c62:	2600      	movs	r6, #0
 8006c64:	4637      	mov	r7, r6
 8006c66:	e7e1      	b.n	8006c2c <_dtoa_r+0x954>
 8006c68:	46bb      	mov	fp, r7
 8006c6a:	4637      	mov	r7, r6
 8006c6c:	e599      	b.n	80067a2 <_dtoa_r+0x4ca>
 8006c6e:	bf00      	nop
 8006c70:	40240000 	.word	0x40240000
 8006c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 80c8 	beq.w	8006e0c <_dtoa_r+0xb34>
 8006c7c:	9b04      	ldr	r3, [sp, #16]
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	2d00      	cmp	r5, #0
 8006c82:	dd05      	ble.n	8006c90 <_dtoa_r+0x9b8>
 8006c84:	4639      	mov	r1, r7
 8006c86:	462a      	mov	r2, r5
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f000 fc27 	bl	80074dc <__lshift>
 8006c8e:	4607      	mov	r7, r0
 8006c90:	f1b8 0f00 	cmp.w	r8, #0
 8006c94:	d05b      	beq.n	8006d4e <_dtoa_r+0xa76>
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 fa0f 	bl	80070bc <_Balloc>
 8006c9e:	4605      	mov	r5, r0
 8006ca0:	b928      	cbnz	r0, 8006cae <_dtoa_r+0x9d6>
 8006ca2:	4b83      	ldr	r3, [pc, #524]	; (8006eb0 <_dtoa_r+0xbd8>)
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006caa:	f7ff bb2e 	b.w	800630a <_dtoa_r+0x32>
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	3202      	adds	r2, #2
 8006cb2:	0092      	lsls	r2, r2, #2
 8006cb4:	f107 010c 	add.w	r1, r7, #12
 8006cb8:	300c      	adds	r0, #12
 8006cba:	f001 f813 	bl	8007ce4 <memcpy>
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 fc0a 	bl	80074dc <__lshift>
 8006cc8:	9b00      	ldr	r3, [sp, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	9304      	str	r3, [sp, #16]
 8006cce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	9308      	str	r3, [sp, #32]
 8006cd6:	9b02      	ldr	r3, [sp, #8]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	46b8      	mov	r8, r7
 8006cde:	9306      	str	r3, [sp, #24]
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	9b04      	ldr	r3, [sp, #16]
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	4650      	mov	r0, sl
 8006cea:	9301      	str	r3, [sp, #4]
 8006cec:	f7ff fa6b 	bl	80061c6 <quorem>
 8006cf0:	4641      	mov	r1, r8
 8006cf2:	9002      	str	r0, [sp, #8]
 8006cf4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006cf8:	4650      	mov	r0, sl
 8006cfa:	f000 fc5b 	bl	80075b4 <__mcmp>
 8006cfe:	463a      	mov	r2, r7
 8006d00:	9005      	str	r0, [sp, #20]
 8006d02:	4631      	mov	r1, r6
 8006d04:	4620      	mov	r0, r4
 8006d06:	f000 fc71 	bl	80075ec <__mdiff>
 8006d0a:	68c2      	ldr	r2, [r0, #12]
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	bb02      	cbnz	r2, 8006d52 <_dtoa_r+0xa7a>
 8006d10:	4601      	mov	r1, r0
 8006d12:	4650      	mov	r0, sl
 8006d14:	f000 fc4e 	bl	80075b4 <__mcmp>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d20:	f000 fa0c 	bl	800713c <_Bfree>
 8006d24:	9b07      	ldr	r3, [sp, #28]
 8006d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d28:	9d04      	ldr	r5, [sp, #16]
 8006d2a:	ea43 0102 	orr.w	r1, r3, r2
 8006d2e:	9b06      	ldr	r3, [sp, #24]
 8006d30:	4319      	orrs	r1, r3
 8006d32:	d110      	bne.n	8006d56 <_dtoa_r+0xa7e>
 8006d34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d38:	d029      	beq.n	8006d8e <_dtoa_r+0xab6>
 8006d3a:	9b05      	ldr	r3, [sp, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	dd02      	ble.n	8006d46 <_dtoa_r+0xa6e>
 8006d40:	9b02      	ldr	r3, [sp, #8]
 8006d42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006d46:	9b01      	ldr	r3, [sp, #4]
 8006d48:	f883 9000 	strb.w	r9, [r3]
 8006d4c:	e774      	b.n	8006c38 <_dtoa_r+0x960>
 8006d4e:	4638      	mov	r0, r7
 8006d50:	e7ba      	b.n	8006cc8 <_dtoa_r+0x9f0>
 8006d52:	2201      	movs	r2, #1
 8006d54:	e7e1      	b.n	8006d1a <_dtoa_r+0xa42>
 8006d56:	9b05      	ldr	r3, [sp, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	db04      	blt.n	8006d66 <_dtoa_r+0xa8e>
 8006d5c:	9907      	ldr	r1, [sp, #28]
 8006d5e:	430b      	orrs	r3, r1
 8006d60:	9906      	ldr	r1, [sp, #24]
 8006d62:	430b      	orrs	r3, r1
 8006d64:	d120      	bne.n	8006da8 <_dtoa_r+0xad0>
 8006d66:	2a00      	cmp	r2, #0
 8006d68:	dded      	ble.n	8006d46 <_dtoa_r+0xa6e>
 8006d6a:	4651      	mov	r1, sl
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f000 fbb4 	bl	80074dc <__lshift>
 8006d74:	4631      	mov	r1, r6
 8006d76:	4682      	mov	sl, r0
 8006d78:	f000 fc1c 	bl	80075b4 <__mcmp>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	dc03      	bgt.n	8006d88 <_dtoa_r+0xab0>
 8006d80:	d1e1      	bne.n	8006d46 <_dtoa_r+0xa6e>
 8006d82:	f019 0f01 	tst.w	r9, #1
 8006d86:	d0de      	beq.n	8006d46 <_dtoa_r+0xa6e>
 8006d88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d8c:	d1d8      	bne.n	8006d40 <_dtoa_r+0xa68>
 8006d8e:	9a01      	ldr	r2, [sp, #4]
 8006d90:	2339      	movs	r3, #57	; 0x39
 8006d92:	7013      	strb	r3, [r2, #0]
 8006d94:	462b      	mov	r3, r5
 8006d96:	461d      	mov	r5, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d9e:	2a39      	cmp	r2, #57	; 0x39
 8006da0:	d06c      	beq.n	8006e7c <_dtoa_r+0xba4>
 8006da2:	3201      	adds	r2, #1
 8006da4:	701a      	strb	r2, [r3, #0]
 8006da6:	e747      	b.n	8006c38 <_dtoa_r+0x960>
 8006da8:	2a00      	cmp	r2, #0
 8006daa:	dd07      	ble.n	8006dbc <_dtoa_r+0xae4>
 8006dac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006db0:	d0ed      	beq.n	8006d8e <_dtoa_r+0xab6>
 8006db2:	9a01      	ldr	r2, [sp, #4]
 8006db4:	f109 0301 	add.w	r3, r9, #1
 8006db8:	7013      	strb	r3, [r2, #0]
 8006dba:	e73d      	b.n	8006c38 <_dtoa_r+0x960>
 8006dbc:	9b04      	ldr	r3, [sp, #16]
 8006dbe:	9a08      	ldr	r2, [sp, #32]
 8006dc0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d043      	beq.n	8006e50 <_dtoa_r+0xb78>
 8006dc8:	4651      	mov	r1, sl
 8006dca:	2300      	movs	r3, #0
 8006dcc:	220a      	movs	r2, #10
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 f9d6 	bl	8007180 <__multadd>
 8006dd4:	45b8      	cmp	r8, r7
 8006dd6:	4682      	mov	sl, r0
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	f04f 020a 	mov.w	r2, #10
 8006de0:	4641      	mov	r1, r8
 8006de2:	4620      	mov	r0, r4
 8006de4:	d107      	bne.n	8006df6 <_dtoa_r+0xb1e>
 8006de6:	f000 f9cb 	bl	8007180 <__multadd>
 8006dea:	4680      	mov	r8, r0
 8006dec:	4607      	mov	r7, r0
 8006dee:	9b04      	ldr	r3, [sp, #16]
 8006df0:	3301      	adds	r3, #1
 8006df2:	9304      	str	r3, [sp, #16]
 8006df4:	e775      	b.n	8006ce2 <_dtoa_r+0xa0a>
 8006df6:	f000 f9c3 	bl	8007180 <__multadd>
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	4680      	mov	r8, r0
 8006dfe:	2300      	movs	r3, #0
 8006e00:	220a      	movs	r2, #10
 8006e02:	4620      	mov	r0, r4
 8006e04:	f000 f9bc 	bl	8007180 <__multadd>
 8006e08:	4607      	mov	r7, r0
 8006e0a:	e7f0      	b.n	8006dee <_dtoa_r+0xb16>
 8006e0c:	9b04      	ldr	r3, [sp, #16]
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	9d00      	ldr	r5, [sp, #0]
 8006e12:	4631      	mov	r1, r6
 8006e14:	4650      	mov	r0, sl
 8006e16:	f7ff f9d6 	bl	80061c6 <quorem>
 8006e1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e1e:	9b00      	ldr	r3, [sp, #0]
 8006e20:	f805 9b01 	strb.w	r9, [r5], #1
 8006e24:	1aea      	subs	r2, r5, r3
 8006e26:	9b01      	ldr	r3, [sp, #4]
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	dd07      	ble.n	8006e3c <_dtoa_r+0xb64>
 8006e2c:	4651      	mov	r1, sl
 8006e2e:	2300      	movs	r3, #0
 8006e30:	220a      	movs	r2, #10
 8006e32:	4620      	mov	r0, r4
 8006e34:	f000 f9a4 	bl	8007180 <__multadd>
 8006e38:	4682      	mov	sl, r0
 8006e3a:	e7ea      	b.n	8006e12 <_dtoa_r+0xb3a>
 8006e3c:	9b01      	ldr	r3, [sp, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	bfc8      	it	gt
 8006e42:	461d      	movgt	r5, r3
 8006e44:	9b00      	ldr	r3, [sp, #0]
 8006e46:	bfd8      	it	le
 8006e48:	2501      	movle	r5, #1
 8006e4a:	441d      	add	r5, r3
 8006e4c:	f04f 0800 	mov.w	r8, #0
 8006e50:	4651      	mov	r1, sl
 8006e52:	2201      	movs	r2, #1
 8006e54:	4620      	mov	r0, r4
 8006e56:	f000 fb41 	bl	80074dc <__lshift>
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4682      	mov	sl, r0
 8006e5e:	f000 fba9 	bl	80075b4 <__mcmp>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	dc96      	bgt.n	8006d94 <_dtoa_r+0xabc>
 8006e66:	d102      	bne.n	8006e6e <_dtoa_r+0xb96>
 8006e68:	f019 0f01 	tst.w	r9, #1
 8006e6c:	d192      	bne.n	8006d94 <_dtoa_r+0xabc>
 8006e6e:	462b      	mov	r3, r5
 8006e70:	461d      	mov	r5, r3
 8006e72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e76:	2a30      	cmp	r2, #48	; 0x30
 8006e78:	d0fa      	beq.n	8006e70 <_dtoa_r+0xb98>
 8006e7a:	e6dd      	b.n	8006c38 <_dtoa_r+0x960>
 8006e7c:	9a00      	ldr	r2, [sp, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d189      	bne.n	8006d96 <_dtoa_r+0xabe>
 8006e82:	f10b 0b01 	add.w	fp, fp, #1
 8006e86:	2331      	movs	r3, #49	; 0x31
 8006e88:	e796      	b.n	8006db8 <_dtoa_r+0xae0>
 8006e8a:	4b0a      	ldr	r3, [pc, #40]	; (8006eb4 <_dtoa_r+0xbdc>)
 8006e8c:	f7ff ba99 	b.w	80063c2 <_dtoa_r+0xea>
 8006e90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f47f aa6d 	bne.w	8006372 <_dtoa_r+0x9a>
 8006e98:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <_dtoa_r+0xbe0>)
 8006e9a:	f7ff ba92 	b.w	80063c2 <_dtoa_r+0xea>
 8006e9e:	9b01      	ldr	r3, [sp, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	dcb5      	bgt.n	8006e10 <_dtoa_r+0xb38>
 8006ea4:	9b07      	ldr	r3, [sp, #28]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	f73f aeb1 	bgt.w	8006c0e <_dtoa_r+0x936>
 8006eac:	e7b0      	b.n	8006e10 <_dtoa_r+0xb38>
 8006eae:	bf00      	nop
 8006eb0:	080084b0 	.word	0x080084b0
 8006eb4:	08008410 	.word	0x08008410
 8006eb8:	08008434 	.word	0x08008434

08006ebc <_free_r>:
 8006ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ebe:	2900      	cmp	r1, #0
 8006ec0:	d044      	beq.n	8006f4c <_free_r+0x90>
 8006ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ec6:	9001      	str	r0, [sp, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f1a1 0404 	sub.w	r4, r1, #4
 8006ece:	bfb8      	it	lt
 8006ed0:	18e4      	addlt	r4, r4, r3
 8006ed2:	f000 f8e7 	bl	80070a4 <__malloc_lock>
 8006ed6:	4a1e      	ldr	r2, [pc, #120]	; (8006f50 <_free_r+0x94>)
 8006ed8:	9801      	ldr	r0, [sp, #4]
 8006eda:	6813      	ldr	r3, [r2, #0]
 8006edc:	b933      	cbnz	r3, 8006eec <_free_r+0x30>
 8006ede:	6063      	str	r3, [r4, #4]
 8006ee0:	6014      	str	r4, [r2, #0]
 8006ee2:	b003      	add	sp, #12
 8006ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ee8:	f000 b8e2 	b.w	80070b0 <__malloc_unlock>
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	d908      	bls.n	8006f02 <_free_r+0x46>
 8006ef0:	6825      	ldr	r5, [r4, #0]
 8006ef2:	1961      	adds	r1, r4, r5
 8006ef4:	428b      	cmp	r3, r1
 8006ef6:	bf01      	itttt	eq
 8006ef8:	6819      	ldreq	r1, [r3, #0]
 8006efa:	685b      	ldreq	r3, [r3, #4]
 8006efc:	1949      	addeq	r1, r1, r5
 8006efe:	6021      	streq	r1, [r4, #0]
 8006f00:	e7ed      	b.n	8006ede <_free_r+0x22>
 8006f02:	461a      	mov	r2, r3
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	b10b      	cbz	r3, 8006f0c <_free_r+0x50>
 8006f08:	42a3      	cmp	r3, r4
 8006f0a:	d9fa      	bls.n	8006f02 <_free_r+0x46>
 8006f0c:	6811      	ldr	r1, [r2, #0]
 8006f0e:	1855      	adds	r5, r2, r1
 8006f10:	42a5      	cmp	r5, r4
 8006f12:	d10b      	bne.n	8006f2c <_free_r+0x70>
 8006f14:	6824      	ldr	r4, [r4, #0]
 8006f16:	4421      	add	r1, r4
 8006f18:	1854      	adds	r4, r2, r1
 8006f1a:	42a3      	cmp	r3, r4
 8006f1c:	6011      	str	r1, [r2, #0]
 8006f1e:	d1e0      	bne.n	8006ee2 <_free_r+0x26>
 8006f20:	681c      	ldr	r4, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	6053      	str	r3, [r2, #4]
 8006f26:	440c      	add	r4, r1
 8006f28:	6014      	str	r4, [r2, #0]
 8006f2a:	e7da      	b.n	8006ee2 <_free_r+0x26>
 8006f2c:	d902      	bls.n	8006f34 <_free_r+0x78>
 8006f2e:	230c      	movs	r3, #12
 8006f30:	6003      	str	r3, [r0, #0]
 8006f32:	e7d6      	b.n	8006ee2 <_free_r+0x26>
 8006f34:	6825      	ldr	r5, [r4, #0]
 8006f36:	1961      	adds	r1, r4, r5
 8006f38:	428b      	cmp	r3, r1
 8006f3a:	bf04      	itt	eq
 8006f3c:	6819      	ldreq	r1, [r3, #0]
 8006f3e:	685b      	ldreq	r3, [r3, #4]
 8006f40:	6063      	str	r3, [r4, #4]
 8006f42:	bf04      	itt	eq
 8006f44:	1949      	addeq	r1, r1, r5
 8006f46:	6021      	streq	r1, [r4, #0]
 8006f48:	6054      	str	r4, [r2, #4]
 8006f4a:	e7ca      	b.n	8006ee2 <_free_r+0x26>
 8006f4c:	b003      	add	sp, #12
 8006f4e:	bd30      	pop	{r4, r5, pc}
 8006f50:	20000474 	.word	0x20000474

08006f54 <malloc>:
 8006f54:	4b02      	ldr	r3, [pc, #8]	; (8006f60 <malloc+0xc>)
 8006f56:	4601      	mov	r1, r0
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	f000 b823 	b.w	8006fa4 <_malloc_r>
 8006f5e:	bf00      	nop
 8006f60:	20000064 	.word	0x20000064

08006f64 <sbrk_aligned>:
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	4e0e      	ldr	r6, [pc, #56]	; (8006fa0 <sbrk_aligned+0x3c>)
 8006f68:	460c      	mov	r4, r1
 8006f6a:	6831      	ldr	r1, [r6, #0]
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	b911      	cbnz	r1, 8006f76 <sbrk_aligned+0x12>
 8006f70:	f000 fea8 	bl	8007cc4 <_sbrk_r>
 8006f74:	6030      	str	r0, [r6, #0]
 8006f76:	4621      	mov	r1, r4
 8006f78:	4628      	mov	r0, r5
 8006f7a:	f000 fea3 	bl	8007cc4 <_sbrk_r>
 8006f7e:	1c43      	adds	r3, r0, #1
 8006f80:	d00a      	beq.n	8006f98 <sbrk_aligned+0x34>
 8006f82:	1cc4      	adds	r4, r0, #3
 8006f84:	f024 0403 	bic.w	r4, r4, #3
 8006f88:	42a0      	cmp	r0, r4
 8006f8a:	d007      	beq.n	8006f9c <sbrk_aligned+0x38>
 8006f8c:	1a21      	subs	r1, r4, r0
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f000 fe98 	bl	8007cc4 <_sbrk_r>
 8006f94:	3001      	adds	r0, #1
 8006f96:	d101      	bne.n	8006f9c <sbrk_aligned+0x38>
 8006f98:	f04f 34ff 	mov.w	r4, #4294967295
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	20000478 	.word	0x20000478

08006fa4 <_malloc_r>:
 8006fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa8:	1ccd      	adds	r5, r1, #3
 8006faa:	f025 0503 	bic.w	r5, r5, #3
 8006fae:	3508      	adds	r5, #8
 8006fb0:	2d0c      	cmp	r5, #12
 8006fb2:	bf38      	it	cc
 8006fb4:	250c      	movcc	r5, #12
 8006fb6:	2d00      	cmp	r5, #0
 8006fb8:	4607      	mov	r7, r0
 8006fba:	db01      	blt.n	8006fc0 <_malloc_r+0x1c>
 8006fbc:	42a9      	cmp	r1, r5
 8006fbe:	d905      	bls.n	8006fcc <_malloc_r+0x28>
 8006fc0:	230c      	movs	r3, #12
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	2600      	movs	r6, #0
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80070a0 <_malloc_r+0xfc>
 8006fd0:	f000 f868 	bl	80070a4 <__malloc_lock>
 8006fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8006fd8:	461c      	mov	r4, r3
 8006fda:	bb5c      	cbnz	r4, 8007034 <_malloc_r+0x90>
 8006fdc:	4629      	mov	r1, r5
 8006fde:	4638      	mov	r0, r7
 8006fe0:	f7ff ffc0 	bl	8006f64 <sbrk_aligned>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	d155      	bne.n	8007096 <_malloc_r+0xf2>
 8006fea:	f8d8 4000 	ldr.w	r4, [r8]
 8006fee:	4626      	mov	r6, r4
 8006ff0:	2e00      	cmp	r6, #0
 8006ff2:	d145      	bne.n	8007080 <_malloc_r+0xdc>
 8006ff4:	2c00      	cmp	r4, #0
 8006ff6:	d048      	beq.n	800708a <_malloc_r+0xe6>
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	4638      	mov	r0, r7
 8006ffe:	eb04 0903 	add.w	r9, r4, r3
 8007002:	f000 fe5f 	bl	8007cc4 <_sbrk_r>
 8007006:	4581      	cmp	r9, r0
 8007008:	d13f      	bne.n	800708a <_malloc_r+0xe6>
 800700a:	6821      	ldr	r1, [r4, #0]
 800700c:	1a6d      	subs	r5, r5, r1
 800700e:	4629      	mov	r1, r5
 8007010:	4638      	mov	r0, r7
 8007012:	f7ff ffa7 	bl	8006f64 <sbrk_aligned>
 8007016:	3001      	adds	r0, #1
 8007018:	d037      	beq.n	800708a <_malloc_r+0xe6>
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	442b      	add	r3, r5
 800701e:	6023      	str	r3, [r4, #0]
 8007020:	f8d8 3000 	ldr.w	r3, [r8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d038      	beq.n	800709a <_malloc_r+0xf6>
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	42a2      	cmp	r2, r4
 800702c:	d12b      	bne.n	8007086 <_malloc_r+0xe2>
 800702e:	2200      	movs	r2, #0
 8007030:	605a      	str	r2, [r3, #4]
 8007032:	e00f      	b.n	8007054 <_malloc_r+0xb0>
 8007034:	6822      	ldr	r2, [r4, #0]
 8007036:	1b52      	subs	r2, r2, r5
 8007038:	d41f      	bmi.n	800707a <_malloc_r+0xd6>
 800703a:	2a0b      	cmp	r2, #11
 800703c:	d917      	bls.n	800706e <_malloc_r+0xca>
 800703e:	1961      	adds	r1, r4, r5
 8007040:	42a3      	cmp	r3, r4
 8007042:	6025      	str	r5, [r4, #0]
 8007044:	bf18      	it	ne
 8007046:	6059      	strne	r1, [r3, #4]
 8007048:	6863      	ldr	r3, [r4, #4]
 800704a:	bf08      	it	eq
 800704c:	f8c8 1000 	streq.w	r1, [r8]
 8007050:	5162      	str	r2, [r4, r5]
 8007052:	604b      	str	r3, [r1, #4]
 8007054:	4638      	mov	r0, r7
 8007056:	f104 060b 	add.w	r6, r4, #11
 800705a:	f000 f829 	bl	80070b0 <__malloc_unlock>
 800705e:	f026 0607 	bic.w	r6, r6, #7
 8007062:	1d23      	adds	r3, r4, #4
 8007064:	1af2      	subs	r2, r6, r3
 8007066:	d0ae      	beq.n	8006fc6 <_malloc_r+0x22>
 8007068:	1b9b      	subs	r3, r3, r6
 800706a:	50a3      	str	r3, [r4, r2]
 800706c:	e7ab      	b.n	8006fc6 <_malloc_r+0x22>
 800706e:	42a3      	cmp	r3, r4
 8007070:	6862      	ldr	r2, [r4, #4]
 8007072:	d1dd      	bne.n	8007030 <_malloc_r+0x8c>
 8007074:	f8c8 2000 	str.w	r2, [r8]
 8007078:	e7ec      	b.n	8007054 <_malloc_r+0xb0>
 800707a:	4623      	mov	r3, r4
 800707c:	6864      	ldr	r4, [r4, #4]
 800707e:	e7ac      	b.n	8006fda <_malloc_r+0x36>
 8007080:	4634      	mov	r4, r6
 8007082:	6876      	ldr	r6, [r6, #4]
 8007084:	e7b4      	b.n	8006ff0 <_malloc_r+0x4c>
 8007086:	4613      	mov	r3, r2
 8007088:	e7cc      	b.n	8007024 <_malloc_r+0x80>
 800708a:	230c      	movs	r3, #12
 800708c:	603b      	str	r3, [r7, #0]
 800708e:	4638      	mov	r0, r7
 8007090:	f000 f80e 	bl	80070b0 <__malloc_unlock>
 8007094:	e797      	b.n	8006fc6 <_malloc_r+0x22>
 8007096:	6025      	str	r5, [r4, #0]
 8007098:	e7dc      	b.n	8007054 <_malloc_r+0xb0>
 800709a:	605b      	str	r3, [r3, #4]
 800709c:	deff      	udf	#255	; 0xff
 800709e:	bf00      	nop
 80070a0:	20000474 	.word	0x20000474

080070a4 <__malloc_lock>:
 80070a4:	4801      	ldr	r0, [pc, #4]	; (80070ac <__malloc_lock+0x8>)
 80070a6:	f7ff b88c 	b.w	80061c2 <__retarget_lock_acquire_recursive>
 80070aa:	bf00      	nop
 80070ac:	20000470 	.word	0x20000470

080070b0 <__malloc_unlock>:
 80070b0:	4801      	ldr	r0, [pc, #4]	; (80070b8 <__malloc_unlock+0x8>)
 80070b2:	f7ff b887 	b.w	80061c4 <__retarget_lock_release_recursive>
 80070b6:	bf00      	nop
 80070b8:	20000470 	.word	0x20000470

080070bc <_Balloc>:
 80070bc:	b570      	push	{r4, r5, r6, lr}
 80070be:	69c6      	ldr	r6, [r0, #28]
 80070c0:	4604      	mov	r4, r0
 80070c2:	460d      	mov	r5, r1
 80070c4:	b976      	cbnz	r6, 80070e4 <_Balloc+0x28>
 80070c6:	2010      	movs	r0, #16
 80070c8:	f7ff ff44 	bl	8006f54 <malloc>
 80070cc:	4602      	mov	r2, r0
 80070ce:	61e0      	str	r0, [r4, #28]
 80070d0:	b920      	cbnz	r0, 80070dc <_Balloc+0x20>
 80070d2:	4b18      	ldr	r3, [pc, #96]	; (8007134 <_Balloc+0x78>)
 80070d4:	4818      	ldr	r0, [pc, #96]	; (8007138 <_Balloc+0x7c>)
 80070d6:	216b      	movs	r1, #107	; 0x6b
 80070d8:	f000 fe12 	bl	8007d00 <__assert_func>
 80070dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070e0:	6006      	str	r6, [r0, #0]
 80070e2:	60c6      	str	r6, [r0, #12]
 80070e4:	69e6      	ldr	r6, [r4, #28]
 80070e6:	68f3      	ldr	r3, [r6, #12]
 80070e8:	b183      	cbz	r3, 800710c <_Balloc+0x50>
 80070ea:	69e3      	ldr	r3, [r4, #28]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070f2:	b9b8      	cbnz	r0, 8007124 <_Balloc+0x68>
 80070f4:	2101      	movs	r1, #1
 80070f6:	fa01 f605 	lsl.w	r6, r1, r5
 80070fa:	1d72      	adds	r2, r6, #5
 80070fc:	0092      	lsls	r2, r2, #2
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 fe1c 	bl	8007d3c <_calloc_r>
 8007104:	b160      	cbz	r0, 8007120 <_Balloc+0x64>
 8007106:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800710a:	e00e      	b.n	800712a <_Balloc+0x6e>
 800710c:	2221      	movs	r2, #33	; 0x21
 800710e:	2104      	movs	r1, #4
 8007110:	4620      	mov	r0, r4
 8007112:	f000 fe13 	bl	8007d3c <_calloc_r>
 8007116:	69e3      	ldr	r3, [r4, #28]
 8007118:	60f0      	str	r0, [r6, #12]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e4      	bne.n	80070ea <_Balloc+0x2e>
 8007120:	2000      	movs	r0, #0
 8007122:	bd70      	pop	{r4, r5, r6, pc}
 8007124:	6802      	ldr	r2, [r0, #0]
 8007126:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800712a:	2300      	movs	r3, #0
 800712c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007130:	e7f7      	b.n	8007122 <_Balloc+0x66>
 8007132:	bf00      	nop
 8007134:	08008441 	.word	0x08008441
 8007138:	080084c1 	.word	0x080084c1

0800713c <_Bfree>:
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	69c6      	ldr	r6, [r0, #28]
 8007140:	4605      	mov	r5, r0
 8007142:	460c      	mov	r4, r1
 8007144:	b976      	cbnz	r6, 8007164 <_Bfree+0x28>
 8007146:	2010      	movs	r0, #16
 8007148:	f7ff ff04 	bl	8006f54 <malloc>
 800714c:	4602      	mov	r2, r0
 800714e:	61e8      	str	r0, [r5, #28]
 8007150:	b920      	cbnz	r0, 800715c <_Bfree+0x20>
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <_Bfree+0x3c>)
 8007154:	4809      	ldr	r0, [pc, #36]	; (800717c <_Bfree+0x40>)
 8007156:	218f      	movs	r1, #143	; 0x8f
 8007158:	f000 fdd2 	bl	8007d00 <__assert_func>
 800715c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007160:	6006      	str	r6, [r0, #0]
 8007162:	60c6      	str	r6, [r0, #12]
 8007164:	b13c      	cbz	r4, 8007176 <_Bfree+0x3a>
 8007166:	69eb      	ldr	r3, [r5, #28]
 8007168:	6862      	ldr	r2, [r4, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007170:	6021      	str	r1, [r4, #0]
 8007172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007176:	bd70      	pop	{r4, r5, r6, pc}
 8007178:	08008441 	.word	0x08008441
 800717c:	080084c1 	.word	0x080084c1

08007180 <__multadd>:
 8007180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007184:	690d      	ldr	r5, [r1, #16]
 8007186:	4607      	mov	r7, r0
 8007188:	460c      	mov	r4, r1
 800718a:	461e      	mov	r6, r3
 800718c:	f101 0c14 	add.w	ip, r1, #20
 8007190:	2000      	movs	r0, #0
 8007192:	f8dc 3000 	ldr.w	r3, [ip]
 8007196:	b299      	uxth	r1, r3
 8007198:	fb02 6101 	mla	r1, r2, r1, r6
 800719c:	0c1e      	lsrs	r6, r3, #16
 800719e:	0c0b      	lsrs	r3, r1, #16
 80071a0:	fb02 3306 	mla	r3, r2, r6, r3
 80071a4:	b289      	uxth	r1, r1
 80071a6:	3001      	adds	r0, #1
 80071a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071ac:	4285      	cmp	r5, r0
 80071ae:	f84c 1b04 	str.w	r1, [ip], #4
 80071b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071b6:	dcec      	bgt.n	8007192 <__multadd+0x12>
 80071b8:	b30e      	cbz	r6, 80071fe <__multadd+0x7e>
 80071ba:	68a3      	ldr	r3, [r4, #8]
 80071bc:	42ab      	cmp	r3, r5
 80071be:	dc19      	bgt.n	80071f4 <__multadd+0x74>
 80071c0:	6861      	ldr	r1, [r4, #4]
 80071c2:	4638      	mov	r0, r7
 80071c4:	3101      	adds	r1, #1
 80071c6:	f7ff ff79 	bl	80070bc <_Balloc>
 80071ca:	4680      	mov	r8, r0
 80071cc:	b928      	cbnz	r0, 80071da <__multadd+0x5a>
 80071ce:	4602      	mov	r2, r0
 80071d0:	4b0c      	ldr	r3, [pc, #48]	; (8007204 <__multadd+0x84>)
 80071d2:	480d      	ldr	r0, [pc, #52]	; (8007208 <__multadd+0x88>)
 80071d4:	21ba      	movs	r1, #186	; 0xba
 80071d6:	f000 fd93 	bl	8007d00 <__assert_func>
 80071da:	6922      	ldr	r2, [r4, #16]
 80071dc:	3202      	adds	r2, #2
 80071de:	f104 010c 	add.w	r1, r4, #12
 80071e2:	0092      	lsls	r2, r2, #2
 80071e4:	300c      	adds	r0, #12
 80071e6:	f000 fd7d 	bl	8007ce4 <memcpy>
 80071ea:	4621      	mov	r1, r4
 80071ec:	4638      	mov	r0, r7
 80071ee:	f7ff ffa5 	bl	800713c <_Bfree>
 80071f2:	4644      	mov	r4, r8
 80071f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071f8:	3501      	adds	r5, #1
 80071fa:	615e      	str	r6, [r3, #20]
 80071fc:	6125      	str	r5, [r4, #16]
 80071fe:	4620      	mov	r0, r4
 8007200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007204:	080084b0 	.word	0x080084b0
 8007208:	080084c1 	.word	0x080084c1

0800720c <__hi0bits>:
 800720c:	0c03      	lsrs	r3, r0, #16
 800720e:	041b      	lsls	r3, r3, #16
 8007210:	b9d3      	cbnz	r3, 8007248 <__hi0bits+0x3c>
 8007212:	0400      	lsls	r0, r0, #16
 8007214:	2310      	movs	r3, #16
 8007216:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800721a:	bf04      	itt	eq
 800721c:	0200      	lsleq	r0, r0, #8
 800721e:	3308      	addeq	r3, #8
 8007220:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007224:	bf04      	itt	eq
 8007226:	0100      	lsleq	r0, r0, #4
 8007228:	3304      	addeq	r3, #4
 800722a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800722e:	bf04      	itt	eq
 8007230:	0080      	lsleq	r0, r0, #2
 8007232:	3302      	addeq	r3, #2
 8007234:	2800      	cmp	r0, #0
 8007236:	db05      	blt.n	8007244 <__hi0bits+0x38>
 8007238:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800723c:	f103 0301 	add.w	r3, r3, #1
 8007240:	bf08      	it	eq
 8007242:	2320      	moveq	r3, #32
 8007244:	4618      	mov	r0, r3
 8007246:	4770      	bx	lr
 8007248:	2300      	movs	r3, #0
 800724a:	e7e4      	b.n	8007216 <__hi0bits+0xa>

0800724c <__lo0bits>:
 800724c:	6803      	ldr	r3, [r0, #0]
 800724e:	f013 0207 	ands.w	r2, r3, #7
 8007252:	d00c      	beq.n	800726e <__lo0bits+0x22>
 8007254:	07d9      	lsls	r1, r3, #31
 8007256:	d422      	bmi.n	800729e <__lo0bits+0x52>
 8007258:	079a      	lsls	r2, r3, #30
 800725a:	bf49      	itett	mi
 800725c:	085b      	lsrmi	r3, r3, #1
 800725e:	089b      	lsrpl	r3, r3, #2
 8007260:	6003      	strmi	r3, [r0, #0]
 8007262:	2201      	movmi	r2, #1
 8007264:	bf5c      	itt	pl
 8007266:	6003      	strpl	r3, [r0, #0]
 8007268:	2202      	movpl	r2, #2
 800726a:	4610      	mov	r0, r2
 800726c:	4770      	bx	lr
 800726e:	b299      	uxth	r1, r3
 8007270:	b909      	cbnz	r1, 8007276 <__lo0bits+0x2a>
 8007272:	0c1b      	lsrs	r3, r3, #16
 8007274:	2210      	movs	r2, #16
 8007276:	b2d9      	uxtb	r1, r3
 8007278:	b909      	cbnz	r1, 800727e <__lo0bits+0x32>
 800727a:	3208      	adds	r2, #8
 800727c:	0a1b      	lsrs	r3, r3, #8
 800727e:	0719      	lsls	r1, r3, #28
 8007280:	bf04      	itt	eq
 8007282:	091b      	lsreq	r3, r3, #4
 8007284:	3204      	addeq	r2, #4
 8007286:	0799      	lsls	r1, r3, #30
 8007288:	bf04      	itt	eq
 800728a:	089b      	lsreq	r3, r3, #2
 800728c:	3202      	addeq	r2, #2
 800728e:	07d9      	lsls	r1, r3, #31
 8007290:	d403      	bmi.n	800729a <__lo0bits+0x4e>
 8007292:	085b      	lsrs	r3, r3, #1
 8007294:	f102 0201 	add.w	r2, r2, #1
 8007298:	d003      	beq.n	80072a2 <__lo0bits+0x56>
 800729a:	6003      	str	r3, [r0, #0]
 800729c:	e7e5      	b.n	800726a <__lo0bits+0x1e>
 800729e:	2200      	movs	r2, #0
 80072a0:	e7e3      	b.n	800726a <__lo0bits+0x1e>
 80072a2:	2220      	movs	r2, #32
 80072a4:	e7e1      	b.n	800726a <__lo0bits+0x1e>
	...

080072a8 <__i2b>:
 80072a8:	b510      	push	{r4, lr}
 80072aa:	460c      	mov	r4, r1
 80072ac:	2101      	movs	r1, #1
 80072ae:	f7ff ff05 	bl	80070bc <_Balloc>
 80072b2:	4602      	mov	r2, r0
 80072b4:	b928      	cbnz	r0, 80072c2 <__i2b+0x1a>
 80072b6:	4b05      	ldr	r3, [pc, #20]	; (80072cc <__i2b+0x24>)
 80072b8:	4805      	ldr	r0, [pc, #20]	; (80072d0 <__i2b+0x28>)
 80072ba:	f240 1145 	movw	r1, #325	; 0x145
 80072be:	f000 fd1f 	bl	8007d00 <__assert_func>
 80072c2:	2301      	movs	r3, #1
 80072c4:	6144      	str	r4, [r0, #20]
 80072c6:	6103      	str	r3, [r0, #16]
 80072c8:	bd10      	pop	{r4, pc}
 80072ca:	bf00      	nop
 80072cc:	080084b0 	.word	0x080084b0
 80072d0:	080084c1 	.word	0x080084c1

080072d4 <__multiply>:
 80072d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d8:	4691      	mov	r9, r2
 80072da:	690a      	ldr	r2, [r1, #16]
 80072dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	bfb8      	it	lt
 80072e4:	460b      	movlt	r3, r1
 80072e6:	460c      	mov	r4, r1
 80072e8:	bfbc      	itt	lt
 80072ea:	464c      	movlt	r4, r9
 80072ec:	4699      	movlt	r9, r3
 80072ee:	6927      	ldr	r7, [r4, #16]
 80072f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072f4:	68a3      	ldr	r3, [r4, #8]
 80072f6:	6861      	ldr	r1, [r4, #4]
 80072f8:	eb07 060a 	add.w	r6, r7, sl
 80072fc:	42b3      	cmp	r3, r6
 80072fe:	b085      	sub	sp, #20
 8007300:	bfb8      	it	lt
 8007302:	3101      	addlt	r1, #1
 8007304:	f7ff feda 	bl	80070bc <_Balloc>
 8007308:	b930      	cbnz	r0, 8007318 <__multiply+0x44>
 800730a:	4602      	mov	r2, r0
 800730c:	4b44      	ldr	r3, [pc, #272]	; (8007420 <__multiply+0x14c>)
 800730e:	4845      	ldr	r0, [pc, #276]	; (8007424 <__multiply+0x150>)
 8007310:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007314:	f000 fcf4 	bl	8007d00 <__assert_func>
 8007318:	f100 0514 	add.w	r5, r0, #20
 800731c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007320:	462b      	mov	r3, r5
 8007322:	2200      	movs	r2, #0
 8007324:	4543      	cmp	r3, r8
 8007326:	d321      	bcc.n	800736c <__multiply+0x98>
 8007328:	f104 0314 	add.w	r3, r4, #20
 800732c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007330:	f109 0314 	add.w	r3, r9, #20
 8007334:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007338:	9202      	str	r2, [sp, #8]
 800733a:	1b3a      	subs	r2, r7, r4
 800733c:	3a15      	subs	r2, #21
 800733e:	f022 0203 	bic.w	r2, r2, #3
 8007342:	3204      	adds	r2, #4
 8007344:	f104 0115 	add.w	r1, r4, #21
 8007348:	428f      	cmp	r7, r1
 800734a:	bf38      	it	cc
 800734c:	2204      	movcc	r2, #4
 800734e:	9201      	str	r2, [sp, #4]
 8007350:	9a02      	ldr	r2, [sp, #8]
 8007352:	9303      	str	r3, [sp, #12]
 8007354:	429a      	cmp	r2, r3
 8007356:	d80c      	bhi.n	8007372 <__multiply+0x9e>
 8007358:	2e00      	cmp	r6, #0
 800735a:	dd03      	ble.n	8007364 <__multiply+0x90>
 800735c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007360:	2b00      	cmp	r3, #0
 8007362:	d05b      	beq.n	800741c <__multiply+0x148>
 8007364:	6106      	str	r6, [r0, #16]
 8007366:	b005      	add	sp, #20
 8007368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736c:	f843 2b04 	str.w	r2, [r3], #4
 8007370:	e7d8      	b.n	8007324 <__multiply+0x50>
 8007372:	f8b3 a000 	ldrh.w	sl, [r3]
 8007376:	f1ba 0f00 	cmp.w	sl, #0
 800737a:	d024      	beq.n	80073c6 <__multiply+0xf2>
 800737c:	f104 0e14 	add.w	lr, r4, #20
 8007380:	46a9      	mov	r9, r5
 8007382:	f04f 0c00 	mov.w	ip, #0
 8007386:	f85e 2b04 	ldr.w	r2, [lr], #4
 800738a:	f8d9 1000 	ldr.w	r1, [r9]
 800738e:	fa1f fb82 	uxth.w	fp, r2
 8007392:	b289      	uxth	r1, r1
 8007394:	fb0a 110b 	mla	r1, sl, fp, r1
 8007398:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800739c:	f8d9 2000 	ldr.w	r2, [r9]
 80073a0:	4461      	add	r1, ip
 80073a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80073aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073ae:	b289      	uxth	r1, r1
 80073b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073b4:	4577      	cmp	r7, lr
 80073b6:	f849 1b04 	str.w	r1, [r9], #4
 80073ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073be:	d8e2      	bhi.n	8007386 <__multiply+0xb2>
 80073c0:	9a01      	ldr	r2, [sp, #4]
 80073c2:	f845 c002 	str.w	ip, [r5, r2]
 80073c6:	9a03      	ldr	r2, [sp, #12]
 80073c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073cc:	3304      	adds	r3, #4
 80073ce:	f1b9 0f00 	cmp.w	r9, #0
 80073d2:	d021      	beq.n	8007418 <__multiply+0x144>
 80073d4:	6829      	ldr	r1, [r5, #0]
 80073d6:	f104 0c14 	add.w	ip, r4, #20
 80073da:	46ae      	mov	lr, r5
 80073dc:	f04f 0a00 	mov.w	sl, #0
 80073e0:	f8bc b000 	ldrh.w	fp, [ip]
 80073e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073e8:	fb09 220b 	mla	r2, r9, fp, r2
 80073ec:	4452      	add	r2, sl
 80073ee:	b289      	uxth	r1, r1
 80073f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073f4:	f84e 1b04 	str.w	r1, [lr], #4
 80073f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80073fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007400:	f8be 1000 	ldrh.w	r1, [lr]
 8007404:	fb09 110a 	mla	r1, r9, sl, r1
 8007408:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800740c:	4567      	cmp	r7, ip
 800740e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007412:	d8e5      	bhi.n	80073e0 <__multiply+0x10c>
 8007414:	9a01      	ldr	r2, [sp, #4]
 8007416:	50a9      	str	r1, [r5, r2]
 8007418:	3504      	adds	r5, #4
 800741a:	e799      	b.n	8007350 <__multiply+0x7c>
 800741c:	3e01      	subs	r6, #1
 800741e:	e79b      	b.n	8007358 <__multiply+0x84>
 8007420:	080084b0 	.word	0x080084b0
 8007424:	080084c1 	.word	0x080084c1

08007428 <__pow5mult>:
 8007428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800742c:	4615      	mov	r5, r2
 800742e:	f012 0203 	ands.w	r2, r2, #3
 8007432:	4606      	mov	r6, r0
 8007434:	460f      	mov	r7, r1
 8007436:	d007      	beq.n	8007448 <__pow5mult+0x20>
 8007438:	4c25      	ldr	r4, [pc, #148]	; (80074d0 <__pow5mult+0xa8>)
 800743a:	3a01      	subs	r2, #1
 800743c:	2300      	movs	r3, #0
 800743e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007442:	f7ff fe9d 	bl	8007180 <__multadd>
 8007446:	4607      	mov	r7, r0
 8007448:	10ad      	asrs	r5, r5, #2
 800744a:	d03d      	beq.n	80074c8 <__pow5mult+0xa0>
 800744c:	69f4      	ldr	r4, [r6, #28]
 800744e:	b97c      	cbnz	r4, 8007470 <__pow5mult+0x48>
 8007450:	2010      	movs	r0, #16
 8007452:	f7ff fd7f 	bl	8006f54 <malloc>
 8007456:	4602      	mov	r2, r0
 8007458:	61f0      	str	r0, [r6, #28]
 800745a:	b928      	cbnz	r0, 8007468 <__pow5mult+0x40>
 800745c:	4b1d      	ldr	r3, [pc, #116]	; (80074d4 <__pow5mult+0xac>)
 800745e:	481e      	ldr	r0, [pc, #120]	; (80074d8 <__pow5mult+0xb0>)
 8007460:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007464:	f000 fc4c 	bl	8007d00 <__assert_func>
 8007468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800746c:	6004      	str	r4, [r0, #0]
 800746e:	60c4      	str	r4, [r0, #12]
 8007470:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007478:	b94c      	cbnz	r4, 800748e <__pow5mult+0x66>
 800747a:	f240 2171 	movw	r1, #625	; 0x271
 800747e:	4630      	mov	r0, r6
 8007480:	f7ff ff12 	bl	80072a8 <__i2b>
 8007484:	2300      	movs	r3, #0
 8007486:	f8c8 0008 	str.w	r0, [r8, #8]
 800748a:	4604      	mov	r4, r0
 800748c:	6003      	str	r3, [r0, #0]
 800748e:	f04f 0900 	mov.w	r9, #0
 8007492:	07eb      	lsls	r3, r5, #31
 8007494:	d50a      	bpl.n	80074ac <__pow5mult+0x84>
 8007496:	4639      	mov	r1, r7
 8007498:	4622      	mov	r2, r4
 800749a:	4630      	mov	r0, r6
 800749c:	f7ff ff1a 	bl	80072d4 <__multiply>
 80074a0:	4639      	mov	r1, r7
 80074a2:	4680      	mov	r8, r0
 80074a4:	4630      	mov	r0, r6
 80074a6:	f7ff fe49 	bl	800713c <_Bfree>
 80074aa:	4647      	mov	r7, r8
 80074ac:	106d      	asrs	r5, r5, #1
 80074ae:	d00b      	beq.n	80074c8 <__pow5mult+0xa0>
 80074b0:	6820      	ldr	r0, [r4, #0]
 80074b2:	b938      	cbnz	r0, 80074c4 <__pow5mult+0x9c>
 80074b4:	4622      	mov	r2, r4
 80074b6:	4621      	mov	r1, r4
 80074b8:	4630      	mov	r0, r6
 80074ba:	f7ff ff0b 	bl	80072d4 <__multiply>
 80074be:	6020      	str	r0, [r4, #0]
 80074c0:	f8c0 9000 	str.w	r9, [r0]
 80074c4:	4604      	mov	r4, r0
 80074c6:	e7e4      	b.n	8007492 <__pow5mult+0x6a>
 80074c8:	4638      	mov	r0, r7
 80074ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ce:	bf00      	nop
 80074d0:	08008610 	.word	0x08008610
 80074d4:	08008441 	.word	0x08008441
 80074d8:	080084c1 	.word	0x080084c1

080074dc <__lshift>:
 80074dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e0:	460c      	mov	r4, r1
 80074e2:	6849      	ldr	r1, [r1, #4]
 80074e4:	6923      	ldr	r3, [r4, #16]
 80074e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074ea:	68a3      	ldr	r3, [r4, #8]
 80074ec:	4607      	mov	r7, r0
 80074ee:	4691      	mov	r9, r2
 80074f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074f4:	f108 0601 	add.w	r6, r8, #1
 80074f8:	42b3      	cmp	r3, r6
 80074fa:	db0b      	blt.n	8007514 <__lshift+0x38>
 80074fc:	4638      	mov	r0, r7
 80074fe:	f7ff fddd 	bl	80070bc <_Balloc>
 8007502:	4605      	mov	r5, r0
 8007504:	b948      	cbnz	r0, 800751a <__lshift+0x3e>
 8007506:	4602      	mov	r2, r0
 8007508:	4b28      	ldr	r3, [pc, #160]	; (80075ac <__lshift+0xd0>)
 800750a:	4829      	ldr	r0, [pc, #164]	; (80075b0 <__lshift+0xd4>)
 800750c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007510:	f000 fbf6 	bl	8007d00 <__assert_func>
 8007514:	3101      	adds	r1, #1
 8007516:	005b      	lsls	r3, r3, #1
 8007518:	e7ee      	b.n	80074f8 <__lshift+0x1c>
 800751a:	2300      	movs	r3, #0
 800751c:	f100 0114 	add.w	r1, r0, #20
 8007520:	f100 0210 	add.w	r2, r0, #16
 8007524:	4618      	mov	r0, r3
 8007526:	4553      	cmp	r3, sl
 8007528:	db33      	blt.n	8007592 <__lshift+0xb6>
 800752a:	6920      	ldr	r0, [r4, #16]
 800752c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007530:	f104 0314 	add.w	r3, r4, #20
 8007534:	f019 091f 	ands.w	r9, r9, #31
 8007538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800753c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007540:	d02b      	beq.n	800759a <__lshift+0xbe>
 8007542:	f1c9 0e20 	rsb	lr, r9, #32
 8007546:	468a      	mov	sl, r1
 8007548:	2200      	movs	r2, #0
 800754a:	6818      	ldr	r0, [r3, #0]
 800754c:	fa00 f009 	lsl.w	r0, r0, r9
 8007550:	4310      	orrs	r0, r2
 8007552:	f84a 0b04 	str.w	r0, [sl], #4
 8007556:	f853 2b04 	ldr.w	r2, [r3], #4
 800755a:	459c      	cmp	ip, r3
 800755c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007560:	d8f3      	bhi.n	800754a <__lshift+0x6e>
 8007562:	ebac 0304 	sub.w	r3, ip, r4
 8007566:	3b15      	subs	r3, #21
 8007568:	f023 0303 	bic.w	r3, r3, #3
 800756c:	3304      	adds	r3, #4
 800756e:	f104 0015 	add.w	r0, r4, #21
 8007572:	4584      	cmp	ip, r0
 8007574:	bf38      	it	cc
 8007576:	2304      	movcc	r3, #4
 8007578:	50ca      	str	r2, [r1, r3]
 800757a:	b10a      	cbz	r2, 8007580 <__lshift+0xa4>
 800757c:	f108 0602 	add.w	r6, r8, #2
 8007580:	3e01      	subs	r6, #1
 8007582:	4638      	mov	r0, r7
 8007584:	612e      	str	r6, [r5, #16]
 8007586:	4621      	mov	r1, r4
 8007588:	f7ff fdd8 	bl	800713c <_Bfree>
 800758c:	4628      	mov	r0, r5
 800758e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007592:	f842 0f04 	str.w	r0, [r2, #4]!
 8007596:	3301      	adds	r3, #1
 8007598:	e7c5      	b.n	8007526 <__lshift+0x4a>
 800759a:	3904      	subs	r1, #4
 800759c:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80075a4:	459c      	cmp	ip, r3
 80075a6:	d8f9      	bhi.n	800759c <__lshift+0xc0>
 80075a8:	e7ea      	b.n	8007580 <__lshift+0xa4>
 80075aa:	bf00      	nop
 80075ac:	080084b0 	.word	0x080084b0
 80075b0:	080084c1 	.word	0x080084c1

080075b4 <__mcmp>:
 80075b4:	b530      	push	{r4, r5, lr}
 80075b6:	6902      	ldr	r2, [r0, #16]
 80075b8:	690c      	ldr	r4, [r1, #16]
 80075ba:	1b12      	subs	r2, r2, r4
 80075bc:	d10e      	bne.n	80075dc <__mcmp+0x28>
 80075be:	f100 0314 	add.w	r3, r0, #20
 80075c2:	3114      	adds	r1, #20
 80075c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075d4:	42a5      	cmp	r5, r4
 80075d6:	d003      	beq.n	80075e0 <__mcmp+0x2c>
 80075d8:	d305      	bcc.n	80075e6 <__mcmp+0x32>
 80075da:	2201      	movs	r2, #1
 80075dc:	4610      	mov	r0, r2
 80075de:	bd30      	pop	{r4, r5, pc}
 80075e0:	4283      	cmp	r3, r0
 80075e2:	d3f3      	bcc.n	80075cc <__mcmp+0x18>
 80075e4:	e7fa      	b.n	80075dc <__mcmp+0x28>
 80075e6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ea:	e7f7      	b.n	80075dc <__mcmp+0x28>

080075ec <__mdiff>:
 80075ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f0:	460c      	mov	r4, r1
 80075f2:	4606      	mov	r6, r0
 80075f4:	4611      	mov	r1, r2
 80075f6:	4620      	mov	r0, r4
 80075f8:	4690      	mov	r8, r2
 80075fa:	f7ff ffdb 	bl	80075b4 <__mcmp>
 80075fe:	1e05      	subs	r5, r0, #0
 8007600:	d110      	bne.n	8007624 <__mdiff+0x38>
 8007602:	4629      	mov	r1, r5
 8007604:	4630      	mov	r0, r6
 8007606:	f7ff fd59 	bl	80070bc <_Balloc>
 800760a:	b930      	cbnz	r0, 800761a <__mdiff+0x2e>
 800760c:	4b3a      	ldr	r3, [pc, #232]	; (80076f8 <__mdiff+0x10c>)
 800760e:	4602      	mov	r2, r0
 8007610:	f240 2137 	movw	r1, #567	; 0x237
 8007614:	4839      	ldr	r0, [pc, #228]	; (80076fc <__mdiff+0x110>)
 8007616:	f000 fb73 	bl	8007d00 <__assert_func>
 800761a:	2301      	movs	r3, #1
 800761c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007624:	bfa4      	itt	ge
 8007626:	4643      	movge	r3, r8
 8007628:	46a0      	movge	r8, r4
 800762a:	4630      	mov	r0, r6
 800762c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007630:	bfa6      	itte	ge
 8007632:	461c      	movge	r4, r3
 8007634:	2500      	movge	r5, #0
 8007636:	2501      	movlt	r5, #1
 8007638:	f7ff fd40 	bl	80070bc <_Balloc>
 800763c:	b920      	cbnz	r0, 8007648 <__mdiff+0x5c>
 800763e:	4b2e      	ldr	r3, [pc, #184]	; (80076f8 <__mdiff+0x10c>)
 8007640:	4602      	mov	r2, r0
 8007642:	f240 2145 	movw	r1, #581	; 0x245
 8007646:	e7e5      	b.n	8007614 <__mdiff+0x28>
 8007648:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800764c:	6926      	ldr	r6, [r4, #16]
 800764e:	60c5      	str	r5, [r0, #12]
 8007650:	f104 0914 	add.w	r9, r4, #20
 8007654:	f108 0514 	add.w	r5, r8, #20
 8007658:	f100 0e14 	add.w	lr, r0, #20
 800765c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007660:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007664:	f108 0210 	add.w	r2, r8, #16
 8007668:	46f2      	mov	sl, lr
 800766a:	2100      	movs	r1, #0
 800766c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007670:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007674:	fa11 f88b 	uxtah	r8, r1, fp
 8007678:	b299      	uxth	r1, r3
 800767a:	0c1b      	lsrs	r3, r3, #16
 800767c:	eba8 0801 	sub.w	r8, r8, r1
 8007680:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007684:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007688:	fa1f f888 	uxth.w	r8, r8
 800768c:	1419      	asrs	r1, r3, #16
 800768e:	454e      	cmp	r6, r9
 8007690:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007694:	f84a 3b04 	str.w	r3, [sl], #4
 8007698:	d8e8      	bhi.n	800766c <__mdiff+0x80>
 800769a:	1b33      	subs	r3, r6, r4
 800769c:	3b15      	subs	r3, #21
 800769e:	f023 0303 	bic.w	r3, r3, #3
 80076a2:	3304      	adds	r3, #4
 80076a4:	3415      	adds	r4, #21
 80076a6:	42a6      	cmp	r6, r4
 80076a8:	bf38      	it	cc
 80076aa:	2304      	movcc	r3, #4
 80076ac:	441d      	add	r5, r3
 80076ae:	4473      	add	r3, lr
 80076b0:	469e      	mov	lr, r3
 80076b2:	462e      	mov	r6, r5
 80076b4:	4566      	cmp	r6, ip
 80076b6:	d30e      	bcc.n	80076d6 <__mdiff+0xea>
 80076b8:	f10c 0203 	add.w	r2, ip, #3
 80076bc:	1b52      	subs	r2, r2, r5
 80076be:	f022 0203 	bic.w	r2, r2, #3
 80076c2:	3d03      	subs	r5, #3
 80076c4:	45ac      	cmp	ip, r5
 80076c6:	bf38      	it	cc
 80076c8:	2200      	movcc	r2, #0
 80076ca:	4413      	add	r3, r2
 80076cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80076d0:	b17a      	cbz	r2, 80076f2 <__mdiff+0x106>
 80076d2:	6107      	str	r7, [r0, #16]
 80076d4:	e7a4      	b.n	8007620 <__mdiff+0x34>
 80076d6:	f856 8b04 	ldr.w	r8, [r6], #4
 80076da:	fa11 f288 	uxtah	r2, r1, r8
 80076de:	1414      	asrs	r4, r2, #16
 80076e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80076e4:	b292      	uxth	r2, r2
 80076e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80076ea:	f84e 2b04 	str.w	r2, [lr], #4
 80076ee:	1421      	asrs	r1, r4, #16
 80076f0:	e7e0      	b.n	80076b4 <__mdiff+0xc8>
 80076f2:	3f01      	subs	r7, #1
 80076f4:	e7ea      	b.n	80076cc <__mdiff+0xe0>
 80076f6:	bf00      	nop
 80076f8:	080084b0 	.word	0x080084b0
 80076fc:	080084c1 	.word	0x080084c1

08007700 <__d2b>:
 8007700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007704:	460f      	mov	r7, r1
 8007706:	2101      	movs	r1, #1
 8007708:	ec59 8b10 	vmov	r8, r9, d0
 800770c:	4616      	mov	r6, r2
 800770e:	f7ff fcd5 	bl	80070bc <_Balloc>
 8007712:	4604      	mov	r4, r0
 8007714:	b930      	cbnz	r0, 8007724 <__d2b+0x24>
 8007716:	4602      	mov	r2, r0
 8007718:	4b24      	ldr	r3, [pc, #144]	; (80077ac <__d2b+0xac>)
 800771a:	4825      	ldr	r0, [pc, #148]	; (80077b0 <__d2b+0xb0>)
 800771c:	f240 310f 	movw	r1, #783	; 0x30f
 8007720:	f000 faee 	bl	8007d00 <__assert_func>
 8007724:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007728:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800772c:	bb2d      	cbnz	r5, 800777a <__d2b+0x7a>
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	f1b8 0300 	subs.w	r3, r8, #0
 8007734:	d026      	beq.n	8007784 <__d2b+0x84>
 8007736:	4668      	mov	r0, sp
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	f7ff fd87 	bl	800724c <__lo0bits>
 800773e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007742:	b1e8      	cbz	r0, 8007780 <__d2b+0x80>
 8007744:	f1c0 0320 	rsb	r3, r0, #32
 8007748:	fa02 f303 	lsl.w	r3, r2, r3
 800774c:	430b      	orrs	r3, r1
 800774e:	40c2      	lsrs	r2, r0
 8007750:	6163      	str	r3, [r4, #20]
 8007752:	9201      	str	r2, [sp, #4]
 8007754:	9b01      	ldr	r3, [sp, #4]
 8007756:	61a3      	str	r3, [r4, #24]
 8007758:	2b00      	cmp	r3, #0
 800775a:	bf14      	ite	ne
 800775c:	2202      	movne	r2, #2
 800775e:	2201      	moveq	r2, #1
 8007760:	6122      	str	r2, [r4, #16]
 8007762:	b1bd      	cbz	r5, 8007794 <__d2b+0x94>
 8007764:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007768:	4405      	add	r5, r0
 800776a:	603d      	str	r5, [r7, #0]
 800776c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007770:	6030      	str	r0, [r6, #0]
 8007772:	4620      	mov	r0, r4
 8007774:	b003      	add	sp, #12
 8007776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800777a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800777e:	e7d6      	b.n	800772e <__d2b+0x2e>
 8007780:	6161      	str	r1, [r4, #20]
 8007782:	e7e7      	b.n	8007754 <__d2b+0x54>
 8007784:	a801      	add	r0, sp, #4
 8007786:	f7ff fd61 	bl	800724c <__lo0bits>
 800778a:	9b01      	ldr	r3, [sp, #4]
 800778c:	6163      	str	r3, [r4, #20]
 800778e:	3020      	adds	r0, #32
 8007790:	2201      	movs	r2, #1
 8007792:	e7e5      	b.n	8007760 <__d2b+0x60>
 8007794:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007798:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800779c:	6038      	str	r0, [r7, #0]
 800779e:	6918      	ldr	r0, [r3, #16]
 80077a0:	f7ff fd34 	bl	800720c <__hi0bits>
 80077a4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077a8:	e7e2      	b.n	8007770 <__d2b+0x70>
 80077aa:	bf00      	nop
 80077ac:	080084b0 	.word	0x080084b0
 80077b0:	080084c1 	.word	0x080084c1

080077b4 <__sfputc_r>:
 80077b4:	6893      	ldr	r3, [r2, #8]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	b410      	push	{r4}
 80077bc:	6093      	str	r3, [r2, #8]
 80077be:	da08      	bge.n	80077d2 <__sfputc_r+0x1e>
 80077c0:	6994      	ldr	r4, [r2, #24]
 80077c2:	42a3      	cmp	r3, r4
 80077c4:	db01      	blt.n	80077ca <__sfputc_r+0x16>
 80077c6:	290a      	cmp	r1, #10
 80077c8:	d103      	bne.n	80077d2 <__sfputc_r+0x1e>
 80077ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077ce:	f000 b9e3 	b.w	8007b98 <__swbuf_r>
 80077d2:	6813      	ldr	r3, [r2, #0]
 80077d4:	1c58      	adds	r0, r3, #1
 80077d6:	6010      	str	r0, [r2, #0]
 80077d8:	7019      	strb	r1, [r3, #0]
 80077da:	4608      	mov	r0, r1
 80077dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <__sfputs_r>:
 80077e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e4:	4606      	mov	r6, r0
 80077e6:	460f      	mov	r7, r1
 80077e8:	4614      	mov	r4, r2
 80077ea:	18d5      	adds	r5, r2, r3
 80077ec:	42ac      	cmp	r4, r5
 80077ee:	d101      	bne.n	80077f4 <__sfputs_r+0x12>
 80077f0:	2000      	movs	r0, #0
 80077f2:	e007      	b.n	8007804 <__sfputs_r+0x22>
 80077f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f8:	463a      	mov	r2, r7
 80077fa:	4630      	mov	r0, r6
 80077fc:	f7ff ffda 	bl	80077b4 <__sfputc_r>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	d1f3      	bne.n	80077ec <__sfputs_r+0xa>
 8007804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007808 <_vfiprintf_r>:
 8007808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800780c:	460d      	mov	r5, r1
 800780e:	b09d      	sub	sp, #116	; 0x74
 8007810:	4614      	mov	r4, r2
 8007812:	4698      	mov	r8, r3
 8007814:	4606      	mov	r6, r0
 8007816:	b118      	cbz	r0, 8007820 <_vfiprintf_r+0x18>
 8007818:	6a03      	ldr	r3, [r0, #32]
 800781a:	b90b      	cbnz	r3, 8007820 <_vfiprintf_r+0x18>
 800781c:	f7fe fbc8 	bl	8005fb0 <__sinit>
 8007820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007822:	07d9      	lsls	r1, r3, #31
 8007824:	d405      	bmi.n	8007832 <_vfiprintf_r+0x2a>
 8007826:	89ab      	ldrh	r3, [r5, #12]
 8007828:	059a      	lsls	r2, r3, #22
 800782a:	d402      	bmi.n	8007832 <_vfiprintf_r+0x2a>
 800782c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800782e:	f7fe fcc8 	bl	80061c2 <__retarget_lock_acquire_recursive>
 8007832:	89ab      	ldrh	r3, [r5, #12]
 8007834:	071b      	lsls	r3, r3, #28
 8007836:	d501      	bpl.n	800783c <_vfiprintf_r+0x34>
 8007838:	692b      	ldr	r3, [r5, #16]
 800783a:	b99b      	cbnz	r3, 8007864 <_vfiprintf_r+0x5c>
 800783c:	4629      	mov	r1, r5
 800783e:	4630      	mov	r0, r6
 8007840:	f000 f9e8 	bl	8007c14 <__swsetup_r>
 8007844:	b170      	cbz	r0, 8007864 <_vfiprintf_r+0x5c>
 8007846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007848:	07dc      	lsls	r4, r3, #31
 800784a:	d504      	bpl.n	8007856 <_vfiprintf_r+0x4e>
 800784c:	f04f 30ff 	mov.w	r0, #4294967295
 8007850:	b01d      	add	sp, #116	; 0x74
 8007852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007856:	89ab      	ldrh	r3, [r5, #12]
 8007858:	0598      	lsls	r0, r3, #22
 800785a:	d4f7      	bmi.n	800784c <_vfiprintf_r+0x44>
 800785c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800785e:	f7fe fcb1 	bl	80061c4 <__retarget_lock_release_recursive>
 8007862:	e7f3      	b.n	800784c <_vfiprintf_r+0x44>
 8007864:	2300      	movs	r3, #0
 8007866:	9309      	str	r3, [sp, #36]	; 0x24
 8007868:	2320      	movs	r3, #32
 800786a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800786e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007872:	2330      	movs	r3, #48	; 0x30
 8007874:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007a28 <_vfiprintf_r+0x220>
 8007878:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800787c:	f04f 0901 	mov.w	r9, #1
 8007880:	4623      	mov	r3, r4
 8007882:	469a      	mov	sl, r3
 8007884:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007888:	b10a      	cbz	r2, 800788e <_vfiprintf_r+0x86>
 800788a:	2a25      	cmp	r2, #37	; 0x25
 800788c:	d1f9      	bne.n	8007882 <_vfiprintf_r+0x7a>
 800788e:	ebba 0b04 	subs.w	fp, sl, r4
 8007892:	d00b      	beq.n	80078ac <_vfiprintf_r+0xa4>
 8007894:	465b      	mov	r3, fp
 8007896:	4622      	mov	r2, r4
 8007898:	4629      	mov	r1, r5
 800789a:	4630      	mov	r0, r6
 800789c:	f7ff ffa1 	bl	80077e2 <__sfputs_r>
 80078a0:	3001      	adds	r0, #1
 80078a2:	f000 80a9 	beq.w	80079f8 <_vfiprintf_r+0x1f0>
 80078a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078a8:	445a      	add	r2, fp
 80078aa:	9209      	str	r2, [sp, #36]	; 0x24
 80078ac:	f89a 3000 	ldrb.w	r3, [sl]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 80a1 	beq.w	80079f8 <_vfiprintf_r+0x1f0>
 80078b6:	2300      	movs	r3, #0
 80078b8:	f04f 32ff 	mov.w	r2, #4294967295
 80078bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078c0:	f10a 0a01 	add.w	sl, sl, #1
 80078c4:	9304      	str	r3, [sp, #16]
 80078c6:	9307      	str	r3, [sp, #28]
 80078c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078cc:	931a      	str	r3, [sp, #104]	; 0x68
 80078ce:	4654      	mov	r4, sl
 80078d0:	2205      	movs	r2, #5
 80078d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d6:	4854      	ldr	r0, [pc, #336]	; (8007a28 <_vfiprintf_r+0x220>)
 80078d8:	f7f8 fc7a 	bl	80001d0 <memchr>
 80078dc:	9a04      	ldr	r2, [sp, #16]
 80078de:	b9d8      	cbnz	r0, 8007918 <_vfiprintf_r+0x110>
 80078e0:	06d1      	lsls	r1, r2, #27
 80078e2:	bf44      	itt	mi
 80078e4:	2320      	movmi	r3, #32
 80078e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078ea:	0713      	lsls	r3, r2, #28
 80078ec:	bf44      	itt	mi
 80078ee:	232b      	movmi	r3, #43	; 0x2b
 80078f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078f4:	f89a 3000 	ldrb.w	r3, [sl]
 80078f8:	2b2a      	cmp	r3, #42	; 0x2a
 80078fa:	d015      	beq.n	8007928 <_vfiprintf_r+0x120>
 80078fc:	9a07      	ldr	r2, [sp, #28]
 80078fe:	4654      	mov	r4, sl
 8007900:	2000      	movs	r0, #0
 8007902:	f04f 0c0a 	mov.w	ip, #10
 8007906:	4621      	mov	r1, r4
 8007908:	f811 3b01 	ldrb.w	r3, [r1], #1
 800790c:	3b30      	subs	r3, #48	; 0x30
 800790e:	2b09      	cmp	r3, #9
 8007910:	d94d      	bls.n	80079ae <_vfiprintf_r+0x1a6>
 8007912:	b1b0      	cbz	r0, 8007942 <_vfiprintf_r+0x13a>
 8007914:	9207      	str	r2, [sp, #28]
 8007916:	e014      	b.n	8007942 <_vfiprintf_r+0x13a>
 8007918:	eba0 0308 	sub.w	r3, r0, r8
 800791c:	fa09 f303 	lsl.w	r3, r9, r3
 8007920:	4313      	orrs	r3, r2
 8007922:	9304      	str	r3, [sp, #16]
 8007924:	46a2      	mov	sl, r4
 8007926:	e7d2      	b.n	80078ce <_vfiprintf_r+0xc6>
 8007928:	9b03      	ldr	r3, [sp, #12]
 800792a:	1d19      	adds	r1, r3, #4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	9103      	str	r1, [sp, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	bfbb      	ittet	lt
 8007934:	425b      	neglt	r3, r3
 8007936:	f042 0202 	orrlt.w	r2, r2, #2
 800793a:	9307      	strge	r3, [sp, #28]
 800793c:	9307      	strlt	r3, [sp, #28]
 800793e:	bfb8      	it	lt
 8007940:	9204      	strlt	r2, [sp, #16]
 8007942:	7823      	ldrb	r3, [r4, #0]
 8007944:	2b2e      	cmp	r3, #46	; 0x2e
 8007946:	d10c      	bne.n	8007962 <_vfiprintf_r+0x15a>
 8007948:	7863      	ldrb	r3, [r4, #1]
 800794a:	2b2a      	cmp	r3, #42	; 0x2a
 800794c:	d134      	bne.n	80079b8 <_vfiprintf_r+0x1b0>
 800794e:	9b03      	ldr	r3, [sp, #12]
 8007950:	1d1a      	adds	r2, r3, #4
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	9203      	str	r2, [sp, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	bfb8      	it	lt
 800795a:	f04f 33ff 	movlt.w	r3, #4294967295
 800795e:	3402      	adds	r4, #2
 8007960:	9305      	str	r3, [sp, #20]
 8007962:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007a38 <_vfiprintf_r+0x230>
 8007966:	7821      	ldrb	r1, [r4, #0]
 8007968:	2203      	movs	r2, #3
 800796a:	4650      	mov	r0, sl
 800796c:	f7f8 fc30 	bl	80001d0 <memchr>
 8007970:	b138      	cbz	r0, 8007982 <_vfiprintf_r+0x17a>
 8007972:	9b04      	ldr	r3, [sp, #16]
 8007974:	eba0 000a 	sub.w	r0, r0, sl
 8007978:	2240      	movs	r2, #64	; 0x40
 800797a:	4082      	lsls	r2, r0
 800797c:	4313      	orrs	r3, r2
 800797e:	3401      	adds	r4, #1
 8007980:	9304      	str	r3, [sp, #16]
 8007982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007986:	4829      	ldr	r0, [pc, #164]	; (8007a2c <_vfiprintf_r+0x224>)
 8007988:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800798c:	2206      	movs	r2, #6
 800798e:	f7f8 fc1f 	bl	80001d0 <memchr>
 8007992:	2800      	cmp	r0, #0
 8007994:	d03f      	beq.n	8007a16 <_vfiprintf_r+0x20e>
 8007996:	4b26      	ldr	r3, [pc, #152]	; (8007a30 <_vfiprintf_r+0x228>)
 8007998:	bb1b      	cbnz	r3, 80079e2 <_vfiprintf_r+0x1da>
 800799a:	9b03      	ldr	r3, [sp, #12]
 800799c:	3307      	adds	r3, #7
 800799e:	f023 0307 	bic.w	r3, r3, #7
 80079a2:	3308      	adds	r3, #8
 80079a4:	9303      	str	r3, [sp, #12]
 80079a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a8:	443b      	add	r3, r7
 80079aa:	9309      	str	r3, [sp, #36]	; 0x24
 80079ac:	e768      	b.n	8007880 <_vfiprintf_r+0x78>
 80079ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80079b2:	460c      	mov	r4, r1
 80079b4:	2001      	movs	r0, #1
 80079b6:	e7a6      	b.n	8007906 <_vfiprintf_r+0xfe>
 80079b8:	2300      	movs	r3, #0
 80079ba:	3401      	adds	r4, #1
 80079bc:	9305      	str	r3, [sp, #20]
 80079be:	4619      	mov	r1, r3
 80079c0:	f04f 0c0a 	mov.w	ip, #10
 80079c4:	4620      	mov	r0, r4
 80079c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079ca:	3a30      	subs	r2, #48	; 0x30
 80079cc:	2a09      	cmp	r2, #9
 80079ce:	d903      	bls.n	80079d8 <_vfiprintf_r+0x1d0>
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0c6      	beq.n	8007962 <_vfiprintf_r+0x15a>
 80079d4:	9105      	str	r1, [sp, #20]
 80079d6:	e7c4      	b.n	8007962 <_vfiprintf_r+0x15a>
 80079d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80079dc:	4604      	mov	r4, r0
 80079de:	2301      	movs	r3, #1
 80079e0:	e7f0      	b.n	80079c4 <_vfiprintf_r+0x1bc>
 80079e2:	ab03      	add	r3, sp, #12
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	462a      	mov	r2, r5
 80079e8:	4b12      	ldr	r3, [pc, #72]	; (8007a34 <_vfiprintf_r+0x22c>)
 80079ea:	a904      	add	r1, sp, #16
 80079ec:	4630      	mov	r0, r6
 80079ee:	f7fd fe8d 	bl	800570c <_printf_float>
 80079f2:	4607      	mov	r7, r0
 80079f4:	1c78      	adds	r0, r7, #1
 80079f6:	d1d6      	bne.n	80079a6 <_vfiprintf_r+0x19e>
 80079f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079fa:	07d9      	lsls	r1, r3, #31
 80079fc:	d405      	bmi.n	8007a0a <_vfiprintf_r+0x202>
 80079fe:	89ab      	ldrh	r3, [r5, #12]
 8007a00:	059a      	lsls	r2, r3, #22
 8007a02:	d402      	bmi.n	8007a0a <_vfiprintf_r+0x202>
 8007a04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a06:	f7fe fbdd 	bl	80061c4 <__retarget_lock_release_recursive>
 8007a0a:	89ab      	ldrh	r3, [r5, #12]
 8007a0c:	065b      	lsls	r3, r3, #25
 8007a0e:	f53f af1d 	bmi.w	800784c <_vfiprintf_r+0x44>
 8007a12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a14:	e71c      	b.n	8007850 <_vfiprintf_r+0x48>
 8007a16:	ab03      	add	r3, sp, #12
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	462a      	mov	r2, r5
 8007a1c:	4b05      	ldr	r3, [pc, #20]	; (8007a34 <_vfiprintf_r+0x22c>)
 8007a1e:	a904      	add	r1, sp, #16
 8007a20:	4630      	mov	r0, r6
 8007a22:	f7fe f917 	bl	8005c54 <_printf_i>
 8007a26:	e7e4      	b.n	80079f2 <_vfiprintf_r+0x1ea>
 8007a28:	0800861c 	.word	0x0800861c
 8007a2c:	08008626 	.word	0x08008626
 8007a30:	0800570d 	.word	0x0800570d
 8007a34:	080077e3 	.word	0x080077e3
 8007a38:	08008622 	.word	0x08008622

08007a3c <__sflush_r>:
 8007a3c:	898a      	ldrh	r2, [r1, #12]
 8007a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a42:	4605      	mov	r5, r0
 8007a44:	0710      	lsls	r0, r2, #28
 8007a46:	460c      	mov	r4, r1
 8007a48:	d458      	bmi.n	8007afc <__sflush_r+0xc0>
 8007a4a:	684b      	ldr	r3, [r1, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	dc05      	bgt.n	8007a5c <__sflush_r+0x20>
 8007a50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	dc02      	bgt.n	8007a5c <__sflush_r+0x20>
 8007a56:	2000      	movs	r0, #0
 8007a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a5e:	2e00      	cmp	r6, #0
 8007a60:	d0f9      	beq.n	8007a56 <__sflush_r+0x1a>
 8007a62:	2300      	movs	r3, #0
 8007a64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a68:	682f      	ldr	r7, [r5, #0]
 8007a6a:	6a21      	ldr	r1, [r4, #32]
 8007a6c:	602b      	str	r3, [r5, #0]
 8007a6e:	d032      	beq.n	8007ad6 <__sflush_r+0x9a>
 8007a70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	075a      	lsls	r2, r3, #29
 8007a76:	d505      	bpl.n	8007a84 <__sflush_r+0x48>
 8007a78:	6863      	ldr	r3, [r4, #4]
 8007a7a:	1ac0      	subs	r0, r0, r3
 8007a7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a7e:	b10b      	cbz	r3, 8007a84 <__sflush_r+0x48>
 8007a80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a82:	1ac0      	subs	r0, r0, r3
 8007a84:	2300      	movs	r3, #0
 8007a86:	4602      	mov	r2, r0
 8007a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a8a:	6a21      	ldr	r1, [r4, #32]
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	47b0      	blx	r6
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	d106      	bne.n	8007aa4 <__sflush_r+0x68>
 8007a96:	6829      	ldr	r1, [r5, #0]
 8007a98:	291d      	cmp	r1, #29
 8007a9a:	d82b      	bhi.n	8007af4 <__sflush_r+0xb8>
 8007a9c:	4a29      	ldr	r2, [pc, #164]	; (8007b44 <__sflush_r+0x108>)
 8007a9e:	410a      	asrs	r2, r1
 8007aa0:	07d6      	lsls	r6, r2, #31
 8007aa2:	d427      	bmi.n	8007af4 <__sflush_r+0xb8>
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	6062      	str	r2, [r4, #4]
 8007aa8:	04d9      	lsls	r1, r3, #19
 8007aaa:	6922      	ldr	r2, [r4, #16]
 8007aac:	6022      	str	r2, [r4, #0]
 8007aae:	d504      	bpl.n	8007aba <__sflush_r+0x7e>
 8007ab0:	1c42      	adds	r2, r0, #1
 8007ab2:	d101      	bne.n	8007ab8 <__sflush_r+0x7c>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b903      	cbnz	r3, 8007aba <__sflush_r+0x7e>
 8007ab8:	6560      	str	r0, [r4, #84]	; 0x54
 8007aba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007abc:	602f      	str	r7, [r5, #0]
 8007abe:	2900      	cmp	r1, #0
 8007ac0:	d0c9      	beq.n	8007a56 <__sflush_r+0x1a>
 8007ac2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ac6:	4299      	cmp	r1, r3
 8007ac8:	d002      	beq.n	8007ad0 <__sflush_r+0x94>
 8007aca:	4628      	mov	r0, r5
 8007acc:	f7ff f9f6 	bl	8006ebc <_free_r>
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	6360      	str	r0, [r4, #52]	; 0x34
 8007ad4:	e7c0      	b.n	8007a58 <__sflush_r+0x1c>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	4628      	mov	r0, r5
 8007ada:	47b0      	blx	r6
 8007adc:	1c41      	adds	r1, r0, #1
 8007ade:	d1c8      	bne.n	8007a72 <__sflush_r+0x36>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0c5      	beq.n	8007a72 <__sflush_r+0x36>
 8007ae6:	2b1d      	cmp	r3, #29
 8007ae8:	d001      	beq.n	8007aee <__sflush_r+0xb2>
 8007aea:	2b16      	cmp	r3, #22
 8007aec:	d101      	bne.n	8007af2 <__sflush_r+0xb6>
 8007aee:	602f      	str	r7, [r5, #0]
 8007af0:	e7b1      	b.n	8007a56 <__sflush_r+0x1a>
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af8:	81a3      	strh	r3, [r4, #12]
 8007afa:	e7ad      	b.n	8007a58 <__sflush_r+0x1c>
 8007afc:	690f      	ldr	r7, [r1, #16]
 8007afe:	2f00      	cmp	r7, #0
 8007b00:	d0a9      	beq.n	8007a56 <__sflush_r+0x1a>
 8007b02:	0793      	lsls	r3, r2, #30
 8007b04:	680e      	ldr	r6, [r1, #0]
 8007b06:	bf08      	it	eq
 8007b08:	694b      	ldreq	r3, [r1, #20]
 8007b0a:	600f      	str	r7, [r1, #0]
 8007b0c:	bf18      	it	ne
 8007b0e:	2300      	movne	r3, #0
 8007b10:	eba6 0807 	sub.w	r8, r6, r7
 8007b14:	608b      	str	r3, [r1, #8]
 8007b16:	f1b8 0f00 	cmp.w	r8, #0
 8007b1a:	dd9c      	ble.n	8007a56 <__sflush_r+0x1a>
 8007b1c:	6a21      	ldr	r1, [r4, #32]
 8007b1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b20:	4643      	mov	r3, r8
 8007b22:	463a      	mov	r2, r7
 8007b24:	4628      	mov	r0, r5
 8007b26:	47b0      	blx	r6
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	dc06      	bgt.n	8007b3a <__sflush_r+0xfe>
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b32:	81a3      	strh	r3, [r4, #12]
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295
 8007b38:	e78e      	b.n	8007a58 <__sflush_r+0x1c>
 8007b3a:	4407      	add	r7, r0
 8007b3c:	eba8 0800 	sub.w	r8, r8, r0
 8007b40:	e7e9      	b.n	8007b16 <__sflush_r+0xda>
 8007b42:	bf00      	nop
 8007b44:	dfbffffe 	.word	0xdfbffffe

08007b48 <_fflush_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	690b      	ldr	r3, [r1, #16]
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	460c      	mov	r4, r1
 8007b50:	b913      	cbnz	r3, 8007b58 <_fflush_r+0x10>
 8007b52:	2500      	movs	r5, #0
 8007b54:	4628      	mov	r0, r5
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	b118      	cbz	r0, 8007b62 <_fflush_r+0x1a>
 8007b5a:	6a03      	ldr	r3, [r0, #32]
 8007b5c:	b90b      	cbnz	r3, 8007b62 <_fflush_r+0x1a>
 8007b5e:	f7fe fa27 	bl	8005fb0 <__sinit>
 8007b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0f3      	beq.n	8007b52 <_fflush_r+0xa>
 8007b6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b6c:	07d0      	lsls	r0, r2, #31
 8007b6e:	d404      	bmi.n	8007b7a <_fflush_r+0x32>
 8007b70:	0599      	lsls	r1, r3, #22
 8007b72:	d402      	bmi.n	8007b7a <_fflush_r+0x32>
 8007b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b76:	f7fe fb24 	bl	80061c2 <__retarget_lock_acquire_recursive>
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	f7ff ff5d 	bl	8007a3c <__sflush_r>
 8007b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b84:	07da      	lsls	r2, r3, #31
 8007b86:	4605      	mov	r5, r0
 8007b88:	d4e4      	bmi.n	8007b54 <_fflush_r+0xc>
 8007b8a:	89a3      	ldrh	r3, [r4, #12]
 8007b8c:	059b      	lsls	r3, r3, #22
 8007b8e:	d4e1      	bmi.n	8007b54 <_fflush_r+0xc>
 8007b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b92:	f7fe fb17 	bl	80061c4 <__retarget_lock_release_recursive>
 8007b96:	e7dd      	b.n	8007b54 <_fflush_r+0xc>

08007b98 <__swbuf_r>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	460e      	mov	r6, r1
 8007b9c:	4614      	mov	r4, r2
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	b118      	cbz	r0, 8007baa <__swbuf_r+0x12>
 8007ba2:	6a03      	ldr	r3, [r0, #32]
 8007ba4:	b90b      	cbnz	r3, 8007baa <__swbuf_r+0x12>
 8007ba6:	f7fe fa03 	bl	8005fb0 <__sinit>
 8007baa:	69a3      	ldr	r3, [r4, #24]
 8007bac:	60a3      	str	r3, [r4, #8]
 8007bae:	89a3      	ldrh	r3, [r4, #12]
 8007bb0:	071a      	lsls	r2, r3, #28
 8007bb2:	d525      	bpl.n	8007c00 <__swbuf_r+0x68>
 8007bb4:	6923      	ldr	r3, [r4, #16]
 8007bb6:	b31b      	cbz	r3, 8007c00 <__swbuf_r+0x68>
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	6922      	ldr	r2, [r4, #16]
 8007bbc:	1a98      	subs	r0, r3, r2
 8007bbe:	6963      	ldr	r3, [r4, #20]
 8007bc0:	b2f6      	uxtb	r6, r6
 8007bc2:	4283      	cmp	r3, r0
 8007bc4:	4637      	mov	r7, r6
 8007bc6:	dc04      	bgt.n	8007bd2 <__swbuf_r+0x3a>
 8007bc8:	4621      	mov	r1, r4
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f7ff ffbc 	bl	8007b48 <_fflush_r>
 8007bd0:	b9e0      	cbnz	r0, 8007c0c <__swbuf_r+0x74>
 8007bd2:	68a3      	ldr	r3, [r4, #8]
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	60a3      	str	r3, [r4, #8]
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	6022      	str	r2, [r4, #0]
 8007bde:	701e      	strb	r6, [r3, #0]
 8007be0:	6962      	ldr	r2, [r4, #20]
 8007be2:	1c43      	adds	r3, r0, #1
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d004      	beq.n	8007bf2 <__swbuf_r+0x5a>
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	07db      	lsls	r3, r3, #31
 8007bec:	d506      	bpl.n	8007bfc <__swbuf_r+0x64>
 8007bee:	2e0a      	cmp	r6, #10
 8007bf0:	d104      	bne.n	8007bfc <__swbuf_r+0x64>
 8007bf2:	4621      	mov	r1, r4
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f7ff ffa7 	bl	8007b48 <_fflush_r>
 8007bfa:	b938      	cbnz	r0, 8007c0c <__swbuf_r+0x74>
 8007bfc:	4638      	mov	r0, r7
 8007bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c00:	4621      	mov	r1, r4
 8007c02:	4628      	mov	r0, r5
 8007c04:	f000 f806 	bl	8007c14 <__swsetup_r>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d0d5      	beq.n	8007bb8 <__swbuf_r+0x20>
 8007c0c:	f04f 37ff 	mov.w	r7, #4294967295
 8007c10:	e7f4      	b.n	8007bfc <__swbuf_r+0x64>
	...

08007c14 <__swsetup_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	4b2a      	ldr	r3, [pc, #168]	; (8007cc0 <__swsetup_r+0xac>)
 8007c18:	4605      	mov	r5, r0
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	b118      	cbz	r0, 8007c28 <__swsetup_r+0x14>
 8007c20:	6a03      	ldr	r3, [r0, #32]
 8007c22:	b90b      	cbnz	r3, 8007c28 <__swsetup_r+0x14>
 8007c24:	f7fe f9c4 	bl	8005fb0 <__sinit>
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c2e:	0718      	lsls	r0, r3, #28
 8007c30:	d422      	bmi.n	8007c78 <__swsetup_r+0x64>
 8007c32:	06d9      	lsls	r1, r3, #27
 8007c34:	d407      	bmi.n	8007c46 <__swsetup_r+0x32>
 8007c36:	2309      	movs	r3, #9
 8007c38:	602b      	str	r3, [r5, #0]
 8007c3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c3e:	81a3      	strh	r3, [r4, #12]
 8007c40:	f04f 30ff 	mov.w	r0, #4294967295
 8007c44:	e034      	b.n	8007cb0 <__swsetup_r+0x9c>
 8007c46:	0758      	lsls	r0, r3, #29
 8007c48:	d512      	bpl.n	8007c70 <__swsetup_r+0x5c>
 8007c4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c4c:	b141      	cbz	r1, 8007c60 <__swsetup_r+0x4c>
 8007c4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c52:	4299      	cmp	r1, r3
 8007c54:	d002      	beq.n	8007c5c <__swsetup_r+0x48>
 8007c56:	4628      	mov	r0, r5
 8007c58:	f7ff f930 	bl	8006ebc <_free_r>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	6363      	str	r3, [r4, #52]	; 0x34
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c66:	81a3      	strh	r3, [r4, #12]
 8007c68:	2300      	movs	r3, #0
 8007c6a:	6063      	str	r3, [r4, #4]
 8007c6c:	6923      	ldr	r3, [r4, #16]
 8007c6e:	6023      	str	r3, [r4, #0]
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	f043 0308 	orr.w	r3, r3, #8
 8007c76:	81a3      	strh	r3, [r4, #12]
 8007c78:	6923      	ldr	r3, [r4, #16]
 8007c7a:	b94b      	cbnz	r3, 8007c90 <__swsetup_r+0x7c>
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c86:	d003      	beq.n	8007c90 <__swsetup_r+0x7c>
 8007c88:	4621      	mov	r1, r4
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f000 f8c4 	bl	8007e18 <__smakebuf_r>
 8007c90:	89a0      	ldrh	r0, [r4, #12]
 8007c92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c96:	f010 0301 	ands.w	r3, r0, #1
 8007c9a:	d00a      	beq.n	8007cb2 <__swsetup_r+0x9e>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	60a3      	str	r3, [r4, #8]
 8007ca0:	6963      	ldr	r3, [r4, #20]
 8007ca2:	425b      	negs	r3, r3
 8007ca4:	61a3      	str	r3, [r4, #24]
 8007ca6:	6923      	ldr	r3, [r4, #16]
 8007ca8:	b943      	cbnz	r3, 8007cbc <__swsetup_r+0xa8>
 8007caa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cae:	d1c4      	bne.n	8007c3a <__swsetup_r+0x26>
 8007cb0:	bd38      	pop	{r3, r4, r5, pc}
 8007cb2:	0781      	lsls	r1, r0, #30
 8007cb4:	bf58      	it	pl
 8007cb6:	6963      	ldrpl	r3, [r4, #20]
 8007cb8:	60a3      	str	r3, [r4, #8]
 8007cba:	e7f4      	b.n	8007ca6 <__swsetup_r+0x92>
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	e7f7      	b.n	8007cb0 <__swsetup_r+0x9c>
 8007cc0:	20000064 	.word	0x20000064

08007cc4 <_sbrk_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	4d06      	ldr	r5, [pc, #24]	; (8007ce0 <_sbrk_r+0x1c>)
 8007cc8:	2300      	movs	r3, #0
 8007cca:	4604      	mov	r4, r0
 8007ccc:	4608      	mov	r0, r1
 8007cce:	602b      	str	r3, [r5, #0]
 8007cd0:	f7f9 fda2 	bl	8001818 <_sbrk>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_sbrk_r+0x1a>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_sbrk_r+0x1a>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	2000046c 	.word	0x2000046c

08007ce4 <memcpy>:
 8007ce4:	440a      	add	r2, r1
 8007ce6:	4291      	cmp	r1, r2
 8007ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cec:	d100      	bne.n	8007cf0 <memcpy+0xc>
 8007cee:	4770      	bx	lr
 8007cf0:	b510      	push	{r4, lr}
 8007cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cfa:	4291      	cmp	r1, r2
 8007cfc:	d1f9      	bne.n	8007cf2 <memcpy+0xe>
 8007cfe:	bd10      	pop	{r4, pc}

08007d00 <__assert_func>:
 8007d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d02:	4614      	mov	r4, r2
 8007d04:	461a      	mov	r2, r3
 8007d06:	4b09      	ldr	r3, [pc, #36]	; (8007d2c <__assert_func+0x2c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	68d8      	ldr	r0, [r3, #12]
 8007d0e:	b14c      	cbz	r4, 8007d24 <__assert_func+0x24>
 8007d10:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <__assert_func+0x30>)
 8007d12:	9100      	str	r1, [sp, #0]
 8007d14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d18:	4906      	ldr	r1, [pc, #24]	; (8007d34 <__assert_func+0x34>)
 8007d1a:	462b      	mov	r3, r5
 8007d1c:	f000 f844 	bl	8007da8 <fiprintf>
 8007d20:	f000 f8d8 	bl	8007ed4 <abort>
 8007d24:	4b04      	ldr	r3, [pc, #16]	; (8007d38 <__assert_func+0x38>)
 8007d26:	461c      	mov	r4, r3
 8007d28:	e7f3      	b.n	8007d12 <__assert_func+0x12>
 8007d2a:	bf00      	nop
 8007d2c:	20000064 	.word	0x20000064
 8007d30:	08008637 	.word	0x08008637
 8007d34:	08008644 	.word	0x08008644
 8007d38:	08008672 	.word	0x08008672

08007d3c <_calloc_r>:
 8007d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d3e:	fba1 2402 	umull	r2, r4, r1, r2
 8007d42:	b94c      	cbnz	r4, 8007d58 <_calloc_r+0x1c>
 8007d44:	4611      	mov	r1, r2
 8007d46:	9201      	str	r2, [sp, #4]
 8007d48:	f7ff f92c 	bl	8006fa4 <_malloc_r>
 8007d4c:	9a01      	ldr	r2, [sp, #4]
 8007d4e:	4605      	mov	r5, r0
 8007d50:	b930      	cbnz	r0, 8007d60 <_calloc_r+0x24>
 8007d52:	4628      	mov	r0, r5
 8007d54:	b003      	add	sp, #12
 8007d56:	bd30      	pop	{r4, r5, pc}
 8007d58:	220c      	movs	r2, #12
 8007d5a:	6002      	str	r2, [r0, #0]
 8007d5c:	2500      	movs	r5, #0
 8007d5e:	e7f8      	b.n	8007d52 <_calloc_r+0x16>
 8007d60:	4621      	mov	r1, r4
 8007d62:	f7fe f9b0 	bl	80060c6 <memset>
 8007d66:	e7f4      	b.n	8007d52 <_calloc_r+0x16>

08007d68 <__ascii_mbtowc>:
 8007d68:	b082      	sub	sp, #8
 8007d6a:	b901      	cbnz	r1, 8007d6e <__ascii_mbtowc+0x6>
 8007d6c:	a901      	add	r1, sp, #4
 8007d6e:	b142      	cbz	r2, 8007d82 <__ascii_mbtowc+0x1a>
 8007d70:	b14b      	cbz	r3, 8007d86 <__ascii_mbtowc+0x1e>
 8007d72:	7813      	ldrb	r3, [r2, #0]
 8007d74:	600b      	str	r3, [r1, #0]
 8007d76:	7812      	ldrb	r2, [r2, #0]
 8007d78:	1e10      	subs	r0, r2, #0
 8007d7a:	bf18      	it	ne
 8007d7c:	2001      	movne	r0, #1
 8007d7e:	b002      	add	sp, #8
 8007d80:	4770      	bx	lr
 8007d82:	4610      	mov	r0, r2
 8007d84:	e7fb      	b.n	8007d7e <__ascii_mbtowc+0x16>
 8007d86:	f06f 0001 	mvn.w	r0, #1
 8007d8a:	e7f8      	b.n	8007d7e <__ascii_mbtowc+0x16>

08007d8c <__ascii_wctomb>:
 8007d8c:	b149      	cbz	r1, 8007da2 <__ascii_wctomb+0x16>
 8007d8e:	2aff      	cmp	r2, #255	; 0xff
 8007d90:	bf85      	ittet	hi
 8007d92:	238a      	movhi	r3, #138	; 0x8a
 8007d94:	6003      	strhi	r3, [r0, #0]
 8007d96:	700a      	strbls	r2, [r1, #0]
 8007d98:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d9c:	bf98      	it	ls
 8007d9e:	2001      	movls	r0, #1
 8007da0:	4770      	bx	lr
 8007da2:	4608      	mov	r0, r1
 8007da4:	4770      	bx	lr
	...

08007da8 <fiprintf>:
 8007da8:	b40e      	push	{r1, r2, r3}
 8007daa:	b503      	push	{r0, r1, lr}
 8007dac:	4601      	mov	r1, r0
 8007dae:	ab03      	add	r3, sp, #12
 8007db0:	4805      	ldr	r0, [pc, #20]	; (8007dc8 <fiprintf+0x20>)
 8007db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007db6:	6800      	ldr	r0, [r0, #0]
 8007db8:	9301      	str	r3, [sp, #4]
 8007dba:	f7ff fd25 	bl	8007808 <_vfiprintf_r>
 8007dbe:	b002      	add	sp, #8
 8007dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dc4:	b003      	add	sp, #12
 8007dc6:	4770      	bx	lr
 8007dc8:	20000064 	.word	0x20000064

08007dcc <__swhatbuf_r>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	460c      	mov	r4, r1
 8007dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd4:	2900      	cmp	r1, #0
 8007dd6:	b096      	sub	sp, #88	; 0x58
 8007dd8:	4615      	mov	r5, r2
 8007dda:	461e      	mov	r6, r3
 8007ddc:	da0d      	bge.n	8007dfa <__swhatbuf_r+0x2e>
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007de4:	f04f 0100 	mov.w	r1, #0
 8007de8:	bf0c      	ite	eq
 8007dea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007dee:	2340      	movne	r3, #64	; 0x40
 8007df0:	2000      	movs	r0, #0
 8007df2:	6031      	str	r1, [r6, #0]
 8007df4:	602b      	str	r3, [r5, #0]
 8007df6:	b016      	add	sp, #88	; 0x58
 8007df8:	bd70      	pop	{r4, r5, r6, pc}
 8007dfa:	466a      	mov	r2, sp
 8007dfc:	f000 f848 	bl	8007e90 <_fstat_r>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	dbec      	blt.n	8007dde <__swhatbuf_r+0x12>
 8007e04:	9901      	ldr	r1, [sp, #4]
 8007e06:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007e0a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007e0e:	4259      	negs	r1, r3
 8007e10:	4159      	adcs	r1, r3
 8007e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e16:	e7eb      	b.n	8007df0 <__swhatbuf_r+0x24>

08007e18 <__smakebuf_r>:
 8007e18:	898b      	ldrh	r3, [r1, #12]
 8007e1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e1c:	079d      	lsls	r5, r3, #30
 8007e1e:	4606      	mov	r6, r0
 8007e20:	460c      	mov	r4, r1
 8007e22:	d507      	bpl.n	8007e34 <__smakebuf_r+0x1c>
 8007e24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	6123      	str	r3, [r4, #16]
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	6163      	str	r3, [r4, #20]
 8007e30:	b002      	add	sp, #8
 8007e32:	bd70      	pop	{r4, r5, r6, pc}
 8007e34:	ab01      	add	r3, sp, #4
 8007e36:	466a      	mov	r2, sp
 8007e38:	f7ff ffc8 	bl	8007dcc <__swhatbuf_r>
 8007e3c:	9900      	ldr	r1, [sp, #0]
 8007e3e:	4605      	mov	r5, r0
 8007e40:	4630      	mov	r0, r6
 8007e42:	f7ff f8af 	bl	8006fa4 <_malloc_r>
 8007e46:	b948      	cbnz	r0, 8007e5c <__smakebuf_r+0x44>
 8007e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e4c:	059a      	lsls	r2, r3, #22
 8007e4e:	d4ef      	bmi.n	8007e30 <__smakebuf_r+0x18>
 8007e50:	f023 0303 	bic.w	r3, r3, #3
 8007e54:	f043 0302 	orr.w	r3, r3, #2
 8007e58:	81a3      	strh	r3, [r4, #12]
 8007e5a:	e7e3      	b.n	8007e24 <__smakebuf_r+0xc>
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	6020      	str	r0, [r4, #0]
 8007e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e64:	81a3      	strh	r3, [r4, #12]
 8007e66:	9b00      	ldr	r3, [sp, #0]
 8007e68:	6163      	str	r3, [r4, #20]
 8007e6a:	9b01      	ldr	r3, [sp, #4]
 8007e6c:	6120      	str	r0, [r4, #16]
 8007e6e:	b15b      	cbz	r3, 8007e88 <__smakebuf_r+0x70>
 8007e70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e74:	4630      	mov	r0, r6
 8007e76:	f000 f81d 	bl	8007eb4 <_isatty_r>
 8007e7a:	b128      	cbz	r0, 8007e88 <__smakebuf_r+0x70>
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	f023 0303 	bic.w	r3, r3, #3
 8007e82:	f043 0301 	orr.w	r3, r3, #1
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	431d      	orrs	r5, r3
 8007e8c:	81a5      	strh	r5, [r4, #12]
 8007e8e:	e7cf      	b.n	8007e30 <__smakebuf_r+0x18>

08007e90 <_fstat_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4d07      	ldr	r5, [pc, #28]	; (8007eb0 <_fstat_r+0x20>)
 8007e94:	2300      	movs	r3, #0
 8007e96:	4604      	mov	r4, r0
 8007e98:	4608      	mov	r0, r1
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	602b      	str	r3, [r5, #0]
 8007e9e:	f7f9 fc92 	bl	80017c6 <_fstat>
 8007ea2:	1c43      	adds	r3, r0, #1
 8007ea4:	d102      	bne.n	8007eac <_fstat_r+0x1c>
 8007ea6:	682b      	ldr	r3, [r5, #0]
 8007ea8:	b103      	cbz	r3, 8007eac <_fstat_r+0x1c>
 8007eaa:	6023      	str	r3, [r4, #0]
 8007eac:	bd38      	pop	{r3, r4, r5, pc}
 8007eae:	bf00      	nop
 8007eb0:	2000046c 	.word	0x2000046c

08007eb4 <_isatty_r>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	4d06      	ldr	r5, [pc, #24]	; (8007ed0 <_isatty_r+0x1c>)
 8007eb8:	2300      	movs	r3, #0
 8007eba:	4604      	mov	r4, r0
 8007ebc:	4608      	mov	r0, r1
 8007ebe:	602b      	str	r3, [r5, #0]
 8007ec0:	f7f9 fc91 	bl	80017e6 <_isatty>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d102      	bne.n	8007ece <_isatty_r+0x1a>
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	b103      	cbz	r3, 8007ece <_isatty_r+0x1a>
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	bd38      	pop	{r3, r4, r5, pc}
 8007ed0:	2000046c 	.word	0x2000046c

08007ed4 <abort>:
 8007ed4:	b508      	push	{r3, lr}
 8007ed6:	2006      	movs	r0, #6
 8007ed8:	f000 f82c 	bl	8007f34 <raise>
 8007edc:	2001      	movs	r0, #1
 8007ede:	f7f9 fc23 	bl	8001728 <_exit>

08007ee2 <_raise_r>:
 8007ee2:	291f      	cmp	r1, #31
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	460d      	mov	r5, r1
 8007eea:	d904      	bls.n	8007ef6 <_raise_r+0x14>
 8007eec:	2316      	movs	r3, #22
 8007eee:	6003      	str	r3, [r0, #0]
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	bd38      	pop	{r3, r4, r5, pc}
 8007ef6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007ef8:	b112      	cbz	r2, 8007f00 <_raise_r+0x1e>
 8007efa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007efe:	b94b      	cbnz	r3, 8007f14 <_raise_r+0x32>
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 f831 	bl	8007f68 <_getpid_r>
 8007f06:	462a      	mov	r2, r5
 8007f08:	4601      	mov	r1, r0
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f10:	f000 b818 	b.w	8007f44 <_kill_r>
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d00a      	beq.n	8007f2e <_raise_r+0x4c>
 8007f18:	1c59      	adds	r1, r3, #1
 8007f1a:	d103      	bne.n	8007f24 <_raise_r+0x42>
 8007f1c:	2316      	movs	r3, #22
 8007f1e:	6003      	str	r3, [r0, #0]
 8007f20:	2001      	movs	r0, #1
 8007f22:	e7e7      	b.n	8007ef4 <_raise_r+0x12>
 8007f24:	2400      	movs	r4, #0
 8007f26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	4798      	blx	r3
 8007f2e:	2000      	movs	r0, #0
 8007f30:	e7e0      	b.n	8007ef4 <_raise_r+0x12>
	...

08007f34 <raise>:
 8007f34:	4b02      	ldr	r3, [pc, #8]	; (8007f40 <raise+0xc>)
 8007f36:	4601      	mov	r1, r0
 8007f38:	6818      	ldr	r0, [r3, #0]
 8007f3a:	f7ff bfd2 	b.w	8007ee2 <_raise_r>
 8007f3e:	bf00      	nop
 8007f40:	20000064 	.word	0x20000064

08007f44 <_kill_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4d07      	ldr	r5, [pc, #28]	; (8007f64 <_kill_r+0x20>)
 8007f48:	2300      	movs	r3, #0
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	4608      	mov	r0, r1
 8007f4e:	4611      	mov	r1, r2
 8007f50:	602b      	str	r3, [r5, #0]
 8007f52:	f7f9 fbd9 	bl	8001708 <_kill>
 8007f56:	1c43      	adds	r3, r0, #1
 8007f58:	d102      	bne.n	8007f60 <_kill_r+0x1c>
 8007f5a:	682b      	ldr	r3, [r5, #0]
 8007f5c:	b103      	cbz	r3, 8007f60 <_kill_r+0x1c>
 8007f5e:	6023      	str	r3, [r4, #0]
 8007f60:	bd38      	pop	{r3, r4, r5, pc}
 8007f62:	bf00      	nop
 8007f64:	2000046c 	.word	0x2000046c

08007f68 <_getpid_r>:
 8007f68:	f7f9 bbc6 	b.w	80016f8 <_getpid>
 8007f6c:	0000      	movs	r0, r0
	...

08007f70 <log>:
 8007f70:	b538      	push	{r3, r4, r5, lr}
 8007f72:	ed2d 8b02 	vpush	{d8}
 8007f76:	ec55 4b10 	vmov	r4, r5, d0
 8007f7a:	f000 f841 	bl	8008000 <__ieee754_log>
 8007f7e:	4622      	mov	r2, r4
 8007f80:	462b      	mov	r3, r5
 8007f82:	4620      	mov	r0, r4
 8007f84:	4629      	mov	r1, r5
 8007f86:	eeb0 8a40 	vmov.f32	s16, s0
 8007f8a:	eef0 8a60 	vmov.f32	s17, s1
 8007f8e:	f7f8 fdcd 	bl	8000b2c <__aeabi_dcmpun>
 8007f92:	b998      	cbnz	r0, 8007fbc <log+0x4c>
 8007f94:	2200      	movs	r2, #0
 8007f96:	2300      	movs	r3, #0
 8007f98:	4620      	mov	r0, r4
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	f7f8 fdbc 	bl	8000b18 <__aeabi_dcmpgt>
 8007fa0:	b960      	cbnz	r0, 8007fbc <log+0x4c>
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	4629      	mov	r1, r5
 8007faa:	f7f8 fd8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fae:	b160      	cbz	r0, 8007fca <log+0x5a>
 8007fb0:	f7fe f8dc 	bl	800616c <__errno>
 8007fb4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8007fe0 <log+0x70>
 8007fb8:	2322      	movs	r3, #34	; 0x22
 8007fba:	6003      	str	r3, [r0, #0]
 8007fbc:	eeb0 0a48 	vmov.f32	s0, s16
 8007fc0:	eef0 0a68 	vmov.f32	s1, s17
 8007fc4:	ecbd 8b02 	vpop	{d8}
 8007fc8:	bd38      	pop	{r3, r4, r5, pc}
 8007fca:	f7fe f8cf 	bl	800616c <__errno>
 8007fce:	ecbd 8b02 	vpop	{d8}
 8007fd2:	2321      	movs	r3, #33	; 0x21
 8007fd4:	6003      	str	r3, [r0, #0]
 8007fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fda:	4803      	ldr	r0, [pc, #12]	; (8007fe8 <log+0x78>)
 8007fdc:	f000 b808 	b.w	8007ff0 <nan>
 8007fe0:	00000000 	.word	0x00000000
 8007fe4:	fff00000 	.word	0xfff00000
 8007fe8:	08008672 	.word	0x08008672
 8007fec:	00000000 	.word	0x00000000

08007ff0 <nan>:
 8007ff0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007ff8 <nan+0x8>
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	00000000 	.word	0x00000000
 8007ffc:	7ff80000 	.word	0x7ff80000

08008000 <__ieee754_log>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	ec51 0b10 	vmov	r0, r1, d0
 8008008:	ed2d 8b04 	vpush	{d8-d9}
 800800c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008010:	b083      	sub	sp, #12
 8008012:	460d      	mov	r5, r1
 8008014:	da29      	bge.n	800806a <__ieee754_log+0x6a>
 8008016:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800801a:	4303      	orrs	r3, r0
 800801c:	ee10 2a10 	vmov	r2, s0
 8008020:	d10c      	bne.n	800803c <__ieee754_log+0x3c>
 8008022:	49cf      	ldr	r1, [pc, #828]	; (8008360 <__ieee754_log+0x360>)
 8008024:	2200      	movs	r2, #0
 8008026:	2300      	movs	r3, #0
 8008028:	2000      	movs	r0, #0
 800802a:	f7f8 fc0f 	bl	800084c <__aeabi_ddiv>
 800802e:	ec41 0b10 	vmov	d0, r0, r1
 8008032:	b003      	add	sp, #12
 8008034:	ecbd 8b04 	vpop	{d8-d9}
 8008038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803c:	2900      	cmp	r1, #0
 800803e:	da05      	bge.n	800804c <__ieee754_log+0x4c>
 8008040:	460b      	mov	r3, r1
 8008042:	f7f8 f921 	bl	8000288 <__aeabi_dsub>
 8008046:	2200      	movs	r2, #0
 8008048:	2300      	movs	r3, #0
 800804a:	e7ee      	b.n	800802a <__ieee754_log+0x2a>
 800804c:	4bc5      	ldr	r3, [pc, #788]	; (8008364 <__ieee754_log+0x364>)
 800804e:	2200      	movs	r2, #0
 8008050:	f7f8 fad2 	bl	80005f8 <__aeabi_dmul>
 8008054:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008058:	460d      	mov	r5, r1
 800805a:	4ac3      	ldr	r2, [pc, #780]	; (8008368 <__ieee754_log+0x368>)
 800805c:	4295      	cmp	r5, r2
 800805e:	dd06      	ble.n	800806e <__ieee754_log+0x6e>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	f7f8 f912 	bl	800028c <__adddf3>
 8008068:	e7e1      	b.n	800802e <__ieee754_log+0x2e>
 800806a:	2300      	movs	r3, #0
 800806c:	e7f5      	b.n	800805a <__ieee754_log+0x5a>
 800806e:	152c      	asrs	r4, r5, #20
 8008070:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008074:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008078:	441c      	add	r4, r3
 800807a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800807e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008086:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800808a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800808e:	ea42 0105 	orr.w	r1, r2, r5
 8008092:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008096:	2200      	movs	r2, #0
 8008098:	4bb4      	ldr	r3, [pc, #720]	; (800836c <__ieee754_log+0x36c>)
 800809a:	f7f8 f8f5 	bl	8000288 <__aeabi_dsub>
 800809e:	1cab      	adds	r3, r5, #2
 80080a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	4682      	mov	sl, r0
 80080a8:	468b      	mov	fp, r1
 80080aa:	f04f 0200 	mov.w	r2, #0
 80080ae:	dc53      	bgt.n	8008158 <__ieee754_log+0x158>
 80080b0:	2300      	movs	r3, #0
 80080b2:	f7f8 fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 80080b6:	b1d0      	cbz	r0, 80080ee <__ieee754_log+0xee>
 80080b8:	2c00      	cmp	r4, #0
 80080ba:	f000 8122 	beq.w	8008302 <__ieee754_log+0x302>
 80080be:	4620      	mov	r0, r4
 80080c0:	f7f8 fa30 	bl	8000524 <__aeabi_i2d>
 80080c4:	a390      	add	r3, pc, #576	; (adr r3, 8008308 <__ieee754_log+0x308>)
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	4606      	mov	r6, r0
 80080cc:	460f      	mov	r7, r1
 80080ce:	f7f8 fa93 	bl	80005f8 <__aeabi_dmul>
 80080d2:	a38f      	add	r3, pc, #572	; (adr r3, 8008310 <__ieee754_log+0x310>)
 80080d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d8:	4604      	mov	r4, r0
 80080da:	460d      	mov	r5, r1
 80080dc:	4630      	mov	r0, r6
 80080de:	4639      	mov	r1, r7
 80080e0:	f7f8 fa8a 	bl	80005f8 <__aeabi_dmul>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4620      	mov	r0, r4
 80080ea:	4629      	mov	r1, r5
 80080ec:	e7ba      	b.n	8008064 <__ieee754_log+0x64>
 80080ee:	a38a      	add	r3, pc, #552	; (adr r3, 8008318 <__ieee754_log+0x318>)
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	4650      	mov	r0, sl
 80080f6:	4659      	mov	r1, fp
 80080f8:	f7f8 fa7e 	bl	80005f8 <__aeabi_dmul>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	2000      	movs	r0, #0
 8008102:	499b      	ldr	r1, [pc, #620]	; (8008370 <__ieee754_log+0x370>)
 8008104:	f7f8 f8c0 	bl	8000288 <__aeabi_dsub>
 8008108:	4652      	mov	r2, sl
 800810a:	4606      	mov	r6, r0
 800810c:	460f      	mov	r7, r1
 800810e:	465b      	mov	r3, fp
 8008110:	4650      	mov	r0, sl
 8008112:	4659      	mov	r1, fp
 8008114:	f7f8 fa70 	bl	80005f8 <__aeabi_dmul>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	4630      	mov	r0, r6
 800811e:	4639      	mov	r1, r7
 8008120:	f7f8 fa6a 	bl	80005f8 <__aeabi_dmul>
 8008124:	4606      	mov	r6, r0
 8008126:	460f      	mov	r7, r1
 8008128:	b914      	cbnz	r4, 8008130 <__ieee754_log+0x130>
 800812a:	4632      	mov	r2, r6
 800812c:	463b      	mov	r3, r7
 800812e:	e0a2      	b.n	8008276 <__ieee754_log+0x276>
 8008130:	4620      	mov	r0, r4
 8008132:	f7f8 f9f7 	bl	8000524 <__aeabi_i2d>
 8008136:	a374      	add	r3, pc, #464	; (adr r3, 8008308 <__ieee754_log+0x308>)
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	4680      	mov	r8, r0
 800813e:	4689      	mov	r9, r1
 8008140:	f7f8 fa5a 	bl	80005f8 <__aeabi_dmul>
 8008144:	a372      	add	r3, pc, #456	; (adr r3, 8008310 <__ieee754_log+0x310>)
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	4604      	mov	r4, r0
 800814c:	460d      	mov	r5, r1
 800814e:	4640      	mov	r0, r8
 8008150:	4649      	mov	r1, r9
 8008152:	f7f8 fa51 	bl	80005f8 <__aeabi_dmul>
 8008156:	e0a7      	b.n	80082a8 <__ieee754_log+0x2a8>
 8008158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800815c:	f7f8 f896 	bl	800028c <__adddf3>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4650      	mov	r0, sl
 8008166:	4659      	mov	r1, fp
 8008168:	f7f8 fb70 	bl	800084c <__aeabi_ddiv>
 800816c:	ec41 0b18 	vmov	d8, r0, r1
 8008170:	4620      	mov	r0, r4
 8008172:	f7f8 f9d7 	bl	8000524 <__aeabi_i2d>
 8008176:	ec53 2b18 	vmov	r2, r3, d8
 800817a:	ec41 0b19 	vmov	d9, r0, r1
 800817e:	ec51 0b18 	vmov	r0, r1, d8
 8008182:	f7f8 fa39 	bl	80005f8 <__aeabi_dmul>
 8008186:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800818a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800818e:	9301      	str	r3, [sp, #4]
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4680      	mov	r8, r0
 8008196:	4689      	mov	r9, r1
 8008198:	f7f8 fa2e 	bl	80005f8 <__aeabi_dmul>
 800819c:	a360      	add	r3, pc, #384	; (adr r3, 8008320 <__ieee754_log+0x320>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	4606      	mov	r6, r0
 80081a4:	460f      	mov	r7, r1
 80081a6:	f7f8 fa27 	bl	80005f8 <__aeabi_dmul>
 80081aa:	a35f      	add	r3, pc, #380	; (adr r3, 8008328 <__ieee754_log+0x328>)
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f7f8 f86c 	bl	800028c <__adddf3>
 80081b4:	4632      	mov	r2, r6
 80081b6:	463b      	mov	r3, r7
 80081b8:	f7f8 fa1e 	bl	80005f8 <__aeabi_dmul>
 80081bc:	a35c      	add	r3, pc, #368	; (adr r3, 8008330 <__ieee754_log+0x330>)
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	f7f8 f863 	bl	800028c <__adddf3>
 80081c6:	4632      	mov	r2, r6
 80081c8:	463b      	mov	r3, r7
 80081ca:	f7f8 fa15 	bl	80005f8 <__aeabi_dmul>
 80081ce:	a35a      	add	r3, pc, #360	; (adr r3, 8008338 <__ieee754_log+0x338>)
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	f7f8 f85a 	bl	800028c <__adddf3>
 80081d8:	4642      	mov	r2, r8
 80081da:	464b      	mov	r3, r9
 80081dc:	f7f8 fa0c 	bl	80005f8 <__aeabi_dmul>
 80081e0:	a357      	add	r3, pc, #348	; (adr r3, 8008340 <__ieee754_log+0x340>)
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	4680      	mov	r8, r0
 80081e8:	4689      	mov	r9, r1
 80081ea:	4630      	mov	r0, r6
 80081ec:	4639      	mov	r1, r7
 80081ee:	f7f8 fa03 	bl	80005f8 <__aeabi_dmul>
 80081f2:	a355      	add	r3, pc, #340	; (adr r3, 8008348 <__ieee754_log+0x348>)
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f7f8 f848 	bl	800028c <__adddf3>
 80081fc:	4632      	mov	r2, r6
 80081fe:	463b      	mov	r3, r7
 8008200:	f7f8 f9fa 	bl	80005f8 <__aeabi_dmul>
 8008204:	a352      	add	r3, pc, #328	; (adr r3, 8008350 <__ieee754_log+0x350>)
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	f7f8 f83f 	bl	800028c <__adddf3>
 800820e:	4632      	mov	r2, r6
 8008210:	463b      	mov	r3, r7
 8008212:	f7f8 f9f1 	bl	80005f8 <__aeabi_dmul>
 8008216:	460b      	mov	r3, r1
 8008218:	4602      	mov	r2, r0
 800821a:	4649      	mov	r1, r9
 800821c:	4640      	mov	r0, r8
 800821e:	f7f8 f835 	bl	800028c <__adddf3>
 8008222:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008226:	9b01      	ldr	r3, [sp, #4]
 8008228:	3551      	adds	r5, #81	; 0x51
 800822a:	431d      	orrs	r5, r3
 800822c:	2d00      	cmp	r5, #0
 800822e:	4680      	mov	r8, r0
 8008230:	4689      	mov	r9, r1
 8008232:	dd48      	ble.n	80082c6 <__ieee754_log+0x2c6>
 8008234:	4b4e      	ldr	r3, [pc, #312]	; (8008370 <__ieee754_log+0x370>)
 8008236:	2200      	movs	r2, #0
 8008238:	4650      	mov	r0, sl
 800823a:	4659      	mov	r1, fp
 800823c:	f7f8 f9dc 	bl	80005f8 <__aeabi_dmul>
 8008240:	4652      	mov	r2, sl
 8008242:	465b      	mov	r3, fp
 8008244:	f7f8 f9d8 	bl	80005f8 <__aeabi_dmul>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4606      	mov	r6, r0
 800824e:	460f      	mov	r7, r1
 8008250:	4640      	mov	r0, r8
 8008252:	4649      	mov	r1, r9
 8008254:	f7f8 f81a 	bl	800028c <__adddf3>
 8008258:	ec53 2b18 	vmov	r2, r3, d8
 800825c:	f7f8 f9cc 	bl	80005f8 <__aeabi_dmul>
 8008260:	4680      	mov	r8, r0
 8008262:	4689      	mov	r9, r1
 8008264:	b964      	cbnz	r4, 8008280 <__ieee754_log+0x280>
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	4630      	mov	r0, r6
 800826c:	4639      	mov	r1, r7
 800826e:	f7f8 f80b 	bl	8000288 <__aeabi_dsub>
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	4650      	mov	r0, sl
 8008278:	4659      	mov	r1, fp
 800827a:	f7f8 f805 	bl	8000288 <__aeabi_dsub>
 800827e:	e6d6      	b.n	800802e <__ieee754_log+0x2e>
 8008280:	a321      	add	r3, pc, #132	; (adr r3, 8008308 <__ieee754_log+0x308>)
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	ec51 0b19 	vmov	r0, r1, d9
 800828a:	f7f8 f9b5 	bl	80005f8 <__aeabi_dmul>
 800828e:	a320      	add	r3, pc, #128	; (adr r3, 8008310 <__ieee754_log+0x310>)
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	4604      	mov	r4, r0
 8008296:	460d      	mov	r5, r1
 8008298:	ec51 0b19 	vmov	r0, r1, d9
 800829c:	f7f8 f9ac 	bl	80005f8 <__aeabi_dmul>
 80082a0:	4642      	mov	r2, r8
 80082a2:	464b      	mov	r3, r9
 80082a4:	f7f7 fff2 	bl	800028c <__adddf3>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	4630      	mov	r0, r6
 80082ae:	4639      	mov	r1, r7
 80082b0:	f7f7 ffea 	bl	8000288 <__aeabi_dsub>
 80082b4:	4652      	mov	r2, sl
 80082b6:	465b      	mov	r3, fp
 80082b8:	f7f7 ffe6 	bl	8000288 <__aeabi_dsub>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4620      	mov	r0, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	e7d9      	b.n	800827a <__ieee754_log+0x27a>
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	4650      	mov	r0, sl
 80082cc:	4659      	mov	r1, fp
 80082ce:	f7f7 ffdb 	bl	8000288 <__aeabi_dsub>
 80082d2:	ec53 2b18 	vmov	r2, r3, d8
 80082d6:	f7f8 f98f 	bl	80005f8 <__aeabi_dmul>
 80082da:	4606      	mov	r6, r0
 80082dc:	460f      	mov	r7, r1
 80082de:	2c00      	cmp	r4, #0
 80082e0:	f43f af23 	beq.w	800812a <__ieee754_log+0x12a>
 80082e4:	a308      	add	r3, pc, #32	; (adr r3, 8008308 <__ieee754_log+0x308>)
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	ec51 0b19 	vmov	r0, r1, d9
 80082ee:	f7f8 f983 	bl	80005f8 <__aeabi_dmul>
 80082f2:	a307      	add	r3, pc, #28	; (adr r3, 8008310 <__ieee754_log+0x310>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	4604      	mov	r4, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	ec51 0b19 	vmov	r0, r1, d9
 8008300:	e727      	b.n	8008152 <__ieee754_log+0x152>
 8008302:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8008358 <__ieee754_log+0x358>
 8008306:	e694      	b.n	8008032 <__ieee754_log+0x32>
 8008308:	fee00000 	.word	0xfee00000
 800830c:	3fe62e42 	.word	0x3fe62e42
 8008310:	35793c76 	.word	0x35793c76
 8008314:	3dea39ef 	.word	0x3dea39ef
 8008318:	55555555 	.word	0x55555555
 800831c:	3fd55555 	.word	0x3fd55555
 8008320:	df3e5244 	.word	0xdf3e5244
 8008324:	3fc2f112 	.word	0x3fc2f112
 8008328:	96cb03de 	.word	0x96cb03de
 800832c:	3fc74664 	.word	0x3fc74664
 8008330:	94229359 	.word	0x94229359
 8008334:	3fd24924 	.word	0x3fd24924
 8008338:	55555593 	.word	0x55555593
 800833c:	3fe55555 	.word	0x3fe55555
 8008340:	d078c69f 	.word	0xd078c69f
 8008344:	3fc39a09 	.word	0x3fc39a09
 8008348:	1d8e78af 	.word	0x1d8e78af
 800834c:	3fcc71c5 	.word	0x3fcc71c5
 8008350:	9997fa04 	.word	0x9997fa04
 8008354:	3fd99999 	.word	0x3fd99999
	...
 8008360:	c3500000 	.word	0xc3500000
 8008364:	43500000 	.word	0x43500000
 8008368:	7fefffff 	.word	0x7fefffff
 800836c:	3ff00000 	.word	0x3ff00000
 8008370:	3fe00000 	.word	0x3fe00000

08008374 <_init>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	bf00      	nop
 8008378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837a:	bc08      	pop	{r3}
 800837c:	469e      	mov	lr, r3
 800837e:	4770      	bx	lr

08008380 <_fini>:
 8008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008382:	bf00      	nop
 8008384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008386:	bc08      	pop	{r3}
 8008388:	469e      	mov	lr, r3
 800838a:	4770      	bx	lr
